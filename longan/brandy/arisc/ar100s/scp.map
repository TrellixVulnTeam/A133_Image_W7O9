Archive member included because of file (symbol)

library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                              driver/obj-in.o (ccu_get_sclk_freq)

Allocating common symbols
Common symbol       size              file

little_endian_used  0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
wakeup_source       0x4               service/obj-in.o
axp_power_max       0x4               driver/obj-in.o
pintc_regs          0x4               driver/obj-in.o
ccu_pll_periph1_reg_addr
                    0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
before_crc          0x4               service/obj-in.o
after_crc           0x4               service/obj-in.o
pwatchdog_regs      0x4               driver/obj-in.o
debugger_buffer     0x80              system/obj-in.o
ccu_pll_ddr0_reg_addr
                    0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
isr_table           0x128             driver/obj-in.o
apbs2_notifier_head
                    0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
delay_timer         0x4               driver/obj-in.o
ccu_pll_periph0_reg_addr
                    0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
ccu_pll_c0_cpux_reg_addr
                    0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
ptimerc_regs        0x4               driver/obj-in.o
ccu_reg_addr        0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

Memory Configuration

Name             Origin             Length             Attributes
vectors          0x00000000         0x00004000
paras            0x00004000         0x000003f0
ram              0x000043f0         0x0000fc10
dram             0x48100000         0x00008000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD arch/obj-in.o
LOAD driver/obj-in.o
LOAD library/obj-in.o
LOAD service/obj-in.o
LOAD system/obj-in.o

.vectors        0x00000000      0xe08
 *(.vectors)
 .vectors       0x00000000      0xe08 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

dts_paras       0x00004000       0x88
                0x00004000                paras_start_addr = .
 *(dts_paras)
 dts_paras      0x00004000       0x88 system/obj-in.o
                0x00004000                arisc_para
                0x00004088                paras_end_addr = .

.text           0x000043f0     0xdeb0
 *arch*(.text)
 *driver*(.text)
 .text          0x000043f0     0x395c driver/obj-in.o
                0x000043f0                intc_init
                0x00004448                intc_exit
                0x00004470                intc_enable_interrupt
                0x00004520                intc_disable_interrupt
                0x000045b8                intc_interrupt_is_enabled
                0x0000462c                intc_get_current_interrupt
                0x00004654                intc_set_mask
                0x00004718                intc_set_group_config
                0x0000481c                isr_default
                0x0000484c                interrupt_init
                0x000048a0                interrupt_exit
                0x000048bc                interrupt_enable
                0x000048d4                interrupt_disable
                0x000048ec                interrupt_set_nmi_trigger
                0x00004914                interrupt_set_mask
                0x0000492c                interrupt_set_group_config
                0x00004944                install_isr
                0x00004974                uninstall_isr
                0x000049dc                interrupt_entry
                0x00004a1c                interrupt_query_pending
                0x00004a9c                interrupt_clear_pending
                0x00004b00                interrupt_get_current_intno
                0x00004b18                interrupt_get_enabled
                0x00004b30                pin_init
                0x00004b38                pin_exit
                0x00004b40                pin_set_status
                0x00004b48                pin_set_multi_sel
                0x00004bc0                pin_set_pull
                0x00004c38                pin_set_drive
                0x00004cb0                pin_write_data
                0x00004d1c                pin_read_data
                0x00004d5c                is_wanted_gpio_int
                0x00004d90                pin_set_int_trigger_mode
                0x00004e1c                timer_hosc_onoff_cb
                0x00004f6c                timer_isr
                0x00005028                timer_init
                0x0000512c                timer_exit
                0x00005184                timer_request
                0x00005268                timer_release
                0x00005290                timer_start
                0x00005364                timer_stop
                0x0000540c                time_cdelay
                0x00005424                time_mdelay
                0x000054dc                cnt64_udelay
                0x0000555c                time_udelay
                0x000055f4                uart_init
                0x000056f8                uart_exit
                0x00005770                uart_putc
                0x000057d4                uart_get
                0x0000583c                uart_puts
                0x000058c0                uart_set_baudrate
                0x000059f4                uart_clkchangecb
                0x00005a98                uart_get_baudrate
                0x00005c84                twi_clkchangecb
                0x00005cf0                twi_init
                0x00005e08                twi_exit
                0x00005e10                twi_byte_rw
                0x000064ec                twi_read
                0x0000657c                twi_write
                0x0000660c                is_twi_lock
                0x00006624                twi_get_status
                0x00006668                twi_standby_init
                0x00006770                twi_standby_exit
                0x00006854                hwmsgbox_init
                0x00006914                hwmsgbox_exit
                0x00006944                hwmsgbox_wait_queue_not_full
                0x000069a4                hwmsgbox_wait_queue_not_empty
                0x00006a0c                hwmsgbox_send_message
                0x00006c88                hwmsgbox_feedback_message
                0x00006da8                hwmsgbox_query_message
                0x00006f74                hwmsgbox_super_standby_init
                0x00006fa0                hwmsgbox_super_standby_exit
                0x000070bc                pmu_shutdown
                0x000072fc                pmu_charging_reset
                0x000074a8                pmu_set_voltage
                0x000074d0                pmu_get_voltage
                0x000074f8                pmu_set_voltage_state
                0x00007724                pmu_get_voltage_state
                0x0000774c                pmu_query_event
                0x00007754                pmu_clear_pendings
                0x0000775c                pmu_chip_init
                0x00007764                pmu_reg_write
                0x00007780                pmu_reg_read
                0x0000779c                pmu_reg_write_para
                0x000077cc                pmu_reg_read_para
                0x000077fc                watchdog_reset
                0x00007864                pmu_reset
                0x00007a00                nmi_int_handler
                0x00007a40                pmu_init
                0x00007bb4                pmu_exit
                0x00007bbc                is_pmu_exist
                0x00007bcc                pmu_standby_init
                0x00007bfc                pmu_standby_exit
                0x00007c2c                watchdog_init
                0x00007ca8                watchdog_exit
                0x00007cd0                watchdog_enable
                0x00007d10                watchdog_disable
 *library*(.text)
 .text          0x00007d4c     0x25c0 library/obj-in.o
                0x00007d4c                itoa
                0x00007e7c                utoa
                0x00007f6c                hexdump
                0x00008014                hstr2int
                0x000080bc                dstr2int
                0x00008104                strlen
                0x00008124                strnlen
                0x00008154                strcpy
                0x0000817c                strncat
                0x000081f4                strcmp
                0x0000823c                strchr
                0x00008270                memcpy
                0x0000832c                memmove
                0x000083b8                memcmp
                0x000083f4                memchr
                0x00008434                memset
                0x0000845c                sprintf
                0x00008578                fdt_check_header
                0x0000868c                fdt_offset_ptr
                0x00008758                fdt_next_tag
                0x000088d4                _fdt_check_node_offset
                0x0000892c                _fdt_check_prop_offset
                0x00008984                fdt_next_node
                0x00008a94                fdt_first_subnode
                0x00008adc                fdt_next_subnode
                0x00008b4c                _fdt_find_string
                0x00008bd4                fdt_move
                0x00008e00                fdt_string
                0x00008e38                fdt_get_mem_rsv
                0x00008ee0                fdt_num_mem_rsv
                0x00008f40                fdt_subnode_offset_namelen
                0x00009070                fdt_subnode_offset
                0x000090c0                fdt_get_name
                0x00009168                fdt_first_property_offset
                0x000091ac                fdt_next_property_offset
                0x000091f0                fdt_get_property_by_offset
                0x00009294                fdt_get_property_namelen
                0x000093c0                fdt_get_property
                0x00009420                fdt_getprop_namelen
                0x0000944c                fdt_getprop_by_offset
                0x000094d8                fdt_getprop
                0x00009538                fdt_getprop_u32
                0x000095fc                fdt_get_phandle
                0x000096b0                fdt_get_alias_namelen
                0x0000972c                fdt_path_offset
                0x0000986c                fdt_get_alias
                0x000098ac                fdt_get_path
                0x00009a78                fdt_supernode_atdepth_offset
                0x00009b80                fdt_node_depth
                0x00009bc4                fdt_parent_offset
                0x00009c20                fdt_node_offset_by_prop_value
                0x00009cfc                fdt_node_offset_by_phandle
                0x00009d98                fdt_stringlist_contains
                0x00009e48                fdt_stringlist_count
                0x00009ed4                fdt_stringlist_search
                0x00009fb0                fdt_stringlist_get
                0x0000a0a0                fdt_node_check_compatible
                0x0000a100                fdt_node_offset_by_compatible
                0x0000a198                fdt_strerror
                0x0000a208                fdt_address_cells
                0x0000a28c                fdt_size_cells
 *system*(.text)
 .text          0x0000a30c      0xc04 system/obj-in.o
                0x0000a30c                notifier_init
                0x0000a350                notifier_exit
                0x0000a358                notifier_insert
                0x0000a424                notifier_delete
                0x0000a4bc                notifier_notify
                0x0000a518                message_valid
                0x0000a528                message_manager_init
                0x0000a530                message_manager_exit
                0x0000a538                message_coming_notify
                0x0000a75c                debugger_init
                0x0000a778                debugger_exit
                0x0000a780                debugger_putc
                0x0000a7a4                debugger_get
                0x0000a7bc                debugger_puts
                0x0000a7d8                debugger_printf
                0x0000ab24                set_debug_level
                0x0000ab78                daemon_register_service
                0x0000ab98                startup_entry
                0x0000aeec                arisc_para_init
                0x0000af08                set_paras
 *service*(.text)
 .text          0x0000af10     0x15c4 service/obj-in.o
                0x0000af10                standby_init
                0x0000af50                standby_exit
                0x0000af58                long_jump
                0x0000af74                standby_set_dram_crc_paras
                0x0000afa0                standby_dram_crc_enable
                0x0000afb0                standby_dram_crc
                0x0000b0f0                default_wakeup_handler
                0x0000b17c                wakeup_timer_init
                0x0000b1c8                wakeup_timer_start
                0x0000b204                wakeup_timer_stop
                0x0000b220                set_wakeup_src
                0x0000b35c                clear_wakeup_src
                0x0000b438                is_suspend_lock
                0x0000b448                cpu_op
                0x0000c398                sys_op
 .text          0x0000c4d4     0x5dcc library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x0000c4d4                icache_coherent
                0x0000c590                cpu_init
                0x0000c5c4                cpu_disable_int
                0x0000c5ec                cpu_enable_int
                0x0000c5fc                exit
                0x0000c61c                cpu_enter_doze
                0x0000ca28                __udivsi3
                0x0000cb24                __divsi3
                0x0000cb88                __umodsi3
                0x0000cba8                __modsi3
                0x0000cc04                cpu_exception_handler_entry_c
                0x0000cd78                start_softtimer
                0x0000cd8c                stop_softtimer
                0x0000cdac                add_softtimer
                0x0000ce10                current_time_tick
                0x0000ce24                msec_to_ticks
                0x0000ce58                time_ticks_init
                0x0000d01c                cpucfg_init
                0x0000d058                cpucfg_exit
                0x0000d080                cpucfg_set_little_endian_address
                0x0000d138                cpucfg_remove_little_endian_address
                0x0000d238                cpucfg_set_cpu_reset_state
                0x0000d288                cpucfg_counter_clear
                0x0000d2b8                cpucfg_counter_read
                0x0000d30c                cpucfg_counter_ctrl
                0x0000d324                cpucfg_set_cpux_jump_addr
                0x0000d33c                cpucfg_acinactm_process
                0x0000d388                cpucfg_wait_l2_enter_wfi
                0x0000d3ac                cpucfg_l1l2_reset_by_hardware
                0x0000d3f8                cpucfg_cluster0_process
                0x0000d46c                cpucfg_cpu_suspend
                0x0000d534                cpucfg_cpu_suspend_late
                0x0000d5a8                cpucfg_cpu_resume
                0x0000d5f0                set_secondary_entry
                0x0000d630                sun50i_set_AA32nAA64
                0x0000d684                cpucfg_cpu_resume_early
                0x0000d760                cpu_power_up
                0x0000d880                cpu_power_down
                0x0000e744                mctl_phy_dx0_bit_delay_compensation_standby
                0x00011340                dram_power_save_process
                0x000114a4                dram_power_up_process
                0x000116e8                iosc_freq_init
                0x00011860                ccu_init
                0x0001191c                ccu_exit
                0x00011924                save_state_flag
                0x00011938                read_state_flag
                0x0001194c                ccu_set_mclk_onoff
                0x00011a94                ccu_set_poweroff_gating_state
                0x00011c58                ccu_24mhosc_reg_cb
                0x00011c78                ccu_24mhosc_disable
                0x00011d2c                ccu_24mhosc_enable
                0x00011e18                is_hosc_lock
                0x00011e28                ccu_set_mclk_reset
                0x000120fc                ccu_reset_module
                0x00012134                ccu_get_sclk_freq
                0x000121f4                ccu_set_sclk_onoff
                0x000122a0                rodata_vma = ALIGN (0x4)

.rodata         0x000122a0      0xdd8
 *arch*(.rodata.*)
 *driver*(.rodata.*)
 .rodata.str1.1
                0x000122a0      0x284 driver/obj-in.o
 *library*(.rodata.*)
 .rodata.str1.1
                0x00012524      0x143 library/obj-in.o
                                0x14d (size before relaxing)
 *system*(.rodata.*)
 .rodata.str1.1
                0x00012667      0x25c system/obj-in.o
 *service*(.rodata.*)
 .rodata.str1.1
                0x000128c3      0x1f2 service/obj-in.o
                                0x1fc (size before relaxing)
 *(.rodata.*)
 .rodata.str1.1
                0x00012ab5      0x3ca library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
 *fill*         0x00012e7f        0x1 00
 .rodata        0x00012e80        0xc driver/obj-in.o
 .rodata        0x00012e8c       0x6c library/obj-in.o
 .rodata        0x00012ef8       0x5c service/obj-in.o
 .rodata        0x00012f54      0x124 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x00013078                shbss_vma = ALIGN (0x4)

.shbss
 *(.shbss)
                0x00013078                data_vma = ALIGN (0x4)

.data           0x00013078      0x340
 *(.data)
 .data          0x00013078      0x2e0 driver/obj-in.o
                0x00013078                timer_lock
                0x000130b4                uart_lock
                0x000130b8                aw1660_onoff_reg_bitmap
                0x00013180                aw1736_onoff_reg_bitmap
                0x00013240                axp2202_onoff_reg_bitmap
                0x000132d0                aw1657_onoff_reg_bitmap
 .data          0x00013358        0x0 library/obj-in.o
 .data          0x00013358        0xc service/obj-in.o
                0x00013358                dram_crc_src
                0x0001335c                dram_crc_len
 .data          0x00013364        0x8 system/obj-in.o
                0x00013364                debug_level
                0x00013368                print_timeflg
 .data          0x0001336c       0x4c library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x0001336c                exception_strings
                0x000133ac                soc_version_a
                0x000133b0                iosc_freq
                0x000133b4                losc_freq

.bss            0x000133b8      0x3b4
                0x000133b8                bss_start_addr = ALIGN (0x8)
 *(.bss)
 .bss           0x000133b8       0x18 driver/obj-in.o
                0x000133b8                uart_pin_not_used
                0x000133c0                twi_lock
 .bss           0x000133d0        0x0 library/obj-in.o
 .bss           0x000133d0       0xa8 service/obj-in.o
                0x000133d0                dram_crc_enable
 .bss           0x00013478       0xe4 system/obj-in.o
 .bss           0x0001355c       0x2c library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x0001357c                hosc_notifier_list
 *(COMMON)
 COMMON         0x00013588      0x13c driver/obj-in.o
                0x00013588                axp_power_max
                0x0001358c                pintc_regs
                0x00013590                pwatchdog_regs
                0x00013594                isr_table
                0x000136bc                delay_timer
                0x000136c0                ptimerc_regs
 COMMON         0x000136c4        0xc service/obj-in.o
                0x000136c4                wakeup_source
                0x000136c8                before_crc
                0x000136cc                after_crc
 COMMON         0x000136d0       0x80 system/obj-in.o
                0x000136d0                debugger_buffer
 COMMON         0x00013750       0x1c library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x00013750                little_endian_used
                0x00013754                ccu_pll_periph1_reg_addr
                0x00013758                ccu_pll_ddr0_reg_addr
                0x0001375c                apbs2_notifier_head
                0x00013760                ccu_pll_periph0_reg_addr
                0x00013764                ccu_pll_c0_cpux_reg_addr
                0x00013768                ccu_reg_addr
                0x00013770                bss_end_addr = ALIGN (0x8)

.stack          0x0001376c      0x400
                0x00013770                stack_limit_addr = ALIGN (0x8)
 *(.stack)
 .stack         0x0001376c      0x400 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x00013b70                stack_base_addr = ALIGN (0x8)

.text5          0x48100000        0x4 load address 0x00014000
                0x48100000        0x4 LONG 0x0
LOAD library/liboem/sun50iw10p1/libar100s.a
OUTPUT(scp.elf elf32-or32)

.comment        0x00000000       0x51
 .comment       0x00000000       0x51 driver/obj-in.o
                                0x386 (size before relaxing)
 .comment       0x00000000      0x1ec library/obj-in.o
 .comment       0x00000000      0x148 service/obj-in.o
 .comment       0x00000000      0x19a system/obj-in.o
 .comment       0x00000000      0x334 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_aranges  0x00000000      0x480
 .debug_aranges
                0x00000000      0x160 driver/obj-in.o
 .debug_aranges
                0x00000160       0xc0 library/obj-in.o
 .debug_aranges
                0x00000220       0x80 service/obj-in.o
 .debug_aranges
                0x000002a0       0xa0 system/obj-in.o
 .debug_aranges
                0x00000340      0x140 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_pubnames
                0x00000000     0x191a
 .debug_pubnames
                0x00000000      0x976 driver/obj-in.o
 .debug_pubnames
                0x00000976      0x52a library/obj-in.o
 .debug_pubnames
                0x00000ea0      0x1dd service/obj-in.o
 .debug_pubnames
                0x0000107d      0x22e system/obj-in.o
 .debug_pubnames
                0x000012ab      0x66f library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_info     0x00000000     0xf95e
 .debug_info    0x00000000     0x4929 driver/obj-in.o
 .debug_info    0x00004929     0x2227 library/obj-in.o
 .debug_info    0x00006b50     0x1748 service/obj-in.o
 .debug_info    0x00008298     0x10f6 system/obj-in.o
 .debug_info    0x0000938e     0x65d0 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_abbrev   0x00000000     0x363a
 .debug_abbrev  0x00000000     0x112a driver/obj-in.o
 .debug_abbrev  0x0000112a      0x799 library/obj-in.o
 .debug_abbrev  0x000018c3      0x661 service/obj-in.o
 .debug_abbrev  0x00001f24      0x792 system/obj-in.o
 .debug_abbrev  0x000026b6      0xf84 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_line     0x00000000     0xe5d3
 .debug_line    0x00000000     0x3b9e driver/obj-in.o
 .debug_line    0x00003b9e     0x1e35 library/obj-in.o
 .debug_line    0x000059d3     0x1854 service/obj-in.o
 .debug_line    0x00007227      0xe34 system/obj-in.o
 .debug_line    0x0000805b     0x6578 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_frame    0x00000000     0x1c08
 .debug_frame   0x00000000      0xa5c driver/obj-in.o
 .debug_frame   0x00000a5c      0x704 library/obj-in.o
 .debug_frame   0x00001160      0x208 service/obj-in.o
 .debug_frame   0x00001368      0x240 system/obj-in.o
 .debug_frame   0x000015a8      0x660 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_str      0x00000000     0x4874
 .debug_str     0x00000000     0x1dc0 driver/obj-in.o
                               0x42b6 (size before relaxing)
 .debug_str     0x00001dc0      0x6c7 library/obj-in.o
                                0xe84 (size before relaxing)
 .debug_str     0x00002487      0x7bb service/obj-in.o
                                0xfca (size before relaxing)
 .debug_str     0x00002c42      0x2ea system/obj-in.o
                                0xc67 (size before relaxing)
 .debug_str     0x00002f2c     0x1948 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                               0x4b38 (size before relaxing)

.debug_loc      0x00000000     0xd0e6
 .debug_loc     0x00000000     0x2d08 driver/obj-in.o
 .debug_loc     0x00002d08     0x27f6 library/obj-in.o
 .debug_loc     0x000054fe      0xbec service/obj-in.o
 .debug_loc     0x000060ea      0x92f system/obj-in.o
 .debug_loc     0x00006a19     0x66cd library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_pubtypes
                0x00000000     0x1bd7
 .debug_pubtypes
                0x00000000      0x524 driver/obj-in.o
 .debug_pubtypes
                0x00000524      0x19e library/obj-in.o
 .debug_pubtypes
                0x000006c2      0x18e service/obj-in.o
 .debug_pubtypes
                0x00000850      0x16f system/obj-in.o
 .debug_pubtypes
                0x000009bf     0x1218 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_ranges   0x00000000      0xbe8
 .debug_ranges  0x00000000      0x2c8 driver/obj-in.o
 .debug_ranges  0x000002c8       0x20 library/obj-in.o
 .debug_ranges  0x000002e8      0x330 service/obj-in.o
 .debug_ranges  0x00000618      0x130 system/obj-in.o
 .debug_ranges  0x00000748      0x4a0 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
00004000 D arisc_para
00004000 D paras_start_addr
00004088 D paras_end_addr
000043f0 T intc_init
00004448 T intc_exit
00004470 T intc_enable_interrupt
00004520 T intc_disable_interrupt
000045b8 T intc_interrupt_is_enabled
0000462c T intc_get_current_interrupt
00004654 T intc_set_mask
00004718 T intc_set_group_config
0000481c T isr_default
0000484c T interrupt_init
000048a0 T interrupt_exit
000048bc T interrupt_enable
000048d4 T interrupt_disable
000048ec T interrupt_set_nmi_trigger
00004914 T interrupt_set_mask
0000492c T interrupt_set_group_config
00004944 T install_isr
00004974 T uninstall_isr
000049dc T interrupt_entry
00004a1c T interrupt_query_pending
00004a9c T interrupt_clear_pending
00004b00 T interrupt_get_current_intno
00004b18 T interrupt_get_enabled
00004b30 T pin_init
00004b38 T pin_exit
00004b40 T pin_set_status
00004b48 T pin_set_multi_sel
00004bc0 T pin_set_pull
00004c38 T pin_set_drive
00004cb0 T pin_write_data
00004d1c T pin_read_data
00004d5c T is_wanted_gpio_int
00004d90 T pin_set_int_trigger_mode
00004e1c T timer_hosc_onoff_cb
00004f6c T timer_isr
00005028 T timer_init
0000512c T timer_exit
00005184 T timer_request
00005268 T timer_release
00005290 T timer_start
00005364 T timer_stop
0000540c T time_cdelay
0000540c t delay_loop
00005424 T time_mdelay
000054dc T cnt64_udelay
0000555c T time_udelay
000055f4 T uart_init
000056f8 T uart_exit
00005770 T uart_putc
000057d4 T uart_get
0000583c T uart_puts
000058c0 T uart_set_baudrate
000059f4 T uart_clkchangecb
00005a98 T uart_get_baudrate
00005aac t twi_clear_irq_flag
00005ae0 t twic_reset
00005b08 t twi_start
00005b38 t twic_send_dummy_clock
00005bc0 t twic_set_sclk.clone.0
00005c84 T twi_clkchangecb
00005cf0 T twi_init
00005e08 T twi_exit
00005e10 T twi_byte_rw
000064ec T twi_read
0000657c T twi_write
0000660c T is_twi_lock
00006624 T twi_get_status
00006668 T twi_standby_init
00006770 T twi_standby_exit
00006778 t hwmsgbox_set_receiver
000067e4 t hwmsgbox_set_transmitter
00006854 T hwmsgbox_init
00006914 T hwmsgbox_exit
00006944 T hwmsgbox_wait_queue_not_full
000069a4 T hwmsgbox_wait_queue_not_empty
00006a0c T hwmsgbox_send_message
00006c88 T hwmsgbox_feedback_message
00006da8 T hwmsgbox_query_message
00006f74 T hwmsgbox_super_standby_init
00006fa0 T hwmsgbox_super_standby_exit
00006fd4 t aw1660_pmu_reset
00007048 t axp2202_pmu_reset
000070bc T pmu_shutdown
000072fc T pmu_charging_reset
000074a8 T pmu_set_voltage
000074d0 T pmu_get_voltage
000074f8 T pmu_set_voltage_state
00007724 T pmu_get_voltage_state
0000774c T pmu_query_event
00007754 T pmu_clear_pendings
0000775c T pmu_chip_init
00007764 T pmu_reg_write
00007780 T pmu_reg_read
0000779c T pmu_reg_write_para
000077cc T pmu_reg_read_para
000077fc T watchdog_reset
00007864 T pmu_reset
00007a00 T nmi_int_handler
00007a40 T pmu_init
00007bb4 T pmu_exit
00007bbc T is_pmu_exist
00007bcc T pmu_standby_init
00007bfc T pmu_standby_exit
00007c2c T watchdog_init
00007ca8 T watchdog_exit
00007cd0 T watchdog_enable
00007d10 T watchdog_disable
00007d4c T itoa
00007e7c T utoa
00007f6c T hexdump
00008014 T hstr2int
000080bc T dstr2int
00008104 T strlen
00008124 T strnlen
00008154 T strcpy
0000817c T strncat
000081f4 T strcmp
0000823c T strchr
00008270 T memcpy
0000832c T memmove
000083b8 T memcmp
000083f4 T memchr
00008434 T memset
0000845c T sprintf
00008578 T fdt_check_header
0000868c T fdt_offset_ptr
00008758 T fdt_next_tag
000088d4 T _fdt_check_node_offset
0000892c T _fdt_check_prop_offset
00008984 T fdt_next_node
00008a94 T fdt_first_subnode
00008adc T fdt_next_subnode
00008b4c T _fdt_find_string
00008bd4 T fdt_move
00008ca0 t fdt64_to_cpu
00008d04 t _fdt_offset_ptr
00008d3c t _fdt_mem_rsv
00008d78 t _nextprop
00008e00 T fdt_string
00008e38 T fdt_get_mem_rsv
00008ee0 T fdt_num_mem_rsv
00008f40 T fdt_subnode_offset_namelen
00009070 T fdt_subnode_offset
000090c0 T fdt_get_name
00009168 T fdt_first_property_offset
000091ac T fdt_next_property_offset
000091f0 T fdt_get_property_by_offset
00009294 T fdt_get_property_namelen
000093c0 T fdt_get_property
00009420 T fdt_getprop_namelen
0000944c T fdt_getprop_by_offset
000094d8 T fdt_getprop
00009538 T fdt_getprop_u32
000095fc T fdt_get_phandle
000096b0 T fdt_get_alias_namelen
0000972c T fdt_path_offset
0000986c T fdt_get_alias
000098ac T fdt_get_path
00009a78 T fdt_supernode_atdepth_offset
00009b80 T fdt_node_depth
00009bc4 T fdt_parent_offset
00009c20 T fdt_node_offset_by_prop_value
00009cfc T fdt_node_offset_by_phandle
00009d98 T fdt_stringlist_contains
00009e48 T fdt_stringlist_count
00009ed4 T fdt_stringlist_search
00009fb0 T fdt_stringlist_get
0000a0a0 T fdt_node_check_compatible
0000a100 T fdt_node_offset_by_compatible
0000a198 T fdt_strerror
0000a208 T fdt_address_cells
0000a28c T fdt_size_cells
0000a30c T notifier_init
0000a350 T notifier_exit
0000a358 T notifier_insert
0000a424 T notifier_delete
0000a4bc T notifier_notify
0000a518 T message_valid
0000a528 T message_manager_init
0000a530 T message_manager_exit
0000a538 T message_coming_notify
0000a6dc t print_align
0000a75c T debugger_init
0000a778 T debugger_exit
0000a780 T debugger_putc
0000a7a4 T debugger_get
0000a7bc T debugger_puts
0000a7d8 T debugger_printf
0000ab24 T set_debug_level
0000ab78 T daemon_register_service
0000ab98 T startup_entry
0000aeec T arisc_para_init
0000af08 T set_paras
0000af10 T standby_init
0000af50 T standby_exit
0000af58 T long_jump
0000af74 T standby_set_dram_crc_paras
0000afa0 T standby_dram_crc_enable
0000afb0 T standby_dram_crc
0000aff4 t CPUX_IRQ_MAPTO_CPUS
0000b054 t CPUX_IRQ_MAPTO_CPUS_GRP
0000b06c t wakeup_timer_handler
0000b088 t group_irq_exit
0000b0bc t group_irq_init
0000b0f0 T default_wakeup_handler
0000b17c T wakeup_timer_init
0000b1c8 T wakeup_timer_start
0000b204 T wakeup_timer_stop
0000b220 T set_wakeup_src
0000b35c T clear_wakeup_src
0000b438 T is_suspend_lock
0000b448 T cpu_op
0000c398 T sys_op
0000c4d4 T icache_coherent
0000c4f8 t invalidate_block
0000c524 t cpu_stack_monitor
0000c590 T cpu_init
0000c5c4 T cpu_disable_int
0000c5ec T cpu_enable_int
0000c5fc T exit
0000c61c T cpu_enter_doze
0000c630 t reset_handler
0000c6ec t invalid_block
0000c75c t bus_error_exception_handler
0000c780 t data_page_fault_exception_handler
0000c7a4 t insn_page_fault_exception_handler
0000c7c8 t timer_exception_handler
0000c7ec t aligment_exception_handler
0000c810 t illegal_exception_handler
0000c834 t irq_exception_handler
0000c858 t dtlb_miss_exception_handler
0000c87c t itlb_miss_exception_handler
0000c8a0 t range_exception_handler
0000c8c4 t syscall_exception_handler
0000c8e8 t fpu_exception_handler
0000c90c t trap_exception_handler
0000c930 t cpu_exception_handler_entry
0000ca28 T __udivsi3
0000cb24 T __divsi3
0000cb88 T __umodsi3
0000cba8 T __modsi3
0000cc04 T cpu_exception_handler_entry_c
0000ccc0 t timer_tick_server
0000cd78 T start_softtimer
0000cd8c T stop_softtimer
0000cdac T add_softtimer
0000ce10 T current_time_tick
0000ce24 T msec_to_ticks
0000ce58 T time_ticks_init
0000cec0 t cpu_power_switch_set
0000d01c T cpucfg_init
0000d058 T cpucfg_exit
0000d080 T cpucfg_set_little_endian_address
0000d138 T cpucfg_remove_little_endian_address
0000d238 T cpucfg_set_cpu_reset_state
0000d288 T cpucfg_counter_clear
0000d2b8 T cpucfg_counter_read
0000d30c T cpucfg_counter_ctrl
0000d324 T cpucfg_set_cpux_jump_addr
0000d33c T cpucfg_acinactm_process
0000d388 T cpucfg_wait_l2_enter_wfi
0000d3ac T cpucfg_l1l2_reset_by_hardware
0000d3f8 T cpucfg_cluster0_process
0000d46c T cpucfg_cpu_suspend
0000d534 T cpucfg_cpu_suspend_late
0000d5a8 T cpucfg_cpu_resume
0000d5f0 T set_secondary_entry
0000d630 T sun50i_set_AA32nAA64
0000d684 T cpucfg_cpu_resume_early
0000d760 T cpu_power_up
0000d880 T cpu_power_down
0000d978 t auto_cal_timing_standby
0000d9c8 t phy_write_leveling_standby
0000dc00 t phy_read_calibration_standby
0000ddfc t phy_read_training_standby
0000e2a0 t phy_write_training_standby
0000e6dc t mctl_com_set_controller_refresh_standby.clone.2
0000e70c t dramc_data_cal_standby.clone.13
0000e744 T mctl_phy_dx0_bit_delay_compensation_standby
0000e86c t mctl_core_init_standby
00011340 T dram_power_save_process
000114a4 T dram_power_up_process
000116e8 T iosc_freq_init
00011860 T ccu_init
0001191c T ccu_exit
00011924 T save_state_flag
00011938 T read_state_flag
0001194c T ccu_set_mclk_onoff
00011a94 T ccu_set_poweroff_gating_state
00011c58 T ccu_24mhosc_reg_cb
00011c78 T ccu_24mhosc_disable
00011d2c T ccu_24mhosc_enable
00011e18 T is_hosc_lock
00011e28 T ccu_set_mclk_reset
000120fc T ccu_reset_module
00012134 T ccu_get_sclk_freq
000121f4 T ccu_set_sclk_onoff
000122a0 A rodata_vma
00012e80 r pmu_id_match_tlb
00012e8c r digit_string
00012ec4 r fdt_errtable
00012ef8 r __func__.2372
00012f0c r irq_table
00012f44 r __func__.2359
00012f54 r remap_lpddr4_T509.2507
00012f70 r remap_lpddr4_A100.2506
00012f8c r remap_lpddr3_A100.2505
00012fa8 r remap_ddr4_A100.2504
00012fc4 r remap_ddr3_T509.2503
00012fe0 r remap_ddr3_A100.2502
00012ffc r CSWTCH.12
00013014 r CSWTCH.13
0001302c r CSWTCH.19
00013078 A data_vma
00013078 A shbss_vma
00013078 D timer_lock
0001307c d timers
000130b4 D uart_lock
000130b8 D aw1660_onoff_reg_bitmap
00013180 D aw1736_onoff_reg_bitmap
00013240 D axp2202_onoff_reg_bitmap
000132d0 D aw1657_onoff_reg_bitmap
00013358 D dram_crc_src
0001335c D dram_crc_len
00013360 d standby_osc24m_on
00013364 D debug_level
00013368 D print_timeflg
0001336c D exception_strings
000133ac D soc_version_a
000133b0 D iosc_freq
000133b4 D losc_freq
000133b8 B bss_start_addr
000133b8 B uart_pin_not_used
000133bc b uart_rate
000133c0 B twi_lock
000133c4 b hwmsg_suspend
000133c8 b pmu_exist
000133cc b ic_version
000133d0 B dram_crc_enable
000133d4 b wakeup_timer
000133e8 b cpus_src
000133ec b standby_type
000133f0 b result
000133f4 b standby_vdd_cpu
000133f8 b standby_vdd_sys
000133fc b standby_vcc_pll
00013400 b dts_has_parsed.3114
00013404 b suspend_lock
00013408 b smc_region_save
00013468 b pll_periph0
0001346c b mbus
00013470 b pll_cpux_ctrl_reg_bak
00013474 b c0_cpux_axi_cfg_reg_bak
00013478 b notifiers
000134d8 b daemon_list
000134dc b msg_paras.2284
0001355c b htimer
00013560 b time_ticks
00013564 b softtimer
0001356c b softtimer_cnt
00013570 b data_cal_standby
00013574 b training_error_flag_standby
00013578 b already_init_osc_freq
0001357c B hosc_notifier_list
00013580 b hosc_lock
00013584 b pll_ldo_suspend
00013588 B axp_power_max
0001358c B pintc_regs
00013590 B pwatchdog_regs
00013594 B isr_table
000136bc B delay_timer
000136c0 B ptimerc_regs
000136c4 B wakeup_source
000136c8 B before_crc
000136cc B after_crc
000136d0 B debugger_buffer
00013750 B little_endian_used
00013754 B ccu_pll_periph1_reg_addr
00013758 B ccu_pll_ddr0_reg_addr
0001375c B apbs2_notifier_head
00013760 B ccu_pll_periph0_reg_addr
00013764 B ccu_pll_c0_cpux_reg_addr
00013768 B ccu_reg_addr
00013770 B bss_end_addr
00013770 B stack_limit_addr
00013b6c b _stack
00013b70 B stack_base_addr

scp.elf:     file format elf32-or32
scp.elf
architecture: or32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000100

Program Header:
    LOAD off    0x00002000 vaddr 0x00000000 paddr 0x00000000 align 2**13
         filesz 0x00000e08 memsz 0x00000e08 flags r-x
    LOAD off    0x00004000 vaddr 0x00004000 paddr 0x00004000 align 2**13
         filesz 0x00000088 memsz 0x00000088 flags rw-
    LOAD off    0x000043f0 vaddr 0x000043f0 paddr 0x000043f0 align 2**13
         filesz 0x0000efc8 memsz 0x0000f77c flags rwx
    LOAD off    0x00014000 vaddr 0x48100000 paddr 0x00014000 align 2**13
         filesz 0x00000004 memsz 0x00000004 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vectors      00000e08  00000000  00000000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 dts_paras     00000088  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000deb0  000043f0  000043f0  000043f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000dd8  000122a0  000122a0  000122a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000340  00013078  00013078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003b4  000133b8  000133b8  000133b8  2**2
                  ALLOC
  6 .stack        00000400  0001376c  0001376c  000133b8  2**0
                  ALLOC
  7 .text5        00000004  48100000  00014000  00014000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .comment      00000051  00000000  00000000  00014004  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000480  00000000  00000000  00014055  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 0000191a  00000000  00000000  000144d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000f95e  00000000  00000000  00015def  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000363a  00000000  00000000  0002574d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e5d3  00000000  00000000  00028d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c08  00000000  00000000  0003735c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004874  00000000  00000000  00038f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000d0e6  00000000  00000000  0003d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_pubtypes 00001bd7  00000000  00000000  0004a8be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000be8  00000000  00000000  0004c495  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .vectors	00000000 .vectors
00004000 l    d  dts_paras	00000000 dts_paras
000043f0 l    d  .text	00000000 .text
000122a0 l    d  .rodata	00000000 .rodata
00013078 l    d  .data	00000000 .data
000133b8 l    d  .bss	00000000 .bss
0001376c l    d  .stack	00000000 .stack
48100000 l    d  .text5	00000000 .text5
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00013b6c l       .stack	00000000 _stack
0000c630 l       .text	00000000 reset_handler
0000c75c l       .text	00000000 bus_error_exception_handler
0000c780 l       .text	00000000 data_page_fault_exception_handler
0000c7a4 l       .text	00000000 insn_page_fault_exception_handler
0000c7c8 l       .text	00000000 timer_exception_handler
0000c7ec l       .text	00000000 aligment_exception_handler
0000c810 l       .text	00000000 illegal_exception_handler
0000c834 l       .text	00000000 irq_exception_handler
0000c858 l       .text	00000000 dtlb_miss_exception_handler
0000c87c l       .text	00000000 itlb_miss_exception_handler
0000c8a0 l       .text	00000000 range_exception_handler
0000c8c4 l       .text	00000000 syscall_exception_handler
0000c8e8 l       .text	00000000 fpu_exception_handler
0000c90c l       .text	00000000 trap_exception_handler
0000c6ec l       .text	00000000 invalid_block
0000c930 l       .text	00000000 cpu_exception_handler_entry
0000c4f8 l       .text	00000000 invalidate_block
00000000 l    df *ABS*	00000000 cpu_c.c
0000c524 l     F .text	0000006c cpu_stack_monitor
00000000 l    df *ABS*	00000000 exception.c
00000000 l    df *ABS*	00000000 time_ticks.c
0000ccc0 l     F .text	000000b8 timer_tick_server
00013560 l     O .bss	00000004 time_ticks
00013564 l     O .bss	00000008 softtimer
0001356c l     O .bss	00000004 softtimer_cnt
0001355c l     O .bss	00000004 htimer
00000000 l    df *ABS*	00000000 cpucfg.c
0000cec0 l     F .text	0000015c cpu_power_switch_set
00000000 l    df *ABS*	00000000 mctl_standby-sun50iw10.c
0000d978 l     F .text	00000050 auto_cal_timing_standby
0000d9c8 l     F .text	00000238 phy_write_leveling_standby
0000dc00 l     F .text	000001fc phy_read_calibration_standby
0000ddfc l     F .text	000004a4 phy_read_training_standby
0000e2a0 l     F .text	0000043c phy_write_training_standby
0000e6dc l     F .text	00000030 mctl_com_set_controller_refresh_standby.clone.2
0000e70c l     F .text	00000038 dramc_data_cal_standby.clone.13
0000e86c l     F .text	00002ad4 mctl_core_init_standby
0001302c l     O .rodata	00000018 CSWTCH.19
00012ffc l     O .rodata	00000018 CSWTCH.12
00013014 l     O .rodata	00000018 CSWTCH.13
00012f54 l     O .rodata	0000001b remap_lpddr4_T509.2507
00012fc4 l     O .rodata	0000001b remap_ddr3_T509.2503
00012fe0 l     O .rodata	0000001b remap_ddr3_A100.2502
00012f70 l     O .rodata	0000001b remap_lpddr4_A100.2506
00012fa8 l     O .rodata	0000001b remap_ddr4_A100.2504
00012f8c l     O .rodata	0000001b remap_lpddr3_A100.2505
00013574 l     O .bss	00000004 training_error_flag_standby
00013570 l     O .bss	00000004 data_cal_standby
00000000 l    df *ABS*	00000000 ccu.c
00013578 l     O .bss	00000004 already_init_osc_freq
00000000 l    df *ABS*	00000000 mclk.c
00000000 l    df *ABS*	00000000 power.c
00013580 l     O .bss	00000004 hosc_lock
00013584 l     O .bss	00000004 pll_ldo_suspend
00000000 l    df *ABS*	00000000 reset.c
00000000 l    df *ABS*	00000000 sclk.c
00000000 l    df *ABS*	00000000 notifier.c
00013478 l     O .bss	00000060 notifiers
00000000 l    df *ABS*	00000000 message_manager.c
00000000 l    df *ABS*	00000000 debugger.c
0000a6dc l     F .text	00000080 print_align
00000000 l    df *ABS*	00000000 daemon.c
000134d8 l     O .bss	00000004 daemon_list
000134dc l     O .bss	00000080 msg_paras.2284
00000000 l    df *ABS*	00000000 para.c
00000000 l    df *ABS*	00000000 intc.c
00000000 l    df *ABS*	00000000 intc_manager.c
00000000 l    df *ABS*	00000000 pin.c
00000000 l    df *ABS*	00000000 pin_int.c
00000000 l    df *ABS*	00000000 timer.c
0001307c l     O .data	00000038 timers
0000540c l       .text	00000000 delay_loop
00000000 l    df *ABS*	00000000 timer_delay.c
00000000 l    df *ABS*	00000000 uart.c
000133bc l     O .bss	00000004 uart_rate
00000000 l    df *ABS*	00000000 twi.c
00005aac l     F .text	00000034 twi_clear_irq_flag
00005ae0 l     F .text	00000028 twic_reset
00005b08 l     F .text	00000030 twi_start
00005b38 l     F .text	00000088 twic_send_dummy_clock
00005bc0 l     F .text	000000c4 twic_set_sclk.clone.0
00000000 l    df *ABS*	00000000 hwmsgbox.c
00006778 l     F .text	0000006c hwmsgbox_set_receiver
000067e4 l     F .text	00000070 hwmsgbox_set_transmitter
000133c4 l     O .bss	00000004 hwmsg_suspend
00000000 l    df *ABS*	00000000 pmu.c
00006fd4 l     F .text	00000074 aw1660_pmu_reset
00007048 l     F .text	00000074 axp2202_pmu_reset
000133c8 l     O .bss	00000004 pmu_exist
000133cc l     O .bss	00000001 ic_version
00012e80 l     O .rodata	0000000c pmu_id_match_tlb
00000000 l    df *ABS*	00000000 watchdog.c
00000000 l    df *ABS*	00000000 library.c
00012e8c l     O .rodata	00000011 digit_string
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 fdt.c
00000000 l    df *ABS*	00000000 fdt_ro.c
00008ca0 l     F .text	00000064 fdt64_to_cpu
00008d04 l     F .text	00000038 _fdt_offset_ptr
00008d3c l     F .text	0000003c _fdt_mem_rsv
00008d78 l     F .text	00000088 _nextprop
00000000 l    df *ABS*	00000000 fdt_strerror.c
00012ec4 l     O .rodata	00000034 fdt_errtable
00000000 l    df *ABS*	00000000 fdt_addresses.c
00000000 l    df *ABS*	00000000 standby.c
00000000 l    df *ABS*	00000000 standby_dram_crc.c
00000000 l    df *ABS*	00000000 wakeup_source.c
0000aff4 l     F .text	00000060 CPUX_IRQ_MAPTO_CPUS
00012f0c l     O .rodata	00000038 irq_table
0000b054 l     F .text	00000018 CPUX_IRQ_MAPTO_CPUS_GRP
0000b06c l     F .text	0000001c wakeup_timer_handler
0000b088 l     F .text	00000034 group_irq_exit
0000b0bc l     F .text	00000034 group_irq_init
000133d4 l     O .bss	00000014 wakeup_timer
00012f44 l     O .rodata	0000000f __func__.2359
00012ef8 l     O .rodata	00000011 __func__.2372
00000000 l    df *ABS*	00000000 plat_standby.c
00013404 l     O .bss	00000004 suspend_lock
00013400 l     O .bss	00000004 dts_has_parsed.3114
000133f4 l     O .bss	00000004 standby_vdd_cpu
000133f8 l     O .bss	00000004 standby_vdd_sys
000133fc l     O .bss	00000004 standby_vcc_pll
00013360 l     O .data	00000004 standby_osc24m_on
000133e8 l     O .bss	00000004 cpus_src
000133ec l     O .bss	00000004 standby_type
00013408 l     O .bss	00000060 smc_region_save
00013468 l     O .bss	00000004 pll_periph0
0001346c l     O .bss	00000004 mbus
00013470 l     O .bss	00000004 pll_cpux_ctrl_reg_bak
00013474 l     O .bss	00000004 c0_cpux_axi_cfg_reg_bak
000133f0 l     O .bss	00000004 result
0000d324 g     F .text	00000018 cpucfg_set_cpux_jump_addr
00013750 g     O .bss	00000004 little_endian_used
00012134 g     F .text	000000c0 ccu_get_sclk_freq
0000a208 g     F .text	00000084 fdt_address_cells
0000d46c g     F .text	000000c8 cpucfg_cpu_suspend
00008154 g     F .text	00000028 strcpy
000130b4 g     O .data	00000004 uart_lock
0000868c g     F .text	000000cc fdt_offset_ptr
00005c84 g     F .text	0000006c twi_clkchangecb
00007780 g     F .text	0000001c pmu_reg_read
00004448 g     F .text	00000028 intc_exit
00007a00 g     F .text	00000040 nmi_int_handler
0000a528 g     F .text	00000008 message_manager_init
000136c4 g     O .bss	00000004 wakeup_source
00004088 g       dts_paras	00000000 paras_end_addr
0000ce24 g     F .text	00000034 msec_to_ticks
0000c4d4 g       .text	00000000 icache_coherent
000057d4 g     F .text	00000068 uart_get
00011e18 g     F .text	00000010 is_hosc_lock
00006f74 g     F .text	0000002c hwmsgbox_super_standby_init
000133b4 g     O .data	00000004 losc_freq
0000afb0 g     F .text	00000044 standby_dram_crc
00013b70 g       .stack	00000000 stack_base_addr
00004b30 g     F .text	00000008 pin_init
00009420 g     F .text	0000002c fdt_getprop_namelen
0001191c g     F .text	00000008 ccu_exit
00009168 g     F .text	00000044 fdt_first_property_offset
00013364 g     O .data	00000004 debug_level
00009fb0 g     F .text	000000f0 fdt_stringlist_get
000133b0 g     O .data	00000004 iosc_freq
000077fc g     F .text	00000068 watchdog_reset
0000832c g     F .text	0000008c memmove
00009bc4 g     F .text	0000005c fdt_parent_offset
0000b1c8 g     F .text	0000003c wakeup_timer_start
0000ce58 g     F .text	00000068 time_ticks_init
0000c590 g     F .text	00000034 cpu_init
000093c0 g     F .text	00000060 fdt_get_property
0000a7bc g     F .text	0000001c debugger_puts
0000972c g     F .text	00000140 fdt_path_offset
000133d0 g     O .bss	00000004 dram_crc_enable
0001335c g     O .data	00000004 dram_crc_len
00006a0c g     F .text	0000027c hwmsgbox_send_message
00007754 g     F .text	00000008 pmu_clear_pendings
0000b220 g     F .text	0000013c set_wakeup_src
00007764 g     F .text	0000001c pmu_reg_write
0000a538 g     F .text	000001a4 message_coming_notify
00004974 g     F .text	00000068 uninstall_isr
00006854 g     F .text	000000c0 hwmsgbox_init
00004bc0 g     F .text	00000078 pin_set_pull
0000c61c g     F .text	00000014 cpu_enter_doze
0000d534 g     F .text	00000074 cpucfg_cpu_suspend_late
00008bd4 g     F .text	000000cc fdt_move
00007f6c g     F .text	000000a8 hexdump
0000a778 g     F .text	00000008 debugger_exit
0000cc04 g     F .text	000000bc cpu_exception_handler_entry_c
00013588 g     O .bss	00000004 axp_power_max
000048d4 g     F .text	00000018 interrupt_disable
0001358c g     O .bss	00000004 pintc_regs
0000a100 g     F .text	00000098 fdt_node_offset_by_compatible
0000ab78 g     F .text	00000020 daemon_register_service
00005e08 g     F .text	00000008 twi_exit
00013754 g     O .bss	00000004 ccu_pll_periph1_reg_addr
00008270 g     F .text	000000bc memcpy
000114a4 g     F .text	00000244 dram_power_up_process
0001336c g     O .data	00000040 exception_strings
00009c20 g     F .text	000000dc fdt_node_offset_by_prop_value
00006770 g     F .text	00000008 twi_standby_exit
00006944 g     F .text	00000060 hwmsgbox_wait_queue_not_full
00013078 g       *ABS*	00000000 shbss_vma
00004cb0 g     F .text	0000006c pin_write_data
0000a780 g     F .text	00000024 debugger_putc
0000ca28 g       .text	00000000 __udivsi3
00011d2c g     F .text	000000ec ccu_24mhosc_enable
000136c8 g     O .bss	00000004 before_crc
0000484c g     F .text	00000054 interrupt_init
0000cdac g     F .text	00000064 add_softtimer
00005cf0 g     F .text	00000118 twi_init
00007d4c g     F .text	00000130 itoa
00008f40 g     F .text	00000130 fdt_subnode_offset_namelen
0000b438 g     F .text	00000010 is_suspend_lock
00009b80 g     F .text	00000044 fdt_node_depth
000077cc g     F .text	00000030 pmu_reg_read_para
000048a0 g     F .text	0000001c interrupt_exit
00004b18 g     F .text	00000018 interrupt_get_enabled
00008ee0 g     F .text	00000060 fdt_num_mem_rsv
0000774c g     F .text	00000008 pmu_query_event
000091f0 g     F .text	000000a4 fdt_get_property_by_offset
000136cc g     O .bss	00000004 after_crc
00007bb4 g     F .text	00000008 pmu_exit
00006da8 g     F .text	000001cc hwmsgbox_query_message
0000d5a8 g     F .text	00000048 cpucfg_cpu_resume
00013590 g     O .bss	00000004 pwatchdog_regs
000136d0 g     O .bss	00000080 debugger_buffer
0000af74 g     F .text	0000002c standby_set_dram_crc_paras
00013758 g     O .bss	00000004 ccu_pll_ddr0_reg_addr
00006668 g     F .text	00000108 twi_standby_init
00011340 g     F .text	00000164 dram_power_save_process
000074f8 g     F .text	0000022c pmu_set_voltage_state
00011860 g     F .text	000000bc ccu_init
0000a424 g     F .text	00000098 notifier_delete
00008b4c g     F .text	00000088 _fdt_find_string
00004e1c g     F .text	00000150 timer_hosc_onoff_cb
000133b8 g     O .bss	00000004 uart_pin_not_used
000074a8 g     F .text	00000028 pmu_set_voltage
00004b48 g     F .text	00000078 pin_set_multi_sel
0000d760 g     F .text	00000120 cpu_power_up
0000d138 g     F .text	00000100 cpucfg_remove_little_endian_address
00008124 g     F .text	00000030 strnlen
00005184 g     F .text	000000e4 timer_request
000048ec g     F .text	00000028 interrupt_set_nmi_trigger
000094d8 g     F .text	00000060 fdt_getprop
0000462c g     F .text	00000028 intc_get_current_interrupt
0001357c g     O .bss	00000004 hosc_notifier_list
00007bbc g     F .text	00000010 is_pmu_exist
0000d058 g     F .text	00000028 cpucfg_exit
0000583c g     F .text	00000084 uart_puts
00004d5c g     F .text	00000034 is_wanted_gpio_int
00013180 g     O .data	000000c0 aw1736_onoff_reg_bitmap
00007e7c g     F .text	000000f0 utoa
00009538 g     F .text	000000c4 fdt_getprop_u32
0000a198 g     F .text	00000070 fdt_strerror
00005028 g     F .text	00000104 timer_init
00009d98 g     F .text	000000b0 fdt_stringlist_contains
0000ce10 g     F .text	00000014 current_time_tick
00013078 g       *ABS*	00000000 data_vma
00004520 g     F .text	00000098 intc_disable_interrupt
0000657c g     F .text	00000090 twi_write
000116e8 g     F .text	00000178 iosc_freq_init
00004944 g     F .text	00000030 install_isr
00013770 g       .stack	00000000 stack_limit_addr
0000cb88 g       .text	00000000 __umodsi3
0000892c g     F .text	00000058 _fdt_check_prop_offset
00005290 g     F .text	000000d4 timer_start
00007864 g     F .text	0000019c pmu_reset
00004b40 g     F .text	00000008 pin_set_status
00011938 g     F .text	00000014 read_state_flag
00009070 g     F .text	00000050 fdt_subnode_offset
0000d288 g     F .text	00000030 cpucfg_counter_clear
0000afa0 g     F .text	00000010 standby_dram_crc_enable
000055f4 g     F .text	00000104 uart_init
0000660c g     F .text	00000018 is_twi_lock
000083f4 g     F .text	00000040 memchr
0000a28c g     F .text	00000080 fdt_size_cells
0000481c g     F .text	00000030 isr_default
000058c0 g     F .text	00000134 uart_set_baudrate
0000af10 g     F .text	00000040 standby_init
00011c78 g     F .text	000000b4 ccu_24mhosc_disable
00009a78 g     F .text	00000108 fdt_supernode_atdepth_offset
000133c0 g     O .bss	00000001 twi_lock
00004654 g     F .text	000000c4 intc_set_mask
0000d630 g     F .text	00000054 sun50i_set_AA32nAA64
0000a530 g     F .text	00000008 message_manager_exit
00008adc g     F .text	00000070 fdt_next_subnode
000049dc g     F .text	00000040 interrupt_entry
0000cd78 g     F .text	00000014 start_softtimer
0000d080 g     F .text	000000b8 cpucfg_set_little_endian_address
0000b448 g     F .text	00000f50 cpu_op
0000a7d8 g     F .text	0000034c debugger_printf
0000d3f8 g     F .text	00000074 cpucfg_cluster0_process
0000cd8c g     F .text	00000020 stop_softtimer
0000775c g     F .text	00000008 pmu_chip_init
00004d1c g     F .text	00000040 pin_read_data
00006c88 g     F .text	00000120 hwmsgbox_feedback_message
0000779c g     F .text	00000030 pmu_reg_write_para
0000c5ec g     F .text	00000010 cpu_enable_int
000070bc g     F .text	00000240 pmu_shutdown
000083b8 g     F .text	0000003c memcmp
000091ac g     F .text	00000044 fdt_next_property_offset
00013368 g     O .data	00000004 print_timeflg
0000817c g     F .text	00000078 strncat
00007bcc g     F .text	00000030 pmu_standby_init
00009294 g     F .text	0000012c fdt_get_property_namelen
0000d01c g     F .text	0000003c cpucfg_init
00009cfc g     F .text	0000009c fdt_node_offset_by_phandle
000132d0 g     O .data	00000088 aw1657_onoff_reg_bitmap
00006624 g     F .text	00000044 twi_get_status
00011c58 g     F .text	00000020 ccu_24mhosc_reg_cb
00007bfc g     F .text	00000030 pmu_standby_exit
00007ca8 g     F .text	00000028 watchdog_exit
000122a0 g       *ABS*	00000000 rodata_vma
000120fc g     F .text	00000038 ccu_reset_module
00011e28 g     F .text	000002d4 ccu_set_mclk_reset
000133b8 g       .bss	00000000 bss_start_addr
0000b35c g     F .text	000000dc clear_wakeup_src
00004470 g     F .text	000000b0 intc_enable_interrupt
00008434 g     F .text	00000028 memset
0000512c g     F .text	00000058 timer_exit
0000d33c g     F .text	0000004c cpucfg_acinactm_process
0000d30c g     F .text	00000018 cpucfg_counter_ctrl
000072fc g     F .text	000001ac pmu_charging_reset
000080bc g     F .text	00000048 dstr2int
000088d4 g     F .text	00000058 _fdt_check_node_offset
00005770 g     F .text	00000064 uart_putc
0000c5c4 g     F .text	00000028 cpu_disable_int
000054dc g     F .text	00000080 cnt64_udelay
0000af08 g     F .text	00000008 set_paras
00013594 g     O .bss	00000128 isr_table
0001375c g     O .bss	00000004 apbs2_notifier_head
0000986c g     F .text	00000040 fdt_get_alias
0000ab24 g     F .text	00000054 set_debug_level
000133ac g     O .data	00000004 soc_version_a
00006914 g     F .text	00000030 hwmsgbox_exit
0000cb24 g       .text	00000000 __divsi3
0000d880 g     F .text	000000f8 cpu_power_down
000095fc g     F .text	000000b4 fdt_get_phandle
000081f4 g     F .text	00000048 strcmp
000059f4 g     F .text	000000a4 uart_clkchangecb
0000a30c g     F .text	00000044 notifier_init
000121f4 g     F .text	000000ac ccu_set_sclk_onoff
00004000 g       dts_paras	00000000 paras_start_addr
00005424 g     F .text	000000b8 time_mdelay
0000845c g     F .text	0000011c sprintf
000064ec g     F .text	00000090 twi_read
00008014 g     F .text	000000a8 hstr2int
00004718 g     F .text	00000104 intc_set_group_config
0000d3ac g     F .text	0000004c cpucfg_l1l2_reset_by_hardware
00008578 g     F .text	00000114 fdt_check_header
0001194c g     F .text	00000148 ccu_set_mclk_onoff
00005364 g     F .text	000000a8 timer_stop
000090c0 g     F .text	000000a8 fdt_get_name
00004914 g     F .text	00000018 interrupt_set_mask
000130b8 g     O .data	000000c8 aw1660_onoff_reg_bitmap
0000a4bc g     F .text	0000005c notifier_notify
00008a94 g     F .text	00000048 fdt_first_subnode
000043f0 g     F .text	00000058 intc_init
00013240 g     O .data	00000090 axp2202_onoff_reg_bitmap
0000d684 g     F .text	000000dc cpucfg_cpu_resume_early
00007724 g     F .text	00000028 pmu_get_voltage_state
00004a1c g     F .text	00000080 interrupt_query_pending
00005a98 g     F .text	00000014 uart_get_baudrate
0000555c g     F .text	00000098 time_udelay
00005268 g     F .text	00000028 timer_release
000069a4 g     F .text	00000068 hwmsgbox_wait_queue_not_empty
00008984 g     F .text	00000110 fdt_next_node
0000af58 g     F .text	0000001c long_jump
00013770 g       .bss	00000000 bss_end_addr
000136bc g     O .bss	00000004 delay_timer
00006fa0 g     F .text	00000034 hwmsgbox_super_standby_exit
00013760 g     O .bss	00000004 ccu_pll_periph0_reg_addr
00004b38 g     F .text	00000008 pin_exit
000074d0 g     F .text	00000028 pmu_get_voltage
00011a94 g     F .text	000001c4 ccu_set_poweroff_gating_state
00007cd0 g     F .text	00000040 watchdog_enable
00007a40 g     F .text	00000174 pmu_init
0000e744 g     F .text	00000128 mctl_phy_dx0_bit_delay_compensation_standby
00013078 g     O .data	00000004 timer_lock
00004a9c g     F .text	00000064 interrupt_clear_pending
0000c5fc g     F .text	00000020 exit
0000aeec g     F .text	0000001c arisc_para_init
00008e00 g     F .text	00000038 fdt_string
0000d388 g     F .text	00000024 cpucfg_wait_l2_enter_wfi
0000cba8 g       .text	00000000 __modsi3
00013764 g     O .bss	00000004 ccu_pll_c0_cpux_reg_addr
00008758 g     F .text	0000017c fdt_next_tag
00004000 g     O dts_paras	00000088 arisc_para
00013358 g     O .data	00000004 dram_crc_src
00004c38 g     F .text	00000078 pin_set_drive
0000a75c g     F .text	0000001c debugger_init
00007d10 g     F .text	0000003c watchdog_disable
0000ab98 g     F .text	00000354 startup_entry
000096b0 g     F .text	0000007c fdt_get_alias_namelen
00004b00 g     F .text	00000018 interrupt_get_current_intno
00004f6c g     F .text	000000bc timer_isr
0000a518 g     F .text	00000010 message_valid
00005e10 g     F .text	000006dc twi_byte_rw
00004d90 g     F .text	0000008c pin_set_int_trigger_mode
0000540c g       .text	00000000 time_cdelay
000048bc g     F .text	00000018 interrupt_enable
00009e48 g     F .text	0000008c fdt_stringlist_count
00008104 g     F .text	00000020 strlen
000136c0 g     O .bss	00000004 ptimerc_regs
0000d5f0 g     F .text	00000040 set_secondary_entry
0000b204 g     F .text	0000001c wakeup_timer_stop
00011924 g     F .text	00000014 save_state_flag
0000af50 g     F .text	00000008 standby_exit
0000d238 g     F .text	00000050 cpucfg_set_cpu_reset_state
0000823c g     F .text	00000034 strchr
0000b0f0 g     F .text	0000008c default_wakeup_handler
0000d2b8 g     F .text	00000054 cpucfg_counter_read
000045b8 g     F .text	00000074 intc_interrupt_is_enabled
00007c2c g     F .text	0000007c watchdog_init
0000a7a4 g     F .text	00000018 debugger_get
0000b17c g     F .text	0000004c wakeup_timer_init
00009ed4 g     F .text	000000dc fdt_stringlist_search
0000a0a0 g     F .text	00000060 fdt_node_check_compatible
0000492c g     F .text	00000018 interrupt_set_group_config
000056f8 g     F .text	00000078 uart_exit
0000944c g     F .text	0000008c fdt_getprop_by_offset
0000c398 g     F .text	0000013c sys_op
0000a350 g     F .text	00000008 notifier_exit
00008e38 g     F .text	000000a8 fdt_get_mem_rsv
000098ac g     F .text	000001cc fdt_get_path
00013768 g     O .bss	00000004 ccu_reg_addr
0000a358 g     F .text	000000cc notifier_insert



Disassembly of section .vectors:

00000000 <.vectors>:
	...
 100:	00 00 31 4c 	l.j c630 <reset_handler>
 104:	15 00 00 00 	l.nop 0x0
	...
 200:	00 00 31 57 	l.j c75c <bus_error_exception_handler>
 204:	15 00 00 00 	l.nop 0x0
	...
 300:	00 00 31 20 	l.j c780 <data_page_fault_exception_handler>
 304:	15 00 00 00 	l.nop 0x0
	...
 400:	00 00 30 e9 	l.j c7a4 <insn_page_fault_exception_handler>
 404:	15 00 00 00 	l.nop 0x0
	...
 500:	00 00 30 b2 	l.j c7c8 <timer_exception_handler>
 504:	15 00 00 00 	l.nop 0x0
	...
 600:	00 00 30 7b 	l.j c7ec <aligment_exception_handler>
 604:	15 00 00 00 	l.nop 0x0
	...
 700:	00 00 30 44 	l.j c810 <illegal_exception_handler>
 704:	15 00 00 00 	l.nop 0x0
	...
 800:	00 00 30 0d 	l.j c834 <irq_exception_handler>
 804:	15 00 00 00 	l.nop 0x0
	...
 900:	00 00 2f d6 	l.j c858 <dtlb_miss_exception_handler>
 904:	15 00 00 00 	l.nop 0x0
	...
 a00:	00 00 2f 9f 	l.j c87c <itlb_miss_exception_handler>
 a04:	15 00 00 00 	l.nop 0x0
	...
 b00:	00 00 2f 68 	l.j c8a0 <range_exception_handler>
 b04:	15 00 00 00 	l.nop 0x0
	...
 c00:	00 00 2f 31 	l.j c8c4 <syscall_exception_handler>
 c04:	15 00 00 00 	l.nop 0x0
	...
 d00:	00 00 2e fa 	l.j c8e8 <fpu_exception_handler>
 d04:	15 00 00 00 	l.nop 0x0
	...
 e00:	00 00 2e c3 	l.j c90c <trap_exception_handler>
 e04:	15 00 00 00 	l.nop 0x0

Disassembly of section .text:

000043f0 <intc_init>:
* Note       :
*********************************************************************************************************
*/
s32 intc_init(void)
{
	pintc_regs = (struct intc_regs *)(R_INTC_REG_BASE);
    43f0:	18 60 07 02 	l.movhi r3,0x702
    43f4:	18 80 00 01 	l.movhi r4,0x1
    43f8:	a8 63 10 00 	l.ori r3,r3,0x1000
    43fc:	a8 84 35 8c 	l.ori r4,r4,0x358c
*
* Note       :
*********************************************************************************************************
*/
s32 intc_init(void)
{
    4400:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	pintc_regs = (struct intc_regs *)(R_INTC_REG_BASE);

	/*initialize interrupt controller */
	pintc_regs->enable = 0x0;
    4404:	9c 40 00 00 	l.addi r2,r0,0x0
* Note       :
*********************************************************************************************************
*/
s32 intc_init(void)
{
	pintc_regs = (struct intc_regs *)(R_INTC_REG_BASE);
    4408:	d4 04 18 00 	l.sw 0x0(r4),r3

	/*initialize interrupt controller */
	pintc_regs->enable = 0x0;
    440c:	d4 03 10 40 	l.sw 0x40(r3),r2
	pintc_regs->mask = 0x0;
	pintc_regs->pending = 0xffffffff;
    4410:	9c 80 ff ff 	l.addi r4,r0,0xffffffff
{
	pintc_regs = (struct intc_regs *)(R_INTC_REG_BASE);

	/*initialize interrupt controller */
	pintc_regs->enable = 0x0;
	pintc_regs->mask = 0x0;
    4414:	d4 03 10 50 	l.sw 0x50(r3),r2
	pintc_regs->pending = 0xffffffff;
    4418:	d4 03 20 10 	l.sw 0x10(r3),r4

	pintc_regs->enable1 = 0x0;
    441c:	d4 03 10 44 	l.sw 0x44(r3),r2
	pintc_regs->mask1 = 0x0;
    4420:	d4 03 10 54 	l.sw 0x54(r3),r2
	pintc_regs->pending1 = 0xffffffff;
    4424:	d4 03 20 14 	l.sw 0x14(r3),r4

	pintc_regs->enable2 = 0x0;
    4428:	d4 03 10 48 	l.sw 0x48(r3),r2
	pintc_regs->mask2 = 0x0;
    442c:	d4 03 10 58 	l.sw 0x58(r3),r2
*
* Note       :
*********************************************************************************************************
*/
s32 intc_init(void)
{
    4430:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	pintc_regs->mask1 = 0x0;
	pintc_regs->pending1 = 0xffffffff;

	pintc_regs->enable2 = 0x0;
	pintc_regs->mask2 = 0x0;
	pintc_regs->pending2 = 0xffffffff;
    4434:	d4 03 20 18 	l.sw 0x18(r3),r4
	return OK;
}
    4438:	9c 21 00 04 	l.addi r1,r1,0x4
    443c:	a9 62 00 00 	l.ori r11,r2,0x0
    4440:	44 00 48 00 	l.jr r9
    4444:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004448 <intc_exit>:
* Note       :
*********************************************************************************************************
*/
s32 intc_exit(void)
{
	pintc_regs = NULL;
    4448:	18 60 00 01 	l.movhi r3,0x1
*
* Note       :
*********************************************************************************************************
*/
s32 intc_exit(void)
{
    444c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	pintc_regs = NULL;
    4450:	a8 63 35 8c 	l.ori r3,r3,0x358c
    4454:	9c 40 00 00 	l.addi r2,r0,0x0
*
* Note       :
*********************************************************************************************************
*/
s32 intc_exit(void)
{
    4458:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	pintc_regs = NULL;
    445c:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}
    4460:	9c 21 00 04 	l.addi r1,r1,0x4
    4464:	a9 62 00 00 	l.ori r11,r2,0x0
    4468:	44 00 48 00 	l.jr r9
    446c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004470 <intc_enable_interrupt>:

	/*
	 * NMI interrupt should clear before enable.
	 * by sunny at 2012-6-12 19:30:22.
	 */
	if (intno == INTC_R_NMI_IRQ) {
    4470:	bc 23 00 00 	l.sfnei r3,0x0
    4474:	10 00 00 09 	l.bf 4498 <intc_enable_interrupt+0x28>
    4478:	bc 43 00 1f 	l.sfgtui r3,0x1f
		INF("clean NMI interrupt pending\n");
		pintc_regs->pending = (1 << intno);
    447c:	18 80 00 01 	l.movhi r4,0x1
    4480:	9c a0 00 01 	l.addi r5,r0,0x1
    4484:	a8 84 35 8c 	l.ori r4,r4,0x358c
    4488:	84 84 00 00 	l.lwz r4,0x0(r4)
    448c:	d4 04 28 10 	l.sw 0x10(r4),r5
	}

	/*enable interrupt which number is intno */
	if (intno <= 31)
		pintc_regs->enable |= (1 << intno);
    4490:	00 00 00 05 	l.j 44a4 <intc_enable_interrupt+0x34>
    4494:	18 80 00 01 	l.movhi r4,0x1
		INF("clean NMI interrupt pending\n");
		pintc_regs->pending = (1 << intno);
	}

	/*enable interrupt which number is intno */
	if (intno <= 31)
    4498:	10 00 00 0c 	l.bf 44c8 <intc_enable_interrupt+0x58>
    449c:	9c a3 ff e0 	l.addi r5,r3,0xffffffe0
		pintc_regs->enable |= (1 << intno);
    44a0:	18 80 00 01 	l.movhi r4,0x1
    44a4:	9c c0 00 01 	l.addi r6,r0,0x1
    44a8:	a8 84 35 8c 	l.ori r4,r4,0x358c
    44ac:	e0 66 18 08 	l.sll r3,r6,r3
    44b0:	84 84 00 00 	l.lwz r4,0x0(r4)
    44b4:	84 a4 00 40 	l.lwz r5,0x40(r4)
    44b8:	e0 63 28 04 	l.or r3,r3,r5
    44bc:	d4 04 18 40 	l.sw 0x40(r4),r3
		pintc_regs->enable2 |= (1 << (intno - 64));

	INF("intno:%d interrupt enable\n", intno);

	return OK;
}
    44c0:	00 00 00 16 	l.j 4518 <intc_enable_interrupt+0xa8>
    44c4:	9d 60 00 00 	l.addi r11,r0,0x0
    44c8:	18 80 00 01 	l.movhi r4,0x1
	}

	/*enable interrupt which number is intno */
	if (intno <= 31)
		pintc_regs->enable |= (1 << intno);
	else if (intno > 31 && intno <= 63)
    44cc:	bc 45 00 1f 	l.sfgtui r5,0x1f
    44d0:	10 00 00 0a 	l.bf 44f8 <intc_enable_interrupt+0x88>
    44d4:	a8 84 35 8c 	l.ori r4,r4,0x358c
		pintc_regs->enable1 |= (1 << (intno - 32));
    44d8:	9c c0 00 01 	l.addi r6,r0,0x1
    44dc:	84 64 00 00 	l.lwz r3,0x0(r4)
    44e0:	e0 a6 28 08 	l.sll r5,r6,r5
    44e4:	84 83 00 44 	l.lwz r4,0x44(r3)
    44e8:	e0 a5 20 04 	l.or r5,r5,r4
    44ec:	d4 03 28 44 	l.sw 0x44(r3),r5
		pintc_regs->enable2 |= (1 << (intno - 64));

	INF("intno:%d interrupt enable\n", intno);

	return OK;
}
    44f0:	00 00 00 0a 	l.j 4518 <intc_enable_interrupt+0xa8>
    44f4:	9d 60 00 00 	l.addi r11,r0,0x0
	if (intno <= 31)
		pintc_regs->enable |= (1 << intno);
	else if (intno > 31 && intno <= 63)
		pintc_regs->enable1 |= (1 << (intno - 32));
	else
		pintc_regs->enable2 |= (1 << (intno - 64));
    44f8:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    44fc:	9c c0 00 01 	l.addi r6,r0,0x1
    4500:	84 84 00 00 	l.lwz r4,0x0(r4)
    4504:	e0 66 18 08 	l.sll r3,r6,r3
    4508:	84 a4 00 48 	l.lwz r5,0x48(r4)
    450c:	e0 63 28 04 	l.or r3,r3,r5
    4510:	d4 04 18 48 	l.sw 0x48(r4),r3

	INF("intno:%d interrupt enable\n", intno);

	return OK;
}
    4514:	9d 60 00 00 	l.addi r11,r0,0x0
    4518:	44 00 48 00 	l.jr r9
    451c:	15 00 00 00 	l.nop 0x0

00004520 <intc_disable_interrupt>:
{
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	/*enable interrupt which number is intno */
	if (intno <= 31)
    4520:	bc 43 00 1f 	l.sfgtui r3,0x1f
    4524:	10 00 00 0d 	l.bf 4558 <intc_disable_interrupt+0x38>
    4528:	9c a3 ff e0 	l.addi r5,r3,0xffffffe0
		pintc_regs->enable &= ~(1 << intno);
    452c:	18 80 00 01 	l.movhi r4,0x1
    4530:	9c c0 00 01 	l.addi r6,r0,0x1
    4534:	a8 84 35 8c 	l.ori r4,r4,0x358c
    4538:	e0 66 18 08 	l.sll r3,r6,r3
    453c:	84 84 00 00 	l.lwz r4,0x0(r4)
    4540:	ac 63 ff ff 	l.xori r3,r3,0xffffffff
    4544:	84 a4 00 40 	l.lwz r5,0x40(r4)
    4548:	e0 63 28 03 	l.and r3,r3,r5
    454c:	d4 04 18 40 	l.sw 0x40(r4),r3
		pintc_regs->enable1 &= ~(1 << (intno - 32));
	else
		pintc_regs->enable2 &= ~(1 << (intno - 64));

	return OK;
}
    4550:	00 00 00 18 	l.j 45b0 <intc_disable_interrupt+0x90>
    4554:	9d 60 00 00 	l.addi r11,r0,0x0
    4558:	18 80 00 01 	l.movhi r4,0x1
	ASSERT(intno < IRQ_SOUCE_MAX);

	/*enable interrupt which number is intno */
	if (intno <= 31)
		pintc_regs->enable &= ~(1 << intno);
	else if (intno > 31 && intno <= 63)
    455c:	bc 45 00 1f 	l.sfgtui r5,0x1f
    4560:	10 00 00 0b 	l.bf 458c <intc_disable_interrupt+0x6c>
    4564:	a8 84 35 8c 	l.ori r4,r4,0x358c
		pintc_regs->enable1 &= ~(1 << (intno - 32));
    4568:	9c c0 00 01 	l.addi r6,r0,0x1
    456c:	84 64 00 00 	l.lwz r3,0x0(r4)
    4570:	e0 a6 28 08 	l.sll r5,r6,r5
    4574:	84 83 00 44 	l.lwz r4,0x44(r3)
    4578:	ac a5 ff ff 	l.xori r5,r5,0xffffffff
    457c:	e0 a5 20 03 	l.and r5,r5,r4
    4580:	d4 03 28 44 	l.sw 0x44(r3),r5
	else
		pintc_regs->enable2 &= ~(1 << (intno - 64));

	return OK;
}
    4584:	00 00 00 0b 	l.j 45b0 <intc_disable_interrupt+0x90>
    4588:	9d 60 00 00 	l.addi r11,r0,0x0
	if (intno <= 31)
		pintc_regs->enable &= ~(1 << intno);
	else if (intno > 31 && intno <= 63)
		pintc_regs->enable1 &= ~(1 << (intno - 32));
	else
		pintc_regs->enable2 &= ~(1 << (intno - 64));
    458c:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    4590:	9c c0 00 01 	l.addi r6,r0,0x1
    4594:	84 84 00 00 	l.lwz r4,0x0(r4)
    4598:	e0 66 18 08 	l.sll r3,r6,r3
    459c:	84 a4 00 48 	l.lwz r5,0x48(r4)
    45a0:	ac 63 ff ff 	l.xori r3,r3,0xffffffff
    45a4:	e0 63 28 03 	l.and r3,r3,r5
    45a8:	d4 04 18 48 	l.sw 0x48(r4),r3

	return OK;
}
    45ac:	9d 60 00 00 	l.addi r11,r0,0x0
    45b0:	44 00 48 00 	l.jr r9
    45b4:	15 00 00 00 	l.nop 0x0

000045b8 <intc_interrupt_is_enabled>:

	/* intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	/* get interrupt enabled status which number is intno */
	if (intno <= 31)
    45b8:	bc 43 00 1f 	l.sfgtui r3,0x1f
    45bc:	10 00 00 08 	l.bf 45dc <intc_interrupt_is_enabled+0x24>
    45c0:	15 00 00 00 	l.nop 0x0
		enable_status = pintc_regs->enable & (1 << intno);
    45c4:	18 80 00 01 	l.movhi r4,0x1
    45c8:	a8 84 35 8c 	l.ori r4,r4,0x358c
    45cc:	84 84 00 00 	l.lwz r4,0x0(r4)
    45d0:	84 84 00 40 	l.lwz r4,0x40(r4)
	else if (intno > 31 && intno <= 63)
		enable_status = pintc_regs->enable1 & (1 << (intno - 32));
	else
		enable_status = pintc_regs->enable2 & (1 << (intno - 64));
    45d4:	00 00 00 10 	l.j 4614 <intc_interrupt_is_enabled+0x5c>
    45d8:	9c a0 00 01 	l.addi r5,r0,0x1
	ASSERT(intno < IRQ_SOUCE_MAX);

	/* get interrupt enabled status which number is intno */
	if (intno <= 31)
		enable_status = pintc_regs->enable & (1 << intno);
	else if (intno > 31 && intno <= 63)
    45dc:	9c a3 ff e0 	l.addi r5,r3,0xffffffe0
    45e0:	18 80 00 01 	l.movhi r4,0x1
    45e4:	bc 45 00 1f 	l.sfgtui r5,0x1f
    45e8:	10 00 00 07 	l.bf 4604 <intc_interrupt_is_enabled+0x4c>
    45ec:	a8 84 35 8c 	l.ori r4,r4,0x358c
		enable_status = pintc_regs->enable1 & (1 << (intno - 32));
    45f0:	84 64 00 00 	l.lwz r3,0x0(r4)
    45f4:	84 83 00 44 	l.lwz r4,0x44(r3)
    45f8:	9c 60 00 01 	l.addi r3,r0,0x1
    45fc:	00 00 00 07 	l.j 4618 <intc_interrupt_is_enabled+0x60>
    4600:	e0 63 28 08 	l.sll r3,r3,r5
	else
		enable_status = pintc_regs->enable2 & (1 << (intno - 64));
    4604:	84 84 00 00 	l.lwz r4,0x0(r4)
    4608:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    460c:	84 84 00 48 	l.lwz r4,0x48(r4)
    4610:	9c a0 00 01 	l.addi r5,r0,0x1
    4614:	e0 65 18 08 	l.sll r3,r5,r3
    4618:	e0 63 20 03 	l.and r3,r3,r4

	return (!!enable_status);
    461c:	e0 80 18 02 	l.sub r4,r0,r3
    4620:	e0 64 18 04 	l.or r3,r4,r3
}
    4624:	44 00 48 00 	l.jr r9
    4628:	b9 63 00 5f 	l.srli r11,r3,0x1f

0000462c <intc_get_current_interrupt>:
*/
u32 intc_get_current_interrupt(void)
{
	volatile u32 interrupt;

	interrupt = (u32) ((pintc_regs->vector) >> 2);
    462c:	18 60 00 01 	l.movhi r3,0x1
*
* Note       :
*********************************************************************************************************
*/
u32 intc_get_current_interrupt(void)
{
    4630:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	volatile u32 interrupt;

	interrupt = (u32) ((pintc_regs->vector) >> 2);
    4634:	a8 63 35 8c 	l.ori r3,r3,0x358c
    4638:	84 63 00 00 	l.lwz r3,0x0(r3)
    463c:	84 63 00 00 	l.lwz r3,0x0(r3)
    4640:	b8 63 00 42 	l.srli r3,r3,0x2
    4644:	d4 01 18 00 	l.sw 0x0(r1),r3

	return interrupt;
}
    4648:	85 61 00 00 	l.lwz r11,0x0(r1)
    464c:	44 00 48 00 	l.jr r9
    4650:	9c 21 00 04 	l.addi r1,r1,0x4

00004654 <intc_set_mask>:
s32 intc_set_mask(u32 intno, u32 mask)
{
	/* intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);
	/* enable interrupt which number is intno */
	if (intno <= 31) {
    4654:	bc 43 00 1f 	l.sfgtui r3,0x1f
    4658:	10 00 00 11 	l.bf 469c <intc_set_mask+0x48>
    465c:	9c c3 ff e0 	l.addi r6,r3,0xffffffe0
		pintc_regs->mask &= ~(1 << intno);
    4660:	18 a0 00 01 	l.movhi r5,0x1
    4664:	9c c0 00 01 	l.addi r6,r0,0x1
    4668:	a8 a5 35 8c 	l.ori r5,r5,0x358c
    466c:	e0 c6 18 08 	l.sll r6,r6,r3
    4670:	84 a5 00 00 	l.lwz r5,0x0(r5)
		pintc_regs->mask |= (mask << intno);
    4674:	e0 64 18 08 	l.sll r3,r4,r3
{
	/* intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);
	/* enable interrupt which number is intno */
	if (intno <= 31) {
		pintc_regs->mask &= ~(1 << intno);
    4678:	84 e5 00 50 	l.lwz r7,0x50(r5)
    467c:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4680:	e0 c6 38 03 	l.and r6,r6,r7
    4684:	d4 05 30 50 	l.sw 0x50(r5),r6
		pintc_regs->mask |= (mask << intno);
    4688:	84 c5 00 50 	l.lwz r6,0x50(r5)
    468c:	e0 63 30 04 	l.or r3,r3,r6
    4690:	d4 05 18 50 	l.sw 0x50(r5),r3
		pintc_regs->mask2 &= ~(1 << (intno - 64));
		pintc_regs->mask2 |= (mask << intno);
	}

	return OK;
}
    4694:	00 00 00 1f 	l.j 4710 <intc_set_mask+0xbc>
    4698:	9d 60 00 00 	l.addi r11,r0,0x0
    469c:	18 a0 00 01 	l.movhi r5,0x1
	ASSERT(intno < IRQ_SOUCE_MAX);
	/* enable interrupt which number is intno */
	if (intno <= 31) {
		pintc_regs->mask &= ~(1 << intno);
		pintc_regs->mask |= (mask << intno);
	} else if (intno > 31 && intno <= 63) {
    46a0:	bc 46 00 1f 	l.sfgtui r6,0x1f
    46a4:	a8 a5 35 8c 	l.ori r5,r5,0x358c
    46a8:	10 00 00 0e 	l.bf 46e0 <intc_set_mask+0x8c>
    46ac:	e0 84 18 08 	l.sll r4,r4,r3
		pintc_regs->mask1 &= ~(1 << (intno - 32));
    46b0:	9c e0 00 01 	l.addi r7,r0,0x1
    46b4:	84 a5 00 00 	l.lwz r5,0x0(r5)
    46b8:	e0 c7 30 08 	l.sll r6,r7,r6
    46bc:	84 65 00 54 	l.lwz r3,0x54(r5)
    46c0:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    46c4:	e0 c6 18 03 	l.and r6,r6,r3
    46c8:	d4 05 30 54 	l.sw 0x54(r5),r6
		pintc_regs->mask1 |= (mask << intno);
    46cc:	84 65 00 54 	l.lwz r3,0x54(r5)
    46d0:	e0 84 18 04 	l.or r4,r4,r3
    46d4:	d4 05 20 54 	l.sw 0x54(r5),r4
		pintc_regs->mask2 &= ~(1 << (intno - 64));
		pintc_regs->mask2 |= (mask << intno);
	}

	return OK;
}
    46d8:	00 00 00 0e 	l.j 4710 <intc_set_mask+0xbc>
    46dc:	9d 60 00 00 	l.addi r11,r0,0x0
		pintc_regs->mask |= (mask << intno);
	} else if (intno > 31 && intno <= 63) {
		pintc_regs->mask1 &= ~(1 << (intno - 32));
		pintc_regs->mask1 |= (mask << intno);
	} else {
		pintc_regs->mask2 &= ~(1 << (intno - 64));
    46e0:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    46e4:	9c e0 00 01 	l.addi r7,r0,0x1
    46e8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    46ec:	e0 67 18 08 	l.sll r3,r7,r3
    46f0:	84 c5 00 58 	l.lwz r6,0x58(r5)
    46f4:	ac 63 ff ff 	l.xori r3,r3,0xffffffff
    46f8:	e0 63 30 03 	l.and r3,r3,r6
    46fc:	d4 05 18 58 	l.sw 0x58(r5),r3
		pintc_regs->mask2 |= (mask << intno);
    4700:	84 65 00 58 	l.lwz r3,0x58(r5)
    4704:	e0 84 18 04 	l.or r4,r4,r3
    4708:	d4 05 20 58 	l.sw 0x58(r5),r4
	}

	return OK;
}
    470c:	9d 60 00 00 	l.addi r11,r0,0x0
    4710:	44 00 48 00 	l.jr r9
    4714:	15 00 00 00 	l.nop 0x0

00004718 <intc_set_group_config>:

s32 intc_set_group_config(u32 grp_irq_num, u32 mask)
{
	if (grp_irq_num <= 31) {
    4718:	bc 43 00 1f 	l.sfgtui r3,0x1f
    471c:	10 00 00 11 	l.bf 4760 <intc_set_group_config+0x48>
    4720:	9c c3 ff e0 	l.addi r6,r3,0xffffffe0
		pintc_regs->group_config0 &= ~(1 << grp_irq_num);
    4724:	18 a0 00 01 	l.movhi r5,0x1
    4728:	9c c0 00 01 	l.addi r6,r0,0x1
    472c:	a8 a5 35 8c 	l.ori r5,r5,0x358c
    4730:	e0 c6 18 08 	l.sll r6,r6,r3
    4734:	84 a5 00 00 	l.lwz r5,0x0(r5)
		pintc_regs->group_config0 |= (mask << grp_irq_num);
    4738:	e0 64 18 08 	l.sll r3,r4,r3
}

s32 intc_set_group_config(u32 grp_irq_num, u32 mask)
{
	if (grp_irq_num <= 31) {
		pintc_regs->group_config0 &= ~(1 << grp_irq_num);
    473c:	84 e5 00 c0 	l.lwz r7,0xc0(r5)
    4740:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4744:	e0 c6 38 03 	l.and r6,r6,r7
    4748:	d4 05 30 c0 	l.sw 0xc0(r5),r6
		pintc_regs->group_config0 |= (mask << grp_irq_num);
    474c:	84 c5 00 c0 	l.lwz r6,0xc0(r5)
    4750:	e0 63 30 04 	l.or r3,r3,r6
    4754:	d4 05 18 c0 	l.sw 0xc0(r5),r3
		pintc_regs->group_config3 &= ~(1 << (grp_irq_num - 64));
		pintc_regs->group_config3 |= (mask << grp_irq_num);
	}

	return OK;
}
    4758:	00 00 00 2f 	l.j 4814 <intc_set_group_config+0xfc>
    475c:	9d 60 00 00 	l.addi r11,r0,0x0
s32 intc_set_group_config(u32 grp_irq_num, u32 mask)
{
	if (grp_irq_num <= 31) {
		pintc_regs->group_config0 &= ~(1 << grp_irq_num);
		pintc_regs->group_config0 |= (mask << grp_irq_num);
	} else if (grp_irq_num > 31 && grp_irq_num <= 63) {
    4760:	bc 46 00 1f 	l.sfgtui r6,0x1f
    4764:	10 00 00 10 	l.bf 47a4 <intc_set_group_config+0x8c>
    4768:	18 a0 00 01 	l.movhi r5,0x1
		pintc_regs->group_config1 &= ~(1 << (grp_irq_num - 32));
    476c:	9d 00 00 01 	l.addi r8,r0,0x1
    4770:	a8 a5 35 8c 	l.ori r5,r5,0x358c
    4774:	e0 c8 30 08 	l.sll r6,r8,r6
    4778:	84 a5 00 00 	l.lwz r5,0x0(r5)
		pintc_regs->group_config1 |= (mask << grp_irq_num);
    477c:	e0 64 18 08 	l.sll r3,r4,r3
{
	if (grp_irq_num <= 31) {
		pintc_regs->group_config0 &= ~(1 << grp_irq_num);
		pintc_regs->group_config0 |= (mask << grp_irq_num);
	} else if (grp_irq_num > 31 && grp_irq_num <= 63) {
		pintc_regs->group_config1 &= ~(1 << (grp_irq_num - 32));
    4780:	84 e5 00 c4 	l.lwz r7,0xc4(r5)
    4784:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4788:	e0 c6 38 03 	l.and r6,r6,r7
    478c:	d4 05 30 c4 	l.sw 0xc4(r5),r6
		pintc_regs->group_config1 |= (mask << grp_irq_num);
    4790:	84 c5 00 c4 	l.lwz r6,0xc4(r5)
    4794:	e0 63 30 04 	l.or r3,r3,r6
    4798:	d4 05 18 c4 	l.sw 0xc4(r5),r3
		pintc_regs->group_config3 &= ~(1 << (grp_irq_num - 64));
		pintc_regs->group_config3 |= (mask << grp_irq_num);
	}

	return OK;
}
    479c:	00 00 00 1e 	l.j 4814 <intc_set_group_config+0xfc>
    47a0:	9d 60 00 00 	l.addi r11,r0,0x0
		pintc_regs->group_config0 &= ~(1 << grp_irq_num);
		pintc_regs->group_config0 |= (mask << grp_irq_num);
	} else if (grp_irq_num > 31 && grp_irq_num <= 63) {
		pintc_regs->group_config1 &= ~(1 << (grp_irq_num - 32));
		pintc_regs->group_config1 |= (mask << grp_irq_num);
	} else if (grp_irq_num > 63 && grp_irq_num <= 95) {
    47a4:	9c c3 ff c0 	l.addi r6,r3,0xffffffc0
    47a8:	bc 46 00 1f 	l.sfgtui r6,0x1f
    47ac:	a8 a5 35 8c 	l.ori r5,r5,0x358c
    47b0:	10 00 00 0e 	l.bf 47e8 <intc_set_group_config+0xd0>
    47b4:	e0 64 18 08 	l.sll r3,r4,r3
		pintc_regs->group_config2 &= ~(1 << (grp_irq_num - 64));
    47b8:	9c e0 00 01 	l.addi r7,r0,0x1
    47bc:	84 a5 00 00 	l.lwz r5,0x0(r5)
    47c0:	e0 c7 30 08 	l.sll r6,r7,r6
    47c4:	84 85 00 c8 	l.lwz r4,0xc8(r5)
    47c8:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    47cc:	e0 c6 20 03 	l.and r6,r6,r4
    47d0:	d4 05 30 c8 	l.sw 0xc8(r5),r6
		pintc_regs->group_config2 |= (mask << grp_irq_num);
    47d4:	84 85 00 c8 	l.lwz r4,0xc8(r5)
    47d8:	e0 63 20 04 	l.or r3,r3,r4
    47dc:	d4 05 18 c8 	l.sw 0xc8(r5),r3
		pintc_regs->group_config3 &= ~(1 << (grp_irq_num - 64));
		pintc_regs->group_config3 |= (mask << grp_irq_num);
	}

	return OK;
}
    47e0:	00 00 00 0d 	l.j 4814 <intc_set_group_config+0xfc>
    47e4:	9d 60 00 00 	l.addi r11,r0,0x0
		pintc_regs->group_config1 |= (mask << grp_irq_num);
	} else if (grp_irq_num > 63 && grp_irq_num <= 95) {
		pintc_regs->group_config2 &= ~(1 << (grp_irq_num - 64));
		pintc_regs->group_config2 |= (mask << grp_irq_num);
	} else {
		pintc_regs->group_config3 &= ~(1 << (grp_irq_num - 64));
    47e8:	9c e0 00 01 	l.addi r7,r0,0x1
    47ec:	84 a5 00 00 	l.lwz r5,0x0(r5)
    47f0:	e0 c7 30 08 	l.sll r6,r7,r6
    47f4:	84 85 00 cc 	l.lwz r4,0xcc(r5)
    47f8:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    47fc:	e0 c6 20 03 	l.and r6,r6,r4
    4800:	d4 05 30 cc 	l.sw 0xcc(r5),r6
		pintc_regs->group_config3 |= (mask << grp_irq_num);
    4804:	84 85 00 cc 	l.lwz r4,0xcc(r5)
    4808:	e0 63 20 04 	l.or r3,r3,r4
    480c:	d4 05 18 cc 	l.sw 0xcc(r5),r3
	}

	return OK;
}
    4810:	9d 60 00 00 	l.addi r11,r0,0x0
    4814:	44 00 48 00 	l.jr r9
    4818:	15 00 00 00 	l.nop 0x0

0000481c <isr_default>:
		pintc_regs->pending = (1 << (intno - 64));
	return OK;
}

s32 isr_default(void *arg)
{
    481c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	ERR("irq [%x] enable before ISR install\n",
    4820:	07 ff ff 83 	l.jal 462c <intc_get_current_interrupt>
    4824:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    4828:	18 80 00 01 	l.movhi r4,0x1
    482c:	9c 60 00 08 	l.addi r3,r0,0x8
    4830:	a8 84 22 a0 	l.ori r4,r4,0x22a0
    4834:	04 00 17 e9 	l.jal a7d8 <debugger_printf>
    4838:	d4 01 58 00 	l.sw 0x0(r1),r11
	    intc_get_current_interrupt());

	return TRUE;
}
    483c:	9c 21 00 08 	l.addi r1,r1,0x8
    4840:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4844:	44 00 48 00 	l.jr r9
    4848:	9d 60 00 01 	l.addi r11,r0,0x1

0000484c <interrupt_init>:
*
* Returns    :  OK if initialize interrupt manager succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_init(void)
{
    484c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4850:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	s32 index;

	/*initialize interrupt controller */
	intc_init();
    4854:	07 ff fe e7 	l.jal 43f0 <intc_init>
    4858:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    485c:	18 60 00 01 	l.movhi r3,0x1

	/*initialize ISR table */
	for (index = 0; index < IRQ_SOUCE_MAX; index++) {
		isr_table[index].pisr = isr_default;
    4860:	18 80 00 00 	l.movhi r4,0x0
s32 interrupt_init(void)
{
	s32 index;

	/*initialize interrupt controller */
	intc_init();
    4864:	a8 63 35 94 	l.ori r3,r3,0x3594

	/*initialize ISR table */
	for (index = 0; index < IRQ_SOUCE_MAX; index++) {
		isr_table[index].pisr = isr_default;
    4868:	a8 84 48 1c 	l.ori r4,r4,0x481c
		isr_table[index].parg = NULL;
    486c:	9c 40 00 00 	l.addi r2,r0,0x0
	/*initialize interrupt controller */
	intc_init();

	/*initialize ISR table */
	for (index = 0; index < IRQ_SOUCE_MAX; index++) {
		isr_table[index].pisr = isr_default;
    4870:	d4 03 20 00 	l.sw 0x0(r3),r4
		isr_table[index].parg = NULL;
    4874:	d4 03 10 04 	l.sw 0x4(r3),r2

	/*initialize interrupt controller */
	intc_init();

	/*initialize ISR table */
	for (index = 0; index < IRQ_SOUCE_MAX; index++) {
    4878:	18 40 00 01 	l.movhi r2,0x1
		isr_table[index].pisr = isr_default;
		isr_table[index].parg = NULL;
    487c:	9c 63 00 08 	l.addi r3,r3,0x8

	/*initialize interrupt controller */
	intc_init();

	/*initialize ISR table */
	for (index = 0; index < IRQ_SOUCE_MAX; index++) {
    4880:	a8 42 36 bc 	l.ori r2,r2,0x36bc
    4884:	e4 23 10 00 	l.sfne r3,r2
    4888:	13 ff ff f9 	l.bf 486c <interrupt_init+0x20>
    488c:	9d 60 00 00 	l.addi r11,r0,0x0
		isr_table[index].parg = NULL;
	}

	/*interrupt manager initialize succeeded */
	return OK;
}
    4890:	9c 21 00 08 	l.addi r1,r1,0x8
    4894:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4898:	44 00 48 00 	l.jr r9
    489c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000048a0 <interrupt_exit>:
*
* Returns    :  OK if exit interrupt manager succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_exit(void)
{
    48a0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	intc_exit();
    48a4:	07 ff fe e9 	l.jal 4448 <intc_exit>
    48a8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	return OK;
}
    48ac:	9c 21 00 04 	l.addi r1,r1,0x4
    48b0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    48b4:	44 00 48 00 	l.jr r9
    48b8:	9d 60 00 00 	l.addi r11,r0,0x0

000048bc <interrupt_enable>:
*
* Returns    :  OK if enable interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_enable(u32 intno)
{
    48bc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    48c0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_enable_interrupt(intno);
}
    48c4:	9c 21 00 04 	l.addi r1,r1,0x4
    48c8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
* Returns    :  OK if enable interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_enable(u32 intno)
{
	return intc_enable_interrupt(intno);
    48cc:	03 ff fe e9 	l.j 4470 <intc_enable_interrupt>
    48d0:	15 00 00 00 	l.nop 0x0

000048d4 <interrupt_disable>:
*
* Returns    :  OK if disable interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_disable(u32 intno)
{
    48d4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    48d8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_disable_interrupt(intno);
}
    48dc:	9c 21 00 04 	l.addi r1,r1,0x4
    48e0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
* Returns    :  OK if disable interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_disable(u32 intno)
{
	return intc_disable_interrupt(intno);
    48e4:	03 ff ff 0f 	l.j 4520 <intc_disable_interrupt>
    48e8:	15 00 00 00 	l.nop 0x0

000048ec <interrupt_set_nmi_trigger>:
*/
s32 interrupt_set_nmi_trigger(u32 type)
{
	u32 value;

	pintc_regs->control = type;
    48ec:	18 80 00 01 	l.movhi r4,0x1
	value = pintc_regs->mask;
	value |= 0x1;
	pintc_regs->mask = value;

	return OK;
}
    48f0:	9d 60 00 00 	l.addi r11,r0,0x0
*/
s32 interrupt_set_nmi_trigger(u32 type)
{
	u32 value;

	pintc_regs->control = type;
    48f4:	a8 84 35 8c 	l.ori r4,r4,0x358c
    48f8:	84 84 00 00 	l.lwz r4,0x0(r4)
    48fc:	d4 04 18 0c 	l.sw 0xc(r4),r3

	/*mask cpus nmi irq */
	value = pintc_regs->mask;
    4900:	84 64 00 50 	l.lwz r3,0x50(r4)
	value |= 0x1;
    4904:	a8 63 00 01 	l.ori r3,r3,0x1
	pintc_regs->mask = value;
    4908:	d4 04 18 50 	l.sw 0x50(r4),r3

	return OK;
}
    490c:	44 00 48 00 	l.jr r9
    4910:	15 00 00 00 	l.nop 0x0

00004914 <interrupt_set_mask>:

s32 interrupt_set_mask(u32 intno, u32 mask)
{
    4914:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4918:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_set_mask(intno, mask);
}
    491c:	9c 21 00 04 	l.addi r1,r1,0x4
    4920:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	return OK;
}

s32 interrupt_set_mask(u32 intno, u32 mask)
{
	return intc_set_mask(intno, mask);
    4924:	03 ff ff 4c 	l.j 4654 <intc_set_mask>
    4928:	15 00 00 00 	l.nop 0x0

0000492c <interrupt_set_group_config>:
}

s32 interrupt_set_group_config(u32 grp_irq_num, u32 mask)
{
    492c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4930:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_set_group_config(grp_irq_num, mask);
}
    4934:	9c 21 00 04 	l.addi r1,r1,0x4
    4938:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	return intc_set_mask(intno, mask);
}

s32 interrupt_set_group_config(u32 grp_irq_num, u32 mask)
{
	return intc_set_group_config(grp_irq_num, mask);
    493c:	03 ff ff 77 	l.j 4718 <intc_set_group_config>
    4940:	15 00 00 00 	l.nop 0x0

00004944 <install_isr>:
*
* Note       :  the ISR execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
s32 install_isr(u32 intno, __pISR_t pisr, void *parg)
{
    4944:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	/*default isr, install directly */
	INF("install isr %x\n", intno);
	isr_table[intno].pisr = pisr;
    4948:	18 40 00 01 	l.movhi r2,0x1
    494c:	b8 63 00 03 	l.slli r3,r3,0x3
    4950:	a8 42 35 94 	l.ori r2,r2,0x3594
*
* Note       :  the ISR execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
s32 install_isr(u32 intno, __pISR_t pisr, void *parg)
{
    4954:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	/*default isr, install directly */
	INF("install isr %x\n", intno);
	isr_table[intno].pisr = pisr;
    4958:	e0 63 10 00 	l.add r3,r3,r2
	isr_table[intno].parg = parg;

	return OK;
}
    495c:	9d 60 00 00 	l.addi r11,r0,0x0
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	/*default isr, install directly */
	INF("install isr %x\n", intno);
	isr_table[intno].pisr = pisr;
    4960:	d4 03 20 00 	l.sw 0x0(r3),r4
	isr_table[intno].parg = parg;
    4964:	d4 03 28 04 	l.sw 0x4(r3),r5

	return OK;
}
    4968:	9c 21 00 04 	l.addi r1,r1,0x4
    496c:	44 00 48 00 	l.jr r9
    4970:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004974 <uninstall_isr>:
*
* Returns    :  OK if uninstall ISR succeeded, others if failed.
*********************************************************************************************************
*/
s32 uninstall_isr(u32 intno, __pISR_t pisr)
{
    4974:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	if (isr_table[intno].pisr == pisr) {
    4978:	18 40 00 01 	l.movhi r2,0x1
    497c:	b8 63 00 03 	l.slli r3,r3,0x3
    4980:	a8 42 35 94 	l.ori r2,r2,0x3594
*
* Returns    :  OK if uninstall ISR succeeded, others if failed.
*********************************************************************************************************
*/
s32 uninstall_isr(u32 intno, __pISR_t pisr)
{
    4984:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	if (isr_table[intno].pisr == pisr) {
    4988:	e0 63 10 00 	l.add r3,r3,r2
    498c:	84 a3 00 00 	l.lwz r5,0x0(r3)
    4990:	e4 25 20 00 	l.sfne r5,r4
    4994:	10 00 00 09 	l.bf 49b8 <uninstall_isr+0x44>
    4998:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
		/*uninstall isr */
		isr_table[intno].pisr = isr_default;
    499c:	18 80 00 00 	l.movhi r4,0x0
		isr_table[intno].parg = NULL;
    49a0:	9c 40 00 00 	l.addi r2,r0,0x0
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	if (isr_table[intno].pisr == pisr) {
		/*uninstall isr */
		isr_table[intno].pisr = isr_default;
    49a4:	a8 84 48 1c 	l.ori r4,r4,0x481c
		isr_table[intno].parg = NULL;
    49a8:	d4 03 10 04 	l.sw 0x4(r3),r2
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	if (isr_table[intno].pisr == pisr) {
		/*uninstall isr */
		isr_table[intno].pisr = isr_default;
    49ac:	d4 03 20 00 	l.sw 0x0(r3),r4
		 */
		ERR("ISR not installed!\n");
		return -EFAIL;
	}

	return OK;
    49b0:	00 00 00 07 	l.j 49cc <uninstall_isr+0x58>
    49b4:	a9 62 00 00 	l.ori r11,r2,0x0
	} else {
		/*
		 * don't support shared interrupt now,
		 * by sunny at 2012-5-3 11:20:28.
		 */
		ERR("ISR not installed!\n");
    49b8:	18 80 00 01 	l.movhi r4,0x1
    49bc:	9c 60 00 08 	l.addi r3,r0,0x8
    49c0:	04 00 17 86 	l.jal a7d8 <debugger_printf>
    49c4:	a8 84 22 c8 	l.ori r4,r4,0x22c8
		return -EFAIL;
    49c8:	9d 60 ff dc 	l.addi r11,r0,0xffffffdc
	}

	return OK;
}
    49cc:	9c 21 00 08 	l.addi r1,r1,0x8
    49d0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    49d4:	44 00 48 00 	l.jr r9
    49d8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000049dc <interrupt_entry>:
*
* Returns    :  OK if process CPU IRQ succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_entry(void)
{
    49dc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    49e0:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    49e4:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	u32 intno = intc_get_current_interrupt();
    49e8:	07 ff ff 11 	l.jal 462c <intc_get_current_interrupt>
    49ec:	18 40 00 01 	l.movhi r2,0x1

	/*
	 * process interrupt by call isr,
	 * not support shared intterrupt.
	 */
	(isr_table[intno].pisr) (isr_table[intno].parg);
    49f0:	b8 6b 00 03 	l.slli r3,r11,0x3
    49f4:	a8 42 35 94 	l.ori r2,r2,0x3594
    49f8:	e0 63 10 00 	l.add r3,r3,r2
    49fc:	85 63 00 00 	l.lwz r11,0x0(r3)
    4a00:	48 00 58 00 	l.jalr r11
    4a04:	84 63 00 04 	l.lwz r3,0x4(r3)

	return OK;
}
    4a08:	9c 21 00 08 	l.addi r1,r1,0x8
    4a0c:	9d 60 00 00 	l.addi r11,r0,0x0
    4a10:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4a14:	44 00 48 00 	l.jr r9
    4a18:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00004a1c <interrupt_query_pending>:

s32 interrupt_query_pending(u32 intno)
{
	volatile u32 pending;

	if (intno <= 31)
    4a1c:	bc 43 00 1f 	l.sfgtui r3,0x1f
    4a20:	10 00 00 08 	l.bf 4a40 <interrupt_query_pending+0x24>
    4a24:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		pending = pintc_regs->pending & (1 << intno);
    4a28:	18 80 00 01 	l.movhi r4,0x1
    4a2c:	a8 84 35 8c 	l.ori r4,r4,0x358c
    4a30:	84 84 00 00 	l.lwz r4,0x0(r4)
    4a34:	84 84 00 10 	l.lwz r4,0x10(r4)
	else if (intno > 31 && intno <= 63)
		pending = pintc_regs->pending1 & (1 << (intno - 32));
	else
		pending = pintc_regs->pending2 & (1 << (intno - 64));
    4a38:	00 00 00 13 	l.j 4a84 <interrupt_query_pending+0x68>
    4a3c:	9c a0 00 01 	l.addi r5,r0,0x1
{
	volatile u32 pending;

	if (intno <= 31)
		pending = pintc_regs->pending & (1 << intno);
	else if (intno > 31 && intno <= 63)
    4a40:	9c a3 ff e0 	l.addi r5,r3,0xffffffe0
    4a44:	18 80 00 01 	l.movhi r4,0x1
    4a48:	bc 45 00 1f 	l.sfgtui r5,0x1f
    4a4c:	10 00 00 0a 	l.bf 4a74 <interrupt_query_pending+0x58>
    4a50:	a8 84 35 8c 	l.ori r4,r4,0x358c
		pending = pintc_regs->pending1 & (1 << (intno - 32));
    4a54:	84 64 00 00 	l.lwz r3,0x0(r4)
    4a58:	9c 80 00 01 	l.addi r4,r0,0x1
    4a5c:	84 63 00 14 	l.lwz r3,0x14(r3)
    4a60:	e0 a4 28 08 	l.sll r5,r4,r5
    4a64:	e0 a5 18 03 	l.and r5,r5,r3
    4a68:	d4 01 28 00 	l.sw 0x0(r1),r5
    4a6c:	00 00 00 09 	l.j 4a90 <interrupt_query_pending+0x74>
    4a70:	15 00 00 00 	l.nop 0x0
	else
		pending = pintc_regs->pending2 & (1 << (intno - 64));
    4a74:	84 84 00 00 	l.lwz r4,0x0(r4)
    4a78:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    4a7c:	84 84 00 18 	l.lwz r4,0x18(r4)
    4a80:	9c a0 00 01 	l.addi r5,r0,0x1
    4a84:	e0 65 18 08 	l.sll r3,r5,r3
    4a88:	e0 63 20 03 	l.and r3,r3,r4
    4a8c:	d4 01 18 00 	l.sw 0x0(r1),r3
	return pending;
}
    4a90:	85 61 00 00 	l.lwz r11,0x0(r1)
    4a94:	44 00 48 00 	l.jr r9
    4a98:	9c 21 00 04 	l.addi r1,r1,0x4

00004a9c <interrupt_clear_pending>:

s32 interrupt_clear_pending(u32 intno)
{
	if (intno <= 31)
    4a9c:	bc 43 00 1f 	l.sfgtui r3,0x1f
    4aa0:	10 00 00 06 	l.bf 4ab8 <interrupt_clear_pending+0x1c>
    4aa4:	9c a3 ff e0 	l.addi r5,r3,0xffffffe0
		pintc_regs->pending = (1 << intno);
    4aa8:	18 80 00 01 	l.movhi r4,0x1
    4aac:	a8 84 35 8c 	l.ori r4,r4,0x358c
    4ab0:	00 00 00 0e 	l.j 4ae8 <interrupt_clear_pending+0x4c>
    4ab4:	84 84 00 00 	l.lwz r4,0x0(r4)
    4ab8:	18 80 00 01 	l.movhi r4,0x1
	else if (intno > 31 && intno <= 63)
    4abc:	bc 45 00 1f 	l.sfgtui r5,0x1f
    4ac0:	10 00 00 08 	l.bf 4ae0 <interrupt_clear_pending+0x44>
    4ac4:	a8 84 35 8c 	l.ori r4,r4,0x358c
		pintc_regs->pending = (1 << (intno - 32));
    4ac8:	84 64 00 00 	l.lwz r3,0x0(r4)
    4acc:	9c 80 00 01 	l.addi r4,r0,0x1
    4ad0:	e0 a4 28 08 	l.sll r5,r4,r5
    4ad4:	d4 03 28 10 	l.sw 0x10(r3),r5
	else
		pintc_regs->pending = (1 << (intno - 64));
	return OK;
}
    4ad8:	00 00 00 08 	l.j 4af8 <interrupt_clear_pending+0x5c>
    4adc:	9d 60 00 00 	l.addi r11,r0,0x0
	if (intno <= 31)
		pintc_regs->pending = (1 << intno);
	else if (intno > 31 && intno <= 63)
		pintc_regs->pending = (1 << (intno - 32));
	else
		pintc_regs->pending = (1 << (intno - 64));
    4ae0:	84 84 00 00 	l.lwz r4,0x0(r4)
    4ae4:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    4ae8:	9c a0 00 01 	l.addi r5,r0,0x1
    4aec:	e0 65 18 08 	l.sll r3,r5,r3
    4af0:	d4 04 18 10 	l.sw 0x10(r4),r3
	return OK;
}
    4af4:	9d 60 00 00 	l.addi r11,r0,0x0
    4af8:	44 00 48 00 	l.jr r9
    4afc:	15 00 00 00 	l.nop 0x0

00004b00 <interrupt_get_current_intno>:

	return TRUE;
}

u32 interrupt_get_current_intno(void)
{
    4b00:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4b04:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_get_current_interrupt();
}
    4b08:	9c 21 00 04 	l.addi r1,r1,0x4
    4b0c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	return TRUE;
}

u32 interrupt_get_current_intno(void)
{
	return intc_get_current_interrupt();
    4b10:	03 ff fe c7 	l.j 462c <intc_get_current_interrupt>
    4b14:	15 00 00 00 	l.nop 0x0

00004b18 <interrupt_get_enabled>:
}

s32 interrupt_get_enabled(u32 intno)
{
    4b18:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4b1c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_interrupt_is_enabled(intno);
}
    4b20:	9c 21 00 04 	l.addi r1,r1,0x4
    4b24:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	return intc_get_current_interrupt();
}

s32 interrupt_get_enabled(u32 intno)
{
	return intc_interrupt_is_enabled(intno);
    4b28:	03 ff fe a4 	l.j 45b8 <intc_interrupt_is_enabled>
    4b2c:	15 00 00 00 	l.nop 0x0

00004b30 <pin_init>:
*********************************************************************************************************
*/
s32 pin_init(void)
{
	return OK;
}
    4b30:	44 00 48 00 	l.jr r9
    4b34:	9d 60 00 00 	l.addi r11,r0,0x0

00004b38 <pin_exit>:
*********************************************************************************************************
*/
s32 pin_exit(void)
{
	return OK;
}
    4b38:	44 00 48 00 	l.jr r9
    4b3c:	9d 60 00 00 	l.addi r11,r0,0x0

00004b40 <pin_set_status>:
*********************************************************************************************************
*/
s32 pin_set_status(u32 pin_grp, u32 pin_num, struct pin_status *pstatus)
{
	return OK;
}
    4b40:	44 00 48 00 	l.jr r9
    4b44:	9d 60 00 00 	l.addi r11,r0,0x0

00004b48 <pin_set_multi_sel>:
{
	volatile u32 *addr;
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
    4b48:	b8 c3 00 03 	l.slli r6,r3,0x3
*
* Returns    :  OK if set pin multi-select succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_multi_sel(u32 pin_grp, u32 pin_num, u32 multi_sel)
{
    4b4c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 *addr;
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
    4b50:	18 40 01 c0 	l.movhi r2,0x1c0
    4b54:	e0 66 18 00 	l.add r3,r6,r3
    4b58:	a8 42 87 f7 	l.ori r2,r2,0x87f7
    4b5c:	b8 c4 00 43 	l.srli r6,r4,0x3
    4b60:	e0 63 10 00 	l.add r3,r3,r2
	value = *addr;
	value &= ~(0x7 << ((pin_num & 0x7) * 4));
    4b64:	a4 84 00 07 	l.andi r4,r4,0x7
{
	volatile u32 *addr;
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
    4b68:	e0 63 30 00 	l.add r3,r3,r6
*
* Returns    :  OK if set pin multi-select succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_multi_sel(u32 pin_grp, u32 pin_num, u32 multi_sel)
{
    4b6c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 *addr;
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
    4b70:	b8 63 00 02 	l.slli r3,r3,0x2
	value = *addr;
	value &= ~(0x7 << ((pin_num & 0x7) * 4));
    4b74:	b8 84 00 02 	l.slli r4,r4,0x2
	value |= (multi_sel << ((pin_num & 0x7) * 4));
	*addr = value;

	return OK;
}
    4b78:	9d 60 00 00 	l.addi r11,r0,0x0
	volatile u32 *addr;
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
	value = *addr;
    4b7c:	84 c3 00 00 	l.lwz r6,0x0(r3)
    4b80:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(0x7 << ((pin_num & 0x7) * 4));
    4b84:	9c c0 00 07 	l.addi r6,r0,0x7
    4b88:	84 e1 00 00 	l.lwz r7,0x0(r1)
    4b8c:	e0 c6 20 08 	l.sll r6,r6,r4
	value |= (multi_sel << ((pin_num & 0x7) * 4));
    4b90:	e0 85 20 08 	l.sll r4,r5,r4
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
	value = *addr;
	value &= ~(0x7 << ((pin_num & 0x7) * 4));
    4b94:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4b98:	e0 c6 38 03 	l.and r6,r6,r7
    4b9c:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |= (multi_sel << ((pin_num & 0x7) * 4));
    4ba0:	84 c1 00 00 	l.lwz r6,0x0(r1)
    4ba4:	e0 84 30 04 	l.or r4,r4,r6
    4ba8:	d4 01 20 00 	l.sw 0x0(r1),r4
	*addr = value;
    4bac:	84 81 00 00 	l.lwz r4,0x0(r1)
    4bb0:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    4bb4:	9c 21 00 08 	l.addi r1,r1,0x8
    4bb8:	44 00 48 00 	l.jr r9
    4bbc:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004bc0 <pin_set_pull>:
{
	volatile u32 *addr;
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
    4bc0:	b8 c3 00 03 	l.slli r6,r3,0x3
*
* Returns    :  OK if set pin pull succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_pull(u32 pin_grp, u32 pin_num, u32 pull)
{
    4bc4:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 *addr;
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
    4bc8:	18 40 01 c0 	l.movhi r2,0x1c0
    4bcc:	e0 66 18 00 	l.add r3,r6,r3
    4bd0:	a8 42 87 fe 	l.ori r2,r2,0x87fe
    4bd4:	b8 c4 00 44 	l.srli r6,r4,0x4
    4bd8:	e0 63 10 00 	l.add r3,r3,r2
*
* Returns    :  OK if set pin pull succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_pull(u32 pin_grp, u32 pin_num, u32 pull)
{
    4bdc:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 *addr;
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
    4be0:	e0 63 30 00 	l.add r3,r3,r6
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    4be4:	a4 84 00 0f 	l.andi r4,r4,0xf
{
	volatile u32 *addr;
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
    4be8:	b8 63 00 02 	l.slli r3,r3,0x2
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    4bec:	e0 84 20 00 	l.add r4,r4,r4
	value |= (pull << ((pin_num & 0xf) * 2));

	*addr = value;

	return OK;
}
    4bf0:	9d 60 00 00 	l.addi r11,r0,0x0
	volatile u32 *addr;
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
	value = *addr;
    4bf4:	84 c3 00 00 	l.lwz r6,0x0(r3)
    4bf8:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    4bfc:	9c c0 00 03 	l.addi r6,r0,0x3
    4c00:	84 e1 00 00 	l.lwz r7,0x0(r1)
    4c04:	e0 c6 20 08 	l.sll r6,r6,r4
	value |= (pull << ((pin_num & 0xf) * 2));
    4c08:	e0 85 20 08 	l.sll r4,r5,r4
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    4c0c:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4c10:	e0 c6 38 03 	l.and r6,r6,r7
    4c14:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |= (pull << ((pin_num & 0xf) * 2));
    4c18:	84 c1 00 00 	l.lwz r6,0x0(r1)
    4c1c:	e0 84 30 04 	l.or r4,r4,r6
    4c20:	d4 01 20 00 	l.sw 0x0(r1),r4

	*addr = value;
    4c24:	84 81 00 00 	l.lwz r4,0x0(r1)
    4c28:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    4c2c:	9c 21 00 08 	l.addi r1,r1,0x8
    4c30:	44 00 48 00 	l.jr r9
    4c34:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004c38 <pin_set_drive>:
{
	volatile u32 *addr;
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
    4c38:	b8 c3 00 03 	l.slli r6,r3,0x3
*
* Returns    :  OK if set pin drive succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_drive(u32 pin_grp, u32 pin_num, u32 drive)
{
    4c3c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 *addr;
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
    4c40:	18 40 01 c0 	l.movhi r2,0x1c0
    4c44:	e0 66 18 00 	l.add r3,r6,r3
    4c48:	a8 42 87 fc 	l.ori r2,r2,0x87fc
    4c4c:	b8 c4 00 44 	l.srli r6,r4,0x4
    4c50:	e0 63 10 00 	l.add r3,r3,r2
*
* Returns    :  OK if set pin drive succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_drive(u32 pin_grp, u32 pin_num, u32 drive)
{
    4c54:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 *addr;
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
    4c58:	e0 63 30 00 	l.add r3,r3,r6
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    4c5c:	a4 84 00 0f 	l.andi r4,r4,0xf
{
	volatile u32 *addr;
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
    4c60:	b8 63 00 02 	l.slli r3,r3,0x2
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    4c64:	e0 84 20 00 	l.add r4,r4,r4
	value |= (drive << ((pin_num & 0xf) * 2));

	*addr = value;

	return OK;
}
    4c68:	9d 60 00 00 	l.addi r11,r0,0x0
	volatile u32 *addr;
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
	value = *addr;
    4c6c:	84 c3 00 00 	l.lwz r6,0x0(r3)
    4c70:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    4c74:	9c c0 00 03 	l.addi r6,r0,0x3
    4c78:	84 e1 00 00 	l.lwz r7,0x0(r1)
    4c7c:	e0 c6 20 08 	l.sll r6,r6,r4
	value |= (drive << ((pin_num & 0xf) * 2));
    4c80:	e0 85 20 08 	l.sll r4,r5,r4
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    4c84:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4c88:	e0 c6 38 03 	l.and r6,r6,r7
    4c8c:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |= (drive << ((pin_num & 0xf) * 2));
    4c90:	84 c1 00 00 	l.lwz r6,0x0(r1)
    4c94:	e0 84 30 04 	l.or r4,r4,r6
    4c98:	d4 01 20 00 	l.sw 0x0(r1),r4

	*addr = value;
    4c9c:	84 81 00 00 	l.lwz r4,0x0(r1)
    4ca0:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    4ca4:	9c 21 00 08 	l.addi r1,r1,0x8
    4ca8:	44 00 48 00 	l.jr r9
    4cac:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004cb0 <pin_write_data>:
{
	volatile u32 *addr;
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
    4cb0:	b8 c3 00 02 	l.slli r6,r3,0x2
    4cb4:	b8 63 00 05 	l.slli r3,r3,0x5
*
* Returns    :  OK if write pin data succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_write_data(u32 pin_grp, u32 pin_num, u32 data)
{
    4cb8:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 *addr;
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
    4cbc:	18 40 07 02 	l.movhi r2,0x702
    4cc0:	e0 66 18 00 	l.add r3,r6,r3
    4cc4:	a8 42 1f ec 	l.ori r2,r2,0x1fec
*
* Returns    :  OK if write pin data succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_write_data(u32 pin_grp, u32 pin_num, u32 data)
{
    4cc8:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 *addr;
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
    4ccc:	e0 63 10 00 	l.add r3,r3,r2
	value = *addr;
	value &= ~(0x1 << pin_num);
	value |= ((data & 0x1) << pin_num);
    4cd0:	a4 a5 00 01 	l.andi r5,r5,0x1
	volatile u32 *addr;
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
	value = *addr;
    4cd4:	84 c3 00 00 	l.lwz r6,0x0(r3)
	value |= ((data & 0x1) << pin_num);

	*addr = value;

	return OK;
}
    4cd8:	9d 60 00 00 	l.addi r11,r0,0x0
	volatile u32 *addr;
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
	value = *addr;
    4cdc:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(0x1 << pin_num);
    4ce0:	9c c0 00 01 	l.addi r6,r0,0x1
    4ce4:	84 e1 00 00 	l.lwz r7,0x0(r1)
    4ce8:	e0 c6 20 08 	l.sll r6,r6,r4
	value |= ((data & 0x1) << pin_num);
    4cec:	e0 85 20 08 	l.sll r4,r5,r4
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
	value = *addr;
	value &= ~(0x1 << pin_num);
    4cf0:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4cf4:	e0 c6 38 03 	l.and r6,r6,r7
    4cf8:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |= ((data & 0x1) << pin_num);
    4cfc:	84 c1 00 00 	l.lwz r6,0x0(r1)
    4d00:	e0 84 30 04 	l.or r4,r4,r6
    4d04:	d4 01 20 00 	l.sw 0x0(r1),r4

	*addr = value;
    4d08:	84 81 00 00 	l.lwz r4,0x0(r1)
    4d0c:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    4d10:	9c 21 00 08 	l.addi r1,r1,0x8
    4d14:	44 00 48 00 	l.jr r9
    4d18:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004d1c <pin_read_data>:
u32 pin_read_data(u32 pin_grp, u32 pin_num)
{
	volatile u32 value;

	/*read data */
	value = PIN_REG_DATA_VALUE(pin_grp);
    4d1c:	b8 a3 00 02 	l.slli r5,r3,0x2
    4d20:	b8 63 00 05 	l.slli r3,r3,0x5
*
* Returns    :  the data of the specific pin.
*********************************************************************************************************
*/
u32 pin_read_data(u32 pin_grp, u32 pin_num)
{
    4d24:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 value;

	/*read data */
	value = PIN_REG_DATA_VALUE(pin_grp);
    4d28:	18 40 07 02 	l.movhi r2,0x702
    4d2c:	e0 65 18 00 	l.add r3,r5,r3
    4d30:	a8 42 1f ec 	l.ori r2,r2,0x1fec
*
* Returns    :  the data of the specific pin.
*********************************************************************************************************
*/
u32 pin_read_data(u32 pin_grp, u32 pin_num)
{
    4d34:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 value;

	/*read data */
	value = PIN_REG_DATA_VALUE(pin_grp);
    4d38:	e0 63 10 00 	l.add r3,r3,r2
    4d3c:	84 63 00 00 	l.lwz r3,0x0(r3)
    4d40:	d4 01 18 00 	l.sw 0x0(r1),r3

	return ((value >> pin_num) & 0x1);
    4d44:	84 61 00 00 	l.lwz r3,0x0(r1)
}
    4d48:	9c 21 00 08 	l.addi r1,r1,0x8
	volatile u32 value;

	/*read data */
	value = PIN_REG_DATA_VALUE(pin_grp);

	return ((value >> pin_num) & 0x1);
    4d4c:	e0 83 20 48 	l.srl r4,r3,r4
}
    4d50:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)
    4d54:	44 00 48 00 	l.jr r9
    4d58:	a5 64 00 01 	l.andi r11,r4,0x1

00004d5c <is_wanted_gpio_int>:

/*
 * NOTE:gpio_int_en is from bit0, if used for PM, should right shift 12
 */
u32 is_wanted_gpio_int(u32 pin_grp, u32 gpio_int_en)
{
    4d5c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 value;

	value = readl(PIN_REG_INT_STAT(pin_grp));
    4d60:	18 40 07 02 	l.movhi r2,0x702
    4d64:	b8 63 00 05 	l.slli r3,r3,0x5
    4d68:	a8 42 21 f4 	l.ori r2,r2,0x21f4

/*
 * NOTE:gpio_int_en is from bit0, if used for PM, should right shift 12
 */
u32 is_wanted_gpio_int(u32 pin_grp, u32 gpio_int_en)
{
    4d6c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 value;

	value = readl(PIN_REG_INT_STAT(pin_grp));
    4d70:	e0 63 10 00 	l.add r3,r3,r2
    4d74:	84 63 00 00 	l.lwz r3,0x0(r3)
    4d78:	d4 01 18 00 	l.sw 0x0(r1),r3

	return (value & gpio_int_en);
    4d7c:	85 61 00 00 	l.lwz r11,0x0(r1)
}
    4d80:	9c 21 00 08 	l.addi r1,r1,0x8
    4d84:	e1 64 58 03 	l.and r11,r4,r11
    4d88:	44 00 48 00 	l.jr r9
    4d8c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004d90 <pin_set_int_trigger_mode>:
*
* Returns    :  OK if set trigger mode succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_int_trigger_mode(u32 pin_grp, u32 pin_num, u32 mode)
{
    4d90:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2


static s32 pin_pin2eint(u32 pin_grp, u32 pin_num, u32 *eint_grp,
			u32 *eint_num)
{
	switch (pin_grp) {
    4d94:	9c c3 ff ff 	l.addi r6,r3,0xffffffff
    4d98:	bc 46 00 01 	l.sfgtui r6,0x1
    4d9c:	0c 00 00 04 	l.bnf 4dac <pin_set_int_trigger_mode+0x1c>
    4da0:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
		*eint_num = pin_num;
		return OK;
	}
	/*invalid pin group number */
	*eint_grp = 0xff;
	*eint_num = 0xff;
    4da4:	9c 80 00 ff 	l.addi r4,r0,0xff
		*eint_grp = pin_grp;
		*eint_num = pin_num;
		return OK;
	}
	/*invalid pin group number */
	*eint_grp = 0xff;
    4da8:	a8 64 00 00 	l.ori r3,r4,0x0

	/*convert pin number to eint number */
	pin_pin2eint(pin_grp, pin_num, &eint_grp, &eint_num);

	/*set eint pin trigger mode */
	addr = PIN_REG_INT_CFG(eint_grp, eint_num);
    4dac:	18 40 00 38 	l.movhi r2,0x38
    4db0:	b8 c4 00 43 	l.srli r6,r4,0x3
    4db4:	a8 42 10 ff 	l.ori r2,r2,0x10ff
	value = *addr;
	value &= ~(0x7 << ((eint_num & 0x7) * 4));
    4db8:	a4 84 00 07 	l.andi r4,r4,0x7

	/*convert pin number to eint number */
	pin_pin2eint(pin_grp, pin_num, &eint_grp, &eint_num);

	/*set eint pin trigger mode */
	addr = PIN_REG_INT_CFG(eint_grp, eint_num);
    4dbc:	e0 63 10 00 	l.add r3,r3,r2
    4dc0:	9c c6 00 80 	l.addi r6,r6,0x80
    4dc4:	b8 63 00 03 	l.slli r3,r3,0x3
	value = *addr;
	value &= ~(0x7 << ((eint_num & 0x7) * 4));
    4dc8:	b8 84 00 02 	l.slli r4,r4,0x2
	value |= (mode << ((eint_num & 0x7) * 4));
	*addr = value;

	return OK;
}
    4dcc:	9d 60 00 00 	l.addi r11,r0,0x0

	/*convert pin number to eint number */
	pin_pin2eint(pin_grp, pin_num, &eint_grp, &eint_num);

	/*set eint pin trigger mode */
	addr = PIN_REG_INT_CFG(eint_grp, eint_num);
    4dd0:	e0 66 18 00 	l.add r3,r6,r3
    4dd4:	b8 63 00 02 	l.slli r3,r3,0x2
	value = *addr;
    4dd8:	84 c3 00 00 	l.lwz r6,0x0(r3)
    4ddc:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(0x7 << ((eint_num & 0x7) * 4));
    4de0:	9c c0 00 07 	l.addi r6,r0,0x7
    4de4:	84 e1 00 00 	l.lwz r7,0x0(r1)
    4de8:	e0 c6 20 08 	l.sll r6,r6,r4
	value |= (mode << ((eint_num & 0x7) * 4));
    4dec:	e0 85 20 08 	l.sll r4,r5,r4
	pin_pin2eint(pin_grp, pin_num, &eint_grp, &eint_num);

	/*set eint pin trigger mode */
	addr = PIN_REG_INT_CFG(eint_grp, eint_num);
	value = *addr;
	value &= ~(0x7 << ((eint_num & 0x7) * 4));
    4df0:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4df4:	e0 c6 38 03 	l.and r6,r6,r7
    4df8:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |= (mode << ((eint_num & 0x7) * 4));
    4dfc:	84 c1 00 00 	l.lwz r6,0x0(r1)
    4e00:	e0 84 30 04 	l.or r4,r4,r6
    4e04:	d4 01 20 00 	l.sw 0x0(r1),r4
	*addr = value;
    4e08:	84 81 00 00 	l.lwz r4,0x0(r1)
    4e0c:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    4e10:	9c 21 00 08 	l.addi r1,r1,0x8
    4e14:	44 00 48 00 	l.jr r9
    4e18:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004e1c <timer_hosc_onoff_cb>:
	}
	return FALSE;
}

s32 timer_hosc_onoff_cb(u32 message, u32 aux)
{
    4e1c:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
#ifdef CFG_FPGA_PLATFORM
	return OK;
#else
	u32 index;

	if (timer_lock)
    4e20:	18 40 00 01 	l.movhi r2,0x1
	}
	return FALSE;
}

s32 timer_hosc_onoff_cb(u32 message, u32 aux)
{
    4e24:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
#ifdef CFG_FPGA_PLATFORM
	return OK;
#else
	u32 index;

	if (timer_lock)
    4e28:	a8 42 30 78 	l.ori r2,r2,0x3078
	}
	return FALSE;
}

s32 timer_hosc_onoff_cb(u32 message, u32 aux)
{
    4e2c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4e30:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    4e34:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
#ifdef CFG_FPGA_PLATFORM
	return OK;
#else
	u32 index;

	if (timer_lock)
    4e38:	86 02 00 00 	l.lwz r16,0x0(r2)
	}
	return FALSE;
}

s32 timer_hosc_onoff_cb(u32 message, u32 aux)
{
    4e3c:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
#ifdef CFG_FPGA_PLATFORM
	return OK;
#else
	u32 index;

	if (timer_lock)
    4e40:	bc 30 00 00 	l.sfnei r16,0x0
    4e44:	10 00 00 43 	l.bf 4f50 <timer_hosc_onoff_cb+0x134>
    4e48:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	switch (message) {
    4e4c:	bc 03 00 00 	l.sfeqi r3,0x0
    4e50:	10 00 00 22 	l.bf 4ed8 <timer_hosc_onoff_cb+0xbc>
    4e54:	18 80 00 01 	l.movhi r4,0x1
    4e58:	bc 03 00 01 	l.sfeqi r3,0x1
    4e5c:	0c 00 00 3c 	l.bnf 4f4c <timer_hosc_onoff_cb+0x130>
    4e60:	19 c0 00 01 	l.movhi r14,0x1
			 */
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
				timers[index].ms_ticks = 32;	/* 32 */
    4e64:	9e 40 00 20 	l.addi r18,r0,0x20
			 * 24m hosc will power-off,
			 * timer switch clock source to 32k losc.
			 */
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
    4e68:	a9 ce 30 7c 	l.ori r14,r14,0x307c
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
				timers[index].ms_ticks = 32;	/* 32 */
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value / (24000 / 32);
    4e6c:	9c 80 02 ee 	l.addi r4,r0,0x2ee
			 * 24m hosc will power-off,
			 * timer switch clock source to 32k losc.
			 */
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
    4e70:	84 4e 00 18 	l.lwz r2,0x18(r14)
    4e74:	84 62 00 00 	l.lwz r3,0x0(r2)
    4e78:	e0 63 58 03 	l.and r3,r3,r11
    4e7c:	d4 02 18 00 	l.sw 0x0(r2),r3
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
    4e80:	84 62 00 00 	l.lwz r3,0x0(r2)
    4e84:	d4 02 18 00 	l.sw 0x0(r2),r3
				timers[index].ms_ticks = 32;	/* 32 */
    4e88:	d4 0e 90 0c 	l.sw 0xc(r14),r18
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value / (24000 / 32);
    4e8c:	84 62 00 04 	l.lwz r3,0x4(r2)
    4e90:	04 00 1e e6 	l.jal ca28 <__udivsi3>
    4e94:	15 00 00 00 	l.nop 0x0
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
				timers[index].ms_ticks = 32;	/* 32 */
				timers[index].pregs->interval_value = \
    4e98:	d4 02 58 04 	l.sw 0x4(r2),r11
			 * 24m hosc will power-off,
			 * timer switch clock source to 32k losc.
			 */
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
    4e9c:	84 4e 00 34 	l.lwz r2,0x34(r14)
    4ea0:	9c e0 ff f3 	l.addi r7,r0,0xfffffff3
    4ea4:	84 62 00 00 	l.lwz r3,0x0(r2)
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
				timers[index].ms_ticks = 32;	/* 32 */
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value / (24000 / 32);
    4ea8:	9c 80 02 ee 	l.addi r4,r0,0x2ee
			 * 24m hosc will power-off,
			 * timer switch clock source to 32k losc.
			 */
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
    4eac:	e0 63 38 03 	l.and r3,r3,r7
    4eb0:	d4 02 18 00 	l.sw 0x0(r2),r3
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
    4eb4:	84 62 00 00 	l.lwz r3,0x0(r2)
    4eb8:	d4 02 18 00 	l.sw 0x0(r2),r3
				timers[index].ms_ticks = 32;	/* 32 */
    4ebc:	d4 0e 90 28 	l.sw 0x28(r14),r18
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value / (24000 / 32);
    4ec0:	84 62 00 04 	l.lwz r3,0x4(r2)
    4ec4:	04 00 1e d9 	l.jal ca28 <__udivsi3>
    4ec8:	15 00 00 00 	l.nop 0x0
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
				timers[index].ms_ticks = 32;	/* 32 */
				timers[index].pregs->interval_value = \
    4ecc:	d4 02 58 04 	l.sw 0x4(r2),r11
					timers[index].pregs->interval_value / (24000 / 32);
			}
			return OK;
    4ed0:	00 00 00 20 	l.j 4f50 <timer_hosc_onoff_cb+0x134>
    4ed4:	a9 70 00 00 	l.ori r11,r16,0x0
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4ed8:	9c c0 02 ee 	l.addi r6,r0,0x2ee
    4edc:	a8 84 30 7c 	l.ori r4,r4,0x307c
				timers[index].pregs->control &= ~(0x3 << 2);
    4ee0:	9c e0 ff f3 	l.addi r7,r0,0xfffffff3
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4ee4:	84 44 00 18 	l.lwz r2,0x18(r4)
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
				timers[index].ms_ticks = 24 * 1000;	/* 24k */
			}
			return OK;
    4ee8:	a9 63 00 00 	l.ori r11,r3,0x0
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4eec:	84 a2 00 04 	l.lwz r5,0x4(r2)
    4ef0:	e0 a5 33 06 	l.mul r5,r5,r6
			 * 24m hosc power-on already,
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
    4ef4:	d4 02 28 04 	l.sw 0x4(r2),r5
					timers[index].pregs->interval_value * (24000 / 32);
				timers[index].pregs->control &= ~(0x3 << 2);
    4ef8:	84 a2 00 00 	l.lwz r5,0x0(r2)
    4efc:	e0 a5 38 03 	l.and r5,r5,r7
    4f00:	d4 02 28 00 	l.sw 0x0(r2),r5
				timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
    4f04:	84 a2 00 00 	l.lwz r5,0x0(r2)
    4f08:	a8 a5 00 04 	l.ori r5,r5,0x4
    4f0c:	d4 02 28 00 	l.sw 0x0(r2),r5
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4f10:	84 44 00 34 	l.lwz r2,0x34(r4)
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
				timers[index].ms_ticks = 24 * 1000;	/* 24k */
    4f14:	9c a0 5d c0 	l.addi r5,r0,0x5dc0
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4f18:	84 e2 00 04 	l.lwz r7,0x4(r2)
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
				timers[index].ms_ticks = 24 * 1000;	/* 24k */
    4f1c:	d4 04 28 0c 	l.sw 0xc(r4),r5
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4f20:	e0 c7 33 06 	l.mul r6,r7,r6
			 * 24m hosc power-on already,
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
    4f24:	d4 02 30 04 	l.sw 0x4(r2),r6
					timers[index].pregs->interval_value * (24000 / 32);
				timers[index].pregs->control &= ~(0x3 << 2);
    4f28:	9c e0 ff f3 	l.addi r7,r0,0xfffffff3
    4f2c:	84 c2 00 00 	l.lwz r6,0x0(r2)
    4f30:	e0 c6 38 03 	l.and r6,r6,r7
    4f34:	d4 02 30 00 	l.sw 0x0(r2),r6
				timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
    4f38:	84 c2 00 00 	l.lwz r6,0x0(r2)
    4f3c:	a8 c6 00 04 	l.ori r6,r6,0x4
    4f40:	d4 02 30 00 	l.sw 0x0(r2),r6
				timers[index].ms_ticks = 24 * 1000;	/* 24k */
    4f44:	00 00 00 03 	l.j 4f50 <timer_hosc_onoff_cb+0x134>
    4f48:	d4 04 28 28 	l.sw 0x28(r4),r5
	default:
		{
			break;
		}
	}
	return -ESRCH;
    4f4c:	9d 60 ff fd 	l.addi r11,r0,0xfffffffd
#endif
}
    4f50:	9c 21 00 14 	l.addi r1,r1,0x14
    4f54:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4f58:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    4f5c:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    4f60:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    4f64:	44 00 48 00 	l.jr r9
    4f68:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00004f6c <timer_isr>:
*
* Returns    :  TRUE if process timer interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_isr(void *parg)
{
    4f6c:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    4f70:	a8 43 00 00 	l.ori r2,r3,0x0
	struct timer *ptimer = (struct timer *)parg;

	if (timer_lock)
    4f74:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  TRUE if process timer interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_isr(void *parg)
{
    4f78:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	struct timer *ptimer = (struct timer *)parg;

	if (timer_lock)
    4f7c:	a8 63 30 78 	l.ori r3,r3,0x3078
*
* Returns    :  TRUE if process timer interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_isr(void *parg)
{
    4f80:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    4f84:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    4f88:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
	struct timer *ptimer = (struct timer *)parg;

	if (timer_lock)
    4f8c:	84 63 00 00 	l.lwz r3,0x0(r3)
*
* Returns    :  TRUE if process timer interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_isr(void *parg)
{
    4f90:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	struct timer *ptimer = (struct timer *)parg;

	if (timer_lock)
    4f94:	bc 23 00 00 	l.sfnei r3,0x0
    4f98:	10 00 00 1d 	l.bf 500c <timer_isr+0xa0>
    4f9c:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	/* check pending status valid or not */
	if (ptimerc_regs->irq_status & (1 << ptimer->timer_no)) {
    4fa0:	1a 40 00 01 	l.movhi r18,0x1
    4fa4:	9d c0 00 01 	l.addi r14,r0,0x1
    4fa8:	aa 52 36 c0 	l.ori r18,r18,0x36c0
    4fac:	85 62 00 00 	l.lwz r11,0x0(r2)
    4fb0:	84 72 00 00 	l.lwz r3,0x0(r18)
    4fb4:	e1 6e 58 08 	l.sll r11,r14,r11
    4fb8:	84 63 00 04 	l.lwz r3,0x4(r3)
    4fbc:	e1 6b 18 03 	l.and r11,r11,r3
    4fc0:	bc 0b 00 00 	l.sfeqi r11,0x0
    4fc4:	10 00 00 12 	l.bf 500c <timer_isr+0xa0>
    4fc8:	15 00 00 00 	l.nop 0x0
		/* process the timer handler */
		if (ptimer->phandler == NULL) {
    4fcc:	86 02 00 10 	l.lwz r16,0x10(r2)
    4fd0:	bc 30 00 00 	l.sfnei r16,0x0
    4fd4:	10 00 00 07 	l.bf 4ff0 <timer_isr+0x84>
    4fd8:	18 80 00 01 	l.movhi r4,0x1
			WRN("timer irq handler not install\n");
    4fdc:	9c 60 00 04 	l.addi r3,r0,0x4
    4fe0:	04 00 15 fe 	l.jal a7d8 <debugger_printf>
    4fe4:	a8 84 22 e0 	l.ori r4,r4,0x22e0
			return FALSE;
    4fe8:	00 00 00 09 	l.j 500c <timer_isr+0xa0>
    4fec:	a9 70 00 00 	l.ori r11,r16,0x0
		}

		/* handler timer irq */
		ptimer->phandler(ptimer->parg);
    4ff0:	48 00 80 00 	l.jalr r16
    4ff4:	84 62 00 14 	l.lwz r3,0x14(r2)

		/* clear interrupt pending */
		ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    4ff8:	84 42 00 00 	l.lwz r2,0x0(r2)
    4ffc:	84 72 00 00 	l.lwz r3,0x0(r18)
    5000:	e0 4e 10 08 	l.sll r2,r14,r2

		return TRUE;
    5004:	a9 6e 00 00 	l.ori r11,r14,0x0

		/* handler timer irq */
		ptimer->phandler(ptimer->parg);

		/* clear interrupt pending */
		ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    5008:	d4 03 10 04 	l.sw 0x4(r3),r2

		return TRUE;
	}
	return FALSE;
}
    500c:	9c 21 00 14 	l.addi r1,r1,0x14
    5010:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5014:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    5018:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    501c:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    5020:	44 00 48 00 	l.jr r9
    5024:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00005028 <timer_init>:
*
* Returns    :  OK if initialize timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_init(void)
{
    5028:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	u32 index;

	/* initialize the pointer of timer controller registers */
	ptimerc_regs = (struct timerc_regs *)(TIMER_REG_BASE);
    502c:	18 40 00 01 	l.movhi r2,0x1
    5030:	18 60 07 02 	l.movhi r3,0x702
    5034:	a8 42 36 c0 	l.ori r2,r2,0x36c0
*
* Returns    :  OK if initialize timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_init(void)
{
    5038:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 index;

	/* initialize the pointer of timer controller registers */
	ptimerc_regs = (struct timerc_regs *)(TIMER_REG_BASE);
    503c:	d4 02 18 00 	l.sw 0x0(r2),r3
*
* Returns    :  OK if initialize timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_init(void)
{
    5040:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8

	/* initialize the pointer of timer controller registers */
	ptimerc_regs = (struct timerc_regs *)(TIMER_REG_BASE);

	/* enbale timer clock gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_ON);
    5044:	9c 60 00 1f 	l.addi r3,r0,0x1f
    5048:	04 00 32 41 	l.jal 1194c <ccu_set_mclk_onoff>
    504c:	9c 80 00 01 	l.addi r4,r0,0x1

	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);
    5050:	9c 60 00 1f 	l.addi r3,r0,0x1f
    5054:	04 00 33 75 	l.jal 11e28 <ccu_set_mclk_reset>
    5058:	9c 80 00 01 	l.addi r4,r0,0x1

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
		timers[index].pregs = &(ptimerc_regs->timer[index]);
    505c:	18 80 00 01 	l.movhi r4,0x1
    5060:	84 c2 00 00 	l.lwz r6,0x0(r2)
    5064:	a8 84 30 94 	l.ori r4,r4,0x3094

	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
    5068:	9c 60 00 00 	l.addi r3,r0,0x0
		timers[index].pregs->control &= ~(0x7 << 4);
		timers[index].pregs->control |= (0x0 << 4);	/* pre-scale = 1 */
#ifdef CFG_FPGA_PLATFORM
		timers[index].ms_ticks = 32;	/* fix to 32k */
#else
		timers[index].ms_ticks = 24 * 1000;	/* 24M */
    506c:	9c a0 5d c0 	l.addi r5,r0,0x5dc0
	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
		timers[index].pregs = &(ptimerc_regs->timer[index]);
    5070:	9c 43 00 01 	l.addi r2,r3,0x1
		timers[index].pregs->control = 0;
    5074:	9c e0 00 00 	l.addi r7,r0,0x0
	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
		timers[index].pregs = &(ptimerc_regs->timer[index]);
    5078:	b8 62 00 04 	l.slli r3,r2,0x4

		/*
		 * timer tick time base on ms,
		 * soucre clock = 24M, pre-scale = 1, timer source clock = 24M.
		 */
		timers[index].pregs->control &= ~(0x3 << 2);
    507c:	9d 00 ff f3 	l.addi r8,r0,0xfffffff3

	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
    5080:	bc 22 00 02 	l.sfnei r2,0x2
		timers[index].pregs = &(ptimerc_regs->timer[index]);
    5084:	e0 66 18 00 	l.add r3,r6,r3
    5088:	d4 04 18 00 	l.sw 0x0(r4),r3
		timers[index].pregs->control = 0;
    508c:	d4 03 38 00 	l.sw 0x0(r3),r7

		/*
		 * timer tick time base on ms,
		 * soucre clock = 24M, pre-scale = 1, timer source clock = 24M.
		 */
		timers[index].pregs->control &= ~(0x3 << 2);
    5090:	84 e3 00 00 	l.lwz r7,0x0(r3)
    5094:	e0 e7 40 03 	l.and r7,r7,r8
		timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
		timers[index].pregs->control &= ~(0x7 << 4);
    5098:	9d 00 ff 8f 	l.addi r8,r0,0xffffff8f

		/*
		 * timer tick time base on ms,
		 * soucre clock = 24M, pre-scale = 1, timer source clock = 24M.
		 */
		timers[index].pregs->control &= ~(0x3 << 2);
    509c:	d4 03 38 00 	l.sw 0x0(r3),r7
		timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
    50a0:	84 e3 00 00 	l.lwz r7,0x0(r3)
    50a4:	a8 e7 00 04 	l.ori r7,r7,0x4
    50a8:	d4 03 38 00 	l.sw 0x0(r3),r7
		timers[index].pregs->control &= ~(0x7 << 4);
    50ac:	84 e3 00 00 	l.lwz r7,0x0(r3)
    50b0:	e0 e7 40 03 	l.and r7,r7,r8
    50b4:	d4 03 38 00 	l.sw 0x0(r3),r7
		timers[index].pregs->control |= (0x0 << 4);	/* pre-scale = 1 */
    50b8:	84 e3 00 00 	l.lwz r7,0x0(r3)
    50bc:	d4 03 38 00 	l.sw 0x0(r3),r7
#ifdef CFG_FPGA_PLATFORM
		timers[index].ms_ticks = 32;	/* fix to 32k */
#else
		timers[index].ms_ticks = 24 * 1000;	/* 24M */
    50c0:	d7 e4 2f f4 	l.sw 0xfffffff4(r4),r5

	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
    50c4:	a8 62 00 00 	l.ori r3,r2,0x0
    50c8:	13 ff ff ea 	l.bf 5070 <timer_init+0x48>
    50cc:	9c 84 00 1c 	l.addi r4,r4,0x1c
	/*
	 * use timer[0] for system accurate delay service, tick base ms.
	 * single shot mode.
	 * by sunny at 2012-11-21 17:39:25.
	 */
	timers[0].status = TIMER_USED;
    50d0:	18 60 00 01 	l.movhi r3,0x1
    50d4:	9c 40 00 01 	l.addi r2,r0,0x1
    50d8:	a8 63 30 7c 	l.ori r3,r3,0x307c
    50dc:	d4 03 10 04 	l.sw 0x4(r3),r2
	delay_timer = &(timers[0]);
    50e0:	18 40 00 01 	l.movhi r2,0x1
    50e4:	a8 42 36 bc 	l.ori r2,r2,0x36bc
    50e8:	d4 02 18 00 	l.sw 0x0(r2),r3
	delay_timer->pregs->control |= (0x1 << 7);
    50ec:	84 63 00 18 	l.lwz r3,0x18(r3)
    50f0:	84 43 00 00 	l.lwz r2,0x0(r3)
    50f4:	a8 42 00 80 	l.ori r2,r2,0x80
    50f8:	d4 03 10 00 	l.sw 0x0(r3),r2

	/* register 24mhosc notifier call-back */
	ccu_24mhosc_reg_cb(timer_hosc_onoff_cb);
    50fc:	18 60 00 00 	l.movhi r3,0x0
	timer_lock = 0;
    5100:	18 40 00 01 	l.movhi r2,0x1
	timers[0].status = TIMER_USED;
	delay_timer = &(timers[0]);
	delay_timer->pregs->control |= (0x1 << 7);

	/* register 24mhosc notifier call-back */
	ccu_24mhosc_reg_cb(timer_hosc_onoff_cb);
    5104:	a8 63 4e 1c 	l.ori r3,r3,0x4e1c
    5108:	04 00 32 d4 	l.jal 11c58 <ccu_24mhosc_reg_cb>
    510c:	a8 42 30 78 	l.ori r2,r2,0x3078
	timer_lock = 0;
    5110:	9c 60 00 00 	l.addi r3,r0,0x0
    5114:	d4 02 18 00 	l.sw 0x0(r2),r3

	return OK;
}
    5118:	9c 21 00 08 	l.addi r1,r1,0x8
    511c:	a9 63 00 00 	l.ori r11,r3,0x0
    5120:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5124:	44 00 48 00 	l.jr r9
    5128:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000512c <timer_exit>:
*
* Returns    :  OK if exit timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_exit(void)
{
    512c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    5130:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_RESET);
    5134:	9c 60 00 1f 	l.addi r3,r0,0x1f
*
* Returns    :  OK if exit timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_exit(void)
{
    5138:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_RESET);
    513c:	9c 80 00 00 	l.addi r4,r0,0x0
    5140:	04 00 33 3a 	l.jal 11e28 <ccu_set_mclk_reset>
    5144:	9c 40 00 00 	l.addi r2,r0,0x0

	/* enbale timer clock gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_OFF);
    5148:	9c 60 00 1f 	l.addi r3,r0,0x1f
    514c:	04 00 32 00 	l.jal 1194c <ccu_set_mclk_onoff>
    5150:	9c 80 00 00 	l.addi r4,r0,0x0

	ptimerc_regs = NULL;
    5154:	18 60 00 01 	l.movhi r3,0x1

	timer_lock = 1;
    5158:	9c 80 00 01 	l.addi r4,r0,0x1
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_RESET);

	/* enbale timer clock gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_OFF);

	ptimerc_regs = NULL;
    515c:	a8 63 36 c0 	l.ori r3,r3,0x36c0

	timer_lock = 1;

	return OK;
}
    5160:	a9 62 00 00 	l.ori r11,r2,0x0
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_RESET);

	/* enbale timer clock gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_OFF);

	ptimerc_regs = NULL;
    5164:	d4 03 10 00 	l.sw 0x0(r3),r2

	timer_lock = 1;
    5168:	18 60 00 01 	l.movhi r3,0x1
    516c:	a8 63 30 78 	l.ori r3,r3,0x3078
    5170:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    5174:	9c 21 00 08 	l.addi r1,r1,0x8
    5178:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    517c:	44 00 48 00 	l.jr r9
    5180:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00005184 <timer_request>:
*
* Note       :  the callback execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
HANDLE timer_request(__pCBK_t phdle, void *parg)
{
    5184:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
	u32 cpsr;
	u32 index;
	struct timer *ptimer = NULL;

	if (timer_lock)
    5188:	18 40 00 01 	l.movhi r2,0x1
*
* Note       :  the callback execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
HANDLE timer_request(__pCBK_t phdle, void *parg)
{
    518c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
	u32 cpsr;
	u32 index;
	struct timer *ptimer = NULL;

	if (timer_lock)
    5190:	a8 42 30 78 	l.ori r2,r2,0x3078
*
* Note       :  the callback execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
HANDLE timer_request(__pCBK_t phdle, void *parg)
{
    5194:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    5198:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 cpsr;
	u32 index;
	struct timer *ptimer = NULL;

	if (timer_lock)
    519c:	84 42 00 00 	l.lwz r2,0x0(r2)
		return NULL;
    51a0:	9d 60 00 00 	l.addi r11,r0,0x0
*
* Note       :  the callback execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
HANDLE timer_request(__pCBK_t phdle, void *parg)
{
    51a4:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    51a8:	aa 03 00 00 	l.ori r16,r3,0x0
	u32 cpsr;
	u32 index;
	struct timer *ptimer = NULL;

	if (timer_lock)
    51ac:	e4 22 58 00 	l.sfne r2,r11
    51b0:	10 00 00 28 	l.bf 5250 <timer_request+0xcc>
    51b4:	a9 c4 00 00 	l.ori r14,r4,0x0
		return NULL;

	cpsr = cpu_disable_int();
    51b8:	04 00 1d 03 	l.jal c5c4 <cpu_disable_int>
    51bc:	15 00 00 00 	l.nop 0x0
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
		if (timers[index].status == TIMER_FREE) {
    51c0:	18 c0 00 01 	l.movhi r6,0x1
    51c4:	a8 c6 30 7c 	l.ori r6,r6,0x307c
    51c8:	84 a6 00 04 	l.lwz r5,0x4(r6)
    51cc:	bc 05 00 00 	l.sfeqi r5,0x0
    51d0:	10 00 00 07 	l.bf 51ec <timer_request+0x68>
    51d4:	b8 65 00 02 	l.slli r3,r5,0x2
    51d8:	84 66 00 20 	l.lwz r3,0x20(r6)
    51dc:	bc 23 00 00 	l.sfnei r3,0x0
    51e0:	10 00 00 0c 	l.bf 5210 <timer_request+0x8c>
    51e4:	9c a0 00 01 	l.addi r5,r0,0x1
			/* allocate this timer */
			ptimer = &(timers[index]);
    51e8:	b8 65 00 02 	l.slli r3,r5,0x2
    51ec:	b8 45 00 05 	l.slli r2,r5,0x5
    51f0:	e0 42 18 02 	l.sub r2,r2,r3
    51f4:	18 60 00 01 	l.movhi r3,0x1
    51f8:	a8 63 30 7c 	l.ori r3,r3,0x307c
    51fc:	e0 42 18 00 	l.add r2,r2,r3
			ptimer->status = TIMER_USED;
    5200:	9c 60 00 01 	l.addi r3,r0,0x1
			ptimer->phandler = phdle;
    5204:	d4 02 80 10 	l.sw 0x10(r2),r16
	cpsr = cpu_disable_int();
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
		if (timers[index].status == TIMER_FREE) {
			/* allocate this timer */
			ptimer = &(timers[index]);
			ptimer->status = TIMER_USED;
    5208:	d4 02 18 04 	l.sw 0x4(r2),r3
			ptimer->phandler = phdle;
			ptimer->parg = parg;
    520c:	d4 02 70 14 	l.sw 0x14(r2),r14
			break;
		}
	}
	cpu_enable_int(cpsr);
    5210:	04 00 1c f7 	l.jal c5ec <cpu_enable_int>
    5214:	a8 6b 00 00 	l.ori r3,r11,0x0

	if (ptimer == NULL) {
    5218:	bc 22 00 00 	l.sfnei r2,0x0
    521c:	10 00 00 07 	l.bf 5238 <timer_request+0xb4>
    5220:	18 80 00 01 	l.movhi r4,0x1
		/* no freed timer now */
		WRN("no free timer now\n");
    5224:	9c 60 00 04 	l.addi r3,r0,0x4
    5228:	04 00 15 6c 	l.jal a7d8 <debugger_printf>
    522c:	a8 84 23 03 	l.ori r4,r4,0x2303
	}

	/* install timer isr */
	install_isr(ptimer->irq_no, timer_isr, (void *)ptimer);

	return (HANDLE) ptimer;
    5230:	00 00 00 08 	l.j 5250 <timer_request+0xcc>
    5234:	a9 62 00 00 	l.ori r11,r2,0x0
		WRN("no free timer now\n");
		return NULL;
	}

	/* install timer isr */
	install_isr(ptimer->irq_no, timer_isr, (void *)ptimer);
    5238:	18 80 00 00 	l.movhi r4,0x0
    523c:	84 62 00 08 	l.lwz r3,0x8(r2)
    5240:	a8 84 4f 6c 	l.ori r4,r4,0x4f6c
    5244:	07 ff fd c0 	l.jal 4944 <install_isr>
    5248:	a8 a2 00 00 	l.ori r5,r2,0x0

	return (HANDLE) ptimer;
    524c:	a9 62 00 00 	l.ori r11,r2,0x0
}
    5250:	9c 21 00 10 	l.addi r1,r1,0x10
    5254:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5258:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    525c:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    5260:	44 00 48 00 	l.jr r9
    5264:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00005268 <timer_release>:
*
* Returns    :  OK if release hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_release(HANDLE htimer)
{
    5268:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    526c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	/* set timer status as free */
	ptimer->status = TIMER_FREE;
    5270:	9c 40 00 00 	l.addi r2,r0,0x0
	ptimer->phandler = NULL;
	ptimer->parg = NULL;

	return OK;
}
    5274:	9c 21 00 04 	l.addi r1,r1,0x4
    5278:	a9 62 00 00 	l.ori r11,r2,0x0
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	/* set timer status as free */
	ptimer->status = TIMER_FREE;
    527c:	d4 03 10 04 	l.sw 0x4(r3),r2
	ptimer->phandler = NULL;
    5280:	d4 03 10 10 	l.sw 0x10(r3),r2
	ptimer->parg = NULL;
    5284:	d4 03 10 14 	l.sw 0x14(r3),r2

	return OK;
}
    5288:	44 00 48 00 	l.jr r9
    528c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00005290 <timer_start>:
*
* Returns    :  OK if start hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_start(HANDLE htimer, u32 period, u32 mode)
{
    5290:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    5294:	a8 43 00 00 	l.ori r2,r3,0x0
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    5298:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if start hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_start(HANDLE htimer, u32 period, u32 mode)
{
    529c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    52a0:	a8 63 30 78 	l.ori r3,r3,0x3078
*
* Returns    :  OK if start hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_start(HANDLE htimer, u32 period, u32 mode)
{
    52a4:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    52a8:	84 63 00 00 	l.lwz r3,0x0(r3)
*
* Returns    :  OK if start hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_start(HANDLE htimer, u32 period, u32 mode)
{
    52ac:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    52b0:	bc 23 00 00 	l.sfnei r3,0x0
    52b4:	10 00 00 27 	l.bf 5350 <timer_start+0xc0>
    52b8:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	/* set timer period */
	ptimer->pregs->interval_value = ptimer->ms_ticks * period;
    52bc:	84 62 00 0c 	l.lwz r3,0xc(r2)
    52c0:	84 c2 00 18 	l.lwz r6,0x18(r2)
    52c4:	e0 84 1b 06 	l.mul r4,r4,r3
    52c8:	d4 06 20 04 	l.sw 0x4(r6),r4
	ptimer->pregs->control |= (1 << 1);	/* reload interval value to current value */
    52cc:	84 66 00 00 	l.lwz r3,0x0(r6)
    52d0:	a8 63 00 02 	l.ori r3,r3,0x2
    52d4:	d4 06 18 00 	l.sw 0x0(r6),r3
	while ((ptimer->pregs->control) & (1 << 1))
    52d8:	85 c6 00 00 	l.lwz r14,0x0(r6)
    52dc:	a5 ce 00 02 	l.andi r14,r14,0x2
    52e0:	bc 2e 00 00 	l.sfnei r14,0x0
    52e4:	13 ff ff fd 	l.bf 52d8 <timer_start+0x48>
    52e8:	15 00 00 00 	l.nop 0x0
		;

	/* set timer mode */
	ptimer->pregs->control &= ~(1 << 7);
    52ec:	84 66 00 00 	l.lwz r3,0x0(r6)
    52f0:	9c 80 ff 7f 	l.addi r4,r0,0xffffff7f
	ptimer->pregs->control |= (mode << 7);
    52f4:	b8 a5 00 07 	l.slli r5,r5,0x7
	ptimer->pregs->control |= (1 << 1);	/* reload interval value to current value */
	while ((ptimer->pregs->control) & (1 << 1))
		;

	/* set timer mode */
	ptimer->pregs->control &= ~(1 << 7);
    52f8:	e0 63 20 03 	l.and r3,r3,r4
	ptimer->pregs->control |= (mode << 7);

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    52fc:	9c 80 00 01 	l.addi r4,r0,0x1
	ptimer->pregs->control |= (1 << 1);	/* reload interval value to current value */
	while ((ptimer->pregs->control) & (1 << 1))
		;

	/* set timer mode */
	ptimer->pregs->control &= ~(1 << 7);
    5300:	d4 06 18 00 	l.sw 0x0(r6),r3
	ptimer->pregs->control |= (mode << 7);
    5304:	84 66 00 00 	l.lwz r3,0x0(r6)
    5308:	e0 a5 18 04 	l.or r5,r5,r3

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    530c:	18 60 00 01 	l.movhi r3,0x1
	while ((ptimer->pregs->control) & (1 << 1))
		;

	/* set timer mode */
	ptimer->pregs->control &= ~(1 << 7);
	ptimer->pregs->control |= (mode << 7);
    5310:	d4 06 28 00 	l.sw 0x0(r6),r5

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    5314:	84 a2 00 00 	l.lwz r5,0x0(r2)
    5318:	a8 63 36 c0 	l.ori r3,r3,0x36c0
    531c:	e0 84 28 08 	l.sll r4,r4,r5
    5320:	84 63 00 00 	l.lwz r3,0x0(r3)
    5324:	d4 03 20 04 	l.sw 0x4(r3),r4

	/* enable timer interrupt */
	ptimerc_regs->irq_enbale |= (1 << ptimer->timer_no);
    5328:	84 a3 00 00 	l.lwz r5,0x0(r3)
    532c:	e0 84 28 04 	l.or r4,r4,r5
    5330:	d4 03 20 00 	l.sw 0x0(r3),r4
	interrupt_enable(ptimer->irq_no);
    5334:	07 ff fd 62 	l.jal 48bc <interrupt_enable>
    5338:	84 62 00 08 	l.lwz r3,0x8(r2)

	/* enable timer */
	ptimer->pregs->control |= 0x1;
    533c:	84 42 00 18 	l.lwz r2,0x18(r2)

	return OK;
    5340:	a9 6e 00 00 	l.ori r11,r14,0x0
	/* enable timer interrupt */
	ptimerc_regs->irq_enbale |= (1 << ptimer->timer_no);
	interrupt_enable(ptimer->irq_no);

	/* enable timer */
	ptimer->pregs->control |= 0x1;
    5344:	84 62 00 00 	l.lwz r3,0x0(r2)
    5348:	a8 63 00 01 	l.ori r3,r3,0x1
    534c:	d4 02 18 00 	l.sw 0x0(r2),r3

	return OK;
}
    5350:	9c 21 00 0c 	l.addi r1,r1,0xc
    5354:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5358:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    535c:	44 00 48 00 	l.jr r9
    5360:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00005364 <timer_stop>:
*
* Returns    :  OK if stop hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_stop(HANDLE htimer)
{
    5364:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    5368:	a8 43 00 00 	l.ori r2,r3,0x0
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    536c:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if stop hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_stop(HANDLE htimer)
{
    5370:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    5374:	a8 63 30 78 	l.ori r3,r3,0x3078
*
* Returns    :  OK if stop hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_stop(HANDLE htimer)
{
    5378:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    537c:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    5380:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    5384:	86 03 00 00 	l.lwz r16,0x0(r3)
*
* Returns    :  OK if stop hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_stop(HANDLE htimer)
{
    5388:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    538c:	bc 30 00 00 	l.sfnei r16,0x0
    5390:	10 00 00 18 	l.bf 53f0 <timer_stop+0x8c>
    5394:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	/* disable timer */
	ptimer->pregs->control &= ~(0x1);
    5398:	84 62 00 18 	l.lwz r3,0x18(r2)
    539c:	9c a0 ff fe 	l.addi r5,r0,0xfffffffe
    53a0:	84 83 00 00 	l.lwz r4,0x0(r3)

	/* disable timer irq */
	ptimerc_regs->irq_enbale &= ~(1 << ptimer->timer_no);
    53a4:	19 c0 00 01 	l.movhi r14,0x1

	if (timer_lock)
		return -EACCES;

	/* disable timer */
	ptimer->pregs->control &= ~(0x1);
    53a8:	e0 84 28 03 	l.and r4,r4,r5

	/* disable timer irq */
	ptimerc_regs->irq_enbale &= ~(1 << ptimer->timer_no);
    53ac:	9e 40 00 01 	l.addi r18,r0,0x1

	if (timer_lock)
		return -EACCES;

	/* disable timer */
	ptimer->pregs->control &= ~(0x1);
    53b0:	d4 03 20 00 	l.sw 0x0(r3),r4

	/* disable timer irq */
	ptimerc_regs->irq_enbale &= ~(1 << ptimer->timer_no);
    53b4:	84 82 00 00 	l.lwz r4,0x0(r2)
    53b8:	a9 ce 36 c0 	l.ori r14,r14,0x36c0
    53bc:	e0 92 20 08 	l.sll r4,r18,r4
    53c0:	84 6e 00 00 	l.lwz r3,0x0(r14)
    53c4:	ac 84 ff ff 	l.xori r4,r4,0xffffffff
    53c8:	84 a3 00 00 	l.lwz r5,0x0(r3)
    53cc:	e0 84 28 03 	l.and r4,r4,r5
    53d0:	d4 03 20 00 	l.sw 0x0(r3),r4
	interrupt_disable(ptimer->irq_no);
    53d4:	07 ff fd 40 	l.jal 48d4 <interrupt_disable>
    53d8:	84 62 00 08 	l.lwz r3,0x8(r2)

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    53dc:	84 42 00 00 	l.lwz r2,0x0(r2)
    53e0:	84 6e 00 00 	l.lwz r3,0x0(r14)
    53e4:	e2 52 10 08 	l.sll r18,r18,r2

	return OK;
    53e8:	a9 70 00 00 	l.ori r11,r16,0x0
	/* disable timer irq */
	ptimerc_regs->irq_enbale &= ~(1 << ptimer->timer_no);
	interrupt_disable(ptimer->irq_no);

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    53ec:	d4 03 90 04 	l.sw 0x4(r3),r18

	return OK;
}
    53f0:	9c 21 00 14 	l.addi r1,r1,0x14
    53f4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    53f8:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    53fc:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    5400:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    5404:	44 00 48 00 	l.jr r9
    5408:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

0000540c <time_cdelay>:
    540c:	bc 23 00 00 	l.sfnei r3,0x0
    5410:	13 ff ff ff 	l.bf 540c <time_cdelay>
    5414:	9c 63 ff ff 	l.addi r3,r3,0xffffffff
    5418:	9c 63 00 01 	l.addi r3,r3,0x1
    541c:	44 00 48 00 	l.jr r9
    5420:	15 00 00 00 	l.nop 0x0

00005424 <time_mdelay>:

extern volatile u32 timer_lock;

void time_mdelay(u32 ms)
{
	if (timer_lock)
    5424:	18 80 00 01 	l.movhi r4,0x1
#include "timer_i.h"

extern volatile u32 timer_lock;

void time_mdelay(u32 ms)
{
    5428:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	if (timer_lock)
    542c:	a8 84 30 78 	l.ori r4,r4,0x3078
#include "timer_i.h"

extern volatile u32 timer_lock;

void time_mdelay(u32 ms)
{
    5430:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	if (timer_lock)
    5434:	84 84 00 00 	l.lwz r4,0x0(r4)
    5438:	bc 24 00 00 	l.sfnei r4,0x0
    543c:	10 00 00 25 	l.bf 54d0 <time_mdelay+0xac>
    5440:	bc 03 00 00 	l.sfeqi r3,0x0

	/*
	 * check delay time too long
	 * ...
	 */
	if ((ms == 0) || (delay_timer->ms_ticks * ms >= 4294967296)) {
    5444:	10 00 00 23 	l.bf 54d0 <time_mdelay+0xac>
    5448:	18 80 00 01 	l.movhi r4,0x1
		/* no delay */
		return;
	}

	/* config timer internal value */
	delay_timer->pregs->interval_value = delay_timer->ms_ticks * ms;
    544c:	a8 84 36 bc 	l.ori r4,r4,0x36bc
    5450:	84 a4 00 00 	l.lwz r5,0x0(r4)
    5454:	84 c5 00 0c 	l.lwz r6,0xc(r5)
    5458:	84 85 00 18 	l.lwz r4,0x18(r5)
    545c:	e0 63 33 06 	l.mul r3,r3,r6
    5460:	d4 04 18 04 	l.sw 0x4(r4),r3
	delay_timer->pregs->control |= (1 << 1);	/* reload interval value to current value */
    5464:	84 64 00 00 	l.lwz r3,0x0(r4)
    5468:	a8 63 00 02 	l.ori r3,r3,0x2
    546c:	d4 04 18 00 	l.sw 0x0(r4),r3
	while ((delay_timer->pregs->control) & (1 << 1))
    5470:	84 64 00 00 	l.lwz r3,0x0(r4)
    5474:	a4 63 00 02 	l.andi r3,r3,0x2
    5478:	bc 23 00 00 	l.sfnei r3,0x0
    547c:	13 ff ff fd 	l.bf 5470 <time_mdelay+0x4c>
    5480:	18 60 00 01 	l.movhi r3,0x1
		;

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << delay_timer->timer_no);
    5484:	84 a5 00 00 	l.lwz r5,0x0(r5)
    5488:	9c c0 00 01 	l.addi r6,r0,0x1
    548c:	a8 63 36 c0 	l.ori r3,r3,0x36c0
    5490:	e0 a6 28 08 	l.sll r5,r6,r5
    5494:	84 63 00 00 	l.lwz r3,0x0(r3)
    5498:	d4 03 28 04 	l.sw 0x4(r3),r5

	/* start timer */
	delay_timer->pregs->control |= 0x1;
    549c:	84 c4 00 00 	l.lwz r6,0x0(r4)
    54a0:	a8 c6 00 01 	l.ori r6,r6,0x1
    54a4:	d4 04 30 00 	l.sw 0x0(r4),r6

	/* check timer pending valid or not */
	while ((ptimerc_regs->irq_status & (1 << delay_timer->timer_no)) == 0) {
    54a8:	84 c3 00 04 	l.lwz r6,0x4(r3)
    54ac:	e0 c5 30 03 	l.and r6,r5,r6
    54b0:	bc 06 00 00 	l.sfeqi r6,0x0
    54b4:	13 ff ff fd 	l.bf 54a8 <time_mdelay+0x84>
    54b8:	15 00 00 00 	l.nop 0x0
		;
	}

	/* stop timer */
	delay_timer->pregs->control &= ~(0x1);
    54bc:	84 c4 00 00 	l.lwz r6,0x0(r4)
    54c0:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    54c4:	e0 c6 10 03 	l.and r6,r6,r2
    54c8:	d4 04 30 00 	l.sw 0x0(r4),r6

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << delay_timer->timer_no);
    54cc:	d4 03 28 04 	l.sw 0x4(r3),r5
}
    54d0:	9c 21 00 04 	l.addi r1,r1,0x4
    54d4:	44 00 48 00 	l.jr r9
    54d8:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

000054dc <cnt64_udelay>:

void cnt64_udelay(u32 us)
{
    54dc:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    54e0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    54e4:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    54e8:	a8 43 00 00 	l.ori r2,r3,0x0
	u64 expire = 0;

	if (us == 0) {
    54ec:	bc 03 00 00 	l.sfeqi r3,0x0
    54f0:	10 00 00 16 	l.bf 5548 <cnt64_udelay+0x6c>
    54f4:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
		/* no delay */
		return;
	}

	/* calc expire time */
	expire = (us * 24) + cpucfg_counter_read();
    54f8:	04 00 1f 70 	l.jal d2b8 <cpucfg_counter_read>
    54fc:	9d c0 00 01 	l.addi r14,r0,0x1
    5500:	e0 62 10 00 	l.add r3,r2,r2
    5504:	e0 43 10 00 	l.add r2,r3,r2
    5508:	b8 42 00 03 	l.slli r2,r2,0x3
    550c:	e0 4c 10 00 	l.add r2,r12,r2
    5510:	e4 82 60 00 	l.sfltu r2,r12
    5514:	10 00 00 04 	l.bf 5524 <cnt64_udelay+0x48>
    5518:	e1 ce 58 00 	l.add r14,r14,r11
    551c:	9d c0 00 00 	l.addi r14,r0,0x0
    5520:	e1 ce 58 00 	l.add r14,r14,r11
	while (expire > cpucfg_counter_read()) {
    5524:	04 00 1f 65 	l.jal d2b8 <cpucfg_counter_read>
    5528:	15 00 00 00 	l.nop 0x0
    552c:	e4 4e 58 00 	l.sfgtu r14,r11
    5530:	13 ff ff fd 	l.bf 5524 <cnt64_udelay+0x48>
    5534:	e4 2e 58 00 	l.sfne r14,r11
    5538:	10 00 00 04 	l.bf 5548 <cnt64_udelay+0x6c>
    553c:	e4 42 60 00 	l.sfgtu r2,r12
    5540:	13 ff ff f9 	l.bf 5524 <cnt64_udelay+0x48>
    5544:	15 00 00 00 	l.nop 0x0
		/* wait busy */
		;
	}
}
    5548:	9c 21 00 0c 	l.addi r1,r1,0xc
    554c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5550:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    5554:	44 00 48 00 	l.jr r9
    5558:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

0000555c <time_udelay>:

void time_udelay(u32 us)
{
    555c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    5560:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    5564:	a8 43 00 00 	l.ori r2,r3,0x0
	u32 cycles;
	u32 cpus_freq;

	if (us == 0) {
    5568:	bc 03 00 00 	l.sfeqi r3,0x0
    556c:	10 00 00 1e 	l.bf 55e4 <time_udelay+0x88>
    5570:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
		/* no delay */
		return;
	}

	if (is_hosc_lock() || is_suspend_lock()) {
    5574:	04 00 32 29 	l.jal 11e18 <is_hosc_lock>
    5578:	15 00 00 00 	l.nop 0x0
    557c:	bc 2b 00 00 	l.sfnei r11,0x0
    5580:	10 00 00 07 	l.bf 559c <time_udelay+0x40>
    5584:	15 00 00 00 	l.nop 0x0
    5588:	04 00 17 ac 	l.jal b438 <is_suspend_lock>
    558c:	15 00 00 00 	l.nop 0x0
    5590:	bc 0b 00 00 	l.sfeqi r11,0x0
    5594:	10 00 00 10 	l.bf 55d4 <time_udelay+0x78>
    5598:	a8 62 00 00 	l.ori r3,r2,0x0
		cpus_freq = ccu_get_sclk_freq(CCU_SYS_CLK_CPUS);
    559c:	04 00 32 e6 	l.jal 12134 <ccu_get_sclk_freq>
    55a0:	9c 60 00 11 	l.addi r3,r0,0x11
		cycles = (cpus_freq * us + (1000000 - 1)) / 1000000;
    55a4:	e0 4b 13 06 	l.mul r2,r11,r2
    55a8:	18 80 00 0f 	l.movhi r4,0xf
    55ac:	a8 84 42 3f 	l.ori r4,r4,0x423f
    55b0:	e0 62 20 00 	l.add r3,r2,r4
    55b4:	18 80 00 0f 	l.movhi r4,0xf
    55b8:	04 00 1d 1c 	l.jal ca28 <__udivsi3>
    55bc:	a8 84 42 40 	l.ori r4,r4,0x4240
		time_cdelay(cycles);
	} else {
		cnt64_udelay(us);
	}

}
    55c0:	9c 21 00 08 	l.addi r1,r1,0x8
	}

	if (is_hosc_lock() || is_suspend_lock()) {
		cpus_freq = ccu_get_sclk_freq(CCU_SYS_CLK_CPUS);
		cycles = (cpus_freq * us + (1000000 - 1)) / 1000000;
		time_cdelay(cycles);
    55c4:	a8 6b 00 00 	l.ori r3,r11,0x0
	} else {
		cnt64_udelay(us);
	}

}
    55c8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	}

	if (is_hosc_lock() || is_suspend_lock()) {
		cpus_freq = ccu_get_sclk_freq(CCU_SYS_CLK_CPUS);
		cycles = (cpus_freq * us + (1000000 - 1)) / 1000000;
		time_cdelay(cycles);
    55cc:	03 ff ff 90 	l.j 540c <time_cdelay>
    55d0:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)
	} else {
		cnt64_udelay(us);
	}

}
    55d4:	9c 21 00 08 	l.addi r1,r1,0x8
    55d8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	if (is_hosc_lock() || is_suspend_lock()) {
		cpus_freq = ccu_get_sclk_freq(CCU_SYS_CLK_CPUS);
		cycles = (cpus_freq * us + (1000000 - 1)) / 1000000;
		time_cdelay(cycles);
	} else {
		cnt64_udelay(us);
    55dc:	03 ff ff c0 	l.j 54dc <cnt64_udelay>
    55e0:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)
	}

}
    55e4:	9c 21 00 08 	l.addi r1,r1,0x8
    55e8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    55ec:	44 00 48 00 	l.jr r9
    55f0:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000055f4 <uart_init>:
 *
 * @return: OK if initialize uart succeeded, others if failed.
 * @note: initialize uart.
 */
s32 uart_init(void)
{
    55f4:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
	u32 div;
	u32 lcr;
	u32 apb0_clk;

	/* uart_pin_not_used may parse from dts */
	uart_pin_not_used = 0;
    55f8:	18 40 00 01 	l.movhi r2,0x1
    55fc:	9c 60 00 00 	l.addi r3,r0,0x0
    5600:	a8 42 33 b8 	l.ori r2,r2,0x33b8
 *
 * @return: OK if initialize uart succeeded, others if failed.
 * @note: initialize uart.
 */
s32 uart_init(void)
{
    5604:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    5608:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	u32 div;
	u32 lcr;
	u32 apb0_clk;

	/* uart_pin_not_used may parse from dts */
	uart_pin_not_used = 0;
    560c:	d4 02 18 00 	l.sw 0x0(r2),r3
 *
 * @return: OK if initialize uart succeeded, others if failed.
 * @note: initialize uart.
 */
s32 uart_init(void)
{
    5610:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	u32 lcr;
	u32 apb0_clk;

	/* uart_pin_not_used may parse from dts */
	uart_pin_not_used = 0;
	if (uart_pin_not_used)
    5614:	84 42 00 00 	l.lwz r2,0x0(r2)
    5618:	e4 22 18 00 	l.sfne r2,r3
    561c:	10 00 00 32 	l.bf 56e4 <uart_init+0xf0>
    5620:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	uart_rate = UART_BAUDRATE;
    5624:	19 c0 00 01 	l.movhi r14,0x1
    5628:	a8 60 e1 00 	l.ori r3,r0,0xe100
    562c:	a9 ce 33 bc 	l.ori r14,r14,0x33bc
#ifndef CFG_FPGA_PLATFORM
	pin_set_multi_sel(PIN_GRP_PL, 2, 2);
    5630:	9c 80 00 02 	l.addi r4,r0,0x2
	/* uart_pin_not_used may parse from dts */
	uart_pin_not_used = 0;
	if (uart_pin_not_used)
		return -EACCES;

	uart_rate = UART_BAUDRATE;
    5634:	d4 0e 18 00 	l.sw 0x0(r14),r3
#ifndef CFG_FPGA_PLATFORM
	pin_set_multi_sel(PIN_GRP_PL, 2, 2);
    5638:	a8 a4 00 00 	l.ori r5,r4,0x0
    563c:	07 ff fd 43 	l.jal 4b48 <pin_set_multi_sel>
    5640:	9c 60 00 01 	l.addi r3,r0,0x1
	pin_set_multi_sel(PIN_GRP_PL, 3, 2);
    5644:	9c a0 00 02 	l.addi r5,r0,0x2
    5648:	9c 60 00 01 	l.addi r3,r0,0x1
    564c:	07 ff fd 3f 	l.jal 4b48 <pin_set_multi_sel>
    5650:	9c 80 00 03 	l.addi r4,r0,0x3
	/* set reset as assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_UART, CCU_CLK_NRESET),
    5654:	9c 60 00 1a 	l.addi r3,r0,0x1a
    5658:	04 00 31 f4 	l.jal 11e28 <ccu_set_mclk_reset>
    565c:	9c 80 00 01 	l.addi r4,r0,0x1

	/* set uart clock, open apb0 uart gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_UART, CCU_CLK_ON);
    5660:	9c 80 00 01 	l.addi r4,r0,0x1
    5664:	04 00 30 ba 	l.jal 1194c <ccu_set_mclk_onoff>
    5668:	9c 60 00 1a 	l.addi r3,r0,0x1a

	/* the baud rate divisor */
	apb0_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
    566c:	04 00 32 b2 	l.jal 12134 <ccu_get_sclk_freq>
    5670:	9c 60 00 24 	l.addi r3,r0,0x24
	div = (apb0_clk + (uart_rate << 3)) / (uart_rate << 4);
    5674:	84 6e 00 00 	l.lwz r3,0x0(r14)
    5678:	84 8e 00 00 	l.lwz r4,0x0(r14)
    567c:	b8 63 00 03 	l.slli r3,r3,0x3
    5680:	b8 84 00 04 	l.slli r4,r4,0x4
    5684:	04 00 1c e9 	l.jal ca28 <__udivsi3>
    5688:	e0 6b 18 00 	l.add r3,r11,r3
	pin_set_multi_sel(PIN_GRP_PL, 2, 2);
	pin_set_multi_sel(PIN_GRP_PL, 3, 2);
#endif

	/* initialize uart controller */
	lcr = readl(UART_REG_LCR);
    568c:	18 60 07 08 	l.movhi r3,0x708
    5690:	a8 83 00 0c 	l.ori r4,r3,0xc
    5694:	84 a4 00 00 	l.lwz r5,0x0(r4)
	writel(lcr | 0x80, UART_REG_LCR);  /* select the Divsor Latch Low Register and Divsor Latch High Register */
    5698:	a8 a5 00 80 	l.ori r5,r5,0x80
    569c:	d4 04 28 00 	l.sw 0x0(r4),r5
	writel(div & 0xff, UART_REG_DLL);
    56a0:	a4 ab 00 ff 	l.andi r5,r11,0xff
	writel((div >> 8) & 0xff, UART_REG_DLH);
    56a4:	b9 6b 00 48 	l.srli r11,r11,0x8
#endif

	/* initialize uart controller */
	lcr = readl(UART_REG_LCR);
	writel(lcr | 0x80, UART_REG_LCR);  /* select the Divsor Latch Low Register and Divsor Latch High Register */
	writel(div & 0xff, UART_REG_DLL);
    56a8:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((div >> 8) & 0xff, UART_REG_DLH);
    56ac:	a8 a3 00 04 	l.ori r5,r3,0x4
    56b0:	a5 6b 00 ff 	l.andi r11,r11,0xff
    56b4:	d4 05 58 00 	l.sw 0x0(r5),r11
#ifdef CFG_SHELL_USED
	writel(lcr & (~0x80), UART_REG_LCR);
#endif
	writel(0, UART_REG_HALT);
    56b8:	a8 a3 00 a4 	l.ori r5,r3,0xa4
	writel(3, UART_REG_LCR);           /* set mode, 8bit charset */
	writel(7, UART_REG_FCR);           /* enable and reset transmit/receive fifo */
    56bc:	a8 63 00 08 	l.ori r3,r3,0x8
	writel(div & 0xff, UART_REG_DLL);
	writel((div >> 8) & 0xff, UART_REG_DLH);
#ifdef CFG_SHELL_USED
	writel(lcr & (~0x80), UART_REG_LCR);
#endif
	writel(0, UART_REG_HALT);
    56c0:	d4 05 10 00 	l.sw 0x0(r5),r2
	writel(3, UART_REG_LCR);           /* set mode, 8bit charset */
    56c4:	9c a0 00 03 	l.addi r5,r0,0x3
#endif
	/* ensure uart is unlock */
	uart_lock = 0;

	/* uart initialize succeeded */
	return OK;
    56c8:	a9 62 00 00 	l.ori r11,r2,0x0
	writel((div >> 8) & 0xff, UART_REG_DLH);
#ifdef CFG_SHELL_USED
	writel(lcr & (~0x80), UART_REG_LCR);
#endif
	writel(0, UART_REG_HALT);
	writel(3, UART_REG_LCR);           /* set mode, 8bit charset */
    56cc:	d4 04 28 00 	l.sw 0x0(r4),r5
	writel(7, UART_REG_FCR);           /* enable and reset transmit/receive fifo */
    56d0:	9c 80 00 07 	l.addi r4,r0,0x7
    56d4:	d4 03 20 00 	l.sw 0x0(r3),r4
#ifdef CFG_SHELL_USED
	writel(1, UART_REG_IER);       /* enable receiver interrupt */
#endif
	/* ensure uart is unlock */
	uart_lock = 0;
    56d8:	18 60 00 01 	l.movhi r3,0x1
    56dc:	a8 63 30 b4 	l.ori r3,r3,0x30b4
    56e0:	d4 03 10 00 	l.sw 0x0(r3),r2

	/* uart initialize succeeded */
	return OK;
}
    56e4:	9c 21 00 0c 	l.addi r1,r1,0xc
    56e8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    56ec:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    56f0:	44 00 48 00 	l.jr r9
    56f4:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

000056f8 <uart_exit>:
 * @return: OK if exit uart succeeded, others if failed.
 * @note: exit uart.
 */
s32 uart_exit(void)
{
	uart_lock = 1;
    56f8:	18 60 00 01 	l.movhi r3,0x1
 *
 * @return: OK if exit uart succeeded, others if failed.
 * @note: exit uart.
 */
s32 uart_exit(void)
{
    56fc:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	uart_lock = 1;
    5700:	a8 63 30 b4 	l.ori r3,r3,0x30b4
    5704:	9c 40 00 01 	l.addi r2,r0,0x1
 *
 * @return: OK if exit uart succeeded, others if failed.
 * @note: exit uart.
 */
s32 uart_exit(void)
{
    5708:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	uart_lock = 1;
    570c:	d4 03 10 00 	l.sw 0x0(r3),r2
	uart_pin_not_used = 0;
    5710:	18 60 00 01 	l.movhi r3,0x1
    5714:	9c 80 00 00 	l.addi r4,r0,0x0
    5718:	a8 63 33 b8 	l.ori r3,r3,0x33b8
 *
 * @return: OK if exit uart succeeded, others if failed.
 * @note: exit uart.
 */
s32 uart_exit(void)
{
    571c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	uart_lock = 1;
	uart_pin_not_used = 0;
    5720:	d4 03 20 00 	l.sw 0x0(r3),r4

	pin_set_multi_sel(PIN_GRP_PL, 2, 7);
    5724:	9c a0 00 07 	l.addi r5,r0,0x7
    5728:	a8 62 00 00 	l.ori r3,r2,0x0
    572c:	07 ff fd 07 	l.jal 4b48 <pin_set_multi_sel>
    5730:	9c 80 00 02 	l.addi r4,r0,0x2
	pin_set_multi_sel(PIN_GRP_PL, 3, 7);
    5734:	a8 62 00 00 	l.ori r3,r2,0x0
    5738:	9c a0 00 07 	l.addi r5,r0,0x7
    573c:	07 ff fd 03 	l.jal 4b48 <pin_set_multi_sel>
    5740:	9c 80 00 03 	l.addi r4,r0,0x3

	/* set uart clock, open apb0 uart gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_UART, CCU_CLK_OFF);
    5744:	9c 60 00 1a 	l.addi r3,r0,0x1a
    5748:	04 00 30 81 	l.jal 1194c <ccu_set_mclk_onoff>
    574c:	9c 80 00 00 	l.addi r4,r0,0x0

	/* set reset as assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_UART, CCU_CLK_RESET);
    5750:	9c 60 00 1a 	l.addi r3,r0,0x1a
    5754:	04 00 31 b5 	l.jal 11e28 <ccu_set_mclk_reset>
    5758:	9c 80 00 00 	l.addi r4,r0,0x0

	return OK;
}
    575c:	9c 21 00 08 	l.addi r1,r1,0x8
    5760:	9d 60 00 00 	l.addi r11,r0,0x0
    5764:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5768:	44 00 48 00 	l.jr r9
    576c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00005770 <uart_putc>:
 * @return: OK if put out charset succeeded, others if failed.
 * @note: put out a charset.
 */
s32 uart_putc(char ch)
{
	if (uart_lock || uart_pin_not_used)
    5770:	18 80 00 01 	l.movhi r4,0x1
 * @ch: the charset which we want to put out.
 * @return: OK if put out charset succeeded, others if failed.
 * @note: put out a charset.
 */
s32 uart_putc(char ch)
{
    5774:	b8 63 00 18 	l.slli r3,r3,0x18
	if (uart_lock || uart_pin_not_used)
    5778:	a8 84 30 b4 	l.ori r4,r4,0x30b4
		return -EACCES;
    577c:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
 * @return: OK if put out charset succeeded, others if failed.
 * @note: put out a charset.
 */
s32 uart_putc(char ch)
{
	if (uart_lock || uart_pin_not_used)
    5780:	84 84 00 00 	l.lwz r4,0x0(r4)
    5784:	bc 24 00 00 	l.sfnei r4,0x0
    5788:	10 00 00 11 	l.bf 57cc <uart_putc+0x5c>
    578c:	b8 63 00 98 	l.srai r3,r3,0x18
    5790:	18 80 00 01 	l.movhi r4,0x1
    5794:	a8 84 33 b8 	l.ori r4,r4,0x33b8
    5798:	84 84 00 00 	l.lwz r4,0x0(r4)
    579c:	bc 24 00 00 	l.sfnei r4,0x0
    57a0:	10 00 00 0b 	l.bf 57cc <uart_putc+0x5c>
    57a4:	18 80 07 08 	l.movhi r4,0x708
		return -EACCES;

	while (!(readl(UART_REG_USR) & 2)) /* fifo is full, check again */
    57a8:	a8 84 00 7c 	l.ori r4,r4,0x7c
    57ac:	84 a4 00 00 	l.lwz r5,0x0(r4)
    57b0:	a4 a5 00 02 	l.andi r5,r5,0x2
    57b4:	bc 05 00 00 	l.sfeqi r5,0x0
    57b8:	13 ff ff fd 	l.bf 57ac <uart_putc+0x3c>
    57bc:	15 00 00 00 	l.nop 0x0
		;

	/* write out charset to transmit fifo */
	writel(ch, UART_REG_THR);
    57c0:	18 80 07 08 	l.movhi r4,0x708

	return OK;
    57c4:	9d 60 00 00 	l.addi r11,r0,0x0

	while (!(readl(UART_REG_USR) & 2)) /* fifo is full, check again */
		;

	/* write out charset to transmit fifo */
	writel(ch, UART_REG_THR);
    57c8:	d4 04 18 00 	l.sw 0x0(r4),r3

	return OK;
}
    57cc:	44 00 48 00 	l.jr r9
    57d0:	15 00 00 00 	l.nop 0x0

000057d4 <uart_get>:
 */
u32 uart_get(char *buf)
{
	u32 count = 0;

	if (uart_lock || uart_pin_not_used)
    57d4:	18 80 00 01 	l.movhi r4,0x1
		return -EACCES;
    57d8:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
 */
u32 uart_get(char *buf)
{
	u32 count = 0;

	if (uart_lock || uart_pin_not_used)
    57dc:	a8 84 30 b4 	l.ori r4,r4,0x30b4
    57e0:	84 84 00 00 	l.lwz r4,0x0(r4)
    57e4:	bc 24 00 00 	l.sfnei r4,0x0
    57e8:	10 00 00 13 	l.bf 5834 <uart_get+0x60>
    57ec:	15 00 00 00 	l.nop 0x0
    57f0:	18 80 00 01 	l.movhi r4,0x1
    57f4:	a8 84 33 b8 	l.ori r4,r4,0x33b8
    57f8:	84 84 00 00 	l.lwz r4,0x0(r4)
    57fc:	bc 24 00 00 	l.sfnei r4,0x0
    5800:	10 00 00 0d 	l.bf 5834 <uart_get+0x60>
    5804:	15 00 00 00 	l.nop 0x0
    5808:	a9 64 00 00 	l.ori r11,r4,0x0
		return -EACCES;

	while (readl(UART_REG_RFL)) {
    580c:	18 80 07 08 	l.movhi r4,0x708
    5810:	00 00 00 05 	l.j 5824 <uart_get+0x50>
    5814:	a8 a4 00 84 	l.ori r5,r4,0x84
		*buf++ = (char)(readl(UART_REG_RBR) & 0xff);
    5818:	84 e4 00 00 	l.lwz r7,0x0(r4)
		count++;
    581c:	9d 6b 00 01 	l.addi r11,r11,0x1

	if (uart_lock || uart_pin_not_used)
		return -EACCES;

	while (readl(UART_REG_RFL)) {
		*buf++ = (char)(readl(UART_REG_RBR) & 0xff);
    5820:	d8 06 38 00 	l.sb 0x0(r6),r7
	u32 count = 0;

	if (uart_lock || uart_pin_not_used)
		return -EACCES;

	while (readl(UART_REG_RFL)) {
    5824:	84 c5 00 00 	l.lwz r6,0x0(r5)
    5828:	bc 26 00 00 	l.sfnei r6,0x0
    582c:	13 ff ff fb 	l.bf 5818 <uart_get+0x44>
    5830:	e0 c3 58 00 	l.add r6,r3,r11
		*buf++ = (char)(readl(UART_REG_RBR) & 0xff);
		count++;
	}

	return count;
}
    5834:	44 00 48 00 	l.jr r9
    5838:	15 00 00 00 	l.nop 0x0

0000583c <uart_puts>:
 * @string: the string which we want to put out.
 * @return: OK if put out string succeeded, others if failed.
 * @note: put out a string.
 */
s32 uart_puts(const char *string)
{
    583c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    5840:	a8 43 00 00 	l.ori r2,r3,0x0
	if (uart_lock || uart_pin_not_used)
    5844:	18 60 00 01 	l.movhi r3,0x1
 * @string: the string which we want to put out.
 * @return: OK if put out string succeeded, others if failed.
 * @note: put out a string.
 */
s32 uart_puts(const char *string)
{
    5848:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (uart_lock || uart_pin_not_used)
    584c:	a8 63 30 b4 	l.ori r3,r3,0x30b4
 * @string: the string which we want to put out.
 * @return: OK if put out string succeeded, others if failed.
 * @note: put out a string.
 */
s32 uart_puts(const char *string)
{
    5850:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	if (uart_lock || uart_pin_not_used)
    5854:	84 63 00 00 	l.lwz r3,0x0(r3)
    5858:	bc 23 00 00 	l.sfnei r3,0x0
    585c:	10 00 00 15 	l.bf 58b0 <uart_puts+0x74>
    5860:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
    5864:	18 60 00 01 	l.movhi r3,0x1
    5868:	a8 63 33 b8 	l.ori r3,r3,0x33b8
    586c:	84 63 00 00 	l.lwz r3,0x0(r3)
    5870:	bc 23 00 00 	l.sfnei r3,0x0
    5874:	0c 00 00 0b 	l.bnf 58a0 <uart_puts+0x64>
    5878:	15 00 00 00 	l.nop 0x0
			uart_putc('\r');
		uart_putc(*string++);
	}

	return OK;
}
    587c:	00 00 00 0e 	l.j 58b4 <uart_puts+0x78>
    5880:	9c 21 00 08 	l.addi r1,r1,0x8
		return -EACCES;

	ASSERT(string != NULL);

	while (*string != '\0') {
		if (*string == '\n') /* if current character is '\n', insert output with '\r' */
    5884:	10 00 00 04 	l.bf 5894 <uart_puts+0x58>
    5888:	15 00 00 00 	l.nop 0x0
			uart_putc('\r');
    588c:	07 ff ff b9 	l.jal 5770 <uart_putc>
    5890:	9c 60 00 0d 	l.addi r3,r0,0xd
		uart_putc(*string++);
    5894:	90 62 00 00 	l.lbs r3,0x0(r2)
    5898:	07 ff ff b6 	l.jal 5770 <uart_putc>
    589c:	9c 42 00 01 	l.addi r2,r2,0x1
	if (uart_lock || uart_pin_not_used)
		return -EACCES;

	ASSERT(string != NULL);

	while (*string != '\0') {
    58a0:	91 62 00 00 	l.lbs r11,0x0(r2)
    58a4:	bc 2b 00 00 	l.sfnei r11,0x0
    58a8:	13 ff ff f7 	l.bf 5884 <uart_puts+0x48>
    58ac:	bc 2b 00 0a 	l.sfnei r11,0xa
			uart_putc('\r');
		uart_putc(*string++);
	}

	return OK;
}
    58b0:	9c 21 00 08 	l.addi r1,r1,0x8
    58b4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    58b8:	44 00 48 00 	l.jr r9
    58bc:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000058c0 <uart_set_baudrate>:

s32 uart_set_baudrate(u32 rate)
{
    58c0:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
	u32 freq;
	u32 div;
	u32 lcr;
	u32 halt;

	if (uart_pin_not_used)
    58c4:	18 40 00 01 	l.movhi r2,0x1

	return OK;
}

s32 uart_set_baudrate(u32 rate)
{
    58c8:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	u32 freq;
	u32 div;
	u32 lcr;
	u32 halt;

	if (uart_pin_not_used)
    58cc:	a8 42 33 b8 	l.ori r2,r2,0x33b8

	return OK;
}

s32 uart_set_baudrate(u32 rate)
{
    58d0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 freq;
	u32 div;
	u32 lcr;
	u32 halt;

	if (uart_pin_not_used)
    58d4:	84 42 00 00 	l.lwz r2,0x0(r2)

	return OK;
}

s32 uart_set_baudrate(u32 rate)
{
    58d8:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    58dc:	a9 c3 00 00 	l.ori r14,r3,0x0
	u32 freq;
	u32 div;
	u32 lcr;
	u32 halt;

	if (uart_pin_not_used)
    58e0:	bc 22 00 00 	l.sfnei r2,0x0
    58e4:	10 00 00 3f 	l.bf 59e0 <uart_set_baudrate+0x120>
    58e8:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	/* update current uart baudrate */
	LOG("uart buadrate change from [%d] to [%d]\n", uart_rate, rate);
    58ec:	18 40 00 01 	l.movhi r2,0x1
    58f0:	18 80 00 01 	l.movhi r4,0x1
    58f4:	a8 42 33 bc 	l.ori r2,r2,0x33bc
    58f8:	a8 84 23 1a 	l.ori r4,r4,0x231a
    58fc:	84 62 00 00 	l.lwz r3,0x0(r2)
    5900:	d4 01 70 04 	l.sw 0x4(r1),r14
    5904:	d4 01 18 00 	l.sw 0x0(r1),r3
    5908:	04 00 13 b4 	l.jal a7d8 <debugger_printf>
    590c:	9c 60 00 02 	l.addi r3,r0,0x2
	uart_rate = rate;
    5910:	d4 02 70 00 	l.sw 0x0(r2),r14

	/* wait uart transmit fifo empty */
	while (readl(UART_REG_TFL))
    5914:	18 40 07 08 	l.movhi r2,0x708
    5918:	a8 42 00 80 	l.ori r2,r2,0x80
    591c:	84 62 00 00 	l.lwz r3,0x0(r2)
    5920:	bc 23 00 00 	l.sfnei r3,0x0
    5924:	13 ff ff fe 	l.bf 591c <uart_set_baudrate+0x5c>
    5928:	9c 60 00 24 	l.addi r3,r0,0x24
#ifdef CFG_FPGA_PLATFORM
	freq = 24000000;
#else
	freq = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
#endif
	div  = (freq + (uart_rate << 3)) / (uart_rate << 4);
    592c:	18 40 00 01 	l.movhi r2,0x1

	/* reconfig uart baudrate */
#ifdef CFG_FPGA_PLATFORM
	freq = 24000000;
#else
	freq = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
    5930:	04 00 32 01 	l.jal 12134 <ccu_get_sclk_freq>
    5934:	a8 42 33 bc 	l.ori r2,r2,0x33bc
#endif
	div  = (freq + (uart_rate << 3)) / (uart_rate << 4);
    5938:	84 62 00 00 	l.lwz r3,0x0(r2)
    593c:	84 82 00 00 	l.lwz r4,0x0(r2)
    5940:	b8 63 00 03 	l.slli r3,r3,0x3
    5944:	b8 84 00 04 	l.slli r4,r4,0x4
	lcr  = readl(UART_REG_LCR);
    5948:	18 40 07 08 	l.movhi r2,0x708
#ifdef CFG_FPGA_PLATFORM
	freq = 24000000;
#else
	freq = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
#endif
	div  = (freq + (uart_rate << 3)) / (uart_rate << 4);
    594c:	e0 6b 18 00 	l.add r3,r11,r3
    5950:	04 00 1c 36 	l.jal ca28 <__udivsi3>
    5954:	a8 42 00 0c 	l.ori r2,r2,0xc
	lcr  = readl(UART_REG_LCR);
    5958:	84 a2 00 00 	l.lwz r5,0x0(r2)

	if (div == 0) /* avoid config invalid value */
    595c:	bc 0b 00 00 	l.sfeqi r11,0x0
    5960:	0c 00 00 03 	l.bnf 596c <uart_set_baudrate+0xac>
    5964:	18 80 07 08 	l.movhi r4,0x708
		div = 1;
    5968:	9d 60 00 01 	l.addi r11,r0,0x1
	/* enable change when busy */
	halt = readl(UART_REG_HALT) | 0x2;
	writel(halt, UART_REG_HALT);

	/* select the divsor latch low register and divsor latch high register */
	writel(lcr | 0x80, UART_REG_LCR);
    596c:	a8 c5 00 80 	l.ori r6,r5,0x80

	if (div == 0) /* avoid config invalid value */
		div = 1;

	/* enable change when busy */
	halt = readl(UART_REG_HALT) | 0x2;
    5970:	a8 64 00 a4 	l.ori r3,r4,0xa4
    5974:	84 43 00 00 	l.lwz r2,0x0(r3)
    5978:	a8 42 00 02 	l.ori r2,r2,0x2
	writel(halt, UART_REG_HALT);
    597c:	d4 03 10 00 	l.sw 0x0(r3),r2

	/* select the divsor latch low register and divsor latch high register */
	writel(lcr | 0x80, UART_REG_LCR);
    5980:	a8 44 00 0c 	l.ori r2,r4,0xc
    5984:	d4 02 30 00 	l.sw 0x0(r2),r6

	/* set divsor of uart */
	writel(div & 0xff, UART_REG_DLL);
    5988:	a4 cb 00 ff 	l.andi r6,r11,0xff
	writel((div >> 8) & 0xff, UART_REG_DLH);
    598c:	b9 6b 00 48 	l.srli r11,r11,0x8

	/* select the divsor latch low register and divsor latch high register */
	writel(lcr | 0x80, UART_REG_LCR);

	/* set divsor of uart */
	writel(div & 0xff, UART_REG_DLL);
    5990:	d4 04 30 00 	l.sw 0x0(r4),r6
	writel((div >> 8) & 0xff, UART_REG_DLH);
    5994:	a8 84 00 04 	l.ori r4,r4,0x4
    5998:	a5 6b 00 ff 	l.andi r11,r11,0xff
    599c:	d4 04 58 00 	l.sw 0x0(r4),r11

	/* unselect the divsor latch low register and divsor latch high register */
	writel(lcr & (~0x80), UART_REG_LCR);
    59a0:	9c 80 ff 7f 	l.addi r4,r0,0xffffff7f
    59a4:	e0 a5 20 03 	l.and r5,r5,r4
    59a8:	d4 02 28 00 	l.sw 0x0(r2),r5

	/* update baudrate */
	halt = readl(UART_REG_HALT) | 0x4;
    59ac:	84 43 00 00 	l.lwz r2,0x0(r3)
    59b0:	a8 42 00 04 	l.ori r2,r2,0x4
	writel(halt, UART_REG_HALT);
    59b4:	d4 03 10 00 	l.sw 0x0(r3),r2

	/* waiting update */
	while (readl(UART_REG_HALT) & 0x4)
    59b8:	85 63 00 00 	l.lwz r11,0x0(r3)
    59bc:	a5 6b 00 04 	l.andi r11,r11,0x4
    59c0:	bc 2b 00 00 	l.sfnei r11,0x0
    59c4:	13 ff ff fd 	l.bf 59b8 <uart_set_baudrate+0xf8>
    59c8:	15 00 00 00 	l.nop 0x0
		continue;

	/* disable change when busy */
	halt = readl(UART_REG_HALT) | 0x4;
    59cc:	84 43 00 00 	l.lwz r2,0x0(r3)
	writel(halt & (~0x2), UART_REG_HALT);
    59d0:	9c 80 ff fd 	l.addi r4,r0,0xfffffffd
	/* waiting update */
	while (readl(UART_REG_HALT) & 0x4)
		continue;

	/* disable change when busy */
	halt = readl(UART_REG_HALT) | 0x4;
    59d4:	a8 42 00 04 	l.ori r2,r2,0x4
	writel(halt & (~0x2), UART_REG_HALT);
    59d8:	e0 42 20 03 	l.and r2,r2,r4
    59dc:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}
    59e0:	9c 21 00 14 	l.addi r1,r1,0x14
    59e4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    59e8:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    59ec:	44 00 48 00 	l.jr r9
    59f0:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

000059f4 <uart_clkchangecb>:
volatile static u32 uart_rate;

#define IS_TX_FIFO_EMPTY  (readl(UART_REG_USR) & (0x1 << 2))

s32 uart_clkchangecb(u32 command, u32 freq)
{
    59f4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	if (uart_pin_not_used)
    59f8:	18 40 00 01 	l.movhi r2,0x1
volatile static u32 uart_rate;

#define IS_TX_FIFO_EMPTY  (readl(UART_REG_USR) & (0x1 << 2))

s32 uart_clkchangecb(u32 command, u32 freq)
{
    59fc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (uart_pin_not_used)
    5a00:	a8 42 33 b8 	l.ori r2,r2,0x33b8
volatile static u32 uart_rate;

#define IS_TX_FIFO_EMPTY  (readl(UART_REG_USR) & (0x1 << 2))

s32 uart_clkchangecb(u32 command, u32 freq)
{
    5a04:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	if (uart_pin_not_used)
    5a08:	84 42 00 00 	l.lwz r2,0x0(r2)
    5a0c:	bc 22 00 00 	l.sfnei r2,0x0
    5a10:	10 00 00 1e 	l.bf 5a88 <uart_clkchangecb+0x94>
    5a14:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	switch (command) {
    5a18:	bc 03 00 00 	l.sfeqi r3,0x0
    5a1c:	10 00 00 06 	l.bf 5a34 <uart_clkchangecb+0x40>
    5a20:	bc 03 00 01 	l.sfeqi r3,0x1
    5a24:	0c 00 00 19 	l.bnf 5a88 <uart_clkchangecb+0x94>
    5a28:	9d 60 ff fd 	l.addi r11,r0,0xfffffffd
			return OK;
		}
	case CCU_CLK_CLKCHG_DONE:
		{
			/* reconfig uart current baudrate */
			uart_set_baudrate(uart_rate);
    5a2c:	00 00 00 0f 	l.j 5a68 <uart_clkchangecb+0x74>
    5a30:	18 60 00 01 	l.movhi r3,0x1
	case CCU_CLK_CLKCHG_REQ:
		{
			/* clock will be change */
			INF("uart source clock change request\n");
			/* wait uart transmit fifo empty */
			while (!IS_TX_FIFO_EMPTY)
    5a34:	18 40 07 08 	l.movhi r2,0x708
    5a38:	a8 42 00 7c 	l.ori r2,r2,0x7c
    5a3c:	84 62 00 00 	l.lwz r3,0x0(r2)
    5a40:	a4 63 00 04 	l.andi r3,r3,0x4
    5a44:	bc 03 00 00 	l.sfeqi r3,0x0
    5a48:	13 ff ff fd 	l.bf 5a3c <uart_clkchangecb+0x48>
    5a4c:	9c 60 00 01 	l.addi r3,r0,0x1
				continue;
			/* lock uart */
			uart_lock = 1;
    5a50:	18 40 00 01 	l.movhi r2,0x1
    5a54:	a8 42 30 b4 	l.ori r2,r2,0x30b4
			return OK;
    5a58:	9d 60 00 00 	l.addi r11,r0,0x0
			INF("uart source clock change request\n");
			/* wait uart transmit fifo empty */
			while (!IS_TX_FIFO_EMPTY)
				continue;
			/* lock uart */
			uart_lock = 1;
    5a5c:	d4 02 18 00 	l.sw 0x0(r2),r3
			return OK;
    5a60:	00 00 00 0b 	l.j 5a8c <uart_clkchangecb+0x98>
    5a64:	9c 21 00 08 	l.addi r1,r1,0x8
		}
	case CCU_CLK_CLKCHG_DONE:
		{
			/* reconfig uart current baudrate */
			uart_set_baudrate(uart_rate);
    5a68:	a8 63 33 bc 	l.ori r3,r3,0x33bc
    5a6c:	84 63 00 00 	l.lwz r3,0x0(r3)
    5a70:	07 ff ff 94 	l.jal 58c0 <uart_set_baudrate>
    5a74:	15 00 00 00 	l.nop 0x0
			uart_lock = 0;
    5a78:	18 60 00 01 	l.movhi r3,0x1
			INF("uart buadrate change done\n");
			return OK;
    5a7c:	a9 62 00 00 	l.ori r11,r2,0x0
		}
	case CCU_CLK_CLKCHG_DONE:
		{
			/* reconfig uart current baudrate */
			uart_set_baudrate(uart_rate);
			uart_lock = 0;
    5a80:	a8 63 30 b4 	l.ori r3,r3,0x30b4
    5a84:	d4 03 10 00 	l.sw 0x0(r3),r2
			return OK;
		}
	}

	return -ESRCH;
}
    5a88:	9c 21 00 08 	l.addi r1,r1,0x8
    5a8c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5a90:	44 00 48 00 	l.jr r9
    5a94:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00005a98 <uart_get_baudrate>:
}

u32 uart_get_baudrate(void)
{
	return uart_rate;
}
    5a98:	18 60 00 01 	l.movhi r3,0x1
    5a9c:	a8 63 33 bc 	l.ori r3,r3,0x33bc
    5aa0:	85 63 00 00 	l.lwz r11,0x0(r3)
    5aa4:	44 00 48 00 	l.jr r9
    5aa8:	15 00 00 00 	l.nop 0x0

00005aac <twi_clear_irq_flag>:
/* clear the interrupt flag */
static inline void twi_clear_irq_flag(void)
{
	unsigned int reg_val;

	reg_val = readl(TWI_CTR);
    5aac:	18 60 07 08 	l.movhi r3,0x708
    5ab0:	a8 63 14 0c 	l.ori r3,r3,0x140c
    5ab4:	84 83 00 00 	l.lwz r4,0x0(r3)
	reg_val |= TWI_INTFLAG;
    5ab8:	a8 84 00 08 	l.ori r4,r4,0x8
	/* start and stop bit should be 0 */
	/*reg_val &= ~(TWI_MSTART | TWI_MSTOP); */
	writel(reg_val, TWI_CTR);
    5abc:	d4 03 20 00 	l.sw 0x0(r3),r4

	/* make sure that interrupt flag does really be cleared */
	readl(TWI_CTR);		/* read twice for delay */
    5ac0:	84 83 00 00 	l.lwz r4,0x0(r3)
	while (readl(TWI_CTR) & TWI_INTFLAG)
    5ac4:	84 83 00 00 	l.lwz r4,0x0(r3)
    5ac8:	a4 84 00 08 	l.andi r4,r4,0x8
    5acc:	bc 24 00 00 	l.sfnei r4,0x0
    5ad0:	13 ff ff fd 	l.bf 5ac4 <twi_clear_irq_flag+0x18>
    5ad4:	15 00 00 00 	l.nop 0x0
		;
}
    5ad8:	44 00 48 00 	l.jr r9
    5adc:	15 00 00 00 	l.nop 0x0

00005ae0 <twic_reset>:
}

static void twic_reset(void)
{
	/* reset twi comtroller */
	writel(1, TWI_SRR);
    5ae0:	18 60 07 08 	l.movhi r3,0x708
    5ae4:	9c 80 00 01 	l.addi r4,r0,0x1
    5ae8:	a8 63 14 18 	l.ori r3,r3,0x1418
    5aec:	d4 03 20 00 	l.sw 0x0(r3),r4
	INF("reset\n");
	/* wait twi reset completing */
	while (readl(TWI_SRR))
    5af0:	84 83 00 00 	l.lwz r4,0x0(r3)
    5af4:	bc 24 00 00 	l.sfnei r4,0x0
    5af8:	13 ff ff fe 	l.bf 5af0 <twic_reset+0x10>
    5afc:	15 00 00 00 	l.nop 0x0
		;
}
    5b00:	44 00 48 00 	l.jr r9
    5b04:	15 00 00 00 	l.nop 0x0

00005b08 <twi_start>:

static void twi_start(void)
{
	unsigned int value;

	value = readl(TWI_CTR);
    5b08:	18 60 07 08 	l.movhi r3,0x708
	while (readl(TWI_SRR))
		;
}

static void twi_start(void)
{
    5b0c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	unsigned int value;

	value = readl(TWI_CTR);
    5b10:	a8 63 14 0c 	l.ori r3,r3,0x140c
	value |= TWI_MSTART;
	value &= ~TWI_INTFLAG;
    5b14:	9c 40 ff f7 	l.addi r2,r0,0xfffffff7

static void twi_start(void)
{
	unsigned int value;

	value = readl(TWI_CTR);
    5b18:	84 83 00 00 	l.lwz r4,0x0(r3)
	while (readl(TWI_SRR))
		;
}

static void twi_start(void)
{
    5b1c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	unsigned int value;

	value = readl(TWI_CTR);
	value |= TWI_MSTART;
    5b20:	a8 84 00 20 	l.ori r4,r4,0x20
	value &= ~TWI_INTFLAG;
    5b24:	e0 84 10 03 	l.and r4,r4,r2
	writel(value, TWI_CTR);
    5b28:	d4 03 20 00 	l.sw 0x0(r3),r4
}
    5b2c:	9c 21 00 04 	l.addi r1,r1,0x4
    5b30:	44 00 48 00 	l.jr r9
    5b34:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00005b38 <twic_send_dummy_clock>:
	writel(reg_val, TWI_CTR);
}

static void twic_send_dummy_clock(void)
{
	unsigned int i = 10, timeout;
    5b38:	9c 60 00 0a 	l.addi r3,r0,0xa

	INF("restore bus status to 0x3a\n");
	while (i--) {
		writel(0xa, TWI_LCR);
    5b3c:	18 a0 07 08 	l.movhi r5,0x708
	reg_val &= ~TWI_INTFLAG;
	writel(reg_val, TWI_CTR);
}

static void twic_send_dummy_clock(void)
{
    5b40:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	unsigned int i = 10, timeout;

	INF("restore bus status to 0x3a\n");
	while (i--) {
		writel(0xa, TWI_LCR);
    5b44:	a8 a5 14 20 	l.ori r5,r5,0x1420
	reg_val &= ~TWI_INTFLAG;
	writel(reg_val, TWI_CTR);
}

static void twic_send_dummy_clock(void)
{
    5b48:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	unsigned int i = 10, timeout;

	INF("restore bus status to 0x3a\n");
	while (i--) {
    5b4c:	00 00 00 03 	l.j 5b58 <twic_send_dummy_clock+0x20>
    5b50:	a8 83 00 00 	l.ori r4,r3,0x0
		writel(0xa, TWI_LCR);
    5b54:	d4 05 20 00 	l.sw 0x0(r5),r4
static void twic_send_dummy_clock(void)
{
	unsigned int i = 10, timeout;

	INF("restore bus status to 0x3a\n");
	while (i--) {
    5b58:	9c 63 ff ff 	l.addi r3,r3,0xffffffff
    5b5c:	bc 23 ff ff 	l.sfnei r3,0xffffffff
    5b60:	13 ff ff fd 	l.bf 5b54 <twic_send_dummy_clock+0x1c>
    5b64:	15 00 00 00 	l.nop 0x0
		writel(0xa, TWI_LCR);
		for (timeout = 1000; timeout; timeout--)
			;
	}
	writel(0xa, TWI_LCR);
    5b68:	18 60 07 08 	l.movhi r3,0x708
    5b6c:	9c 80 00 0a 	l.addi r4,r0,0xa
    5b70:	a8 63 14 20 	l.ori r3,r3,0x1420
    5b74:	d4 03 20 00 	l.sw 0x0(r3),r4
	if (readl(TWI_LCR) != 0x3a)
    5b78:	84 83 00 00 	l.lwz r4,0x0(r3)
    5b7c:	bc 04 00 3a 	l.sfeqi r4,0x3a
    5b80:	10 00 00 08 	l.bf 5ba0 <twic_send_dummy_clock+0x68>
    5b84:	15 00 00 00 	l.nop 0x0
		ERR("bus status err: 0x%x\n", readl(TWI_LCR));
    5b88:	84 63 00 00 	l.lwz r3,0x0(r3)
    5b8c:	18 80 00 01 	l.movhi r4,0x1
    5b90:	d4 01 18 00 	l.sw 0x0(r1),r3
    5b94:	a8 84 23 42 	l.ori r4,r4,0x2342
    5b98:	04 00 13 10 	l.jal a7d8 <debugger_printf>
    5b9c:	9c 60 00 08 	l.addi r3,r0,0x8

	writel(1, TWI_SRR);
    5ba0:	18 60 07 08 	l.movhi r3,0x708
    5ba4:	9c 80 00 01 	l.addi r4,r0,0x1
    5ba8:	a8 63 14 18 	l.ori r3,r3,0x1418
    5bac:	d4 03 20 00 	l.sw 0x0(r3),r4
}
    5bb0:	9c 21 00 08 	l.addi r1,r1,0x8
    5bb4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5bb8:	44 00 48 00 	l.jr r9
    5bbc:	15 00 00 00 	l.nop 0x0

00005bc0 <twic_set_sclk.clone.0>:
/*
 * twic_set_sclk() - set twi clock to clk.
 *
 * @clk: the clock want to set.
 */
static void twic_set_sclk(u32 clk)
    5bc0:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    5bc4:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    5bc8:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    5bcc:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
    5bd0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    5bd4:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
	u32 sclk_real = 0;
	u32 src_clk = 0;
	u8 pow_clk_n = 1;
	u32 divider = 0;

	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
    5bd8:	9c 60 00 24 	l.addi r3,r0,0x24
/*
 * twic_set_sclk() - set twi clock to clk.
 *
 * @clk: the clock want to set.
 */
static void twic_set_sclk(u32 clk)
    5bdc:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
	u32 sclk_real = 0;
	u32 src_clk = 0;
	u8 pow_clk_n = 1;
	u32 divider = 0;

	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
    5be0:	04 00 31 55 	l.jal 12134 <ccu_get_sclk_freq>
    5be4:	9c 40 00 00 	l.addi r2,r0,0x0
	clk_n = 0;
	goto out;
#else
	u32 sclk_real = 0;
	u32 src_clk = 0;
	u8 pow_clk_n = 1;
    5be8:	9e 00 00 01 	l.addi r16,r0,0x1
	u32 divider = 0;

	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
    5bec:	aa 8b 00 00 	l.ori r20,r11,0x0
 * @clk: the clock want to set.
 */
static void twic_set_sclk(u32 clk)
{
	u8 clk_m = 0;
	u8 clk_n = 0;
    5bf0:	a9 c2 00 00 	l.ori r14,r2,0x0
	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);

	divider = src_clk / clk;
	clk_m = 0;
	while (clk_n < 8) {
		clk_n++;
    5bf4:	9d ce 00 01 	l.addi r14,r14,0x1
		pow_clk_n *= 2;
    5bf8:	e2 10 80 00 	l.add r16,r16,r16
	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);

	divider = src_clk / clk;
	clk_m = 0;
	while (clk_n < 8) {
		clk_n++;
    5bfc:	a5 ce 00 ff 	l.andi r14,r14,0xff
		pow_clk_n *= 2;
    5c00:	00 00 00 0e 	l.j 5c38 <twic_set_sclk.clone.0+0x78>
    5c04:	a6 10 00 ff 	l.andi r16,r16,0xff
		while (clk_m < 16) {
			sclk_real = src_clk / (clk_m + 1) / pow_clk_n / 10;
    5c08:	a8 74 00 00 	l.ori r3,r20,0x0
    5c0c:	04 00 1b 87 	l.jal ca28 <__udivsi3>
    5c10:	a8 92 00 00 	l.ori r4,r18,0x0
    5c14:	a8 90 00 00 	l.ori r4,r16,0x0
    5c18:	04 00 1b 84 	l.jal ca28 <__udivsi3>
    5c1c:	a8 6b 00 00 	l.ori r3,r11,0x0
			if (sclk_real <= clk)
    5c20:	18 60 00 1e 	l.movhi r3,0x1e
    5c24:	a8 63 84 89 	l.ori r3,r3,0x8489
    5c28:	e4 ab 18 00 	l.sfleu r11,r3
    5c2c:	10 00 00 0a 	l.bf 5c54 <twic_set_sclk.clone.0+0x94>
    5c30:	b8 42 00 03 	l.slli r2,r2,0x3
				goto out;
			else
				clk_m++;
    5c34:	a4 52 00 ff 	l.andi r2,r18,0xff
	divider = src_clk / clk;
	clk_m = 0;
	while (clk_n < 8) {
		clk_n++;
		pow_clk_n *= 2;
		while (clk_m < 16) {
    5c38:	bc a2 00 0f 	l.sfleui r2,0xf
    5c3c:	13 ff ff f3 	l.bf 5c08 <twic_set_sclk.clone.0+0x48>
    5c40:	9e 42 00 01 	l.addi r18,r2,0x1

	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);

	divider = src_clk / clk;
	clk_m = 0;
	while (clk_n < 8) {
    5c44:	bc 2e 00 08 	l.sfnei r14,0x8
    5c48:	13 ff ff eb 	l.bf 5bf4 <twic_set_sclk.clone.0+0x34>
    5c4c:	15 00 00 00 	l.nop 0x0
	}
#endif

      out:
	/* set clock control register */
	writel((clk_m << 3) | clk_n, TWI_CKR);
    5c50:	b8 42 00 03 	l.slli r2,r2,0x3
    5c54:	18 60 07 08 	l.movhi r3,0x708
    5c58:	e1 c2 70 04 	l.or r14,r2,r14
    5c5c:	a8 63 14 14 	l.ori r3,r3,0x1414
    5c60:	d4 03 70 00 	l.sw 0x0(r3),r14
	INF("m = %x, n = %x, req_sclk = %d, real_clk = %d\n", clk_m, clk_n, clk, sclk_real);
}
    5c64:	9c 21 00 18 	l.addi r1,r1,0x18
    5c68:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5c6c:	84 41 ff e8 	l.lwz r2,0xffffffe8(r1)
    5c70:	85 c1 ff ec 	l.lwz r14,0xffffffec(r1)
    5c74:	86 01 ff f0 	l.lwz r16,0xfffffff0(r1)
    5c78:	86 41 ff f4 	l.lwz r18,0xfffffff4(r1)
    5c7c:	44 00 48 00 	l.jr r9
    5c80:	86 81 ff f8 	l.lwz r20,0xfffffff8(r1)

00005c84 <twi_clkchangecb>:

s32 twi_clkchangecb(u32 command, u32 freq)
{
    5c84:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    5c88:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	switch (command) {
    5c8c:	bc 03 00 00 	l.sfeqi r3,0x0
    5c90:	10 00 00 07 	l.bf 5cac <twi_clkchangecb+0x28>
    5c94:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    5c98:	bc 03 00 01 	l.sfeqi r3,0x1
    5c9c:	0c 00 00 11 	l.bnf 5ce0 <twi_clkchangecb+0x5c>
    5ca0:	9d 60 ff dc 	l.addi r11,r0,0xffffffdc
    5ca4:	00 00 00 09 	l.j 5cc8 <twi_clkchangecb+0x44>
    5ca8:	15 00 00 00 	l.nop 0x0
		{
			/* check twi is busy now
			 * ...
			 * clock will be change, lock twi interface
			 */
			twi_lock = 1;
    5cac:	18 80 00 01 	l.movhi r4,0x1
    5cb0:	9c 40 00 01 	l.addi r2,r0,0x1
    5cb4:	a8 84 33 c0 	l.ori r4,r4,0x33c0
			INF("twi clk change request\n");
			return OK;
    5cb8:	a9 63 00 00 	l.ori r11,r3,0x0
		{
			/* check twi is busy now
			 * ...
			 * clock will be change, lock twi interface
			 */
			twi_lock = 1;
    5cbc:	d8 04 10 00 	l.sb 0x0(r4),r2
			INF("twi clk change request\n");
			return OK;
    5cc0:	00 00 00 09 	l.j 5ce4 <twi_clkchangecb+0x60>
    5cc4:	9c 21 00 08 	l.addi r1,r1,0x8
		{
			/*
			 * clock change finish, re-config twi clock,
			 * maybe re-config rsb clock should do somethings?
			 */
			twic_set_sclk(TWI_CLOCK_FREQ);
    5cc8:	07 ff ff be 	l.jal 5bc0 <twic_set_sclk.clone.0>
    5ccc:	9c 40 00 00 	l.addi r2,r0,0x0

			/* unlock twi interface */
			twi_lock = 0;
    5cd0:	18 60 00 01 	l.movhi r3,0x1
    5cd4:	a8 63 33 c0 	l.ori r3,r3,0x33c0
			INF("twi clk change done\n");
			return OK;
    5cd8:	9d 60 00 00 	l.addi r11,r0,0x0
			 * maybe re-config rsb clock should do somethings?
			 */
			twic_set_sclk(TWI_CLOCK_FREQ);

			/* unlock twi interface */
			twi_lock = 0;
    5cdc:	d8 03 10 00 	l.sb 0x0(r3),r2
			break;
		}
	}

	return -EFAIL;
}
    5ce0:	9c 21 00 08 	l.addi r1,r1,0x8
    5ce4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5ce8:	44 00 48 00 	l.jr r9
    5cec:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00005cf0 <twi_init>:

s32 twi_init(void)
{
    5cf0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    5cf4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	//if (arisc_para.power_mode != POWER_MODE_AXP) {
	//	twi_lock = TRUE;
	//	return OK;
	//}

	pin_set_multi_sel(PIN_GRP_PL, 0, 2);	/* PL0 config as TWI_SCK */
    5cf8:	9c 60 00 01 	l.addi r3,r0,0x1

	return -EFAIL;
}

s32 twi_init(void)
{
    5cfc:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	//if (arisc_para.power_mode != POWER_MODE_AXP) {
	//	twi_lock = TRUE;
	//	return OK;
	//}

	pin_set_multi_sel(PIN_GRP_PL, 0, 2);	/* PL0 config as TWI_SCK */
    5d00:	9c 80 00 00 	l.addi r4,r0,0x0
    5d04:	9c a0 00 02 	l.addi r5,r0,0x2
    5d08:	07 ff fb 90 	l.jal 4b48 <pin_set_multi_sel>
    5d0c:	18 40 07 08 	l.movhi r2,0x708
	pin_set_pull(PIN_GRP_PL, 0, PIN_PULL_UP);	/* TWI_SCK pull-up */
    5d10:	9c 60 00 01 	l.addi r3,r0,0x1
    5d14:	9c 80 00 00 	l.addi r4,r0,0x0
    5d18:	07 ff fb aa 	l.jal 4bc0 <pin_set_pull>
    5d1c:	a8 a3 00 00 	l.ori r5,r3,0x0
	pin_set_drive(PIN_GRP_PL, 0, PIN_MULTI_DRIVE_0);	/* TWI_SCK drive level 2 */
    5d20:	9c 80 00 00 	l.addi r4,r0,0x0
    5d24:	9c 60 00 01 	l.addi r3,r0,0x1
    5d28:	07 ff fb c4 	l.jal 4c38 <pin_set_drive>
    5d2c:	a8 a4 00 00 	l.ori r5,r4,0x0

	pin_set_multi_sel(PIN_GRP_PL, 1, 2);	/* PL1 config as TWI_SDA */
    5d30:	9c 60 00 01 	l.addi r3,r0,0x1
    5d34:	9c a0 00 02 	l.addi r5,r0,0x2
    5d38:	07 ff fb 84 	l.jal 4b48 <pin_set_multi_sel>
    5d3c:	a8 83 00 00 	l.ori r4,r3,0x0
	pin_set_pull(PIN_GRP_PL, 1, PIN_PULL_UP);	/* TWI_SDA pull-up */
    5d40:	9c 60 00 01 	l.addi r3,r0,0x1
    5d44:	a8 83 00 00 	l.ori r4,r3,0x0
    5d48:	07 ff fb 9e 	l.jal 4bc0 <pin_set_pull>
    5d4c:	a8 a3 00 00 	l.ori r5,r3,0x0
	pin_set_drive(PIN_GRP_PL, 1, PIN_MULTI_DRIVE_0);	/* TWI_SDA drive level 2 */
    5d50:	9c 60 00 01 	l.addi r3,r0,0x1
    5d54:	9c a0 00 00 	l.addi r5,r0,0x0
    5d58:	07 ff fb b8 	l.jal 4c38 <pin_set_drive>
    5d5c:	a8 83 00 00 	l.ori r4,r3,0x0

	/* initialize twi clock */
	/* ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI_1, CCU_CLK_RESET); */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TWI, CCU_CLK_ON);
    5d60:	9c 60 00 22 	l.addi r3,r0,0x22
    5d64:	04 00 2e fa 	l.jal 1194c <ccu_set_mclk_onoff>
    5d68:	9c 80 00 01 	l.addi r4,r0,0x1
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI, CCU_CLK_NRESET);
    5d6c:	9c 60 00 22 	l.addi r3,r0,0x22
    5d70:	04 00 30 2e 	l.jal 11e28 <ccu_set_mclk_reset>
    5d74:	9c 80 00 01 	l.addi r4,r0,0x1
	twic_set_sclk(TWI_CLOCK_FREQ);
    5d78:	07 ff ff 92 	l.jal 5bc0 <twic_set_sclk.clone.0>
    5d7c:	15 00 00 00 	l.nop 0x0
	writel(TWI_BUS_ENB | TWI_AACK, TWI_CTR);
    5d80:	a8 62 14 0c 	l.ori r3,r2,0x140c
    5d84:	9c 80 00 44 	l.addi r4,r0,0x44
	twic_reset();

	/* twi bus state is not reset value, try to restore it */
	if (readl(TWI_LCR) != 0x3a)
    5d88:	a8 42 14 20 	l.ori r2,r2,0x1420
	/* initialize twi clock */
	/* ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI_1, CCU_CLK_RESET); */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TWI, CCU_CLK_ON);
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI, CCU_CLK_NRESET);
	twic_set_sclk(TWI_CLOCK_FREQ);
	writel(TWI_BUS_ENB | TWI_AACK, TWI_CTR);
    5d8c:	d4 03 20 00 	l.sw 0x0(r3),r4
	twic_reset();
    5d90:	07 ff ff 54 	l.jal 5ae0 <twic_reset>
    5d94:	15 00 00 00 	l.nop 0x0

	/* twi bus state is not reset value, try to restore it */
	if (readl(TWI_LCR) != 0x3a)
    5d98:	84 42 00 00 	l.lwz r2,0x0(r2)
    5d9c:	bc 02 00 3a 	l.sfeqi r2,0x3a
    5da0:	10 00 00 04 	l.bf 5db0 <twi_init+0xc0>
    5da4:	18 40 00 01 	l.movhi r2,0x1
		twic_send_dummy_clock();
    5da8:	07 ff ff 64 	l.jal 5b38 <twic_send_dummy_clock>
    5dac:	15 00 00 00 	l.nop 0x0

	twi_lock = 0;
    5db0:	9c 60 00 00 	l.addi r3,r0,0x0
    5db4:	a8 42 33 c0 	l.ori r2,r2,0x33c0
    5db8:	d8 02 18 00 	l.sb 0x0(r2),r3

#ifdef TWI_DEBUG
	printreg();
#endif
	if (readl(TWI_LCR) == 0x3a)
    5dbc:	18 40 07 08 	l.movhi r2,0x708
    5dc0:	a8 42 14 20 	l.ori r2,r2,0x1420
    5dc4:	84 42 00 00 	l.lwz r2,0x0(r2)
    5dc8:	bc 22 00 3a 	l.sfnei r2,0x3a
    5dcc:	10 00 00 05 	l.bf 5de0 <twi_init+0xf0>
    5dd0:	18 80 00 01 	l.movhi r4,0x1
		LOG("init twi succeeded\n");
    5dd4:	9c 60 00 02 	l.addi r3,r0,0x2
    5dd8:	00 00 00 05 	l.j 5dec <twi_init+0xfc>
    5ddc:	a8 84 23 5c 	l.ori r4,r4,0x235c
	else
		ERR("init twi failed!\n");
    5de0:	18 80 00 01 	l.movhi r4,0x1
    5de4:	9c 60 00 08 	l.addi r3,r0,0x8
    5de8:	a8 84 23 70 	l.ori r4,r4,0x2370
    5dec:	04 00 12 7b 	l.jal a7d8 <debugger_printf>
    5df0:	15 00 00 00 	l.nop 0x0

	return OK;
}
    5df4:	9c 21 00 08 	l.addi r1,r1,0x8
    5df8:	9d 60 00 00 	l.addi r11,r0,0x0
    5dfc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5e00:	44 00 48 00 	l.jr r9
    5e04:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00005e08 <twi_exit>:
s32 twi_exit(void)
{
	/* softreset twi module  */

	return OK;
}
    5e08:	44 00 48 00 	l.jr r9
    5e0c:	9d 60 00 00 	l.addi r11,r0,0x0

00005e10 <twi_byte_rw>:
 * @data: pointer to the data to be read or write
 * @return: EPDK_OK,      byte read or write successed;
 *          EPDK_FAIL,    btye read or write failed!
 */
s32 twi_byte_rw(twi_rw_type_e op, u8 saddr, u8 baddr, u8 *data, u32 len)
{
    5e10:	d7 e1 17 d8 	l.sw 0xffffffd8(r1),r2
	volatile unsigned int state;
	unsigned int timeout;
	int ret = -1;
	s32 cpsr;

	if (twi_lock)
    5e14:	18 40 00 01 	l.movhi r2,0x1
 * @data: pointer to the data to be read or write
 * @return: EPDK_OK,      byte read or write successed;
 *          EPDK_FAIL,    btye read or write failed!
 */
s32 twi_byte_rw(twi_rw_type_e op, u8 saddr, u8 baddr, u8 *data, u32 len)
{
    5e18:	d7 e1 77 dc 	l.sw 0xffffffdc(r1),r14
    5e1c:	d7 e1 87 e0 	l.sw 0xffffffe0(r1),r16
    5e20:	d7 e1 b7 ec 	l.sw 0xffffffec(r1),r22
    5e24:	d7 e1 d7 f4 	l.sw 0xfffffff4(r1),r26
    5e28:	d7 e1 e7 f8 	l.sw 0xfffffff8(r1),r28
    5e2c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    5e30:	d7 e1 97 e4 	l.sw 0xffffffe4(r1),r18
    5e34:	d7 e1 a7 e8 	l.sw 0xffffffe8(r1),r20
    5e38:	d7 e1 c7 f0 	l.sw 0xfffffff0(r1),r24
	volatile unsigned int state;
	unsigned int timeout;
	int ret = -1;
	s32 cpsr;

	if (twi_lock)
    5e3c:	a8 42 33 c0 	l.ori r2,r2,0x33c0
 * @data: pointer to the data to be read or write
 * @return: EPDK_OK,      byte read or write successed;
 *          EPDK_FAIL,    btye read or write failed!
 */
s32 twi_byte_rw(twi_rw_type_e op, u8 saddr, u8 baddr, u8 *data, u32 len)
{
    5e40:	9c 21 ff d0 	l.addi r1,r1,0xffffffd0
	volatile unsigned int state;
	unsigned int timeout;
	int ret = -1;
	s32 cpsr;

	if (twi_lock)
    5e44:	8e 82 00 00 	l.lbz r20,0x0(r2)
    5e48:	ba 94 00 18 	l.slli r20,r20,0x18
 * @data: pointer to the data to be read or write
 * @return: EPDK_OK,      byte read or write successed;
 *          EPDK_FAIL,    btye read or write failed!
 */
s32 twi_byte_rw(twi_rw_type_e op, u8 saddr, u8 baddr, u8 *data, u32 len)
{
    5e4c:	ab 43 00 00 	l.ori r26,r3,0x0
    5e50:	aa 06 00 00 	l.ori r16,r6,0x0
	volatile unsigned int state;
	unsigned int timeout;
	int ret = -1;
	s32 cpsr;

	if (twi_lock)
    5e54:	ba 94 00 98 	l.srai r20,r20,0x18
 * @data: pointer to the data to be read or write
 * @return: EPDK_OK,      byte read or write successed;
 *          EPDK_FAIL,    btye read or write failed!
 */
s32 twi_byte_rw(twi_rw_type_e op, u8 saddr, u8 baddr, u8 *data, u32 len)
{
    5e58:	a9 c7 00 00 	l.ori r14,r7,0x0
    5e5c:	a6 c4 00 ff 	l.andi r22,r4,0xff
    5e60:	a7 85 00 ff 	l.andi r28,r5,0xff
	volatile unsigned int state;
	unsigned int timeout;
	int ret = -1;
	s32 cpsr;

	if (twi_lock)
    5e64:	bc 34 00 00 	l.sfnei r20,0x0
    5e68:	10 00 01 94 	l.bf 64b8 <twi_byte_rw+0x6a8>
    5e6c:	9c 40 ff f3 	l.addi r2,r0,0xfffffff3
		return -EACCES;

	if (len > 4)
    5e70:	bc 47 00 04 	l.sfgtui r7,0x4
    5e74:	10 00 01 91 	l.bf 64b8 <twi_byte_rw+0x6a8>
    5e78:	9c 40 ff ea 	l.addi r2,r0,0xffffffea

static inline void twi_enable_ack(void)
{
	unsigned int reg_val;

	reg_val = readl(TWI_CTR);
    5e7c:	1a 40 07 08 	l.movhi r18,0x708
	reg_val |= TWI_AACK;
	reg_val &= ~TWI_INTFLAG;
    5e80:	9c 80 ff f7 	l.addi r4,r0,0xfffffff7

static inline void twi_enable_ack(void)
{
	unsigned int reg_val;

	reg_val = readl(TWI_CTR);
    5e84:	a8 52 14 0c 	l.ori r2,r18,0x140c
    5e88:	84 62 00 00 	l.lwz r3,0x0(r2)
	reg_val |= TWI_AACK;
    5e8c:	a8 63 00 04 	l.ori r3,r3,0x4
	reg_val &= ~TWI_INTFLAG;
    5e90:	e0 63 20 03 	l.and r3,r3,r4
	writel(reg_val, TWI_CTR);
    5e94:	d4 02 18 00 	l.sw 0x0(r2),r3
	readl(TWI_CTR);
    5e98:	84 62 00 00 	l.lwz r3,0x0(r2)
	readl(TWI_CTR);
    5e9c:	84 62 00 00 	l.lwz r3,0x0(r2)
	if (len > 4)
		return -EINVAL;

	twi_enable_ack();	/* enable ACK first */

	cpsr = cpu_disable_int();
    5ea0:	04 00 19 c9 	l.jal c5c4 <cpu_disable_int>
    5ea4:	15 00 00 00 	l.nop 0x0
	writel(0, TWI_EFR);
    5ea8:	a8 72 14 1c 	l.ori r3,r18,0x141c
	state = (readl(TWI_STR) & 0x0ff);
    5eac:	aa 52 14 10 	l.ori r18,r18,0x1410
		return -EINVAL;

	twi_enable_ack();	/* enable ACK first */

	cpsr = cpu_disable_int();
	writel(0, TWI_EFR);
    5eb0:	d4 03 a0 00 	l.sw 0x0(r3),r20
	if (len > 4)
		return -EINVAL;

	twi_enable_ack();	/* enable ACK first */

	cpsr = cpu_disable_int();
    5eb4:	ab 0b 00 00 	l.ori r24,r11,0x0
	writel(0, TWI_EFR);
	state = (readl(TWI_STR) & 0x0ff);
    5eb8:	84 72 00 00 	l.lwz r3,0x0(r18)
    5ebc:	a4 63 00 ff 	l.andi r3,r3,0xff
    5ec0:	d4 01 18 04 	l.sw 0x4(r1),r3
	if (state != 0xf8) {
    5ec4:	84 61 00 04 	l.lwz r3,0x4(r1)
    5ec8:	bc 03 00 f8 	l.sfeqi r3,0xf8
    5ecc:	10 00 00 08 	l.bf 5eec <twi_byte_rw+0xdc>
    5ed0:	15 00 00 00 	l.nop 0x0
		ERR("e1:%x\n", state);
    5ed4:	84 41 00 04 	l.lwz r2,0x4(r1)
    5ed8:	18 80 00 01 	l.movhi r4,0x1
    5edc:	d4 01 10 00 	l.sw 0x0(r1),r2
    5ee0:	9c 60 00 08 	l.addi r3,r0,0x8
    5ee4:	00 00 01 0c 	l.j 6314 <twi_byte_rw+0x504>
    5ee8:	a8 84 23 86 	l.ori r4,r4,0x2386
	 *   7      6       5     4       3       2    1    0
	 * INT_EN  BUS_EN  START  STOP  INT_FLAG  ACK  NOT  NOT
	 */

	/* step1. Send Start */
	twi_start();
    5eec:	07 ff ff 07 	l.jal 5b08 <twi_start>
    5ef0:	15 00 00 00 	l.nop 0x0

	timeout = TWI_CHECK_TIMEOUT;
    5ef4:	9c c0 07 ff 	l.addi r6,r0,0x7ff
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))	/* wait for flg set */
    5ef8:	84 62 00 00 	l.lwz r3,0x0(r2)
    5efc:	a4 63 00 08 	l.andi r3,r3,0x8
    5f00:	bc 23 00 00 	l.sfnei r3,0x0
    5f04:	10 00 00 08 	l.bf 5f24 <twi_byte_rw+0x114>
    5f08:	1a 40 07 08 	l.movhi r18,0x708
    5f0c:	9c c6 ff ff 	l.addi r6,r6,0xffffffff
    5f10:	bc 26 00 00 	l.sfnei r6,0x0
    5f14:	13 ff ff f9 	l.bf 5ef8 <twi_byte_rw+0xe8>
    5f18:	18 80 00 01 	l.movhi r4,0x1
		;
	if (timeout == 0) {
		ERR("to0\n");
    5f1c:	00 00 00 06 	l.j 5f34 <twi_byte_rw+0x124>
    5f20:	9c 60 00 08 	l.addi r3,r0,0x8
	twi_start();

	timeout = TWI_CHECK_TIMEOUT;
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))	/* wait for flg set */
		;
	if (timeout == 0) {
    5f24:	bc 26 00 00 	l.sfnei r6,0x0
    5f28:	10 00 00 08 	l.bf 5f48 <twi_byte_rw+0x138>
    5f2c:	18 80 00 01 	l.movhi r4,0x1
		ERR("to0\n");
    5f30:	9c 60 00 08 	l.addi r3,r0,0x8
    5f34:	a8 84 23 91 	l.ori r4,r4,0x2391
    5f38:	04 00 12 28 	l.jal a7d8 <debugger_printf>
    5f3c:	9c 40 ff ff 	l.addi r2,r0,0xffffffff
		goto stop_out;
    5f40:	00 00 01 0e 	l.j 6378 <twi_byte_rw+0x568>
    5f44:	18 80 07 08 	l.movhi r4,0x708
	}

	state = readl(TWI_STR);
    5f48:	a8 52 14 10 	l.ori r2,r18,0x1410
    5f4c:	84 42 00 00 	l.lwz r2,0x0(r2)
    5f50:	d4 01 10 04 	l.sw 0x4(r1),r2
	if (state != 0x08) {
    5f54:	84 41 00 04 	l.lwz r2,0x4(r1)
    5f58:	bc 02 00 08 	l.sfeqi r2,0x8
    5f5c:	10 00 00 08 	l.bf 5f7c <twi_byte_rw+0x16c>
    5f60:	15 00 00 00 	l.nop 0x0
		ERR("e3:%x\n", state);
    5f64:	84 41 00 04 	l.lwz r2,0x4(r1)
    5f68:	18 80 00 01 	l.movhi r4,0x1
    5f6c:	d4 01 10 00 	l.sw 0x0(r1),r2
    5f70:	9c 60 00 08 	l.addi r3,r0,0x8
    5f74:	00 00 00 e8 	l.j 6314 <twi_byte_rw+0x504>
    5f78:	a8 84 23 9a 	l.ori r4,r4,0x239a
		goto stop_out;
	}
	/* step2. Send Slave Address */
	writel(((saddr << 1) & 0x0fe), TWI_DTR);	/* slave address + write */
    5f7c:	e2 d6 b0 00 	l.add r22,r22,r22
    5f80:	a8 52 14 08 	l.ori r2,r18,0x1408
    5f84:	a4 76 00 ff 	l.andi r3,r22,0xff
    5f88:	d4 02 18 00 	l.sw 0x0(r2),r3
	twi_clear_irq_flag();	/* clear int flag to send saddr */
    5f8c:	07 ff fe c8 	l.jal 5aac <twi_clear_irq_flag>
    5f90:	9c 40 07 ff 	l.addi r2,r0,0x7ff

	timeout = TWI_CHECK_TIMEOUT;
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
    5f94:	a8 72 14 0c 	l.ori r3,r18,0x140c
    5f98:	84 83 00 00 	l.lwz r4,0x0(r3)
    5f9c:	a4 84 00 08 	l.andi r4,r4,0x8
    5fa0:	bc 24 00 00 	l.sfnei r4,0x0
    5fa4:	10 00 00 08 	l.bf 5fc4 <twi_byte_rw+0x1b4>
    5fa8:	1a 40 07 08 	l.movhi r18,0x708
    5fac:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    5fb0:	bc 22 00 00 	l.sfnei r2,0x0
    5fb4:	13 ff ff f9 	l.bf 5f98 <twi_byte_rw+0x188>
    5fb8:	18 80 00 01 	l.movhi r4,0x1
		;
	if (timeout == 0) {
		ERR("to1\n");
    5fbc:	00 00 00 06 	l.j 5fd4 <twi_byte_rw+0x1c4>
    5fc0:	9c 60 00 08 	l.addi r3,r0,0x8
	twi_clear_irq_flag();	/* clear int flag to send saddr */

	timeout = TWI_CHECK_TIMEOUT;
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
		;
	if (timeout == 0) {
    5fc4:	bc 22 00 00 	l.sfnei r2,0x0
    5fc8:	10 00 00 05 	l.bf 5fdc <twi_byte_rw+0x1cc>
    5fcc:	18 80 00 01 	l.movhi r4,0x1
		ERR("to1\n");
    5fd0:	9c 60 00 08 	l.addi r3,r0,0x8
    5fd4:	03 ff ff d9 	l.j 5f38 <twi_byte_rw+0x128>
    5fd8:	a8 84 23 a5 	l.ori r4,r4,0x23a5
		goto stop_out;
	}

	state = readl(TWI_STR);
    5fdc:	a8 52 14 10 	l.ori r2,r18,0x1410
    5fe0:	84 42 00 00 	l.lwz r2,0x0(r2)
    5fe4:	d4 01 10 04 	l.sw 0x4(r1),r2
	while (state != 0x18) {
    5fe8:	84 41 00 04 	l.lwz r2,0x4(r1)
    5fec:	bc 02 00 18 	l.sfeqi r2,0x18
    5ff0:	10 00 00 08 	l.bf 6010 <twi_byte_rw+0x200>
    5ff4:	15 00 00 00 	l.nop 0x0
		ERR("e5:%x\n", state);
    5ff8:	84 41 00 04 	l.lwz r2,0x4(r1)
    5ffc:	18 80 00 01 	l.movhi r4,0x1
    6000:	d4 01 10 00 	l.sw 0x0(r1),r2
    6004:	9c 60 00 08 	l.addi r3,r0,0x8
    6008:	00 00 00 c3 	l.j 6314 <twi_byte_rw+0x504>
    600c:	a8 84 23 ae 	l.ori r4,r4,0x23ae
		goto stop_out;
	}

	/* step3. Send Byte Address */
	writel(baddr, TWI_DTR);	/* slave address + write */
    6010:	a8 52 14 08 	l.ori r2,r18,0x1408
    6014:	d4 02 e0 00 	l.sw 0x0(r2),r28
	twi_clear_irq_flag();	/* clear int flag to send regaddr */
    6018:	07 ff fe a5 	l.jal 5aac <twi_clear_irq_flag>
    601c:	9c 40 07 ff 	l.addi r2,r0,0x7ff

	timeout = TWI_CHECK_TIMEOUT;
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
    6020:	a8 72 14 0c 	l.ori r3,r18,0x140c
    6024:	84 83 00 00 	l.lwz r4,0x0(r3)
    6028:	a4 84 00 08 	l.andi r4,r4,0x8
    602c:	bc 24 00 00 	l.sfnei r4,0x0
    6030:	10 00 00 08 	l.bf 6050 <twi_byte_rw+0x240>
    6034:	1a 40 07 08 	l.movhi r18,0x708
    6038:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    603c:	bc 22 00 00 	l.sfnei r2,0x0
    6040:	13 ff ff f9 	l.bf 6024 <twi_byte_rw+0x214>
    6044:	18 80 00 01 	l.movhi r4,0x1
		;
	if (timeout == 0) {
		ERR("to2\n");
    6048:	00 00 00 06 	l.j 6060 <twi_byte_rw+0x250>
    604c:	9c 60 00 08 	l.addi r3,r0,0x8
	twi_clear_irq_flag();	/* clear int flag to send regaddr */

	timeout = TWI_CHECK_TIMEOUT;
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
		;
	if (timeout == 0) {
    6050:	bc 22 00 00 	l.sfnei r2,0x0
    6054:	10 00 00 05 	l.bf 6068 <twi_byte_rw+0x258>
    6058:	18 80 00 01 	l.movhi r4,0x1
		ERR("to2\n");
    605c:	9c 60 00 08 	l.addi r3,r0,0x8
    6060:	03 ff ff b6 	l.j 5f38 <twi_byte_rw+0x128>
    6064:	a8 84 23 b9 	l.ori r4,r4,0x23b9
		goto stop_out;
	}

	state = readl(TWI_STR);
    6068:	a8 52 14 10 	l.ori r2,r18,0x1410
    606c:	84 62 00 00 	l.lwz r3,0x0(r2)
    6070:	d4 01 18 04 	l.sw 0x4(r1),r3
	if (state != 0x28) {
    6074:	84 61 00 04 	l.lwz r3,0x4(r1)
    6078:	bc 03 00 28 	l.sfeqi r3,0x28
    607c:	10 00 00 08 	l.bf 609c <twi_byte_rw+0x28c>
    6080:	bc 3a 00 00 	l.sfnei r26,0x0
		ERR("e7:%x\n", state);
    6084:	84 41 00 04 	l.lwz r2,0x4(r1)
    6088:	18 80 00 01 	l.movhi r4,0x1
    608c:	d4 01 10 00 	l.sw 0x0(r1),r2
    6090:	9c 60 00 08 	l.addi r3,r0,0x8
    6094:	00 00 00 a0 	l.j 6314 <twi_byte_rw+0x504>
    6098:	a8 84 23 c2 	l.ori r4,r4,0x23c2
		goto stop_out;
	}

	if (op == TWI_WRITE) {
    609c:	0c 00 00 28 	l.bnf 613c <twi_byte_rw+0x32c>
    60a0:	aa 82 00 00 	l.ori r20,r2,0x0
	} else {
		/* step4. Send restart for read */
		twi_start();
		twi_clear_irq_flag();	/* clear int flag to send saddr */

		timeout = TWI_CHECK_TIMEOUT;
    60a4:	00 00 00 2d 	l.j 6158 <twi_byte_rw+0x348>
    60a8:	9c 40 07 ff 	l.addi r2,r0,0x7ff
	}

	if (op == TWI_WRITE) {
		/* step4. Send Data to be write */
		while (len--) {
			writel(*data++, TWI_DTR);	/* slave address + write */
    60ac:	8c 50 00 00 	l.lbz r2,0x0(r16)
    60b0:	d4 16 10 00 	l.sw 0x0(r22),r2
			twi_clear_irq_flag();	/* clear int flag */
    60b4:	07 ff fe 7e 	l.jal 5aac <twi_clear_irq_flag>
    60b8:	9c 40 07 ff 	l.addi r2,r0,0x7ff

			timeout = TWI_CHECK_TIMEOUT;
			while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (timeout--))
    60bc:	84 72 00 00 	l.lwz r3,0x0(r18)
    60c0:	a4 63 00 08 	l.andi r3,r3,0x8
    60c4:	bc 03 00 00 	l.sfeqi r3,0x0
    60c8:	10 00 00 08 	l.bf 60e8 <twi_byte_rw+0x2d8>
    60cc:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    60d0:	9c 42 00 01 	l.addi r2,r2,0x1
				;
			if (timeout == -1) {
    60d4:	bc 02 ff ff 	l.sfeqi r2,0xffffffff
    60d8:	0c 00 00 0a 	l.bnf 6100 <twi_byte_rw+0x2f0>
    60dc:	18 80 00 01 	l.movhi r4,0x1
				ERR("to3\n");
    60e0:	00 00 00 06 	l.j 60f8 <twi_byte_rw+0x2e8>
    60e4:	9c 60 00 08 	l.addi r3,r0,0x8
		while (len--) {
			writel(*data++, TWI_DTR);	/* slave address + write */
			twi_clear_irq_flag();	/* clear int flag */

			timeout = TWI_CHECK_TIMEOUT;
			while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (timeout--))
    60e8:	bc 22 ff ff 	l.sfnei r2,0xffffffff
    60ec:	13 ff ff f4 	l.bf 60bc <twi_byte_rw+0x2ac>
    60f0:	18 80 00 01 	l.movhi r4,0x1
				;
			if (timeout == -1) {
				ERR("to3\n");
    60f4:	9c 60 00 08 	l.addi r3,r0,0x8
    60f8:	03 ff ff 90 	l.j 5f38 <twi_byte_rw+0x128>
    60fc:	a8 84 23 cd 	l.ori r4,r4,0x23cd
				goto stop_out;
			}

			state = readl(TWI_STR);
    6100:	84 54 00 00 	l.lwz r2,0x0(r20)
			if (state != 0x28) {
    6104:	9d ce ff ff 	l.addi r14,r14,0xffffffff
			if (timeout == -1) {
				ERR("to3\n");
				goto stop_out;
			}

			state = readl(TWI_STR);
    6108:	d4 01 10 04 	l.sw 0x4(r1),r2
			if (state != 0x28) {
    610c:	84 41 00 04 	l.lwz r2,0x4(r1)
    6110:	bc 22 00 28 	l.sfnei r2,0x28
    6114:	10 00 00 04 	l.bf 6124 <twi_byte_rw+0x314>
    6118:	15 00 00 00 	l.nop 0x0
	}

	if (op == TWI_WRITE) {
		/* step4. Send Data to be write */
		while (len--) {
			writel(*data++, TWI_DTR);	/* slave address + write */
    611c:	00 00 00 0a 	l.j 6144 <twi_byte_rw+0x334>
    6120:	9e 10 00 01 	l.addi r16,r16,0x1
				goto stop_out;
			}

			state = readl(TWI_STR);
			if (state != 0x28) {
				ERR("e9:%x\n", state);
    6124:	84 41 00 04 	l.lwz r2,0x4(r1)
    6128:	18 80 00 01 	l.movhi r4,0x1
    612c:	d4 01 10 00 	l.sw 0x0(r1),r2
    6130:	9c 60 00 08 	l.addi r3,r0,0x8
    6134:	00 00 00 78 	l.j 6314 <twi_byte_rw+0x504>
    6138:	a8 84 23 d6 	l.ori r4,r4,0x23d6
	}

	if (op == TWI_WRITE) {
		/* step4. Send Data to be write */
		while (len--) {
			writel(*data++, TWI_DTR);	/* slave address + write */
    613c:	aa d2 14 08 	l.ori r22,r18,0x1408
			twi_clear_irq_flag();	/* clear int flag */

			timeout = TWI_CHECK_TIMEOUT;
			while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (timeout--))
    6140:	aa 52 14 0c 	l.ori r18,r18,0x140c
		goto stop_out;
	}

	if (op == TWI_WRITE) {
		/* step4. Send Data to be write */
		while (len--) {
    6144:	bc 2e 00 00 	l.sfnei r14,0x0
    6148:	13 ff ff d9 	l.bf 60ac <twi_byte_rw+0x29c>
    614c:	15 00 00 00 	l.nop 0x0
					goto stop_out;
				}
			}
		}
	}
	ret = 0;
    6150:	00 00 00 89 	l.j 6374 <twi_byte_rw+0x564>
    6154:	a8 4e 00 00 	l.ori r2,r14,0x0
				goto stop_out;
			}
		}
	} else {
		/* step4. Send restart for read */
		twi_start();
    6158:	07 ff fe 6c 	l.jal 5b08 <twi_start>
    615c:	aa 52 14 0c 	l.ori r18,r18,0x140c
		twi_clear_irq_flag();	/* clear int flag to send saddr */
    6160:	07 ff fe 53 	l.jal 5aac <twi_clear_irq_flag>
    6164:	15 00 00 00 	l.nop 0x0

		timeout = TWI_CHECK_TIMEOUT;
		while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
    6168:	84 72 00 00 	l.lwz r3,0x0(r18)
    616c:	a4 63 00 08 	l.andi r3,r3,0x8
    6170:	bc 23 00 00 	l.sfnei r3,0x0
    6174:	10 00 00 08 	l.bf 6194 <twi_byte_rw+0x384>
    6178:	1a 80 07 08 	l.movhi r20,0x708
    617c:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    6180:	bc 22 00 00 	l.sfnei r2,0x0
    6184:	13 ff ff f9 	l.bf 6168 <twi_byte_rw+0x358>
    6188:	18 80 00 01 	l.movhi r4,0x1
			;
		if (timeout == 0) {
			ERR("to4\n");
    618c:	00 00 00 06 	l.j 61a4 <twi_byte_rw+0x394>
    6190:	9c 60 00 08 	l.addi r3,r0,0x8
		twi_clear_irq_flag();	/* clear int flag to send saddr */

		timeout = TWI_CHECK_TIMEOUT;
		while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
			;
		if (timeout == 0) {
    6194:	bc 22 00 00 	l.sfnei r2,0x0
    6198:	10 00 00 05 	l.bf 61ac <twi_byte_rw+0x39c>
    619c:	18 80 00 01 	l.movhi r4,0x1
			ERR("to4\n");
    61a0:	9c 60 00 08 	l.addi r3,r0,0x8
    61a4:	03 ff ff 65 	l.j 5f38 <twi_byte_rw+0x128>
    61a8:	a8 84 23 e1 	l.ori r4,r4,0x23e1
			goto stop_out;
		}

		state = readl(TWI_STR);
    61ac:	a8 54 14 10 	l.ori r2,r20,0x1410
    61b0:	84 42 00 00 	l.lwz r2,0x0(r2)
    61b4:	d4 01 10 04 	l.sw 0x4(r1),r2
		if (state != 0x10) {
    61b8:	84 41 00 04 	l.lwz r2,0x4(r1)
    61bc:	bc 02 00 10 	l.sfeqi r2,0x10
    61c0:	10 00 00 08 	l.bf 61e0 <twi_byte_rw+0x3d0>
    61c4:	15 00 00 00 	l.nop 0x0
			ERR("e11:%x\n", state);
    61c8:	84 41 00 04 	l.lwz r2,0x4(r1)
    61cc:	18 80 00 01 	l.movhi r4,0x1
    61d0:	d4 01 10 00 	l.sw 0x0(r1),r2
    61d4:	9c 60 00 08 	l.addi r3,r0,0x8
    61d8:	00 00 00 4f 	l.j 6314 <twi_byte_rw+0x504>
    61dc:	a8 84 23 ea 	l.ori r4,r4,0x23ea
			goto stop_out;
		}

		/* step5. Send Slave Address */
		writel(((saddr << 1) | 1), TWI_DTR);	/* slave address + write */
    61e0:	a8 54 14 08 	l.ori r2,r20,0x1408
    61e4:	aa d6 00 01 	l.ori r22,r22,0x1
		twi_clear_irq_flag();	/* clear int flag to send saddr */

		timeout = TWI_CHECK_TIMEOUT;
		while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
    61e8:	aa 94 14 0c 	l.ori r20,r20,0x140c
			ERR("e11:%x\n", state);
			goto stop_out;
		}

		/* step5. Send Slave Address */
		writel(((saddr << 1) | 1), TWI_DTR);	/* slave address + write */
    61ec:	d4 02 b0 00 	l.sw 0x0(r2),r22
		twi_clear_irq_flag();	/* clear int flag to send saddr */
    61f0:	07 ff fe 2f 	l.jal 5aac <twi_clear_irq_flag>
    61f4:	9c 40 07 ff 	l.addi r2,r0,0x7ff

		timeout = TWI_CHECK_TIMEOUT;
		while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
    61f8:	84 74 00 00 	l.lwz r3,0x0(r20)
    61fc:	a4 63 00 08 	l.andi r3,r3,0x8
    6200:	bc 23 00 00 	l.sfnei r3,0x0
    6204:	10 00 00 08 	l.bf 6224 <twi_byte_rw+0x414>
    6208:	18 80 07 08 	l.movhi r4,0x708
    620c:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    6210:	bc 22 00 00 	l.sfnei r2,0x0
    6214:	13 ff ff f9 	l.bf 61f8 <twi_byte_rw+0x3e8>
    6218:	18 80 00 01 	l.movhi r4,0x1
			;
		if (timeout == 0) {
			ERR("to5\n");
    621c:	00 00 00 06 	l.j 6234 <twi_byte_rw+0x424>
    6220:	9c 60 00 08 	l.addi r3,r0,0x8
		twi_clear_irq_flag();	/* clear int flag to send saddr */

		timeout = TWI_CHECK_TIMEOUT;
		while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
			;
		if (timeout == 0) {
    6224:	bc 22 00 00 	l.sfnei r2,0x0
    6228:	10 00 00 05 	l.bf 623c <twi_byte_rw+0x42c>
    622c:	9c 60 00 08 	l.addi r3,r0,0x8
			ERR("to5\n");
    6230:	18 80 00 01 	l.movhi r4,0x1
    6234:	03 ff ff 41 	l.j 5f38 <twi_byte_rw+0x128>
    6238:	a8 84 23 f6 	l.ori r4,r4,0x23f6
			goto stop_out;
		}

		state = readl(TWI_STR);
    623c:	a8 44 14 10 	l.ori r2,r4,0x1410
    6240:	84 62 00 00 	l.lwz r3,0x0(r2)
    6244:	d4 01 18 04 	l.sw 0x4(r1),r3
		if (state != 0x40) {
    6248:	84 61 00 04 	l.lwz r3,0x4(r1)
    624c:	bc 23 00 40 	l.sfnei r3,0x40
    6250:	0c 00 00 41 	l.bnf 6354 <twi_byte_rw+0x544>
    6254:	15 00 00 00 	l.nop 0x0
			ERR("e13:%x\n", state);
    6258:	84 41 00 04 	l.lwz r2,0x4(r1)
    625c:	18 80 00 01 	l.movhi r4,0x1
    6260:	d4 01 10 00 	l.sw 0x0(r1),r2
    6264:	9c 60 00 08 	l.addi r3,r0,0x8
    6268:	00 00 00 2b 	l.j 6314 <twi_byte_rw+0x504>
    626c:	a8 84 23 ff 	l.ori r4,r4,0x23ff
			goto stop_out;
		}

		/* step6. Get data */
		while (len--) {
			if (len == 0)
    6270:	bc 2e 00 00 	l.sfnei r14,0x0
    6274:	10 00 00 05 	l.bf 6288 <twi_byte_rw+0x478>
    6278:	15 00 00 00 	l.nop 0x0

static inline void twi_disable_ack(void)
{
	unsigned int reg_val;

	reg_val = readl(TWI_CTR) & 0x0ff;
    627c:	84 52 00 00 	l.lwz r2,0x0(r18)
	reg_val &= ~TWI_AACK;
	reg_val &= ~TWI_INTFLAG;
    6280:	a4 42 00 f3 	l.andi r2,r2,0xf3
	writel(reg_val, TWI_CTR);
    6284:	d4 12 10 00 	l.sw 0x0(r18),r2
		/* step6. Get data */
		while (len--) {
			if (len == 0)
				twi_disable_ack();

			twi_clear_irq_flag();	/* clear int flag then data come in */
    6288:	07 ff fe 09 	l.jal 5aac <twi_clear_irq_flag>
    628c:	9c 40 07 ff 	l.addi r2,r0,0x7ff

			timeout = TWI_CHECK_TIMEOUT;
			while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (timeout--))
    6290:	84 72 00 00 	l.lwz r3,0x0(r18)
    6294:	a4 63 00 08 	l.andi r3,r3,0x8
    6298:	bc 03 00 00 	l.sfeqi r3,0x0
    629c:	10 00 00 08 	l.bf 62bc <twi_byte_rw+0x4ac>
    62a0:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    62a4:	9c 42 00 01 	l.addi r2,r2,0x1
				;
			if (timeout == -1) {
    62a8:	bc 02 ff ff 	l.sfeqi r2,0xffffffff
    62ac:	0c 00 00 0a 	l.bnf 62d4 <twi_byte_rw+0x4c4>
    62b0:	18 80 00 01 	l.movhi r4,0x1
				ERR("to6\n");
    62b4:	00 00 00 06 	l.j 62cc <twi_byte_rw+0x4bc>
    62b8:	9c 60 00 08 	l.addi r3,r0,0x8
				twi_disable_ack();

			twi_clear_irq_flag();	/* clear int flag then data come in */

			timeout = TWI_CHECK_TIMEOUT;
			while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (timeout--))
    62bc:	bc 22 ff ff 	l.sfnei r2,0xffffffff
    62c0:	13 ff ff f4 	l.bf 6290 <twi_byte_rw+0x480>
    62c4:	18 80 00 01 	l.movhi r4,0x1
				;
			if (timeout == -1) {
				ERR("to6\n");
    62c8:	9c 60 00 08 	l.addi r3,r0,0x8
    62cc:	03 ff ff 1b 	l.j 5f38 <twi_byte_rw+0x128>
    62d0:	a8 84 24 0b 	l.ori r4,r4,0x240b
				goto stop_out;
			}

			*data++ = readl(TWI_DTR);
    62d4:	84 56 00 00 	l.lwz r2,0x0(r22)
			state = readl(TWI_STR);
			if (len > 0) {
    62d8:	bc 0e 00 00 	l.sfeqi r14,0x0
			if (timeout == -1) {
				ERR("to6\n");
				goto stop_out;
			}

			*data++ = readl(TWI_DTR);
    62dc:	d8 10 10 00 	l.sb 0x0(r16),r2
			state = readl(TWI_STR);
    62e0:	84 54 00 00 	l.lwz r2,0x0(r20)
    62e4:	d4 01 10 04 	l.sw 0x4(r1),r2
			if (len > 0) {
    62e8:	10 00 00 0f 	l.bf 6324 <twi_byte_rw+0x514>
    62ec:	15 00 00 00 	l.nop 0x0
				if (state != 0x50) {
    62f0:	84 41 00 04 	l.lwz r2,0x4(r1)
    62f4:	bc 02 00 50 	l.sfeqi r2,0x50
    62f8:	10 00 00 15 	l.bf 634c <twi_byte_rw+0x53c>
    62fc:	15 00 00 00 	l.nop 0x0
					ERR("e14:%x\n", state);
    6300:	84 41 00 04 	l.lwz r2,0x4(r1)
    6304:	18 80 00 01 	l.movhi r4,0x1
    6308:	d4 01 10 00 	l.sw 0x0(r1),r2
    630c:	9c 60 00 08 	l.addi r3,r0,0x8
    6310:	a8 84 24 14 	l.ori r4,r4,0x2414
    6314:	04 00 11 31 	l.jal a7d8 <debugger_printf>
    6318:	9c 40 ff ff 	l.addi r2,r0,0xffffffff
    631c:	00 00 00 17 	l.j 6378 <twi_byte_rw+0x568>
    6320:	18 80 07 08 	l.movhi r4,0x708
					goto stop_out;
				}
			} else {
				if (state != 0x58) {
    6324:	84 41 00 04 	l.lwz r2,0x4(r1)
    6328:	bc 02 00 58 	l.sfeqi r2,0x58
    632c:	10 00 00 08 	l.bf 634c <twi_byte_rw+0x53c>
    6330:	15 00 00 00 	l.nop 0x0
					ERR("e15:%x\n", state);
    6334:	84 41 00 04 	l.lwz r2,0x4(r1)
    6338:	18 80 00 01 	l.movhi r4,0x1
    633c:	d4 01 10 00 	l.sw 0x0(r1),r2
    6340:	9c 60 00 08 	l.addi r3,r0,0x8
    6344:	03 ff ff f4 	l.j 6314 <twi_byte_rw+0x504>
    6348:	a8 84 24 20 	l.ori r4,r4,0x2420
			if (timeout == -1) {
				ERR("to6\n");
				goto stop_out;
			}

			*data++ = readl(TWI_DTR);
    634c:	00 00 00 05 	l.j 6360 <twi_byte_rw+0x550>
    6350:	9e 10 00 01 	l.addi r16,r16,0x1

static inline void twi_disable_ack(void)
{
	unsigned int reg_val;

	reg_val = readl(TWI_CTR) & 0x0ff;
    6354:	aa 44 14 0c 	l.ori r18,r4,0x140c
			if (timeout == -1) {
				ERR("to6\n");
				goto stop_out;
			}

			*data++ = readl(TWI_DTR);
    6358:	aa c4 14 08 	l.ori r22,r4,0x1408
			state = readl(TWI_STR);
    635c:	aa 82 00 00 	l.ori r20,r2,0x0
			ERR("e13:%x\n", state);
			goto stop_out;
		}

		/* step6. Get data */
		while (len--) {
    6360:	bc 2e 00 00 	l.sfnei r14,0x0
    6364:	13 ff ff c3 	l.bf 6270 <twi_byte_rw+0x460>
    6368:	9d ce ff ff 	l.addi r14,r14,0xffffffff
    636c:	9d ce 00 01 	l.addi r14,r14,0x1
					goto stop_out;
				}
			}
		}
	}
	ret = 0;
    6370:	a8 4e 00 00 	l.ori r2,r14,0x0
{
	unsigned int timeout;
	unsigned int value;

	/* step1. send stop signal */
	value = readl(TWI_CTR);
    6374:	18 80 07 08 	l.movhi r4,0x708
	value |= TWI_MSTOP;
	value &= ~TWI_INTFLAG;
    6378:	9c a0 ff f7 	l.addi r5,r0,0xfffffff7
{
	unsigned int timeout;
	unsigned int value;

	/* step1. send stop signal */
	value = readl(TWI_CTR);
    637c:	a8 84 14 0c 	l.ori r4,r4,0x140c
    6380:	84 64 00 00 	l.lwz r3,0x0(r4)
	value |= TWI_MSTOP;
    6384:	a8 63 00 10 	l.ori r3,r3,0x10
	value &= ~TWI_INTFLAG;
    6388:	e0 63 28 03 	l.and r3,r3,r5
	writel(value, TWI_CTR);
    638c:	9c a0 07 ff 	l.addi r5,r0,0x7ff
    6390:	d4 04 18 00 	l.sw 0x0(r4),r3
	timeout = TWI_CHECK_TIMEOUT;
	while ((readl(TWI_CTR) & TWI_MSTOP) && (--timeout))
    6394:	84 64 00 00 	l.lwz r3,0x0(r4)
    6398:	a4 63 00 10 	l.andi r3,r3,0x10
    639c:	bc 03 00 00 	l.sfeqi r3,0x0
    63a0:	10 00 00 05 	l.bf 63b4 <twi_byte_rw+0x5a4>
    63a4:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
    63a8:	bc 25 00 00 	l.sfnei r5,0x0
    63ac:	13 ff ff fa 	l.bf 6394 <twi_byte_rw+0x584>
    63b0:	15 00 00 00 	l.nop 0x0
		;

	/* step2. clear the interrupt flag */
	twi_clear_irq_flag();
    63b4:	07 ff fd be 	l.jal 5aac <twi_clear_irq_flag>
    63b8:	15 00 00 00 	l.nop 0x0

	value = readl(TWI_CTR);	/* read delay */
    63bc:	18 80 07 08 	l.movhi r4,0x708
	value = readl(TWI_CTR);	/* read delay */
    63c0:	9c a0 07 ff 	l.addi r5,r0,0x7ff
		;

	/* step2. clear the interrupt flag */
	twi_clear_irq_flag();

	value = readl(TWI_CTR);	/* read delay */
    63c4:	a8 84 14 0c 	l.ori r4,r4,0x140c
    63c8:	84 64 00 00 	l.lwz r3,0x0(r4)
	value = readl(TWI_CTR);	/* read delay */
    63cc:	84 64 00 00 	l.lwz r3,0x0(r4)
	timeout = TWI_CHECK_TIMEOUT;
	while ((readl(TWI_CTR) & TWI_MSTOP) && (--timeout))
    63d0:	84 64 00 00 	l.lwz r3,0x0(r4)
    63d4:	a4 63 00 10 	l.andi r3,r3,0x10
    63d8:	bc 03 00 00 	l.sfeqi r3,0x0
    63dc:	10 00 00 05 	l.bf 63f0 <twi_byte_rw+0x5e0>
    63e0:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
    63e4:	bc 25 00 00 	l.sfnei r5,0x0
    63e8:	13 ff ff fa 	l.bf 63d0 <twi_byte_rw+0x5c0>
    63ec:	15 00 00 00 	l.nop 0x0
		;

	/* step3. check twi fsm is idle(0xf8) */
	timeout = TWI_CHECK_TIMEOUT;
	while ((0xf8 != readl(TWI_STR)) && (--timeout))
    63f0:	18 60 07 08 	l.movhi r3,0x708
	twi_clear_irq_flag();

	value = readl(TWI_CTR);	/* read delay */
	value = readl(TWI_CTR);	/* read delay */
	timeout = TWI_CHECK_TIMEOUT;
	while ((readl(TWI_CTR) & TWI_MSTOP) && (--timeout))
    63f4:	9c 80 07 ff 	l.addi r4,r0,0x7ff
		;

	/* step3. check twi fsm is idle(0xf8) */
	timeout = TWI_CHECK_TIMEOUT;
	while ((0xf8 != readl(TWI_STR)) && (--timeout))
    63f8:	a8 63 14 10 	l.ori r3,r3,0x1410
    63fc:	84 a3 00 00 	l.lwz r5,0x0(r3)
    6400:	bc 05 00 f8 	l.sfeqi r5,0xf8
    6404:	10 00 00 08 	l.bf 6424 <twi_byte_rw+0x614>
    6408:	bc 24 00 00 	l.sfnei r4,0x0
    640c:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    6410:	bc 24 00 00 	l.sfnei r4,0x0
    6414:	13 ff ff fa 	l.bf 63fc <twi_byte_rw+0x5ec>
    6418:	15 00 00 00 	l.nop 0x0
		;
	if (timeout == 0) {
		ERR("state err:%x\n", readl(TWI_STR));
    641c:	00 00 00 05 	l.j 6430 <twi_byte_rw+0x620>
    6420:	18 80 07 08 	l.movhi r4,0x708

	/* step3. check twi fsm is idle(0xf8) */
	timeout = TWI_CHECK_TIMEOUT;
	while ((0xf8 != readl(TWI_STR)) && (--timeout))
		;
	if (timeout == 0) {
    6424:	10 00 00 0e 	l.bf 645c <twi_byte_rw+0x64c>
    6428:	9c a0 07 ff 	l.addi r5,r0,0x7ff
		ERR("state err:%x\n", readl(TWI_STR));
    642c:	18 80 07 08 	l.movhi r4,0x708
    6430:	a8 84 14 10 	l.ori r4,r4,0x1410
    6434:	84 64 00 00 	l.lwz r3,0x0(r4)
    6438:	18 80 00 01 	l.movhi r4,0x1
    643c:	d4 01 18 00 	l.sw 0x0(r1),r3
    6440:	a8 84 24 2c 	l.ori r4,r4,0x242c
    6444:	04 00 10 e5 	l.jal a7d8 <debugger_printf>
    6448:	9c 60 00 08 	l.addi r3,r0,0x8
		twic_reset();
    644c:	07 ff fd a5 	l.jal 5ae0 <twic_reset>
    6450:	15 00 00 00 	l.nop 0x0
    6454:	00 00 00 17 	l.j 64b0 <twi_byte_rw+0x6a0>
    6458:	15 00 00 00 	l.nop 0x0
		return -EFAIL;
	}

	/* step4. check twi scl & sda must high level */
	timeout = TWI_CHECK_TIMEOUT;
	while ((0x3a != readl(TWI_LCR)) && (--timeout))
    645c:	18 60 07 08 	l.movhi r3,0x708
    6460:	a8 63 14 20 	l.ori r3,r3,0x1420
    6464:	84 83 00 00 	l.lwz r4,0x0(r3)
    6468:	bc 04 00 3a 	l.sfeqi r4,0x3a
    646c:	10 00 00 08 	l.bf 648c <twi_byte_rw+0x67c>
    6470:	bc 25 00 00 	l.sfnei r5,0x0
    6474:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
    6478:	bc 25 00 00 	l.sfnei r5,0x0
    647c:	13 ff ff fa 	l.bf 6464 <twi_byte_rw+0x654>
    6480:	18 80 07 08 	l.movhi r4,0x708
		;
	if (timeout == 0) {
		ERR("lcr err:%x\n", readl(TWI_LCR));
    6484:	00 00 00 05 	l.j 6498 <twi_byte_rw+0x688>
    6488:	a8 84 14 20 	l.ori r4,r4,0x1420

	/* step4. check twi scl & sda must high level */
	timeout = TWI_CHECK_TIMEOUT;
	while ((0x3a != readl(TWI_LCR)) && (--timeout))
		;
	if (timeout == 0) {
    648c:	10 00 00 09 	l.bf 64b0 <twi_byte_rw+0x6a0>
    6490:	18 80 07 08 	l.movhi r4,0x708
		ERR("lcr err:%x\n", readl(TWI_LCR));
    6494:	a8 84 14 20 	l.ori r4,r4,0x1420
    6498:	84 64 00 00 	l.lwz r3,0x0(r4)
    649c:	18 80 00 01 	l.movhi r4,0x1
    64a0:	d4 01 18 00 	l.sw 0x0(r1),r3
    64a4:	a8 84 24 3e 	l.ori r4,r4,0x243e
    64a8:	04 00 10 cc 	l.jal a7d8 <debugger_printf>
    64ac:	9c 60 00 08 	l.addi r3,r0,0x8
#ifdef TWI_DEBUG
	INF("twi_%x r:%x d:%x\n", op, baddr, *data);
	printreg();		/* only for twi time sequence debuger */
#endif

	cpu_enable_int(cpsr);
    64b0:	04 00 18 4f 	l.jal c5ec <cpu_enable_int>
    64b4:	a8 78 00 00 	l.ori r3,r24,0x0
	INF("%u,%u,%u,%u,%d\n", op, saddr, baddr, *data, ret);

	return ret;
}
    64b8:	9c 21 00 30 	l.addi r1,r1,0x30
    64bc:	a9 62 00 00 	l.ori r11,r2,0x0
    64c0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    64c4:	84 41 ff d8 	l.lwz r2,0xffffffd8(r1)
    64c8:	85 c1 ff dc 	l.lwz r14,0xffffffdc(r1)
    64cc:	86 01 ff e0 	l.lwz r16,0xffffffe0(r1)
    64d0:	86 41 ff e4 	l.lwz r18,0xffffffe4(r1)
    64d4:	86 81 ff e8 	l.lwz r20,0xffffffe8(r1)
    64d8:	86 c1 ff ec 	l.lwz r22,0xffffffec(r1)
    64dc:	87 01 ff f0 	l.lwz r24,0xfffffff0(r1)
    64e0:	87 41 ff f4 	l.lwz r26,0xfffffff4(r1)
    64e4:	44 00 48 00 	l.jr r9
    64e8:	87 81 ff f8 	l.lwz r28,0xfffffff8(r1)

000064ec <twi_read>:

s32 twi_read(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
    64ec:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
	u32 i;
	s32 ret = 0;
    64f0:	9d c0 00 00 	l.addi r14,r0,0x0

	return ret;
}

s32 twi_read(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
    64f4:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    64f8:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    64fc:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    6500:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    6504:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    6508:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    650c:	aa c4 00 00 	l.ori r22,r4,0x0
    6510:	9c 21 ff e4 	l.addi r1,r1,0xffffffe4
    6514:	aa 85 00 00 	l.ori r20,r5,0x0
    6518:	aa 46 00 00 	l.ori r18,r6,0x0
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
    651c:	a8 4e 00 00 	l.ori r2,r14,0x0
    6520:	00 00 00 0a 	l.j 6548 <twi_read+0x5c>
    6524:	a6 03 00 ff 	l.andi r16,r3,0xff
	INF("%u,%u,%u,%u,%d\n", op, saddr, baddr, *data, ret);

	return ret;
}

s32 twi_read(u32 devaddr, u8 *addr, u8 *data, u32 len)
    6528:	e0 b6 10 00 	l.add r5,r22,r2
{
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
		ret |= twi_byte_rw(TWI_READ, devaddr, *addr++, data++, 1);
    652c:	9c 60 00 01 	l.addi r3,r0,0x1
    6530:	8c a5 00 00 	l.lbz r5,0x0(r5)
    6534:	a8 90 00 00 	l.ori r4,r16,0x0
    6538:	a8 e3 00 00 	l.ori r7,r3,0x0
    653c:	07 ff fe 35 	l.jal 5e10 <twi_byte_rw>
    6540:	9c 42 00 01 	l.addi r2,r2,0x1
    6544:	e1 ce 58 04 	l.or r14,r14,r11
s32 twi_read(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
    6548:	e4 82 90 00 	l.sfltu r2,r18
    654c:	13 ff ff f7 	l.bf 6528 <twi_read+0x3c>
    6550:	e0 d4 10 00 	l.add r6,r20,r2
		ret |= twi_byte_rw(TWI_READ, devaddr, *addr++, data++, 1);
	}

	return ret;
}
    6554:	9c 21 00 1c 	l.addi r1,r1,0x1c
    6558:	a9 6e 00 00 	l.ori r11,r14,0x0
    655c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6560:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    6564:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    6568:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    656c:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    6570:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    6574:	44 00 48 00 	l.jr r9
    6578:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

0000657c <twi_write>:

s32 twi_write(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
    657c:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
	u32 i;
	s32 ret = 0;
    6580:	9d c0 00 00 	l.addi r14,r0,0x0

	return ret;
}

s32 twi_write(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
    6584:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    6588:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    658c:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    6590:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    6594:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    6598:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    659c:	aa c4 00 00 	l.ori r22,r4,0x0
    65a0:	9c 21 ff e4 	l.addi r1,r1,0xffffffe4
    65a4:	aa 85 00 00 	l.ori r20,r5,0x0
    65a8:	aa 46 00 00 	l.ori r18,r6,0x0
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
    65ac:	a8 4e 00 00 	l.ori r2,r14,0x0
    65b0:	00 00 00 0a 	l.j 65d8 <twi_write+0x5c>
    65b4:	a6 03 00 ff 	l.andi r16,r3,0xff
	}

	return ret;
}

s32 twi_write(u32 devaddr, u8 *addr, u8 *data, u32 len)
    65b8:	e0 b6 10 00 	l.add r5,r22,r2
{
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
		ret |= twi_byte_rw(TWI_WRITE, devaddr, *addr++, data++, 1);
    65bc:	9c 60 00 00 	l.addi r3,r0,0x0
    65c0:	8c a5 00 00 	l.lbz r5,0x0(r5)
    65c4:	a8 90 00 00 	l.ori r4,r16,0x0
    65c8:	9c e0 00 01 	l.addi r7,r0,0x1
    65cc:	07 ff fe 11 	l.jal 5e10 <twi_byte_rw>
    65d0:	9c 42 00 01 	l.addi r2,r2,0x1
    65d4:	e1 ce 58 04 	l.or r14,r14,r11
s32 twi_write(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
    65d8:	e4 82 90 00 	l.sfltu r2,r18
    65dc:	13 ff ff f7 	l.bf 65b8 <twi_write+0x3c>
    65e0:	e0 d4 10 00 	l.add r6,r20,r2
		ret |= twi_byte_rw(TWI_WRITE, devaddr, *addr++, data++, 1);
	}

	return ret;
}
    65e4:	9c 21 00 1c 	l.addi r1,r1,0x1c
    65e8:	a9 6e 00 00 	l.ori r11,r14,0x0
    65ec:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    65f0:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    65f4:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    65f8:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    65fc:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    6600:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    6604:	44 00 48 00 	l.jr r9
    6608:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

0000660c <is_twi_lock>:

bool is_twi_lock(void)
{
	return twi_lock;
    660c:	18 60 00 01 	l.movhi r3,0x1
    6610:	a8 63 33 c0 	l.ori r3,r3,0x33c0
    6614:	8d 63 00 00 	l.lbz r11,0x0(r3)
    6618:	b9 6b 00 18 	l.slli r11,r11,0x18
}
    661c:	44 00 48 00 	l.jr r9
    6620:	b9 6b 00 98 	l.srai r11,r11,0x18

00006624 <twi_get_status>:

s32 twi_get_status(void)
{
	u32 reg_val;

	reg_val = readl(TWI_STR);
    6624:	18 60 07 08 	l.movhi r3,0x708
	if ((reg_val & 0xFF) != 0xF8)
		return -1;
    6628:	9d 60 ff ff 	l.addi r11,r0,0xffffffff

s32 twi_get_status(void)
{
	u32 reg_val;

	reg_val = readl(TWI_STR);
    662c:	a8 83 14 10 	l.ori r4,r3,0x1410
    6630:	84 84 00 00 	l.lwz r4,0x0(r4)
	if ((reg_val & 0xFF) != 0xF8)
    6634:	a4 84 00 ff 	l.andi r4,r4,0xff
    6638:	bc 24 00 f8 	l.sfnei r4,0xf8
    663c:	10 00 00 09 	l.bf 6660 <twi_get_status+0x3c>
    6640:	a8 63 14 20 	l.ori r3,r3,0x1420

	reg_val = readl(TWI_LCR);
	if ((reg_val & 0x30) != 0x30)
		return -1;

	return 0;
    6644:	9d 60 00 00 	l.addi r11,r0,0x0

	reg_val = readl(TWI_STR);
	if ((reg_val & 0xFF) != 0xF8)
		return -1;

	reg_val = readl(TWI_LCR);
    6648:	84 63 00 00 	l.lwz r3,0x0(r3)
	if ((reg_val & 0x30) != 0x30)
    664c:	a4 63 00 30 	l.andi r3,r3,0x30
    6650:	bc 03 00 30 	l.sfeqi r3,0x30
    6654:	10 00 00 03 	l.bf 6660 <twi_get_status+0x3c>
    6658:	15 00 00 00 	l.nop 0x0
		return -1;
    665c:	9d 60 ff ff 	l.addi r11,r0,0xffffffff

	return 0;
}
    6660:	44 00 48 00 	l.jr r9
    6664:	15 00 00 00 	l.nop 0x0

00006668 <twi_standby_init>:

s32 twi_standby_init(void)
{
    6668:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    666c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	pin_set_multi_sel(PIN_GRP_PL, 0, 2);	/* PL0 config as TWI_SCK */
    6670:	9c 60 00 01 	l.addi r3,r0,0x1

	return 0;
}

s32 twi_standby_init(void)
{
    6674:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	pin_set_multi_sel(PIN_GRP_PL, 0, 2);	/* PL0 config as TWI_SCK */
    6678:	9c 80 00 00 	l.addi r4,r0,0x0
    667c:	9c a0 00 02 	l.addi r5,r0,0x2
    6680:	07 ff f9 32 	l.jal 4b48 <pin_set_multi_sel>
    6684:	18 40 07 08 	l.movhi r2,0x708
	pin_set_pull(PIN_GRP_PL, 0, PIN_PULL_UP);	/* TWI_SCK pull-up */
    6688:	9c 60 00 01 	l.addi r3,r0,0x1
    668c:	9c 80 00 00 	l.addi r4,r0,0x0
    6690:	07 ff f9 4c 	l.jal 4bc0 <pin_set_pull>
    6694:	a8 a3 00 00 	l.ori r5,r3,0x0
	pin_set_drive(PIN_GRP_PL, 0, PIN_MULTI_DRIVE_0);	/* TWI_SCK drive level 2 */
    6698:	9c 80 00 00 	l.addi r4,r0,0x0
    669c:	9c 60 00 01 	l.addi r3,r0,0x1
    66a0:	07 ff f9 66 	l.jal 4c38 <pin_set_drive>
    66a4:	a8 a4 00 00 	l.ori r5,r4,0x0

	pin_set_multi_sel(PIN_GRP_PL, 1, 2);	/* PL1 config as TWI_SDA */
    66a8:	9c 60 00 01 	l.addi r3,r0,0x1
    66ac:	9c a0 00 02 	l.addi r5,r0,0x2
    66b0:	07 ff f9 26 	l.jal 4b48 <pin_set_multi_sel>
    66b4:	a8 83 00 00 	l.ori r4,r3,0x0
	pin_set_pull(PIN_GRP_PL, 1, PIN_PULL_UP);	/* TWI_SDA pull-up */
    66b8:	9c 60 00 01 	l.addi r3,r0,0x1
    66bc:	a8 83 00 00 	l.ori r4,r3,0x0
    66c0:	07 ff f9 40 	l.jal 4bc0 <pin_set_pull>
    66c4:	a8 a3 00 00 	l.ori r5,r3,0x0
	pin_set_drive(PIN_GRP_PL, 1, PIN_MULTI_DRIVE_0);	/* TWI_SDA drive level 2 */
    66c8:	9c 60 00 01 	l.addi r3,r0,0x1
    66cc:	9c a0 00 00 	l.addi r5,r0,0x0
    66d0:	07 ff f9 5a 	l.jal 4c38 <pin_set_drive>
    66d4:	a8 83 00 00 	l.ori r4,r3,0x0

	/* initialize twi clock */
	/* ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI_1, CCU_CLK_RESET); */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TWI, CCU_CLK_ON);
    66d8:	9c 60 00 22 	l.addi r3,r0,0x22
    66dc:	04 00 2c 9c 	l.jal 1194c <ccu_set_mclk_onoff>
    66e0:	9c 80 00 01 	l.addi r4,r0,0x1
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI, CCU_CLK_NRESET);
    66e4:	9c 60 00 22 	l.addi r3,r0,0x22
    66e8:	04 00 2d d0 	l.jal 11e28 <ccu_set_mclk_reset>
    66ec:	9c 80 00 01 	l.addi r4,r0,0x1
	twic_set_sclk(TWI_CLOCK_FREQ);
    66f0:	07 ff fd 34 	l.jal 5bc0 <twic_set_sclk.clone.0>
    66f4:	15 00 00 00 	l.nop 0x0
	writel(TWI_BUS_ENB | TWI_AACK, TWI_CTR);
    66f8:	a8 62 14 0c 	l.ori r3,r2,0x140c
    66fc:	9c 80 00 44 	l.addi r4,r0,0x44
	twic_reset();

	/* twi bus state is not reset value, try to restore it */
	if (readl(TWI_LCR) != 0x3a)
    6700:	a8 42 14 20 	l.ori r2,r2,0x1420
	/* initialize twi clock */
	/* ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI_1, CCU_CLK_RESET); */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TWI, CCU_CLK_ON);
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI, CCU_CLK_NRESET);
	twic_set_sclk(TWI_CLOCK_FREQ);
	writel(TWI_BUS_ENB | TWI_AACK, TWI_CTR);
    6704:	d4 03 20 00 	l.sw 0x0(r3),r4
	twic_reset();
    6708:	07 ff fc f6 	l.jal 5ae0 <twic_reset>
    670c:	15 00 00 00 	l.nop 0x0

	/* twi bus state is not reset value, try to restore it */
	if (readl(TWI_LCR) != 0x3a)
    6710:	84 42 00 00 	l.lwz r2,0x0(r2)
    6714:	bc 02 00 3a 	l.sfeqi r2,0x3a
    6718:	10 00 00 04 	l.bf 6728 <twi_standby_init+0xc0>
    671c:	18 40 07 08 	l.movhi r2,0x708
		twic_send_dummy_clock();
    6720:	07 ff fd 06 	l.jal 5b38 <twic_send_dummy_clock>
    6724:	15 00 00 00 	l.nop 0x0

	if (readl(TWI_LCR) == 0x3a)
    6728:	a8 42 14 20 	l.ori r2,r2,0x1420
    672c:	84 42 00 00 	l.lwz r2,0x0(r2)
    6730:	bc 22 00 3a 	l.sfnei r2,0x3a
    6734:	10 00 00 05 	l.bf 6748 <twi_standby_init+0xe0>
    6738:	18 80 00 01 	l.movhi r4,0x1
		LOG("init twi succeeded\n");
    673c:	9c 60 00 02 	l.addi r3,r0,0x2
    6740:	00 00 00 05 	l.j 6754 <twi_standby_init+0xec>
    6744:	a8 84 23 5c 	l.ori r4,r4,0x235c
	else
		ERR("init twi failed!\n");
    6748:	18 80 00 01 	l.movhi r4,0x1
    674c:	9c 60 00 08 	l.addi r3,r0,0x8
    6750:	a8 84 23 70 	l.ori r4,r4,0x2370
    6754:	04 00 10 21 	l.jal a7d8 <debugger_printf>
    6758:	15 00 00 00 	l.nop 0x0

	return OK;
}
    675c:	9c 21 00 08 	l.addi r1,r1,0x8
    6760:	9d 60 00 00 	l.addi r11,r0,0x0
    6764:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6768:	44 00 48 00 	l.jr r9
    676c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00006770 <twi_standby_exit>:

s32 twi_standby_exit(void)
{
	return OK;
}
    6770:	44 00 48 00 	l.jr r9
    6774:	9d 60 00 00 	l.addi r11,r0,0x0

00006778 <hwmsgbox_set_receiver>:
*
* Returns    :  OK if set user succeeded, others if failed.
*********************************************************************************************************
*/
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
    6778:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    677c:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
*
* Returns    :  OK if set user succeeded, others if failed.
*********************************************************************************************************
*/
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
    6780:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    6784:	e0 a3 10 03 	l.and r5,r3,r2
    6788:	18 40 03 00 	l.movhi r2,0x300
	value &= ~(1    << (0 + ((queue & 0x3)<<3)));
    678c:	a4 63 00 03 	l.andi r3,r3,0x3
*/
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    6790:	a8 42 30 00 	l.ori r2,r2,0x3000
	value &= ~(1    << (0 + ((queue & 0x3)<<3)));
    6794:	b8 63 00 03 	l.slli r3,r3,0x3
*/
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    6798:	e0 a5 10 00 	l.add r5,r5,r2
	value &= ~(1    << (0 + ((queue & 0x3)<<3)));
	value |=  (user << (0 + ((queue & 0x3)<<3)));
	writel(value, MSGBOX_CTRL_REG(queue));

	return OK;
}
    679c:	9d 60 00 00 	l.addi r11,r0,0x0
*/
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    67a0:	84 c5 00 00 	l.lwz r6,0x0(r5)
    67a4:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(1    << (0 + ((queue & 0x3)<<3)));
    67a8:	9c c0 00 01 	l.addi r6,r0,0x1
    67ac:	84 e1 00 00 	l.lwz r7,0x0(r1)
    67b0:	e0 c6 18 08 	l.sll r6,r6,r3
	value |=  (user << (0 + ((queue & 0x3)<<3)));
    67b4:	e0 64 18 08 	l.sll r3,r4,r3
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
	value &= ~(1    << (0 + ((queue & 0x3)<<3)));
    67b8:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    67bc:	e0 c6 38 03 	l.and r6,r6,r7
    67c0:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |=  (user << (0 + ((queue & 0x3)<<3)));
    67c4:	84 c1 00 00 	l.lwz r6,0x0(r1)
    67c8:	e0 63 30 04 	l.or r3,r3,r6
    67cc:	d4 01 18 00 	l.sw 0x0(r1),r3
	writel(value, MSGBOX_CTRL_REG(queue));
    67d0:	84 61 00 00 	l.lwz r3,0x0(r1)
    67d4:	d4 05 18 00 	l.sw 0x0(r5),r3

	return OK;
}
    67d8:	9c 21 00 08 	l.addi r1,r1,0x8
    67dc:	44 00 48 00 	l.jr r9
    67e0:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

000067e4 <hwmsgbox_set_transmitter>:
*
* Returns    :  OK if set user succeeded, others if failed.
*********************************************************************************************************
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
    67e4:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    67e8:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
*
* Returns    :  OK if set user succeeded, others if failed.
*********************************************************************************************************
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
    67ec:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    67f0:	e0 a3 10 03 	l.and r5,r3,r2
    67f4:	18 40 03 00 	l.movhi r2,0x300
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
    67f8:	a4 63 00 03 	l.andi r3,r3,0x3
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    67fc:	a8 42 30 00 	l.ori r2,r2,0x3000
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
    6800:	b8 63 00 03 	l.slli r3,r3,0x3
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    6804:	e0 a5 10 00 	l.add r5,r5,r2
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
	value |=  (user << (4 + ((queue & 0x3)<<3)));
	writel(value, MSGBOX_CTRL_REG(queue));

	return OK;
}
    6808:	9d 60 00 00 	l.addi r11,r0,0x0
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    680c:	84 c5 00 00 	l.lwz r6,0x0(r5)
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
    6810:	9c 63 00 04 	l.addi r3,r3,0x4
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    6814:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
    6818:	9c c0 00 01 	l.addi r6,r0,0x1
    681c:	84 e1 00 00 	l.lwz r7,0x0(r1)
    6820:	e0 c6 18 08 	l.sll r6,r6,r3
	value |=  (user << (4 + ((queue & 0x3)<<3)));
    6824:	e0 64 18 08 	l.sll r3,r4,r3
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
    6828:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    682c:	e0 c6 38 03 	l.and r6,r6,r7
    6830:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |=  (user << (4 + ((queue & 0x3)<<3)));
    6834:	84 c1 00 00 	l.lwz r6,0x0(r1)
    6838:	e0 63 30 04 	l.or r3,r3,r6
    683c:	d4 01 18 00 	l.sw 0x0(r1),r3
	writel(value, MSGBOX_CTRL_REG(queue));
    6840:	84 61 00 00 	l.lwz r3,0x0(r1)
    6844:	d4 05 18 00 	l.sw 0x0(r5),r3

	return OK;
}
    6848:	9c 21 00 08 	l.addi r1,r1,0x8
    684c:	44 00 48 00 	l.jr r9
    6850:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00006854 <hwmsgbox_init>:
*
* Returns    :  OK if initialize hwmsgbox succeeded, others if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_init(void)
{
    6854:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	/*enable msgbox clock and set reset as de-assert state.*/
	ccu_set_mclk_onoff(CCU_MOD_CLK_MSGBOX, CCU_CLK_ON);
    6858:	9c 60 00 11 	l.addi r3,r0,0x11
*
* Returns    :  OK if initialize hwmsgbox succeeded, others if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_init(void)
{
    685c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/*enable msgbox clock and set reset as de-assert state.*/
	ccu_set_mclk_onoff(CCU_MOD_CLK_MSGBOX, CCU_CLK_ON);
    6860:	04 00 2c 3b 	l.jal 1194c <ccu_set_mclk_onoff>
    6864:	9c 80 00 01 	l.addi r4,r0,0x1
	ccu_set_mclk_reset(CCU_MOD_CLK_MSGBOX, CCU_CLK_NRESET);
    6868:	9c 60 00 11 	l.addi r3,r0,0x11
    686c:	04 00 2d 6f 	l.jal 11e28 <ccu_set_mclk_reset>
    6870:	9c 80 00 01 	l.addi r4,r0,0x1
	/*
	 * ar100 asyn tx channel configure
	 * ar100 set as transmitter,
	 * ac327 set as receiver.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AR100_ASYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
    6874:	9c 60 00 00 	l.addi r3,r0,0x0
    6878:	07 ff ff db 	l.jal 67e4 <hwmsgbox_set_transmitter>
    687c:	a8 83 00 00 	l.ori r4,r3,0x0
	hwmsgbox_set_receiver   (HWMSGBOX_AR100_ASYN_TX_CH, HWMSG_QUEUE_USER_AC327);
    6880:	9c 60 00 00 	l.addi r3,r0,0x0
    6884:	07 ff ff bd 	l.jal 6778 <hwmsgbox_set_receiver>
    6888:	9c 80 00 01 	l.addi r4,r0,0x1
	/*
	 * ar100 asyn rx channel configure
	 * ar100 set as receiver,
	 * ac327 set as transmitter.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AR100_ASYN_RX_CH, HWMSG_QUEUE_USER_AC327);
    688c:	9c 60 00 01 	l.addi r3,r0,0x1
    6890:	07 ff ff d5 	l.jal 67e4 <hwmsgbox_set_transmitter>
    6894:	a8 83 00 00 	l.ori r4,r3,0x0
	hwmsgbox_set_receiver   (HWMSGBOX_AR100_ASYN_RX_CH, HWMSG_QUEUE_USER_ARISC);
    6898:	9c 60 00 01 	l.addi r3,r0,0x1
    689c:	07 ff ff b7 	l.jal 6778 <hwmsgbox_set_receiver>
    68a0:	9c 80 00 00 	l.addi r4,r0,0x0
	/*
	 * ar100 syn tx channel configure
	 * ar100 set as transmitter,
	 * ac327 set as receiver.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AR100_SYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
    68a4:	9c 60 00 02 	l.addi r3,r0,0x2
    68a8:	07 ff ff cf 	l.jal 67e4 <hwmsgbox_set_transmitter>
    68ac:	9c 80 00 00 	l.addi r4,r0,0x0
	hwmsgbox_set_receiver   (HWMSGBOX_AR100_SYN_TX_CH, HWMSG_QUEUE_USER_AC327);
    68b0:	9c 60 00 02 	l.addi r3,r0,0x2
    68b4:	07 ff ff b1 	l.jal 6778 <hwmsgbox_set_receiver>
    68b8:	9c 80 00 01 	l.addi r4,r0,0x1
	/*
	 * ar100 syn rx channel configure
	 * ar100 set as receiver,
	 * ac327 set as transmitter.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AR100_SYN_RX_CH, HWMSG_QUEUE_USER_AC327);
    68bc:	9c 60 00 03 	l.addi r3,r0,0x3
    68c0:	07 ff ff c9 	l.jal 67e4 <hwmsgbox_set_transmitter>
    68c4:	9c 80 00 01 	l.addi r4,r0,0x1
	hwmsgbox_set_receiver   (HWMSGBOX_AR100_SYN_RX_CH, HWMSG_QUEUE_USER_ARISC);
    68c8:	9c 60 00 03 	l.addi r3,r0,0x3
    68cc:	07 ff ff ab 	l.jal 6778 <hwmsgbox_set_receiver>
    68d0:	9c 80 00 00 	l.addi r4,r0,0x0
	/*
	 * ac327 syn tx channel configure
	 * ar100 set as receiver,
	 * ac327 set as transmitter.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AC327_SYN_TX_CH, HWMSG_QUEUE_USER_AC327);
    68d4:	9c 60 00 04 	l.addi r3,r0,0x4
    68d8:	07 ff ff c3 	l.jal 67e4 <hwmsgbox_set_transmitter>
    68dc:	9c 80 00 01 	l.addi r4,r0,0x1
	hwmsgbox_set_receiver   (HWMSGBOX_AC327_SYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
    68e0:	9c 60 00 04 	l.addi r3,r0,0x4
    68e4:	07 ff ff a5 	l.jal 6778 <hwmsgbox_set_receiver>
    68e8:	9c 80 00 00 	l.addi r4,r0,0x0
	/*
	 * ac327 syn rx channel configure
	 * ar100 set as transmitter,
	 * ac327 set as receiver.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AC327_SYN_RX_CH, HWMSG_QUEUE_USER_ARISC);
    68ec:	9c 60 00 05 	l.addi r3,r0,0x5
    68f0:	07 ff ff bd 	l.jal 67e4 <hwmsgbox_set_transmitter>
    68f4:	9c 80 00 00 	l.addi r4,r0,0x0
	hwmsgbox_set_receiver   (HWMSGBOX_AC327_SYN_RX_CH, HWMSG_QUEUE_USER_AC327);
    68f8:	9c 60 00 05 	l.addi r3,r0,0x5
    68fc:	07 ff ff 9f 	l.jal 6778 <hwmsgbox_set_receiver>
    6900:	9c 80 00 01 	l.addi r4,r0,0x1
		 * interrupt_enable(INTC_M_BOX_IRQ);
		 */
	}

	return OK;
}
    6904:	9c 21 00 04 	l.addi r1,r1,0x4
    6908:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    690c:	44 00 48 00 	l.jr r9
    6910:	9d 60 00 00 	l.addi r11,r0,0x0

00006914 <hwmsgbox_exit>:
*
* Returns    :  OK if exit hwmsgbox succeeded, others if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_exit(void)
{
    6914:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	/* disable msgbox clock and set reset as assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_MSGBOX, CCU_CLK_RESET);
    6918:	9c 60 00 11 	l.addi r3,r0,0x11
*
* Returns    :  OK if exit hwmsgbox succeeded, others if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_exit(void)
{
    691c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/* disable msgbox clock and set reset as assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_MSGBOX, CCU_CLK_RESET);
    6920:	04 00 2d 42 	l.jal 11e28 <ccu_set_mclk_reset>
    6924:	9c 80 00 00 	l.addi r4,r0,0x0
	ccu_set_mclk_onoff(CCU_MOD_CLK_MSGBOX, CCU_CLK_OFF);
    6928:	9c 60 00 11 	l.addi r3,r0,0x11
    692c:	04 00 2c 08 	l.jal 1194c <ccu_set_mclk_onoff>
    6930:	9c 80 00 00 	l.addi r4,r0,0x0

	return OK;
}
    6934:	9c 21 00 04 	l.addi r1,r1,0x4
    6938:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    693c:	44 00 48 00 	l.jr r9
    6940:	9d 60 00 00 	l.addi r11,r0,0x0

00006944 <hwmsgbox_wait_queue_not_full>:

s32 hwmsgbox_wait_queue_not_full(u32 queue, u32 timeout)
{
    6944:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    6948:	a8 44 00 00 	l.ori r2,r4,0x0
	while (readl(MSGBOX_FIFO_STATUS_REG(queue)) == 1) {
    694c:	18 80 00 c0 	l.movhi r4,0xc0

	return OK;
}

s32 hwmsgbox_wait_queue_not_full(u32 queue, u32 timeout)
{
    6950:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	while (readl(MSGBOX_FIFO_STATUS_REG(queue)) == 1) {
    6954:	a8 84 0c 40 	l.ori r4,r4,0xc40

	return OK;
}

s32 hwmsgbox_wait_queue_not_full(u32 queue, u32 timeout)
{
    6958:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	while (readl(MSGBOX_FIFO_STATUS_REG(queue)) == 1) {
    695c:	e0 63 20 00 	l.add r3,r3,r4

	return OK;
}

s32 hwmsgbox_wait_queue_not_full(u32 queue, u32 timeout)
{
    6960:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	while (readl(MSGBOX_FIFO_STATUS_REG(queue)) == 1) {
    6964:	00 00 00 06 	l.j 697c <hwmsgbox_wait_queue_not_full+0x38>
    6968:	b9 c3 00 02 	l.slli r14,r3,0x2
		/*
		 * message-queue fifo is full,
		 * wait 1ms for message-queue process.
		 */
		if (timeout == 0) {
    696c:	10 00 00 09 	l.bf 6990 <hwmsgbox_wait_queue_not_full+0x4c>
    6970:	9d 60 ff dd 	l.addi r11,r0,0xffffffdd
			return -ETIMEOUT;
		}
		time_mdelay(1);
    6974:	07 ff fa ac 	l.jal 5424 <time_mdelay>
    6978:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
	return OK;
}

s32 hwmsgbox_wait_queue_not_full(u32 queue, u32 timeout)
{
	while (readl(MSGBOX_FIFO_STATUS_REG(queue)) == 1) {
    697c:	84 6e 00 00 	l.lwz r3,0x0(r14)
    6980:	bc 03 00 01 	l.sfeqi r3,0x1
    6984:	13 ff ff fa 	l.bf 696c <hwmsgbox_wait_queue_not_full+0x28>
    6988:	bc 02 00 00 	l.sfeqi r2,0x0
    698c:	9d 60 00 00 	l.addi r11,r0,0x0
		}
		time_mdelay(1);
		timeout--;
	}
	return OK;
}
    6990:	9c 21 00 0c 	l.addi r1,r1,0xc
    6994:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6998:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    699c:	44 00 48 00 	l.jr r9
    69a0:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

000069a4 <hwmsgbox_wait_queue_not_empty>:

s32 hwmsgbox_wait_queue_not_empty(u32 queue, u32 timeout)
{
    69a4:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    69a8:	a8 44 00 00 	l.ori r2,r4,0x0
	while (readl(MSGBOX_MSG_STATUS_REG(queue)) == 0) {
    69ac:	18 80 00 c0 	l.movhi r4,0xc0
	}
	return OK;
}

s32 hwmsgbox_wait_queue_not_empty(u32 queue, u32 timeout)
{
    69b0:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	while (readl(MSGBOX_MSG_STATUS_REG(queue)) == 0) {
    69b4:	a8 84 0c 50 	l.ori r4,r4,0xc50
	}
	return OK;
}

s32 hwmsgbox_wait_queue_not_empty(u32 queue, u32 timeout)
{
    69b8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	while (readl(MSGBOX_MSG_STATUS_REG(queue)) == 0) {
    69bc:	e0 63 20 00 	l.add r3,r3,r4
	}
	return OK;
}

s32 hwmsgbox_wait_queue_not_empty(u32 queue, u32 timeout)
{
    69c0:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	while (readl(MSGBOX_MSG_STATUS_REG(queue)) == 0) {
    69c4:	00 00 00 06 	l.j 69dc <hwmsgbox_wait_queue_not_empty+0x38>
    69c8:	b9 c3 00 02 	l.slli r14,r3,0x2
		/*
		 * message-queue fifo is empty,
		 * wait 1ms for message-queue process.
		 */
		if (timeout == 0) {
    69cc:	10 00 00 0a 	l.bf 69f4 <hwmsgbox_wait_queue_not_empty+0x50>
    69d0:	9c 60 00 01 	l.addi r3,r0,0x1
			return -ETIMEOUT;
		}
		time_mdelay(1);
    69d4:	07 ff fa 94 	l.jal 5424 <time_mdelay>
    69d8:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
	return OK;
}

s32 hwmsgbox_wait_queue_not_empty(u32 queue, u32 timeout)
{
	while (readl(MSGBOX_MSG_STATUS_REG(queue)) == 0) {
    69dc:	84 6e 00 00 	l.lwz r3,0x0(r14)
    69e0:	bc 03 00 00 	l.sfeqi r3,0x0
    69e4:	13 ff ff fa 	l.bf 69cc <hwmsgbox_wait_queue_not_empty+0x28>
    69e8:	bc 02 00 00 	l.sfeqi r2,0x0
			return -ETIMEOUT;
		}
		time_mdelay(1);
		timeout--;
	}
	return OK;
    69ec:	00 00 00 03 	l.j 69f8 <hwmsgbox_wait_queue_not_empty+0x54>
    69f0:	9d 60 00 00 	l.addi r11,r0,0x0
		/*
		 * message-queue fifo is empty,
		 * wait 1ms for message-queue process.
		 */
		if (timeout == 0) {
			return -ETIMEOUT;
    69f4:	9d 60 ff dd 	l.addi r11,r0,0xffffffdd
		}
		time_mdelay(1);
		timeout--;
	}
	return OK;
}
    69f8:	9c 21 00 0c 	l.addi r1,r1,0xc
    69fc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6a00:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    6a04:	44 00 48 00 	l.jr r9
    6a08:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00006a0c <hwmsgbox_send_message>:
*
* Returns    :  OK if send message succeeded, other if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_send_message(struct message *pmessage, u32 timeout)
{
    6a0c:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    6a10:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    6a14:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6a18:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    6a1c:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    6a20:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    6a24:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    6a28:	a9 c3 00 00 	l.ori r14,r3,0x0
	u32 i;
	u32 value;

	ASSERT(pmessage != NULL);

	if (pmessage->attr & MESSAGE_ATTR_HARDSYN) {
    6a2c:	8c 63 00 01 	l.lbz r3,0x1(r3)
    6a30:	a4 63 00 02 	l.andi r3,r3,0x2
*
* Returns    :  OK if send message succeeded, other if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_send_message(struct message *pmessage, u32 timeout)
{
    6a34:	9c 21 ff e4 	l.addi r1,r1,0xffffffe4
	u32 i;
	u32 value;

	ASSERT(pmessage != NULL);

	if (pmessage->attr & MESSAGE_ATTR_HARDSYN) {
    6a38:	bc 03 00 00 	l.sfeqi r3,0x0
    6a3c:	10 00 00 5b 	l.bf 6ba8 <hwmsgbox_send_message+0x19c>
    6a40:	aa 04 00 00 	l.ori r16,r4,0x0
		/* use ar100 hwsyn transmit channel */
		INF("send syn message\n");

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
    6a44:	07 ff ff c0 	l.jal 6944 <hwmsgbox_wait_queue_not_full>
    6a48:	9c 60 00 02 	l.addi r3,r0,0x2
		if (ret != OK)
    6a4c:	bc 2b 00 00 	l.sfnei r11,0x0
    6a50:	10 00 00 84 	l.bf 6c60 <hwmsgbox_send_message+0x254>
    6a54:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6a58:	8c 6e 00 01 	l.lbz r3,0x1(r14)
			(pmessage->type << 16) | (pmessage->result << 24);
    6a5c:	8c 4e 00 02 	l.lbz r2,0x2(r14)

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6a60:	b8 63 00 08 	l.slli r3,r3,0x8
			(pmessage->type << 16) | (pmessage->result << 24);
    6a64:	b8 42 00 10 	l.slli r2,r2,0x10
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6a68:	1a 80 03 00 	l.movhi r20,0x300

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
    6a6c:	a8 90 00 00 	l.ori r4,r16,0x0

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6a70:	e0 43 10 04 	l.or r2,r3,r2
    6a74:	8c 6e 00 00 	l.lbz r3,0x0(r14)
    6a78:	e0 42 18 04 	l.or r2,r2,r3
			(pmessage->type << 16) | (pmessage->result << 24);
    6a7c:	8c 6e 00 03 	l.lbz r3,0x3(r14)
    6a80:	b8 63 00 18 	l.slli r3,r3,0x18
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6a84:	aa 94 31 88 	l.ori r20,r20,0x3188
		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
    6a88:	e0 42 18 04 	l.or r2,r2,r3
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
    6a8c:	9c 60 00 02 	l.addi r3,r0,0x2
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6a90:	d4 14 10 00 	l.sw 0x0(r20),r2

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
    6a94:	07 ff ff ac 	l.jal 6944 <hwmsgbox_wait_queue_not_full>
    6a98:	15 00 00 00 	l.nop 0x0
		if (ret != OK)
    6a9c:	bc 2b 00 00 	l.sfnei r11,0x0
    6aa0:	10 00 00 70 	l.bf 6c60 <hwmsgbox_send_message+0x254>
    6aa4:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->count;
    6aa8:	8c 6e 00 04 	l.lbz r3,0x4(r14)
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6aac:	aa 4b 00 00 	l.ori r18,r11,0x0

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6ab0:	d4 14 18 00 	l.sw 0x0(r20),r3

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6ab4:	00 00 00 0d 	l.j 6ae8 <hwmsgbox_send_message+0xdc>
    6ab8:	aa cb 00 00 	l.ori r22,r11,0x0
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
    6abc:	07 ff ff a2 	l.jal 6944 <hwmsgbox_wait_queue_not_full>
    6ac0:	a8 90 00 00 	l.ori r4,r16,0x0
			if (ret != OK)
    6ac4:	bc 2b 00 00 	l.sfnei r11,0x0
    6ac8:	10 00 00 66 	l.bf 6c60 <hwmsgbox_send_message+0x254>
    6acc:	a8 4b 00 00 	l.ori r2,r11,0x0
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6ad0:	84 4e 00 1c 	l.lwz r2,0x1c(r14)
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6ad4:	9e d6 00 01 	l.addi r22,r22,0x1
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
			if (ret != OK)
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6ad8:	e0 42 90 00 	l.add r2,r2,r18
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6adc:	9e 52 00 04 	l.addi r18,r18,0x4
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
			if (ret != OK)
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6ae0:	84 42 00 00 	l.lwz r2,0x0(r2)
    6ae4:	d4 14 10 00 	l.sw 0x0(r20),r2
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6ae8:	8c 4e 00 04 	l.lbz r2,0x4(r14)
    6aec:	e4 96 10 00 	l.sfltu r22,r2
    6af0:	13 ff ff f3 	l.bf 6abc <hwmsgbox_send_message+0xb0>
    6af4:	9c 60 00 02 	l.addi r3,r0,0x2
		}

		/* after send, wait feedback, hwsyn messsage must feedback use syn rx channel */

		/* first receive message header and misc */
		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
    6af8:	9c 60 00 03 	l.addi r3,r0,0x3
    6afc:	07 ff ff aa 	l.jal 69a4 <hwmsgbox_wait_queue_not_empty>
    6b00:	a8 90 00 00 	l.ori r4,r16,0x0
		if (ret != OK)
    6b04:	bc 2b 00 00 	l.sfnei r11,0x0
    6b08:	10 00 00 56 	l.bf 6c60 <hwmsgbox_send_message+0x254>
    6b0c:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
    6b10:	1a 40 03 00 	l.movhi r18,0x300
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
		pmessage->result = (value >> 24) & 0xff;

		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
    6b14:	a8 90 00 00 	l.ori r4,r16,0x0

		/* first receive message header and misc */
		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
    6b18:	aa 52 31 8c 	l.ori r18,r18,0x318c
    6b1c:	84 52 00 00 	l.lwz r2,0x0(r18)
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
    6b20:	b8 62 00 48 	l.srli r3,r2,0x8
		/* first receive message header and misc */
		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
		pmessage->state = value & 0xff;
    6b24:	d8 0e 10 00 	l.sb 0x0(r14),r2
		pmessage->attr = (value >> 8) & 0xff;
    6b28:	d8 0e 18 01 	l.sb 0x1(r14),r3
		pmessage->type = (value >> 16) & 0xff;
    6b2c:	b8 62 00 50 	l.srli r3,r2,0x10
		pmessage->result = (value >> 24) & 0xff;
    6b30:	b8 42 00 58 	l.srli r2,r2,0x18
		if (ret != OK)
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
    6b34:	d8 0e 18 02 	l.sb 0x2(r14),r3
		pmessage->result = (value >> 24) & 0xff;
    6b38:	d8 0e 10 03 	l.sb 0x3(r14),r2

		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
    6b3c:	07 ff ff 9a 	l.jal 69a4 <hwmsgbox_wait_queue_not_empty>
    6b40:	9c 60 00 03 	l.addi r3,r0,0x3
		if (ret != OK)
    6b44:	bc 2b 00 00 	l.sfnei r11,0x0
    6b48:	10 00 00 46 	l.bf 6c60 <hwmsgbox_send_message+0x254>
    6b4c:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
    6b50:	84 72 00 00 	l.lwz r3,0x0(r18)
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6b54:	aa cb 00 00 	l.ori r22,r11,0x0

		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
		pmessage->count = value & 0xff;
    6b58:	d8 0e 18 04 	l.sb 0x4(r14),r3

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6b5c:	00 00 00 0d 	l.j 6b90 <hwmsgbox_send_message+0x184>
    6b60:	aa 8b 00 00 	l.ori r20,r11,0x0
			ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
    6b64:	07 ff ff 90 	l.jal 69a4 <hwmsgbox_wait_queue_not_empty>
    6b68:	a8 90 00 00 	l.ori r4,r16,0x0
			if (ret != OK)
    6b6c:	bc 2b 00 00 	l.sfnei r11,0x0
    6b70:	10 00 00 3b 	l.bf 6c5c <hwmsgbox_send_message+0x250>
    6b74:	15 00 00 00 	l.nop 0x0
				return ret;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
    6b78:	84 6e 00 1c 	l.lwz r3,0x1c(r14)
    6b7c:	84 92 00 00 	l.lwz r4,0x0(r18)
    6b80:	e0 63 b0 00 	l.add r3,r3,r22
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6b84:	9e 94 00 01 	l.addi r20,r20,0x1
			ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
			if (ret != OK)
				return ret;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
    6b88:	d4 03 20 00 	l.sw 0x0(r3),r4
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6b8c:	9e d6 00 04 	l.addi r22,r22,0x4
    6b90:	8c 6e 00 04 	l.lbz r3,0x4(r14)
    6b94:	e4 94 18 00 	l.sfltu r20,r3
    6b98:	13 ff ff f3 	l.bf 6b64 <hwmsgbox_send_message+0x158>
    6b9c:	9c 60 00 03 	l.addi r3,r0,0x3
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
		}
		return OK;
	}
}
    6ba0:	00 00 00 31 	l.j 6c64 <hwmsgbox_send_message+0x258>
    6ba4:	9c 21 00 1c 	l.addi r1,r1,0x1c
	} else {
		/* asyn message use asyn tx channel */
		INF("send asyn message\n");

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
    6ba8:	07 ff ff 67 	l.jal 6944 <hwmsgbox_wait_queue_not_full>
    6bac:	15 00 00 00 	l.nop 0x0
		if (ret != OK)
    6bb0:	bc 2b 00 00 	l.sfnei r11,0x0
    6bb4:	10 00 00 2b 	l.bf 6c60 <hwmsgbox_send_message+0x254>
    6bb8:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6bbc:	8c 8e 00 01 	l.lbz r4,0x1(r14)
			(pmessage->type << 16) | (pmessage->result << 24);
    6bc0:	8c 6e 00 02 	l.lbz r3,0x2(r14)

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6bc4:	b8 84 00 08 	l.slli r4,r4,0x8
			(pmessage->type << 16) | (pmessage->result << 24);
    6bc8:	b8 63 00 10 	l.slli r3,r3,0x10
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    6bcc:	1a 40 03 00 	l.movhi r18,0x300

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6bd0:	e0 64 18 04 	l.or r3,r4,r3
    6bd4:	8c 8e 00 00 	l.lbz r4,0x0(r14)
    6bd8:	e0 63 20 04 	l.or r3,r3,r4
			(pmessage->type << 16) | (pmessage->result << 24);
    6bdc:	8c 8e 00 03 	l.lbz r4,0x3(r14)
    6be0:	b8 84 00 18 	l.slli r4,r4,0x18
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    6be4:	aa 52 31 80 	l.ori r18,r18,0x3180
		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
    6be8:	e0 63 20 04 	l.or r3,r3,r4
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
    6bec:	a8 90 00 00 	l.ori r4,r16,0x0
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    6bf0:	d4 12 18 00 	l.sw 0x0(r18),r3

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
    6bf4:	07 ff ff 54 	l.jal 6944 <hwmsgbox_wait_queue_not_full>
    6bf8:	a8 6b 00 00 	l.ori r3,r11,0x0
		if (ret != OK)
    6bfc:	bc 2b 00 00 	l.sfnei r11,0x0
    6c00:	10 00 00 18 	l.bf 6c60 <hwmsgbox_send_message+0x254>
    6c04:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->count;
    6c08:	8c 6e 00 04 	l.lbz r3,0x4(r14)
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6c0c:	aa cb 00 00 	l.ori r22,r11,0x0

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    6c10:	d4 12 18 00 	l.sw 0x0(r18),r3

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6c14:	00 00 00 0c 	l.j 6c44 <hwmsgbox_send_message+0x238>
    6c18:	aa 8b 00 00 	l.ori r20,r11,0x0
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
    6c1c:	07 ff ff 4a 	l.jal 6944 <hwmsgbox_wait_queue_not_full>
    6c20:	a8 90 00 00 	l.ori r4,r16,0x0
			if (ret != OK)
    6c24:	bc 2b 00 00 	l.sfnei r11,0x0
    6c28:	10 00 00 0d 	l.bf 6c5c <hwmsgbox_send_message+0x250>
    6c2c:	9e 94 00 01 	l.addi r20,r20,0x1
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    6c30:	84 6e 00 1c 	l.lwz r3,0x1c(r14)
    6c34:	e0 63 b0 00 	l.add r3,r3,r22
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6c38:	9e d6 00 04 	l.addi r22,r22,0x4
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
			if (ret != OK)
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    6c3c:	84 63 00 00 	l.lwz r3,0x0(r3)
    6c40:	d4 12 18 00 	l.sw 0x0(r18),r3
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6c44:	8c 6e 00 04 	l.lbz r3,0x4(r14)
    6c48:	e4 94 18 00 	l.sfltu r20,r3
    6c4c:	13 ff ff f4 	l.bf 6c1c <hwmsgbox_send_message+0x210>
    6c50:	9c 60 00 00 	l.addi r3,r0,0x0
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
		}
		return OK;
	}
}
    6c54:	00 00 00 04 	l.j 6c64 <hwmsgbox_send_message+0x258>
    6c58:	9c 21 00 1c 	l.addi r1,r1,0x1c
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
    6c5c:	a8 4b 00 00 	l.ori r2,r11,0x0
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
		}
		return OK;
	}
}
    6c60:	9c 21 00 1c 	l.addi r1,r1,0x1c
    6c64:	a9 62 00 00 	l.ori r11,r2,0x0
    6c68:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6c6c:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    6c70:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    6c74:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    6c78:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    6c7c:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    6c80:	44 00 48 00 	l.jr r9
    6c84:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00006c88 <hwmsgbox_feedback_message>:

int hwmsgbox_feedback_message(struct message *pmessage, u32 timeout)
{
    6c88:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    6c8c:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    6c90:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    6c94:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6c98:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    6c9c:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    6ca0:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    6ca4:	a9 c3 00 00 	l.ori r14,r3,0x0
	u32 i;
	u32 value;

	ASSERT(pmessage != NULL);

	if (pmessage->attr & MESSAGE_ATTR_HARDSYN) {
    6ca8:	8c 63 00 01 	l.lbz r3,0x1(r3)
    6cac:	a4 63 00 02 	l.andi r3,r3,0x2
		return OK;
	}
}

int hwmsgbox_feedback_message(struct message *pmessage, u32 timeout)
{
    6cb0:	9c 21 ff e4 	l.addi r1,r1,0xffffffe4
    6cb4:	aa c4 00 00 	l.ori r22,r4,0x0
	u32 i;
	u32 value;

	ASSERT(pmessage != NULL);

	if (pmessage->attr & MESSAGE_ATTR_HARDSYN) {
    6cb8:	bc 03 00 00 	l.sfeqi r3,0x0
    6cbc:	10 00 00 31 	l.bf 6d80 <hwmsgbox_feedback_message+0xf8>
    6cc0:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd
		/* use ac327 hard syn receiver channel */
		INF("send feedback message\n");

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6cc4:	07 ff ff 20 	l.jal 6944 <hwmsgbox_wait_queue_not_full>
    6cc8:	9c 60 00 05 	l.addi r3,r0,0x5
		if (ret != OK)
    6ccc:	bc 2b 00 00 	l.sfnei r11,0x0
    6cd0:	10 00 00 2c 	l.bf 6d80 <hwmsgbox_feedback_message+0xf8>
    6cd4:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6cd8:	8c 6e 00 01 	l.lbz r3,0x1(r14)
			(pmessage->type << 16) | (pmessage->result << 24);
    6cdc:	8c 4e 00 02 	l.lbz r2,0x2(r14)

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6ce0:	b8 63 00 08 	l.slli r3,r3,0x8
			(pmessage->type << 16) | (pmessage->result << 24);
    6ce4:	b8 42 00 10 	l.slli r2,r2,0x10
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6ce8:	1a 00 03 00 	l.movhi r16,0x300

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6cec:	a8 96 00 00 	l.ori r4,r22,0x0

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6cf0:	e0 43 10 04 	l.or r2,r3,r2
    6cf4:	8c 6e 00 00 	l.lbz r3,0x0(r14)
    6cf8:	e0 42 18 04 	l.or r2,r2,r3
			(pmessage->type << 16) | (pmessage->result << 24);
    6cfc:	8c 6e 00 03 	l.lbz r3,0x3(r14)
    6d00:	b8 63 00 18 	l.slli r3,r3,0x18
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6d04:	aa 10 31 94 	l.ori r16,r16,0x3194
		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
    6d08:	e0 42 18 04 	l.or r2,r2,r3
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6d0c:	9c 60 00 05 	l.addi r3,r0,0x5
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6d10:	d4 10 10 00 	l.sw 0x0(r16),r2

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6d14:	07 ff ff 0c 	l.jal 6944 <hwmsgbox_wait_queue_not_full>
    6d18:	15 00 00 00 	l.nop 0x0
		if (ret != OK)
    6d1c:	bc 2b 00 00 	l.sfnei r11,0x0
    6d20:	10 00 00 18 	l.bf 6d80 <hwmsgbox_feedback_message+0xf8>
    6d24:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->count;
    6d28:	8c 6e 00 04 	l.lbz r3,0x4(r14)
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6d2c:	aa 8b 00 00 	l.ori r20,r11,0x0

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6d30:	d4 10 18 00 	l.sw 0x0(r16),r3

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6d34:	00 00 00 0c 	l.j 6d64 <hwmsgbox_feedback_message+0xdc>
    6d38:	aa 4b 00 00 	l.ori r18,r11,0x0
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6d3c:	07 ff ff 02 	l.jal 6944 <hwmsgbox_wait_queue_not_full>
    6d40:	a8 96 00 00 	l.ori r4,r22,0x0
			if (ret != OK)
    6d44:	bc 2b 00 00 	l.sfnei r11,0x0
    6d48:	10 00 00 0d 	l.bf 6d7c <hwmsgbox_feedback_message+0xf4>
    6d4c:	9e 52 00 01 	l.addi r18,r18,0x1
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6d50:	84 6e 00 1c 	l.lwz r3,0x1c(r14)
    6d54:	e0 63 a0 00 	l.add r3,r3,r20
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6d58:	9e 94 00 04 	l.addi r20,r20,0x4
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
			if (ret != OK)
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6d5c:	84 63 00 00 	l.lwz r3,0x0(r3)
    6d60:	d4 10 18 00 	l.sw 0x0(r16),r3
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6d64:	8c 6e 00 04 	l.lbz r3,0x4(r14)
    6d68:	e4 92 18 00 	l.sfltu r18,r3
    6d6c:	13 ff ff f4 	l.bf 6d3c <hwmsgbox_feedback_message+0xb4>
    6d70:	9c 60 00 05 	l.addi r3,r0,0x5
		return OK;
	}

	/* invalid syn message */
	return -ESRCH;
}
    6d74:	00 00 00 04 	l.j 6d84 <hwmsgbox_feedback_message+0xfc>
    6d78:	9c 21 00 1c 	l.addi r1,r1,0x1c
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6d7c:	a8 4b 00 00 	l.ori r2,r11,0x0
		return OK;
	}

	/* invalid syn message */
	return -ESRCH;
}
    6d80:	9c 21 00 1c 	l.addi r1,r1,0x1c
    6d84:	a9 62 00 00 	l.ori r11,r2,0x0
    6d88:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6d8c:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    6d90:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    6d94:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    6d98:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    6d9c:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    6da0:	44 00 48 00 	l.jr r9
    6da4:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00006da8 <hwmsgbox_query_message>:
*
* Returns    :  the point of message, NULL if timeout.
*********************************************************************************************************
*/
s32 hwmsgbox_query_message(struct message *pmessage, u32 timeout)
{
    6da8:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
	u32 i;
	u32 value;

	/* query ar100 asyn received channel */
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH))) {
    6dac:	19 c0 03 00 	l.movhi r14,0x300
*
* Returns    :  the point of message, NULL if timeout.
*********************************************************************************************************
*/
s32 hwmsgbox_query_message(struct message *pmessage, u32 timeout)
{
    6db0:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
	u32 i;
	u32 value;

	/* query ar100 asyn received channel */
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH))) {
    6db4:	aa 0e 31 44 	l.ori r16,r14,0x3144
*
* Returns    :  the point of message, NULL if timeout.
*********************************************************************************************************
*/
s32 hwmsgbox_query_message(struct message *pmessage, u32 timeout)
{
    6db8:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    6dbc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6dc0:	a8 43 00 00 	l.ori r2,r3,0x0
	u32 i;
	u32 value;

	/* query ar100 asyn received channel */
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH))) {
    6dc4:	84 70 00 00 	l.lwz r3,0x0(r16)
    6dc8:	bc 03 00 00 	l.sfeqi r3,0x0
    6dcc:	10 00 00 2f 	l.bf 6e88 <hwmsgbox_query_message+0xe0>
    6dd0:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
		LOG("query asyn msg\n");
    6dd4:	18 80 00 01 	l.movhi r4,0x1
    6dd8:	9c 60 00 02 	l.addi r3,r0,0x2
    6ddc:	04 00 0e 7f 	l.jal a7d8 <debugger_printf>
    6de0:	a8 84 24 4e 	l.ori r4,r4,0x244e
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
    6de4:	84 70 00 00 	l.lwz r3,0x0(r16)
    6de8:	bc 03 00 00 	l.sfeqi r3,0x0
    6dec:	13 ff ff fe 	l.bf 6de4 <hwmsgbox_query_message+0x3c>
    6df0:	18 80 03 00 	l.movhi r4,0x300
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6df4:	a8 64 31 84 	l.ori r3,r4,0x3184
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
		pmessage->result = (value >> 24) & 0xff;

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
    6df8:	a8 84 31 44 	l.ori r4,r4,0x3144
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH))) {
		LOG("query asyn msg\n");
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6dfc:	84 63 00 00 	l.lwz r3,0x0(r3)
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
    6e00:	b8 a3 00 48 	l.srli r5,r3,0x8
		LOG("query asyn msg\n");
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
		pmessage->state = value & 0xff;
    6e04:	d8 02 18 00 	l.sb 0x0(r2),r3
		pmessage->attr = (value >> 8) & 0xff;
    6e08:	d8 02 28 01 	l.sb 0x1(r2),r5
		pmessage->type = (value >> 16) & 0xff;
    6e0c:	b8 a3 00 50 	l.srli r5,r3,0x10
		pmessage->result = (value >> 24) & 0xff;
    6e10:	b8 63 00 58 	l.srli r3,r3,0x18
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
    6e14:	d8 02 28 02 	l.sb 0x2(r2),r5
		pmessage->result = (value >> 24) & 0xff;
    6e18:	d8 02 18 03 	l.sb 0x3(r2),r3

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
    6e1c:	84 64 00 00 	l.lwz r3,0x0(r4)
    6e20:	bc 03 00 00 	l.sfeqi r3,0x0
    6e24:	13 ff ff fe 	l.bf 6e1c <hwmsgbox_query_message+0x74>
    6e28:	18 c0 03 00 	l.movhi r6,0x300
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6e2c:	a8 a6 31 84 	l.ori r5,r6,0x3184
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
    6e30:	a8 c6 31 44 	l.ori r6,r6,0x3144
		pmessage->type = (value >> 16) & 0xff;
		pmessage->result = (value >> 24) & 0xff;

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6e34:	84 65 00 00 	l.lwz r3,0x0(r5)
		pmessage->count = value & 0xff;
    6e38:	d8 02 18 04 	l.sb 0x4(r2),r3

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6e3c:	9c 60 00 00 	l.addi r3,r0,0x0
    6e40:	00 00 00 0c 	l.j 6e70 <hwmsgbox_query_message+0xc8>
    6e44:	a8 83 00 00 	l.ori r4,r3,0x0
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
    6e48:	84 e6 00 00 	l.lwz r7,0x0(r6)
    6e4c:	bc 07 00 00 	l.sfeqi r7,0x0
    6e50:	13 ff ff fe 	l.bf 6e48 <hwmsgbox_query_message+0xa0>
    6e54:	15 00 00 00 	l.nop 0x0
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6e58:	84 e2 00 1c 	l.lwz r7,0x1c(r2)
    6e5c:	85 05 00 00 	l.lwz r8,0x0(r5)
    6e60:	e0 e7 18 00 	l.add r7,r7,r3
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6e64:	9c 84 00 01 	l.addi r4,r4,0x1
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6e68:	d4 07 40 00 	l.sw 0x0(r7),r8
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6e6c:	9c 63 00 04 	l.addi r3,r3,0x4
    6e70:	8c e2 00 04 	l.lbz r7,0x4(r2)
    6e74:	e4 84 38 00 	l.sfltu r4,r7
    6e78:	13 ff ff f4 	l.bf 6e48 <hwmsgbox_query_message+0xa0>
    6e7c:	15 00 00 00 	l.nop 0x0
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
		}

		/* clear pending */
		hwmsgbox_clear_receiver_pending(HWMSGBOX_AR100_ASYN_RX_CH, HWMSG_QUEUE_USER_ARISC);
    6e80:	00 00 00 33 	l.j 6f4c <hwmsgbox_query_message+0x1a4>
    6e84:	9c 60 00 04 	l.addi r3,r0,0x4
		return OK;
	}

	/* query ar100 syn received channel */
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH))) {
    6e88:	a9 ce 31 50 	l.ori r14,r14,0x3150
		hwmsgbox_clear_receiver_pending(HWMSGBOX_AC327_SYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
		return OK;
	}

	/* no valid message */
	return FAIL;
    6e8c:	9d 60 ff ff 	l.addi r11,r0,0xffffffff
		hwmsgbox_clear_receiver_pending(HWMSGBOX_AR100_ASYN_RX_CH, HWMSG_QUEUE_USER_ARISC);
		return OK;
	}

	/* query ar100 syn received channel */
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH))) {
    6e90:	84 6e 00 00 	l.lwz r3,0x0(r14)
    6e94:	bc 03 00 00 	l.sfeqi r3,0x0
    6e98:	10 00 00 31 	l.bf 6f5c <hwmsgbox_query_message+0x1b4>
    6e9c:	9c 60 00 02 	l.addi r3,r0,0x2
		LOG("query syn msg\n");
    6ea0:	18 80 00 01 	l.movhi r4,0x1
    6ea4:	04 00 0e 4d 	l.jal a7d8 <debugger_printf>
    6ea8:	a8 84 24 5e 	l.ori r4,r4,0x245e
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
    6eac:	84 6e 00 00 	l.lwz r3,0x0(r14)
    6eb0:	bc 03 00 00 	l.sfeqi r3,0x0
    6eb4:	13 ff ff fe 	l.bf 6eac <hwmsgbox_query_message+0x104>
    6eb8:	18 80 03 00 	l.movhi r4,0x300
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6ebc:	a8 64 31 90 	l.ori r3,r4,0x3190
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
		pmessage->result = (value >> 24) & 0xff;

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
    6ec0:	a8 84 31 50 	l.ori r4,r4,0x3150
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH))) {
		LOG("query syn msg\n");
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6ec4:	84 63 00 00 	l.lwz r3,0x0(r3)
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
    6ec8:	b8 a3 00 48 	l.srli r5,r3,0x8
		LOG("query syn msg\n");
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		pmessage->state = value & 0xff;
    6ecc:	d8 02 18 00 	l.sb 0x0(r2),r3
		pmessage->attr = (value >> 8) & 0xff;
    6ed0:	d8 02 28 01 	l.sb 0x1(r2),r5
		pmessage->type = (value >> 16) & 0xff;
    6ed4:	b8 a3 00 50 	l.srli r5,r3,0x10
		pmessage->result = (value >> 24) & 0xff;
    6ed8:	b8 63 00 58 	l.srli r3,r3,0x18
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
    6edc:	d8 02 28 02 	l.sb 0x2(r2),r5
		pmessage->result = (value >> 24) & 0xff;
    6ee0:	d8 02 18 03 	l.sb 0x3(r2),r3

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
    6ee4:	84 64 00 00 	l.lwz r3,0x0(r4)
    6ee8:	bc 03 00 00 	l.sfeqi r3,0x0
    6eec:	13 ff ff fe 	l.bf 6ee4 <hwmsgbox_query_message+0x13c>
    6ef0:	18 c0 03 00 	l.movhi r6,0x300
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6ef4:	a8 a6 31 90 	l.ori r5,r6,0x3190
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
    6ef8:	a8 c6 31 50 	l.ori r6,r6,0x3150
		pmessage->type = (value >> 16) & 0xff;
		pmessage->result = (value >> 24) & 0xff;

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6efc:	84 65 00 00 	l.lwz r3,0x0(r5)
		pmessage->count = value & 0xff;
    6f00:	d8 02 18 04 	l.sb 0x4(r2),r3

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6f04:	9c 60 00 00 	l.addi r3,r0,0x0
    6f08:	00 00 00 0c 	l.j 6f38 <hwmsgbox_query_message+0x190>
    6f0c:	a8 83 00 00 	l.ori r4,r3,0x0
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
    6f10:	84 e6 00 00 	l.lwz r7,0x0(r6)
    6f14:	bc 07 00 00 	l.sfeqi r7,0x0
    6f18:	13 ff ff fe 	l.bf 6f10 <hwmsgbox_query_message+0x168>
    6f1c:	15 00 00 00 	l.nop 0x0
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6f20:	84 e2 00 1c 	l.lwz r7,0x1c(r2)
    6f24:	85 05 00 00 	l.lwz r8,0x0(r5)
    6f28:	e0 e7 18 00 	l.add r7,r7,r3
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6f2c:	9c 84 00 01 	l.addi r4,r4,0x1
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6f30:	d4 07 40 00 	l.sw 0x0(r7),r8
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6f34:	9c 63 00 04 	l.addi r3,r3,0x4
    6f38:	8c e2 00 04 	l.lbz r7,0x4(r2)
    6f3c:	e4 84 38 00 	l.sfltu r4,r7
    6f40:	13 ff ff f4 	l.bf 6f10 <hwmsgbox_query_message+0x168>
    6f44:	15 00 00 00 	l.nop 0x0
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		}

		/* clear pending */
		hwmsgbox_clear_receiver_pending(HWMSGBOX_AC327_SYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
    6f48:	9c 60 01 00 	l.addi r3,r0,0x100
    6f4c:	18 40 03 00 	l.movhi r2,0x300
		return OK;
    6f50:	9d 60 00 00 	l.addi r11,r0,0x0
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		}

		/* clear pending */
		hwmsgbox_clear_receiver_pending(HWMSGBOX_AC327_SYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
    6f54:	a8 42 30 50 	l.ori r2,r2,0x3050
    6f58:	d4 02 18 00 	l.sw 0x0(r2),r3
		return OK;
	}

	/* no valid message */
	return FAIL;
}
    6f5c:	9c 21 00 10 	l.addi r1,r1,0x10
    6f60:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6f64:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    6f68:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    6f6c:	44 00 48 00 	l.jr r9
    6f70:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00006f74 <hwmsgbox_super_standby_init>:


s32 hwmsgbox_super_standby_init(void)
{
	hwmsg_suspend = 1;
    6f74:	18 60 00 01 	l.movhi r3,0x1
    6f78:	9c 80 00 01 	l.addi r4,r0,0x1
    6f7c:	a8 63 33 c4 	l.ori r3,r3,0x33c4
	return FAIL;
}


s32 hwmsgbox_super_standby_init(void)
{
    6f80:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	hwmsg_suspend = 1;
    6f84:	d4 03 20 00 	l.sw 0x0(r3),r4

	hwmsgbox_exit();
    6f88:	07 ff fe 63 	l.jal 6914 <hwmsgbox_exit>
    6f8c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	return OK;
}
    6f90:	9c 21 00 04 	l.addi r1,r1,0x4
    6f94:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6f98:	44 00 48 00 	l.jr r9
    6f9c:	9d 60 00 00 	l.addi r11,r0,0x0

00006fa0 <hwmsgbox_super_standby_exit>:

s32 hwmsgbox_super_standby_exit(void)
{
    6fa0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6fa4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    6fa8:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	hwmsgbox_init();
    6fac:	07 ff fe 2a 	l.jal 6854 <hwmsgbox_init>
    6fb0:	9c 40 00 00 	l.addi r2,r0,0x0

	hwmsg_suspend = 0;
    6fb4:	18 60 00 01 	l.movhi r3,0x1

	return OK;
}
    6fb8:	a9 62 00 00 	l.ori r11,r2,0x0

s32 hwmsgbox_super_standby_exit(void)
{
	hwmsgbox_init();

	hwmsg_suspend = 0;
    6fbc:	a8 63 33 c4 	l.ori r3,r3,0x33c4
    6fc0:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}
    6fc4:	9c 21 00 08 	l.addi r1,r1,0x8
    6fc8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6fcc:	44 00 48 00 	l.jr r9
    6fd0:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00006fd4 <aw1660_pmu_reset>:
	while (1)
		;
}

static void aw1660_pmu_reset(void)
{
    6fd4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6fd8:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    6fdc:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	u8 devaddr = RSB_RTSADDR_AW1660;
	u8 regaddr = AW1660_PWR_WAKEUP_CTRL;
    6fe0:	9c 40 00 31 	l.addi r2,r0,0x31
	while (1)
		;
}

static void aw1660_pmu_reset(void)
{
    6fe4:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
	u8 devaddr = RSB_RTSADDR_AW1660;
	u8 regaddr = AW1660_PWR_WAKEUP_CTRL;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);
    6fe8:	a8 60 a2 01 	l.ori r3,r0,0xa201
}

static void aw1660_pmu_reset(void)
{
	u8 devaddr = RSB_RTSADDR_AW1660;
	u8 regaddr = AW1660_PWR_WAKEUP_CTRL;
    6fec:	d8 01 10 03 	l.sb 0x3(r1),r2
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    6ff0:	9d c1 00 03 	l.addi r14,r1,0x3
{
	u8 devaddr = RSB_RTSADDR_AW1660;
	u8 regaddr = AW1660_PWR_WAKEUP_CTRL;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);
    6ff4:	04 00 2a 4c 	l.jal 11924 <save_state_flag>
    6ff8:	9c 41 00 02 	l.addi r2,r1,0x2
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    6ffc:	9c 60 00 34 	l.addi r3,r0,0x34
    7000:	a8 8e 00 00 	l.ori r4,r14,0x0
    7004:	a8 a2 00 00 	l.ori r5,r2,0x0
    7008:	07 ff fd 39 	l.jal 64ec <twi_read>
    700c:	9c c0 00 01 	l.addi r6,r0,0x1
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 6;
    7010:	8c 61 00 02 	l.lbz r3,0x2(r1)
    7014:	a8 63 00 40 	l.ori r3,r3,0x40
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7018:	a8 8e 00 00 	l.ori r4,r14,0x0
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 6;
    701c:	d8 01 18 02 	l.sb 0x2(r1),r3
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7020:	a8 a2 00 00 	l.ori r5,r2,0x0
    7024:	9c 60 00 34 	l.addi r3,r0,0x34
    7028:	07 ff fd 55 	l.jal 657c <twi_write>
    702c:	9c c0 00 01 	l.addi r6,r0,0x1

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 6;
	pmu_reg_write(&devaddr, &regaddr, &data, 1);

	LOG("reset system\n");
    7030:	18 80 00 01 	l.movhi r4,0x1
    7034:	9c 60 00 02 	l.addi r3,r0,0x2
    7038:	04 00 0d e8 	l.jal a7d8 <debugger_printf>
    703c:	a8 84 24 6d 	l.ori r4,r4,0x246d
    7040:	00 00 00 00 	l.j 7040 <aw1660_pmu_reset+0x6c>
    7044:	15 00 00 00 	l.nop 0x0

00007048 <axp2202_pmu_reset>:
	while (1)
		;
}

static void axp2202_pmu_reset(void)
{
    7048:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    704c:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    7050:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	u8 devaddr = RSB_RTSADDR_AXP2202;
	u8 regaddr = AXP2202_SOFT_PWROFF;
    7054:	9c 40 00 27 	l.addi r2,r0,0x27
	while (1)
		;
}

static void axp2202_pmu_reset(void)
{
    7058:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
	u8 devaddr = RSB_RTSADDR_AXP2202;
	u8 regaddr = AXP2202_SOFT_PWROFF;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);
    705c:	a8 60 a2 01 	l.ori r3,r0,0xa201
}

static void axp2202_pmu_reset(void)
{
	u8 devaddr = RSB_RTSADDR_AXP2202;
	u8 regaddr = AXP2202_SOFT_PWROFF;
    7060:	d8 01 10 03 	l.sb 0x3(r1),r2
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    7064:	9d c1 00 03 	l.addi r14,r1,0x3
{
	u8 devaddr = RSB_RTSADDR_AXP2202;
	u8 regaddr = AXP2202_SOFT_PWROFF;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);
    7068:	04 00 2a 2f 	l.jal 11924 <save_state_flag>
    706c:	9c 41 00 02 	l.addi r2,r1,0x2
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    7070:	9c 60 00 34 	l.addi r3,r0,0x34
    7074:	a8 8e 00 00 	l.ori r4,r14,0x0
    7078:	a8 a2 00 00 	l.ori r5,r2,0x0
    707c:	07 ff fd 1c 	l.jal 64ec <twi_read>
    7080:	9c c0 00 01 	l.addi r6,r0,0x1
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 1;
    7084:	8c 61 00 02 	l.lbz r3,0x2(r1)
    7088:	a8 63 00 02 	l.ori r3,r3,0x2
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    708c:	a8 8e 00 00 	l.ori r4,r14,0x0
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 1;
    7090:	d8 01 18 02 	l.sb 0x2(r1),r3
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7094:	a8 a2 00 00 	l.ori r5,r2,0x0
    7098:	9c 60 00 34 	l.addi r3,r0,0x34
    709c:	07 ff fd 38 	l.jal 657c <twi_write>
    70a0:	9c c0 00 01 	l.addi r6,r0,0x1

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 1;
	pmu_reg_write(&devaddr, &regaddr, &data, 1);

	LOG("reset system\n");
    70a4:	18 80 00 01 	l.movhi r4,0x1
    70a8:	9c 60 00 02 	l.addi r3,r0,0x2
    70ac:	04 00 0d cb 	l.jal a7d8 <debugger_printf>
    70b0:	a8 84 24 6d 	l.ori r4,r4,0x246d
    70b4:	00 00 00 00 	l.j 70b4 <axp2202_pmu_reset+0x6c>
    70b8:	15 00 00 00 	l.nop 0x0

000070bc <pmu_shutdown>:

	return OK;
}

void pmu_shutdown(void)
{
    70bc:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
	if (is_pmu_exist() == FALSE)
    70c0:	18 40 00 01 	l.movhi r2,0x1

	return OK;
}

void pmu_shutdown(void)
{
    70c4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (is_pmu_exist() == FALSE)
    70c8:	a8 42 33 c8 	l.ori r2,r2,0x33c8

	return OK;
}

void pmu_shutdown(void)
{
    70cc:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    70d0:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
	if (is_pmu_exist() == FALSE)
    70d4:	84 42 00 00 	l.lwz r2,0x0(r2)
    70d8:	bc 02 00 00 	l.sfeqi r2,0x0
    70dc:	0c 00 00 0a 	l.bnf 7104 <pmu_shutdown+0x48>
    70e0:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
		aw1657_pmu_shutdown();
		break;
	default:
		break;
	}
}
    70e4:	00 00 00 81 	l.j 72e8 <pmu_shutdown+0x22c>
    70e8:	9c 21 00 14 	l.addi r1,r1,0x14
{
	if (is_pmu_exist() == FALSE)
		return;

	while (!!twi_get_status()) {
		time_mdelay(1000 * 2);
    70ec:	07 ff f8 ce 	l.jal 5424 <time_mdelay>
    70f0:	9c 60 07 d0 	l.addi r3,r0,0x7d0
		LOG("wait twi bus idle loop\n");
    70f4:	18 80 00 01 	l.movhi r4,0x1
    70f8:	9c 60 00 02 	l.addi r3,r0,0x2
    70fc:	04 00 0d b7 	l.jal a7d8 <debugger_printf>
    7100:	a8 84 24 7b 	l.ori r4,r4,0x247b
void pmu_shutdown(void)
{
	if (is_pmu_exist() == FALSE)
		return;

	while (!!twi_get_status()) {
    7104:	07 ff fd 48 	l.jal 6624 <twi_get_status>
    7108:	15 00 00 00 	l.nop 0x0
    710c:	bc 2b 00 00 	l.sfnei r11,0x0
    7110:	13 ff ff f7 	l.bf 70ec <pmu_shutdown+0x30>
    7114:	18 40 00 01 	l.movhi r2,0x1
		time_mdelay(1000 * 2);
		LOG("wait twi bus idle loop\n");
	}

	switch (ic_version) {
    7118:	a8 42 33 cc 	l.ori r2,r2,0x33cc
    711c:	8c 42 00 00 	l.lbz r2,0x0(r2)
    7120:	bc 02 00 10 	l.sfeqi r2,0x10
    7124:	10 00 00 56 	l.bf 727c <pmu_shutdown+0x1c0>
    7128:	bc 42 00 10 	l.sfgtui r2,0x10
    712c:	10 00 00 07 	l.bf 7148 <pmu_shutdown+0x8c>
    7130:	bc 02 00 11 	l.sfeqi r2,0x11
    7134:	bc 02 00 01 	l.sfeqi r2,0x1
    7138:	0c 00 00 6b 	l.bnf 72e4 <pmu_shutdown+0x228>
    713c:	a8 60 a1 01 	l.ori r3,r0,0xa101
 * only called by pmu common function.
 */
static void axp2202_pmu_shutdown(void)
{
	u8 devaddr = RSB_RTSADDR_AXP2202;
	u8 regaddr = AXP2202_SOFT_PWROFF;
    7140:	00 00 00 38 	l.j 7220 <pmu_shutdown+0x164>
    7144:	9c 80 00 27 	l.addi r4,r0,0x27
	while (!!twi_get_status()) {
		time_mdelay(1000 * 2);
		LOG("wait twi bus idle loop\n");
	}

	switch (ic_version) {
    7148:	10 00 00 06 	l.bf 7160 <pmu_shutdown+0xa4>
    714c:	bc 02 00 14 	l.sfeqi r2,0x14
    7150:	0c 00 00 65 	l.bnf 72e4 <pmu_shutdown+0x228>
    7154:	9c 60 ff 80 	l.addi r3,r0,0xffffff80
 * only called by pmu common function.
 */
static void aw1736_pmu_shutdown(void)
{
	u8 devaddr = RSB_RTSADDR_AW1736;
	u8 regaddr = AW1736_PWR_DISABLE_DOWN;
    7158:	00 00 00 1c 	l.j 71c8 <pmu_shutdown+0x10c>
    715c:	9c 40 00 32 	l.addi r2,r0,0x32
 * only called by pmu common function.
 */
static void aw1660_pmu_shutdown(void)
{
	u8 devaddr = RSB_RTSADDR_AW1660;
	u8 regaddr = AW1660_PWR_OFF_CTRL;
    7160:	9c 40 00 32 	l.addi r2,r0,0x32
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);
    7164:	a8 60 a1 01 	l.ori r3,r0,0xa101
 * only called by pmu common function.
 */
static void aw1660_pmu_shutdown(void)
{
	u8 devaddr = RSB_RTSADDR_AW1660;
	u8 regaddr = AW1660_PWR_OFF_CTRL;
    7168:	d8 01 10 02 	l.sb 0x2(r1),r2
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    716c:	9d c1 00 02 	l.addi r14,r1,0x2
{
	u8 devaddr = RSB_RTSADDR_AW1660;
	u8 regaddr = AW1660_PWR_OFF_CTRL;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);
    7170:	04 00 29 ed 	l.jal 11924 <save_state_flag>
    7174:	9c 41 00 03 	l.addi r2,r1,0x3
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    7178:	9c 60 00 34 	l.addi r3,r0,0x34
    717c:	a8 8e 00 00 	l.ori r4,r14,0x0
    7180:	a8 a2 00 00 	l.ori r5,r2,0x0
    7184:	07 ff fc da 	l.jal 64ec <twi_read>
    7188:	9c c0 00 01 	l.addi r6,r0,0x1
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 7;
    718c:	8c 61 00 03 	l.lbz r3,0x3(r1)
    7190:	9c 80 ff 80 	l.addi r4,r0,0xffffff80
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7194:	a8 a2 00 00 	l.ori r5,r2,0x0
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 7;
    7198:	e0 63 20 04 	l.or r3,r3,r4
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    719c:	9c c0 00 01 	l.addi r6,r0,0x1
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 7;
    71a0:	d8 01 18 03 	l.sb 0x3(r1),r3
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    71a4:	a8 8e 00 00 	l.ori r4,r14,0x0
    71a8:	07 ff fc f5 	l.jal 657c <twi_write>
    71ac:	9c 60 00 34 	l.addi r3,r0,0x34

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 7;
	pmu_reg_write(&devaddr, &regaddr, &data, 1);

	LOG("poweroff system\n");
    71b0:	18 80 00 01 	l.movhi r4,0x1
    71b4:	9c 60 00 02 	l.addi r3,r0,0x2
    71b8:	04 00 0d 88 	l.jal a7d8 <debugger_printf>
    71bc:	a8 84 24 93 	l.ori r4,r4,0x2493
    71c0:	00 00 00 00 	l.j 71c0 <pmu_shutdown+0x104>
    71c4:	15 00 00 00 	l.nop 0x0
 */
static void aw1736_pmu_shutdown(void)
{
	u8 devaddr = RSB_RTSADDR_AW1736;
	u8 regaddr = AW1736_PWR_DISABLE_DOWN;
	u8 data = 1 << 7;
    71c8:	d8 01 18 02 	l.sb 0x2(r1),r3

	save_state_flag(REC_SHUTDOWN | 0x101);
    71cc:	a8 60 a1 01 	l.ori r3,r0,0xa101
 * only called by pmu common function.
 */
static void aw1736_pmu_shutdown(void)
{
	u8 devaddr = RSB_RTSADDR_AW1736;
	u8 regaddr = AW1736_PWR_DISABLE_DOWN;
    71d0:	d8 01 10 03 	l.sb 0x3(r1),r2
	u8 data = 1 << 7;

	save_state_flag(REC_SHUTDOWN | 0x101);

	/* power off system, disable DCDC & LDO */
	pmu_reg_write(&devaddr, &regaddr, &data, 1);
    71d4:	9d c1 00 03 	l.addi r14,r1,0x3
{
	u8 devaddr = RSB_RTSADDR_AW1736;
	u8 regaddr = AW1736_PWR_DISABLE_DOWN;
	u8 data = 1 << 7;

	save_state_flag(REC_SHUTDOWN | 0x101);
    71d8:	04 00 29 d3 	l.jal 11924 <save_state_flag>
    71dc:	9c 41 00 02 	l.addi r2,r1,0x2
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    71e0:	9c 60 00 36 	l.addi r3,r0,0x36
    71e4:	a8 8e 00 00 	l.ori r4,r14,0x0
    71e8:	a8 a2 00 00 	l.ori r5,r2,0x0
    71ec:	07 ff fc e4 	l.jal 657c <twi_write>
    71f0:	9c c0 00 01 	l.addi r6,r0,0x1
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    71f4:	9c 60 00 36 	l.addi r3,r0,0x36
    71f8:	a8 8e 00 00 	l.ori r4,r14,0x0
    71fc:	a8 a2 00 00 	l.ori r5,r2,0x0
    7200:	07 ff fc bb 	l.jal 64ec <twi_read>
    7204:	9c c0 00 01 	l.addi r6,r0,0x1

	/* power off system, disable DCDC & LDO */
	pmu_reg_write(&devaddr, &regaddr, &data, 1);
	pmu_reg_read(&devaddr, &regaddr, &data, 1);

	LOG("poweroff system\n");
    7208:	18 80 00 01 	l.movhi r4,0x1
    720c:	9c 60 00 02 	l.addi r3,r0,0x2
    7210:	04 00 0d 72 	l.jal a7d8 <debugger_printf>
    7214:	a8 84 24 93 	l.ori r4,r4,0x2493
    7218:	00 00 00 00 	l.j 7218 <pmu_shutdown+0x15c>
    721c:	15 00 00 00 	l.nop 0x0
	u8 regaddr = AXP2202_SOFT_PWROFF;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    7220:	9e 01 00 02 	l.addi r16,r1,0x2
    7224:	9d c1 00 03 	l.addi r14,r1,0x3
{
	u8 devaddr = RSB_RTSADDR_AXP2202;
	u8 regaddr = AXP2202_SOFT_PWROFF;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);
    7228:	04 00 29 bf 	l.jal 11924 <save_state_flag>
    722c:	d8 01 20 02 	l.sb 0x2(r1),r4
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    7230:	9c 60 00 34 	l.addi r3,r0,0x34
    7234:	a8 90 00 00 	l.ori r4,r16,0x0
    7238:	a8 ae 00 00 	l.ori r5,r14,0x0
    723c:	07 ff fc ac 	l.jal 64ec <twi_read>
    7240:	a8 c2 00 00 	l.ori r6,r2,0x0
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 0;
    7244:	8c 61 00 03 	l.lbz r3,0x3(r1)
    7248:	a8 63 00 01 	l.ori r3,r3,0x1
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    724c:	a8 90 00 00 	l.ori r4,r16,0x0
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 0;
    7250:	d8 01 18 03 	l.sb 0x3(r1),r3
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7254:	a8 ae 00 00 	l.ori r5,r14,0x0
    7258:	9c 60 00 34 	l.addi r3,r0,0x34
    725c:	07 ff fc c8 	l.jal 657c <twi_write>
    7260:	a8 c2 00 00 	l.ori r6,r2,0x0

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 0;
	pmu_reg_write(&devaddr, &regaddr, &data, 1);

	LOG("poweroff system\n");
    7264:	18 80 00 01 	l.movhi r4,0x1
    7268:	9c 60 00 02 	l.addi r3,r0,0x2
    726c:	04 00 0d 5b 	l.jal a7d8 <debugger_printf>
    7270:	a8 84 24 93 	l.ori r4,r4,0x2493
    7274:	00 00 00 00 	l.j 7274 <pmu_shutdown+0x1b8>
    7278:	15 00 00 00 	l.nop 0x0
 * only called by pmu common function.
 */
static void aw1657_pmu_shutdown(void)
{
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
    727c:	9c 40 00 32 	l.addi r2,r0,0x32
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);
    7280:	a8 60 a1 01 	l.ori r3,r0,0xa101
 * only called by pmu common function.
 */
static void aw1657_pmu_shutdown(void)
{
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
    7284:	d8 01 10 03 	l.sb 0x3(r1),r2
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    7288:	9d c1 00 03 	l.addi r14,r1,0x3
{
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);
    728c:	04 00 29 a6 	l.jal 11924 <save_state_flag>
    7290:	9c 41 00 02 	l.addi r2,r1,0x2
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    7294:	9c 60 00 36 	l.addi r3,r0,0x36
    7298:	a8 8e 00 00 	l.ori r4,r14,0x0
    729c:	a8 a2 00 00 	l.ori r5,r2,0x0
    72a0:	07 ff fc 93 	l.jal 64ec <twi_read>
    72a4:	9c c0 00 01 	l.addi r6,r0,0x1
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 7;
    72a8:	8c 61 00 02 	l.lbz r3,0x2(r1)
    72ac:	9c 80 ff 80 	l.addi r4,r0,0xffffff80
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    72b0:	a8 a2 00 00 	l.ori r5,r2,0x0
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 7;
    72b4:	e0 63 20 04 	l.or r3,r3,r4
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    72b8:	9c c0 00 01 	l.addi r6,r0,0x1
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 7;
    72bc:	d8 01 18 02 	l.sb 0x2(r1),r3
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    72c0:	a8 8e 00 00 	l.ori r4,r14,0x0
    72c4:	07 ff fc ae 	l.jal 657c <twi_write>
    72c8:	9c 60 00 36 	l.addi r3,r0,0x36

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 7;
	pmu_reg_write(&devaddr, &regaddr, &data, 1);

	LOG("poweroff system\n");
    72cc:	18 80 00 01 	l.movhi r4,0x1
    72d0:	9c 60 00 02 	l.addi r3,r0,0x2
    72d4:	04 00 0d 41 	l.jal a7d8 <debugger_printf>
    72d8:	a8 84 24 93 	l.ori r4,r4,0x2493
    72dc:	00 00 00 00 	l.j 72dc <pmu_shutdown+0x220>
    72e0:	15 00 00 00 	l.nop 0x0
		aw1657_pmu_shutdown();
		break;
	default:
		break;
	}
}
    72e4:	9c 21 00 14 	l.addi r1,r1,0x14
    72e8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    72ec:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    72f0:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    72f4:	44 00 48 00 	l.jr r9
    72f8:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

000072fc <pmu_charging_reset>:
		break;
	}
}

void pmu_charging_reset(void)
{
    72fc:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
	if (is_pmu_exist() == FALSE)
    7300:	18 40 00 01 	l.movhi r2,0x1
		break;
	}
}

void pmu_charging_reset(void)
{
    7304:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (is_pmu_exist() == FALSE)
    7308:	a8 42 33 c8 	l.ori r2,r2,0x33c8
		break;
	}
}

void pmu_charging_reset(void)
{
    730c:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    7310:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    7314:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
	if (is_pmu_exist() == FALSE)
    7318:	84 42 00 00 	l.lwz r2,0x0(r2)
    731c:	bc 02 00 00 	l.sfeqi r2,0x0
    7320:	0c 00 00 0a 	l.bnf 7348 <pmu_charging_reset+0x4c>
    7324:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
		axp2202_pmu_charging_reset();
		break;
	default:
		break;
	}
}
    7328:	00 00 00 5a 	l.j 7490 <pmu_charging_reset+0x194>
    732c:	9c 21 00 18 	l.addi r1,r1,0x18
{
	if (is_pmu_exist() == FALSE)
		return;

	while (!!twi_get_status()) {
		time_mdelay(1000 * 2);
    7330:	07 ff f8 3d 	l.jal 5424 <time_mdelay>
    7334:	9c 60 07 d0 	l.addi r3,r0,0x7d0
		LOG("wait twi bus idle loop\n");
    7338:	18 80 00 01 	l.movhi r4,0x1
    733c:	9c 60 00 02 	l.addi r3,r0,0x2
    7340:	04 00 0d 26 	l.jal a7d8 <debugger_printf>
    7344:	a8 84 24 7b 	l.ori r4,r4,0x247b
void pmu_charging_reset(void)
{
	if (is_pmu_exist() == FALSE)
		return;

	while (!!twi_get_status()) {
    7348:	07 ff fc b7 	l.jal 6624 <twi_get_status>
    734c:	15 00 00 00 	l.nop 0x0
    7350:	bc 2b 00 00 	l.sfnei r11,0x0
    7354:	13 ff ff f7 	l.bf 7330 <pmu_charging_reset+0x34>
    7358:	a9 cb 00 00 	l.ori r14,r11,0x0
		time_mdelay(1000 * 2);
		LOG("wait twi bus idle loop\n");
	}

	switch (ic_version) {
    735c:	18 40 00 01 	l.movhi r2,0x1
    7360:	a8 42 33 cc 	l.ori r2,r2,0x33cc
    7364:	8c 42 00 00 	l.lbz r2,0x0(r2)
    7368:	bc 02 00 01 	l.sfeqi r2,0x1
    736c:	10 00 00 27 	l.bf 7408 <pmu_charging_reset+0x10c>
    7370:	bc 02 00 11 	l.sfeqi r2,0x11
    7374:	0c 00 00 46 	l.bnf 748c <pmu_charging_reset+0x190>
    7378:	9d c1 00 02 	l.addi r14,r1,0x2
	u8 devaddr = RSB_RTSADDR_AW1660;
	u8 regaddr;
	u8 val;

	regaddr = AW1660_PWR_SRC_STA;
	pmu_reg_read(&devaddr, &regaddr, &val, 1);
    737c:	9c 41 00 03 	l.addi r2,r1,0x3
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    7380:	9c 60 00 34 	l.addi r3,r0,0x34
    7384:	a8 8e 00 00 	l.ori r4,r14,0x0
    7388:	a8 a2 00 00 	l.ori r5,r2,0x0
    738c:	9c c0 00 01 	l.addi r6,r0,0x1
    7390:	07 ff fc 57 	l.jal 64ec <twi_read>
    7394:	d8 01 58 02 	l.sb 0x2(r1),r11
	u8 val;

	regaddr = AW1660_PWR_SRC_STA;
	pmu_reg_read(&devaddr, &regaddr, &val, 1);
	/* vbus presence */
	if((val & 0x20) == 0x20) {
    7398:	8c 61 00 03 	l.lbz r3,0x3(r1)
    739c:	a4 63 00 20 	l.andi r3,r3,0x20
    73a0:	bc 03 00 00 	l.sfeqi r3,0x0
    73a4:	10 00 00 3a 	l.bf 748c <pmu_charging_reset+0x190>
    73a8:	9c 60 00 01 	l.addi r3,r0,0x1
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    73ac:	a8 8e 00 00 	l.ori r4,r14,0x0

	regaddr = AW1660_PWR_SRC_STA;
	pmu_reg_read(&devaddr, &regaddr, &val, 1);
	/* vbus presence */
	if((val & 0x20) == 0x20) {
		regaddr = AW1660_PWRM_CHGR_STA;
    73b0:	d8 01 18 02 	l.sb 0x2(r1),r3
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    73b4:	a8 a2 00 00 	l.ori r5,r2,0x0
    73b8:	9c 60 00 34 	l.addi r3,r0,0x34
    73bc:	07 ff fc 4c 	l.jal 64ec <twi_read>
    73c0:	9c c0 00 01 	l.addi r6,r0,0x1
	/* vbus presence */
	if((val & 0x20) == 0x20) {
		regaddr = AW1660_PWRM_CHGR_STA;
		pmu_reg_read(&devaddr, &regaddr, &val, 1);
		/* only when battery presence we do reset instead of shutdown */
		if((val & 0x20) == 0x20) {
    73c4:	8c 61 00 03 	l.lbz r3,0x3(r1)
    73c8:	a4 63 00 20 	l.andi r3,r3,0x20
    73cc:	bc 03 00 00 	l.sfeqi r3,0x0
    73d0:	10 00 00 2f 	l.bf 748c <pmu_charging_reset+0x190>
    73d4:	9c 60 00 04 	l.addi r3,r0,0x4
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    73d8:	a8 8e 00 00 	l.ori r4,r14,0x0
	if((val & 0x20) == 0x20) {
		regaddr = AW1660_PWRM_CHGR_STA;
		pmu_reg_read(&devaddr, &regaddr, &val, 1);
		/* only when battery presence we do reset instead of shutdown */
		if((val & 0x20) == 0x20) {
			regaddr = AW1660_DATA_BUFF1;
    73dc:	d8 01 18 02 	l.sb 0x2(r1),r3
			val = SUNXI_CHARGING_FLAG;
    73e0:	9c 60 00 61 	l.addi r3,r0,0x61
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    73e4:	a8 a2 00 00 	l.ori r5,r2,0x0
		regaddr = AW1660_PWRM_CHGR_STA;
		pmu_reg_read(&devaddr, &regaddr, &val, 1);
		/* only when battery presence we do reset instead of shutdown */
		if((val & 0x20) == 0x20) {
			regaddr = AW1660_DATA_BUFF1;
			val = SUNXI_CHARGING_FLAG;
    73e8:	d8 01 18 03 	l.sb 0x3(r1),r3
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    73ec:	9c c0 00 01 	l.addi r6,r0,0x1
    73f0:	07 ff fc 63 	l.jal 657c <twi_write>
    73f4:	9c 60 00 34 	l.addi r3,r0,0x34
		/* only when battery presence we do reset instead of shutdown */
		if((val & 0x20) == 0x20) {
			regaddr = AW1660_DATA_BUFF1;
			val = SUNXI_CHARGING_FLAG;
			pmu_reg_write(&devaddr, &regaddr, &val, 1);
			aw1660_pmu_reset();
    73f8:	07 ff fe f7 	l.jal 6fd4 <aw1660_pmu_reset>
    73fc:	15 00 00 00 	l.nop 0x0
		axp2202_pmu_charging_reset();
		break;
	default:
		break;
	}
}
    7400:	00 00 00 24 	l.j 7490 <pmu_charging_reset+0x194>
    7404:	9c 21 00 18 	l.addi r1,r1,0x18
	u8 devaddr = RSB_RTSADDR_AXP2202;
	u8 regaddr;
	u8 val;

	regaddr = AXP2202_COMM_STAT0;
	pmu_reg_read(&devaddr, &regaddr, &val, 1);
    7408:	9e 41 00 03 	l.addi r18,r1,0x3
    740c:	9e 01 00 02 	l.addi r16,r1,0x2
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    7410:	9c 60 00 34 	l.addi r3,r0,0x34
    7414:	a8 92 00 00 	l.ori r4,r18,0x0
    7418:	a8 b0 00 00 	l.ori r5,r16,0x0
    741c:	a8 c2 00 00 	l.ori r6,r2,0x0
    7420:	07 ff fc 33 	l.jal 64ec <twi_read>
    7424:	d8 01 58 03 	l.sb 0x3(r1),r11
	u8 val;

	regaddr = AXP2202_COMM_STAT0;
	pmu_reg_read(&devaddr, &regaddr, &val, 1);
	/* vbus presence */
	if ((val & 0x20) == 0x20) {
    7428:	8c 61 00 02 	l.lbz r3,0x2(r1)
    742c:	a4 63 00 20 	l.andi r3,r3,0x20
    7430:	bc 03 00 00 	l.sfeqi r3,0x0
    7434:	10 00 00 16 	l.bf 748c <pmu_charging_reset+0x190>
    7438:	9c 60 00 34 	l.addi r3,r0,0x34
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    743c:	a8 92 00 00 	l.ori r4,r18,0x0
    7440:	a8 b0 00 00 	l.ori r5,r16,0x0
    7444:	a8 c2 00 00 	l.ori r6,r2,0x0
    7448:	07 ff fc 29 	l.jal 64ec <twi_read>
    744c:	d8 01 70 03 	l.sb 0x3(r1),r14
	/* vbus presence */
	if ((val & 0x20) == 0x20) {
		regaddr = AXP2202_COMM_STAT0;
		pmu_reg_read(&devaddr, &regaddr, &val, 1);
		/* only when battery presence we do reset instead of shutdown */
		if ((val & 0x08) == 0x08) {
    7450:	8c 61 00 02 	l.lbz r3,0x2(r1)
    7454:	a4 63 00 08 	l.andi r3,r3,0x8
    7458:	bc 03 00 00 	l.sfeqi r3,0x0
    745c:	10 00 00 0c 	l.bf 748c <pmu_charging_reset+0x190>
    7460:	9c 60 ff f0 	l.addi r3,r0,0xfffffff0
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7464:	a8 92 00 00 	l.ori r4,r18,0x0
	if ((val & 0x20) == 0x20) {
		regaddr = AXP2202_COMM_STAT0;
		pmu_reg_read(&devaddr, &regaddr, &val, 1);
		/* only when battery presence we do reset instead of shutdown */
		if ((val & 0x08) == 0x08) {
			regaddr = AXP2202_BUFFER0;
    7468:	d8 01 18 03 	l.sb 0x3(r1),r3
			val = SUNXI_CHARGING_FLAG;
    746c:	9c 60 00 61 	l.addi r3,r0,0x61
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7470:	a8 b0 00 00 	l.ori r5,r16,0x0
		regaddr = AXP2202_COMM_STAT0;
		pmu_reg_read(&devaddr, &regaddr, &val, 1);
		/* only when battery presence we do reset instead of shutdown */
		if ((val & 0x08) == 0x08) {
			regaddr = AXP2202_BUFFER0;
			val = SUNXI_CHARGING_FLAG;
    7474:	d8 01 18 02 	l.sb 0x2(r1),r3
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7478:	a8 c2 00 00 	l.ori r6,r2,0x0
    747c:	07 ff fc 40 	l.jal 657c <twi_write>
    7480:	9c 60 00 34 	l.addi r3,r0,0x34
		/* only when battery presence we do reset instead of shutdown */
		if ((val & 0x08) == 0x08) {
			regaddr = AXP2202_BUFFER0;
			val = SUNXI_CHARGING_FLAG;
			pmu_reg_write(&devaddr, &regaddr, &val, 1);
			axp2202_pmu_reset();
    7484:	07 ff fe f1 	l.jal 7048 <axp2202_pmu_reset>
    7488:	15 00 00 00 	l.nop 0x0
		axp2202_pmu_charging_reset();
		break;
	default:
		break;
	}
}
    748c:	9c 21 00 18 	l.addi r1,r1,0x18
    7490:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7494:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    7498:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    749c:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    74a0:	44 00 48 00 	l.jr r9
    74a4:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

000074a8 <pmu_set_voltage>:

s32 pmu_set_voltage(u32 type, u32 voltage)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    74a8:	18 60 00 01 	l.movhi r3,0x1
		break;
	default:
		break;
	}

	return ret;
    74ac:	9d 60 00 00 	l.addi r11,r0,0x0

s32 pmu_set_voltage(u32 type, u32 voltage)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    74b0:	a8 63 33 c8 	l.ori r3,r3,0x33c8
    74b4:	84 63 00 00 	l.lwz r3,0x0(r3)
    74b8:	e4 23 58 00 	l.sfne r3,r11
    74bc:	10 00 00 03 	l.bf 74c8 <pmu_set_voltage+0x20>
    74c0:	15 00 00 00 	l.nop 0x0
		return -ENODEV;
    74c4:	9d 60 ff ed 	l.addi r11,r0,0xffffffed
	default:
		break;
	}

	return ret;
}
    74c8:	44 00 48 00 	l.jr r9
    74cc:	15 00 00 00 	l.nop 0x0

000074d0 <pmu_get_voltage>:

s32 pmu_get_voltage(u32 type)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    74d0:	18 60 00 01 	l.movhi r3,0x1
		break;
	default:
		break;
	}

	return ret;
    74d4:	9d 60 00 00 	l.addi r11,r0,0x0

s32 pmu_get_voltage(u32 type)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    74d8:	a8 63 33 c8 	l.ori r3,r3,0x33c8
    74dc:	84 63 00 00 	l.lwz r3,0x0(r3)
    74e0:	e4 23 58 00 	l.sfne r3,r11
    74e4:	10 00 00 03 	l.bf 74f0 <pmu_get_voltage+0x20>
    74e8:	15 00 00 00 	l.nop 0x0
		return -ENODEV;
    74ec:	9d 60 ff ed 	l.addi r11,r0,0xffffffed
	default:
		break;
	}

	return ret;
}
    74f0:	44 00 48 00 	l.jr r9
    74f4:	15 00 00 00 	l.nop 0x0

000074f8 <pmu_set_voltage_state>:

s32 pmu_set_voltage_state(u32 type, u32 state)
{
    74f8:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    74fc:	a8 44 00 00 	l.ori r2,r4,0x0
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    7500:	18 80 00 01 	l.movhi r4,0x1

	return ret;
}

s32 pmu_set_voltage_state(u32 type, u32 state)
{
    7504:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    7508:	a8 84 33 c8 	l.ori r4,r4,0x33c8

	return ret;
}

s32 pmu_set_voltage_state(u32 type, u32 state)
{
    750c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7510:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    7514:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    7518:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    751c:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    7520:	84 84 00 00 	l.lwz r4,0x0(r4)

	return ret;
}

s32 pmu_set_voltage_state(u32 type, u32 state)
{
    7524:	9c 21 ff e0 	l.addi r1,r1,0xffffffe0
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    7528:	bc 04 00 00 	l.sfeqi r4,0x0
    752c:	10 00 00 74 	l.bf 76fc <pmu_set_voltage_state+0x204>
    7530:	9d c0 ff ed 	l.addi r14,r0,0xffffffed
		return -ENODEV;

	switch (ic_version) {
    7534:	18 80 00 01 	l.movhi r4,0x1
    7538:	a8 84 33 cc 	l.ori r4,r4,0x33cc
    753c:	8d c4 00 00 	l.lbz r14,0x0(r4)
    7540:	bc 0e 00 10 	l.sfeqi r14,0x10
    7544:	10 00 00 47 	l.bf 7660 <pmu_set_voltage_state+0x168>
    7548:	bc 4e 00 10 	l.sfgtui r14,0x10
    754c:	10 00 00 07 	l.bf 7568 <pmu_set_voltage_state+0x70>
    7550:	bc 0e 00 11 	l.sfeqi r14,0x11
    7554:	bc 0e 00 01 	l.sfeqi r14,0x1
    7558:	0c 00 00 68 	l.bnf 76f8 <pmu_set_voltage_state+0x200>
    755c:	18 a0 00 01 	l.movhi r5,0x1
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = axp2202_onoff_reg_bitmap[type].devaddr;
    7560:	00 00 00 26 	l.j 75f8 <pmu_set_voltage_state+0x100>
    7564:	b8 63 00 03 	l.slli r3,r3,0x3
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
		return -ENODEV;

	switch (ic_version) {
    7568:	10 00 00 06 	l.bf 7580 <pmu_set_voltage_state+0x88>
    756c:	bc 0e 00 14 	l.sfeqi r14,0x14
    7570:	0c 00 00 63 	l.bnf 76fc <pmu_set_voltage_state+0x204>
    7574:	9d c0 00 00 	l.addi r14,r0,0x0
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1736_onoff_reg_bitmap[type].devaddr;
    7578:	00 00 00 1d 	l.j 75ec <pmu_set_voltage_state+0xf4>
    757c:	18 a0 00 01 	l.movhi r5,0x1
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1660_onoff_reg_bitmap[type].devaddr;
    7580:	18 a0 00 01 	l.movhi r5,0x1
    7584:	b8 63 00 03 	l.slli r3,r3,0x3
    7588:	a8 a5 30 b8 	l.ori r5,r5,0x30b8
	regaddr = aw1660_onoff_reg_bitmap[type].regaddr;
	offset  = aw1660_onoff_reg_bitmap[type].offset;
	aw1660_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    758c:	9e 01 00 02 	l.addi r16,r1,0x2
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1660_onoff_reg_bitmap[type].devaddr;
    7590:	e0 83 28 00 	l.add r4,r3,r5
	regaddr = aw1660_onoff_reg_bitmap[type].regaddr;
	offset  = aw1660_onoff_reg_bitmap[type].offset;
	aw1660_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    7594:	9d c1 00 03 	l.addi r14,r1,0x3
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1660_onoff_reg_bitmap[type].devaddr;
	regaddr = aw1660_onoff_reg_bitmap[type].regaddr;
    7598:	8c 64 00 03 	l.lbz r3,0x3(r4)
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1660_onoff_reg_bitmap[type].devaddr;
    759c:	96 44 00 00 	l.lhz r18,0x0(r4)
	regaddr = aw1660_onoff_reg_bitmap[type].regaddr;
    75a0:	d8 01 18 02 	l.sb 0x2(r1),r3
	offset  = aw1660_onoff_reg_bitmap[type].offset;
    75a4:	9c 84 00 04 	l.addi r4,r4,0x4
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1660_onoff_reg_bitmap[type].devaddr;
    75a8:	a6 52 00 ff 	l.andi r18,r18,0xff
	regaddr = aw1660_onoff_reg_bitmap[type].regaddr;
	offset  = aw1660_onoff_reg_bitmap[type].offset;
    75ac:	96 84 00 00 	l.lhz r20,0x0(r4)
	aw1660_onoff_reg_bitmap[type].state = state;
    75b0:	d8 04 10 02 	l.sb 0x2(r4),r2
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    75b4:	a8 72 00 00 	l.ori r3,r18,0x0
    75b8:	a8 90 00 00 	l.ori r4,r16,0x0
    75bc:	9c c0 00 01 	l.addi r6,r0,0x1
    75c0:	07 ff fb cb 	l.jal 64ec <twi_read>
    75c4:	a8 ae 00 00 	l.ori r5,r14,0x0
	offset  = aw1660_onoff_reg_bitmap[type].offset;
	aw1660_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data &= (~(1 << offset));
    75c8:	9c c0 00 01 	l.addi r6,r0,0x1
    75cc:	8c 81 00 03 	l.lbz r4,0x3(r1)
    75d0:	e0 66 a0 08 	l.sll r3,r6,r20
	data |= (state << offset);
    75d4:	e2 82 a0 08 	l.sll r20,r2,r20
	offset  = aw1660_onoff_reg_bitmap[type].offset;
	aw1660_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data &= (~(1 << offset));
    75d8:	ac 63 00 ff 	l.xori r3,r3,0xff
    75dc:	e0 63 20 03 	l.and r3,r3,r4
	data |= (state << offset);
    75e0:	e2 83 a0 04 	l.or r20,r3,r20
    75e4:	00 00 00 39 	l.j 76c8 <pmu_set_voltage_state+0x1d0>
    75e8:	d8 01 a0 03 	l.sb 0x3(r1),r20
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1736_onoff_reg_bitmap[type].devaddr;
    75ec:	b8 63 00 03 	l.slli r3,r3,0x3
    75f0:	00 00 00 1f 	l.j 766c <pmu_set_voltage_state+0x174>
    75f4:	a8 a5 31 80 	l.ori r5,r5,0x3180
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = axp2202_onoff_reg_bitmap[type].devaddr;
    75f8:	a8 a5 32 40 	l.ori r5,r5,0x3240
	regaddr = axp2202_onoff_reg_bitmap[type].regaddr;
	offset  = axp2202_onoff_reg_bitmap[type].offset;
//	axp2202_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    75fc:	9e 41 00 02 	l.addi r18,r1,0x2
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = axp2202_onoff_reg_bitmap[type].devaddr;
    7600:	e0 83 28 00 	l.add r4,r3,r5
	regaddr = axp2202_onoff_reg_bitmap[type].regaddr;
	offset  = axp2202_onoff_reg_bitmap[type].offset;
//	axp2202_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    7604:	9e 01 00 03 	l.addi r16,r1,0x3
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = axp2202_onoff_reg_bitmap[type].devaddr;
	regaddr = axp2202_onoff_reg_bitmap[type].regaddr;
    7608:	8c 64 00 03 	l.lbz r3,0x3(r4)
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = axp2202_onoff_reg_bitmap[type].devaddr;
    760c:	96 84 00 00 	l.lhz r20,0x0(r4)
	regaddr = axp2202_onoff_reg_bitmap[type].regaddr;
    7610:	d8 01 18 02 	l.sb 0x2(r1),r3
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = axp2202_onoff_reg_bitmap[type].devaddr;
    7614:	a6 94 00 ff 	l.andi r20,r20,0xff
	regaddr = axp2202_onoff_reg_bitmap[type].regaddr;
	offset  = axp2202_onoff_reg_bitmap[type].offset;
    7618:	96 c4 00 04 	l.lhz r22,0x4(r4)
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    761c:	a8 74 00 00 	l.ori r3,r20,0x0
    7620:	a8 92 00 00 	l.ori r4,r18,0x0
    7624:	a8 b0 00 00 	l.ori r5,r16,0x0
    7628:	07 ff fb b1 	l.jal 64ec <twi_read>
    762c:	a8 ce 00 00 	l.ori r6,r14,0x0
	offset  = axp2202_onoff_reg_bitmap[type].offset;
//	axp2202_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data &= (~(1 << offset));
    7630:	e0 6e b0 08 	l.sll r3,r14,r22
    7634:	8c 81 00 03 	l.lbz r4,0x3(r1)
    7638:	ac 63 00 ff 	l.xori r3,r3,0xff
	data |= (state << offset);
    763c:	e2 c2 b0 08 	l.sll r22,r2,r22
	offset  = axp2202_onoff_reg_bitmap[type].offset;
//	axp2202_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data &= (~(1 << offset));
    7640:	e0 63 20 03 	l.and r3,r3,r4
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7644:	a8 b0 00 00 	l.ori r5,r16,0x0
//	axp2202_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data &= (~(1 << offset));
	data |= (state << offset);
    7648:	e2 c3 b0 04 	l.or r22,r3,r22
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    764c:	a8 92 00 00 	l.ori r4,r18,0x0
//	axp2202_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data &= (~(1 << offset));
	data |= (state << offset);
    7650:	d8 01 b0 03 	l.sb 0x3(r1),r22
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7654:	a8 74 00 00 	l.ori r3,r20,0x0
    7658:	00 00 00 1f 	l.j 76d4 <pmu_set_voltage_state+0x1dc>
    765c:	a8 ce 00 00 	l.ori r6,r14,0x0
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1657_onoff_reg_bitmap[type].devaddr;
    7660:	18 a0 00 01 	l.movhi r5,0x1
    7664:	b8 63 00 03 	l.slli r3,r3,0x3
    7668:	a8 a5 32 d0 	l.ori r5,r5,0x32d0
    766c:	e0 83 28 00 	l.add r4,r3,r5
	regaddr = aw1657_onoff_reg_bitmap[type].regaddr;
	offset  = aw1657_onoff_reg_bitmap[type].offset;
	aw1657_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    7670:	9e 01 00 03 	l.addi r16,r1,0x3
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1657_onoff_reg_bitmap[type].devaddr;
    7674:	96 44 00 00 	l.lhz r18,0x0(r4)
	regaddr = aw1657_onoff_reg_bitmap[type].regaddr;
    7678:	8c 64 00 03 	l.lbz r3,0x3(r4)
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1657_onoff_reg_bitmap[type].devaddr;
    767c:	a6 52 00 ff 	l.andi r18,r18,0xff
	regaddr = aw1657_onoff_reg_bitmap[type].regaddr;
    7680:	d8 01 18 03 	l.sb 0x3(r1),r3
	offset  = aw1657_onoff_reg_bitmap[type].offset;
    7684:	9c 84 00 04 	l.addi r4,r4,0x4
	aw1657_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    7688:	9d c1 00 02 	l.addi r14,r1,0x2
	u8 data;
	u32 offset;

	devaddr = aw1657_onoff_reg_bitmap[type].devaddr;
	regaddr = aw1657_onoff_reg_bitmap[type].regaddr;
	offset  = aw1657_onoff_reg_bitmap[type].offset;
    768c:	96 84 00 00 	l.lhz r20,0x0(r4)
	aw1657_onoff_reg_bitmap[type].state = state;
    7690:	d8 04 10 02 	l.sb 0x2(r4),r2
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    7694:	a8 72 00 00 	l.ori r3,r18,0x0
    7698:	a8 90 00 00 	l.ori r4,r16,0x0
    769c:	9c c0 00 01 	l.addi r6,r0,0x1
    76a0:	07 ff fb 93 	l.jal 64ec <twi_read>
    76a4:	a8 ae 00 00 	l.ori r5,r14,0x0
	offset  = aw1657_onoff_reg_bitmap[type].offset;
	aw1657_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data &= (~(1 << offset));
    76a8:	9c c0 00 01 	l.addi r6,r0,0x1
    76ac:	8c 81 00 02 	l.lbz r4,0x2(r1)
    76b0:	e0 66 a0 08 	l.sll r3,r6,r20
	data |= (state << offset);
    76b4:	e2 82 a0 08 	l.sll r20,r2,r20
	offset  = aw1657_onoff_reg_bitmap[type].offset;
	aw1657_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data &= (~(1 << offset));
    76b8:	ac 63 00 ff 	l.xori r3,r3,0xff
    76bc:	e0 63 20 03 	l.and r3,r3,r4
	data |= (state << offset);
    76c0:	e2 83 a0 04 	l.or r20,r3,r20
    76c4:	d8 01 a0 02 	l.sb 0x2(r1),r20
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    76c8:	a8 72 00 00 	l.ori r3,r18,0x0
    76cc:	a8 90 00 00 	l.ori r4,r16,0x0
    76d0:	a8 ae 00 00 	l.ori r5,r14,0x0
    76d4:	07 ff fb aa 	l.jal 657c <twi_write>
    76d8:	9d c0 00 00 	l.addi r14,r0,0x0
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data &= (~(1 << offset));
	data |= (state << offset);
	pmu_reg_write(&devaddr, &regaddr, &data, 1);

	if (state == POWER_VOL_ON) {
    76dc:	bc 22 00 01 	l.sfnei r2,0x1
    76e0:	10 00 00 07 	l.bf 76fc <pmu_set_voltage_state+0x204>
    76e4:	15 00 00 00 	l.nop 0x0
		//delay 1ms for open PMU output
		time_mdelay(1);
    76e8:	07 ff f7 4f 	l.jal 5424 <time_mdelay>
    76ec:	a8 62 00 00 	l.ori r3,r2,0x0
	default:
		break;
	}

	return ret;
}
    76f0:	00 00 00 04 	l.j 7700 <pmu_set_voltage_state+0x208>
    76f4:	9c 21 00 20 	l.addi r1,r1,0x20
		break;
	default:
		break;
	}

	return ret;
    76f8:	9d c0 00 00 	l.addi r14,r0,0x0
}
    76fc:	9c 21 00 20 	l.addi r1,r1,0x20
    7700:	a9 6e 00 00 	l.ori r11,r14,0x0
    7704:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7708:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    770c:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    7710:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    7714:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    7718:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    771c:	44 00 48 00 	l.jr r9
    7720:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00007724 <pmu_get_voltage_state>:

s32 pmu_get_voltage_state(u32 type)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    7724:	18 60 00 01 	l.movhi r3,0x1
		break;
	default:
		break;
	}

	return ret;
    7728:	9d 60 00 00 	l.addi r11,r0,0x0

s32 pmu_get_voltage_state(u32 type)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    772c:	a8 63 33 c8 	l.ori r3,r3,0x33c8
    7730:	84 63 00 00 	l.lwz r3,0x0(r3)
    7734:	e4 23 58 00 	l.sfne r3,r11
    7738:	10 00 00 03 	l.bf 7744 <pmu_get_voltage_state+0x20>
    773c:	15 00 00 00 	l.nop 0x0
		return -ENODEV;
    7740:	9d 60 ff ed 	l.addi r11,r0,0xffffffed
	default:
		break;
	}

	return ret;
}
    7744:	44 00 48 00 	l.jr r9
    7748:	15 00 00 00 	l.nop 0x0

0000774c <pmu_query_event>:
	default:
		break;
	}

	return ret;
}
    774c:	44 00 48 00 	l.jr r9
    7750:	9d 60 00 00 	l.addi r11,r0,0x0

00007754 <pmu_clear_pendings>:
	default:
		break;
	}

	return ret;
}
    7754:	44 00 48 00 	l.jr r9
    7758:	9d 60 00 00 	l.addi r11,r0,0x0

0000775c <pmu_chip_init>:
	case AW1660_IC_VERSION:
		break;
	default:
		break;
	}
}
    775c:	44 00 48 00 	l.jr r9
    7760:	15 00 00 00 	l.nop 0x0

00007764 <pmu_reg_write>:

s32 pmu_reg_write(u8 *devaddr, u8 *regaddr, u8 *data, u32 len)
{
    7764:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7768:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    776c:	8c 63 00 00 	l.lbz r3,0x0(r3)
#endif
}
    7770:	9c 21 00 04 	l.addi r1,r1,0x4
    7774:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7778:	03 ff fb 81 	l.j 657c <twi_write>
    777c:	15 00 00 00 	l.nop 0x0

00007780 <pmu_reg_read>:
#endif
}

s32 pmu_reg_read(u8 *devaddr, u8 *regaddr, u8 *data, u32 len)
{
    7780:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7784:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    7788:	8c 63 00 00 	l.lbz r3,0x0(r3)
#endif
}
    778c:	9c 21 00 04 	l.addi r1,r1,0x4
    7790:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    7794:	03 ff fb 56 	l.j 64ec <twi_read>
    7798:	15 00 00 00 	l.nop 0x0

0000779c <pmu_reg_write_para>:
#endif
}

s32 pmu_reg_write_para(pmu_paras_t *para)
{
    779c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    77a0:	a8 c3 00 00 	l.ori r6,r3,0x0
    77a4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    77a8:	84 63 00 00 	l.lwz r3,0x0(r3)
    77ac:	84 86 00 04 	l.lwz r4,0x4(r6)
    77b0:	84 a6 00 08 	l.lwz r5,0x8(r6)
    77b4:	8c 63 00 00 	l.lbz r3,0x0(r3)
    77b8:	84 c6 00 0c 	l.lwz r6,0xc(r6)
}

s32 pmu_reg_write_para(pmu_paras_t *para)
{
	return pmu_reg_write(para->devaddr, para->regaddr, para->data, para->len);
}
    77bc:	9c 21 00 04 	l.addi r1,r1,0x4
    77c0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    77c4:	03 ff fb 6e 	l.j 657c <twi_write>
    77c8:	15 00 00 00 	l.nop 0x0

000077cc <pmu_reg_read_para>:
{
	return pmu_reg_write(para->devaddr, para->regaddr, para->data, para->len);
}

s32 pmu_reg_read_para(pmu_paras_t *para)
{
    77cc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    77d0:	a8 c3 00 00 	l.ori r6,r3,0x0
    77d4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    77d8:	84 63 00 00 	l.lwz r3,0x0(r3)
    77dc:	84 86 00 04 	l.lwz r4,0x4(r6)
    77e0:	84 a6 00 08 	l.lwz r5,0x8(r6)
    77e4:	8c 63 00 00 	l.lbz r3,0x0(r3)
    77e8:	84 c6 00 0c 	l.lwz r6,0xc(r6)
}

s32 pmu_reg_read_para(pmu_paras_t *para)
{
	return pmu_reg_read(para->devaddr, para->regaddr, para->data, para->len);
}
    77ec:	9c 21 00 04 	l.addi r1,r1,0x4
    77f0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    77f4:	03 ff fb 3e 	l.j 64ec <twi_read>
    77f8:	15 00 00 00 	l.nop 0x0

000077fc <watchdog_reset>:
	return pmu_reg_read(para->devaddr, para->regaddr, para->data, para->len);
}

void watchdog_reset(void)
{
	LOG("watchdog reset\n");
    77fc:	18 80 00 01 	l.movhi r4,0x1
{
	return pmu_reg_read(para->devaddr, para->regaddr, para->data, para->len);
}

void watchdog_reset(void)
{
    7800:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7804:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	LOG("watchdog reset\n");
    7808:	9c 60 00 02 	l.addi r3,r0,0x2
{
	return pmu_reg_read(para->devaddr, para->regaddr, para->data, para->len);
}

void watchdog_reset(void)
{
    780c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	LOG("watchdog reset\n");
    7810:	a8 84 24 a4 	l.ori r4,r4,0x24a4
    7814:	04 00 0b f1 	l.jal a7d8 <debugger_printf>
    7818:	18 40 07 02 	l.movhi r2,0x702

	/* disable watchdog int */
	writel(0x0, R_WDOG_REG_BASE + 0x0);
    781c:	a8 62 04 00 	l.ori r3,r2,0x400
    7820:	9c 80 00 00 	l.addi r4,r0,0x0
    7824:	d4 03 20 00 	l.sw 0x0(r3),r4

	/* reset whole system */
	writel((0x1 | (0x1 << 8) | WATCHDOG_KEYFIELD), R_WDOG_REG_BASE + 0x14);
    7828:	18 60 16 aa 	l.movhi r3,0x16aa
    782c:	a8 82 04 14 	l.ori r4,r2,0x414
    7830:	a8 a3 01 01 	l.ori r5,r3,0x101

	/* set reset after 0.5s */
	writel(((0 << 4) | WATCHDOG_KEYFIELD), R_WDOG_REG_BASE + 0x18);
    7834:	a8 42 04 18 	l.ori r2,r2,0x418

	/* disable watchdog int */
	writel(0x0, R_WDOG_REG_BASE + 0x0);

	/* reset whole system */
	writel((0x1 | (0x1 << 8) | WATCHDOG_KEYFIELD), R_WDOG_REG_BASE + 0x14);
    7838:	d4 04 28 00 	l.sw 0x0(r4),r5

	/* set reset after 0.5s */
	writel(((0 << 4) | WATCHDOG_KEYFIELD), R_WDOG_REG_BASE + 0x18);
    783c:	d4 02 18 00 	l.sw 0x0(r2),r3
	mdelay(1);
    7840:	07 ff f6 f9 	l.jal 5424 <time_mdelay>
    7844:	9c 60 00 01 	l.addi r3,r0,0x1

	/* enable watchdog */
	writel((readl(R_WDOG_REG_BASE + 0x18) | 0x1 | WATCHDOG_KEYFIELD), R_WDOG_REG_BASE + 0x18);
    7848:	18 80 16 aa 	l.movhi r4,0x16aa
    784c:	84 62 00 00 	l.lwz r3,0x0(r2)
    7850:	a8 84 00 01 	l.ori r4,r4,0x1
    7854:	e0 63 20 04 	l.or r3,r3,r4
    7858:	d4 02 18 00 	l.sw 0x0(r2),r3
    785c:	00 00 00 00 	l.j 785c <watchdog_reset+0x60>
    7860:	15 00 00 00 	l.nop 0x0

00007864 <pmu_reset>:
		break;
	}
}

void pmu_reset(void)
{
    7864:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
	if (is_pmu_exist() == FALSE) {
    7868:	18 40 00 01 	l.movhi r2,0x1
		break;
	}
}

void pmu_reset(void)
{
    786c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (is_pmu_exist() == FALSE) {
    7870:	a8 42 33 c8 	l.ori r2,r2,0x33c8
		break;
	}
}

void pmu_reset(void)
{
    7874:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	if (is_pmu_exist() == FALSE) {
    7878:	84 42 00 00 	l.lwz r2,0x0(r2)
    787c:	bc 22 00 00 	l.sfnei r2,0x0
    7880:	10 00 00 0c 	l.bf 78b0 <pmu_reset+0x4c>
    7884:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
		watchdog_reset();
    7888:	07 ff ff dd 	l.jal 77fc <watchdog_reset>
    788c:	15 00 00 00 	l.nop 0x0
    7890:	00 00 00 08 	l.j 78b0 <pmu_reset+0x4c>
    7894:	15 00 00 00 	l.nop 0x0
	}

	while (!!twi_get_status()) {
		time_mdelay(1000 * 2);
    7898:	07 ff f6 e3 	l.jal 5424 <time_mdelay>
    789c:	9c 60 07 d0 	l.addi r3,r0,0x7d0
		LOG("wait twi bus idle loop\n");
    78a0:	18 80 00 01 	l.movhi r4,0x1
    78a4:	9c 60 00 02 	l.addi r3,r0,0x2
    78a8:	04 00 0b cc 	l.jal a7d8 <debugger_printf>
    78ac:	a8 84 24 7b 	l.ori r4,r4,0x247b
{
	if (is_pmu_exist() == FALSE) {
		watchdog_reset();
	}

	while (!!twi_get_status()) {
    78b0:	07 ff fb 5d 	l.jal 6624 <twi_get_status>
    78b4:	15 00 00 00 	l.nop 0x0
    78b8:	bc 2b 00 00 	l.sfnei r11,0x0
    78bc:	13 ff ff f7 	l.bf 7898 <pmu_reset+0x34>
    78c0:	18 40 00 01 	l.movhi r2,0x1
		time_mdelay(1000 * 2);
		LOG("wait twi bus idle loop\n");
	}

	switch (ic_version) {
    78c4:	a8 42 33 cc 	l.ori r2,r2,0x33cc
    78c8:	8c 62 00 00 	l.lbz r3,0x0(r2)
    78cc:	bc 03 00 10 	l.sfeqi r3,0x10
    78d0:	10 00 00 2e 	l.bf 7988 <pmu_reset+0x124>
    78d4:	bc 43 00 10 	l.sfgtui r3,0x10
    78d8:	10 00 00 07 	l.bf 78f4 <pmu_reset+0x90>
    78dc:	bc 03 00 11 	l.sfeqi r3,0x11
    78e0:	bc 03 00 01 	l.sfeqi r3,0x1
    78e4:	0c 00 00 42 	l.bnf 79ec <pmu_reset+0x188>
    78e8:	15 00 00 00 	l.nop 0x0
    78ec:	00 00 00 23 	l.j 7978 <pmu_reset+0x114>
    78f0:	15 00 00 00 	l.nop 0x0
    78f4:	10 00 00 06 	l.bf 790c <pmu_reset+0xa8>
    78f8:	bc 03 00 14 	l.sfeqi r3,0x14
    78fc:	0c 00 00 3c 	l.bnf 79ec <pmu_reset+0x188>
    7900:	9c 40 00 32 	l.addi r2,r0,0x32
{
	u8 devaddr = RSB_RTSADDR_AW1736;
	u8 regaddr = AW1736_PWR_DISABLE_DOWN;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);
    7904:	00 00 00 06 	l.j 791c <pmu_reset+0xb8>
    7908:	a8 60 a2 01 	l.ori r3,r0,0xa201
		LOG("wait twi bus idle loop\n");
	}

	switch (ic_version) {
	case AW1660_IC_VERSION:
		aw1660_pmu_reset();
    790c:	07 ff fd b2 	l.jal 6fd4 <aw1660_pmu_reset>
    7910:	15 00 00 00 	l.nop 0x0
		break;
    7914:	00 00 00 37 	l.j 79f0 <pmu_reset+0x18c>
    7918:	9c 21 00 10 	l.addi r1,r1,0x10
}

static void aw1736_pmu_reset(void)
{
	u8 devaddr = RSB_RTSADDR_AW1736;
	u8 regaddr = AW1736_PWR_DISABLE_DOWN;
    791c:	d8 01 10 02 	l.sb 0x2(r1),r2
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    7920:	9d c1 00 02 	l.addi r14,r1,0x2
{
	u8 devaddr = RSB_RTSADDR_AW1736;
	u8 regaddr = AW1736_PWR_DISABLE_DOWN;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);
    7924:	04 00 28 00 	l.jal 11924 <save_state_flag>
    7928:	9c 41 00 03 	l.addi r2,r1,0x3
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    792c:	9c 60 00 36 	l.addi r3,r0,0x36
    7930:	a8 8e 00 00 	l.ori r4,r14,0x0
    7934:	a8 a2 00 00 	l.ori r5,r2,0x0
    7938:	07 ff fa ed 	l.jal 64ec <twi_read>
    793c:	9c c0 00 01 	l.addi r6,r0,0x1
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 6;
    7940:	8c 61 00 03 	l.lbz r3,0x3(r1)
    7944:	a8 63 00 40 	l.ori r3,r3,0x40
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7948:	a8 8e 00 00 	l.ori r4,r14,0x0
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 6;
    794c:	d8 01 18 03 	l.sb 0x3(r1),r3
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7950:	a8 a2 00 00 	l.ori r5,r2,0x0
    7954:	9c 60 00 36 	l.addi r3,r0,0x36
    7958:	07 ff fb 09 	l.jal 657c <twi_write>
    795c:	9c c0 00 01 	l.addi r6,r0,0x1

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 6;
	pmu_reg_write(&devaddr, &regaddr, &data, 1);

	LOG("reset system\n");
    7960:	18 80 00 01 	l.movhi r4,0x1
    7964:	9c 60 00 02 	l.addi r3,r0,0x2
    7968:	04 00 0b 9c 	l.jal a7d8 <debugger_printf>
    796c:	a8 84 24 6d 	l.ori r4,r4,0x246d
    7970:	00 00 00 00 	l.j 7970 <pmu_reset+0x10c>
    7974:	15 00 00 00 	l.nop 0x0
		break;
	case AW1736_IC_VERSION:
		aw1736_pmu_reset();
		break;
	case AXP2202_IC_VERSION:
		axp2202_pmu_reset();
    7978:	07 ff fd b4 	l.jal 7048 <axp2202_pmu_reset>
    797c:	15 00 00 00 	l.nop 0x0
		aw1657_pmu_reset();
		break;
	default:
		break;
	}
}
    7980:	00 00 00 1c 	l.j 79f0 <pmu_reset+0x18c>
    7984:	9c 21 00 10 	l.addi r1,r1,0x10
}

static void aw1657_pmu_reset(void)
{
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
    7988:	9c 40 00 32 	l.addi r2,r0,0x32
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);
    798c:	a8 60 a2 01 	l.ori r3,r0,0xa201
}

static void aw1657_pmu_reset(void)
{
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
    7990:	d8 01 10 03 	l.sb 0x3(r1),r2
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    7994:	9d c1 00 03 	l.addi r14,r1,0x3
{
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);
    7998:	04 00 27 e3 	l.jal 11924 <save_state_flag>
    799c:	9c 41 00 02 	l.addi r2,r1,0x2
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    79a0:	9c 60 00 36 	l.addi r3,r0,0x36
    79a4:	a8 8e 00 00 	l.ori r4,r14,0x0
    79a8:	a8 a2 00 00 	l.ori r5,r2,0x0
    79ac:	07 ff fa d0 	l.jal 64ec <twi_read>
    79b0:	9c c0 00 01 	l.addi r6,r0,0x1
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 6;
    79b4:	8c 61 00 02 	l.lbz r3,0x2(r1)
    79b8:	a8 63 00 40 	l.ori r3,r3,0x40
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    79bc:	a8 8e 00 00 	l.ori r4,r14,0x0
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 6;
    79c0:	d8 01 18 02 	l.sb 0x2(r1),r3
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    79c4:	a8 a2 00 00 	l.ori r5,r2,0x0
    79c8:	9c 60 00 36 	l.addi r3,r0,0x36
    79cc:	07 ff fa ec 	l.jal 657c <twi_write>
    79d0:	9c c0 00 01 	l.addi r6,r0,0x1

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 6;
	pmu_reg_write(&devaddr, &regaddr, &data, 1);

	LOG("reset system\n");
    79d4:	18 80 00 01 	l.movhi r4,0x1
    79d8:	9c 60 00 02 	l.addi r3,r0,0x2
    79dc:	04 00 0b 7f 	l.jal a7d8 <debugger_printf>
    79e0:	a8 84 24 6d 	l.ori r4,r4,0x246d
    79e4:	00 00 00 00 	l.j 79e4 <pmu_reset+0x180>
    79e8:	15 00 00 00 	l.nop 0x0
		aw1657_pmu_reset();
		break;
	default:
		break;
	}
}
    79ec:	9c 21 00 10 	l.addi r1,r1,0x10
    79f0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    79f4:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    79f8:	44 00 48 00 	l.jr r9
    79fc:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00007a00 <nmi_int_handler>:
	/**
	 * NOTE: if pmu interrupt enabled,
	 * means allow power key to power on system
	 */
	pmu_query_event(&event);
	LOG("pmu event: 0x%x\n", event);
    7a00:	18 80 00 01 	l.movhi r4,0x1
	while (1)
		;
}

int nmi_int_handler(void *parg __attribute__ ((__unused__)), u32 intno)
{
    7a04:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7a08:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	/**
	 * NOTE: if pmu interrupt enabled,
	 * means allow power key to power on system
	 */
	pmu_query_event(&event);
	LOG("pmu event: 0x%x\n", event);
    7a0c:	9c 60 00 02 	l.addi r3,r0,0x2
	while (1)
		;
}

int nmi_int_handler(void *parg __attribute__ ((__unused__)), u32 intno)
{
    7a10:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	/**
	 * NOTE: if pmu interrupt enabled,
	 * means allow power key to power on system
	 */
	pmu_query_event(&event);
	LOG("pmu event: 0x%x\n", event);
    7a14:	9c 40 00 00 	l.addi r2,r0,0x0
    7a18:	a8 84 24 b4 	l.ori r4,r4,0x24b4
    7a1c:	04 00 0b 6f 	l.jal a7d8 <debugger_printf>
    7a20:	d4 01 10 00 	l.sw 0x0(r1),r2
	//notifier_notify(&wakeup_notify, CPUS_IRQ_MAPTO_CPUX(intno));

	pmu_clear_pendings();

	/* clear interrupt flag first */
	interrupt_clear_pending(INTC_R_NMI_IRQ);
    7a24:	07 ff f4 1e 	l.jal 4a9c <interrupt_clear_pending>
    7a28:	a8 62 00 00 	l.ori r3,r2,0x0

	return TRUE;
}
    7a2c:	9c 21 00 0c 	l.addi r1,r1,0xc
    7a30:	9d 60 00 01 	l.addi r11,r0,0x1
    7a34:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7a38:	44 00 48 00 	l.jr r9
    7a3c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00007a40 <pmu_init>:

s32 pmu_init(void)
{
    7a40:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
	u8 data;
	u8 i;

	/* power_mode may parse from dts */
	if (power_mode == POWER_MODE_AXP) {
		pmu_exist = TRUE;
    7a44:	18 40 00 01 	l.movhi r2,0x1
    7a48:	9c 60 00 01 	l.addi r3,r0,0x1
    7a4c:	a8 42 33 c8 	l.ori r2,r2,0x33c8

	return TRUE;
}

s32 pmu_init(void)
{
    7a50:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    7a54:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    7a58:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    7a5c:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    7a60:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    7a64:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u8 data;
	u8 i;

	/* power_mode may parse from dts */
	if (power_mode == POWER_MODE_AXP) {
		pmu_exist = TRUE;
    7a68:	d4 02 18 00 	l.sw 0x0(r2),r3

	return TRUE;
}

s32 pmu_init(void)
{
    7a6c:	9c 21 ff dc 	l.addi r1,r1,0xffffffdc
	u8 i;

	/* power_mode may parse from dts */
	if (power_mode == POWER_MODE_AXP) {
		pmu_exist = TRUE;
		LOG("pmu is exist\n");
    7a70:	18 80 00 01 	l.movhi r4,0x1
    7a74:	1a 00 00 01 	l.movhi r16,0x1
    7a78:	9c 40 00 00 	l.addi r2,r0,0x0
		for (i = 0; i < ARRAY_SIZE(pmu_id_match_tlb); i++) {
			devaddr = pmu_id_match_tlb[i][0];
			regaddr = AW1660_IC_NO_REG;
			pmu_reg_read(&devaddr, &regaddr, &data, 1);

			ic_version = ((data & 0xc0) >> 2) | (data & 0x0f);
    7a7c:	1a 40 00 01 	l.movhi r18,0x1
	u8 i;

	/* power_mode may parse from dts */
	if (power_mode == POWER_MODE_AXP) {
		pmu_exist = TRUE;
		LOG("pmu is exist\n");
    7a80:	9c 60 00 02 	l.addi r3,r0,0x2
    7a84:	a8 84 24 c5 	l.ori r4,r4,0x24c5
    7a88:	aa 10 2e 80 	l.ori r16,r16,0x2e80

		for (i = 0; i < ARRAY_SIZE(pmu_id_match_tlb); i++) {
    7a8c:	a9 c2 00 00 	l.ori r14,r2,0x0
			devaddr = pmu_id_match_tlb[i][0];
			regaddr = AW1660_IC_NO_REG;
			pmu_reg_read(&devaddr, &regaddr, &data, 1);
    7a90:	9e c1 00 07 	l.addi r22,r1,0x7
    7a94:	9e 81 00 06 	l.addi r20,r1,0x6
	u8 i;

	/* power_mode may parse from dts */
	if (power_mode == POWER_MODE_AXP) {
		pmu_exist = TRUE;
		LOG("pmu is exist\n");
    7a98:	04 00 0b 50 	l.jal a7d8 <debugger_printf>
    7a9c:	aa 52 33 cc 	l.ori r18,r18,0x33cc

		for (i = 0; i < ARRAY_SIZE(pmu_id_match_tlb); i++) {
			devaddr = pmu_id_match_tlb[i][0];
			regaddr = AW1660_IC_NO_REG;
    7aa0:	9c 80 00 03 	l.addi r4,r0,0x3
	if (power_mode == POWER_MODE_AXP) {
		pmu_exist = TRUE;
		LOG("pmu is exist\n");

		for (i = 0; i < ARRAY_SIZE(pmu_id_match_tlb); i++) {
			devaddr = pmu_id_match_tlb[i][0];
    7aa4:	8c 70 00 00 	l.lbz r3,0x0(r16)
			regaddr = AW1660_IC_NO_REG;
    7aa8:	d8 01 20 07 	l.sb 0x7(r1),r4
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    7aac:	9c c0 00 01 	l.addi r6,r0,0x1
    7ab0:	a8 96 00 00 	l.ori r4,r22,0x0
    7ab4:	07 ff fa 8e 	l.jal 64ec <twi_read>
    7ab8:	a8 b4 00 00 	l.ori r5,r20,0x0
		for (i = 0; i < ARRAY_SIZE(pmu_id_match_tlb); i++) {
			devaddr = pmu_id_match_tlb[i][0];
			regaddr = AW1660_IC_NO_REG;
			pmu_reg_read(&devaddr, &regaddr, &data, 1);

			ic_version = ((data & 0xc0) >> 2) | (data & 0x0f);
    7abc:	8c 61 00 06 	l.lbz r3,0x6(r1)
    7ac0:	a4 c3 00 c0 	l.andi r6,r3,0xc0
    7ac4:	a4 63 00 0f 	l.andi r3,r3,0xf
    7ac8:	b8 c6 00 82 	l.srai r6,r6,0x2
    7acc:	e0 c6 18 04 	l.or r6,r6,r3
			if (ic_version == pmu_id_match_tlb[i][1]) {
    7ad0:	8c 70 00 01 	l.lbz r3,0x1(r16)
    7ad4:	e4 23 30 00 	l.sfne r3,r6
    7ad8:	10 00 00 12 	l.bf 7b20 <pmu_init+0xe0>
    7adc:	d8 12 30 00 	l.sb 0x0(r18),r6
				axp_power_max = pmu_id_match_tlb[i][2];
    7ae0:	e0 82 10 00 	l.add r4,r2,r2
    7ae4:	e0 44 10 00 	l.add r2,r4,r2
    7ae8:	18 80 00 01 	l.movhi r4,0x1
    7aec:	a8 84 2e 80 	l.ori r4,r4,0x2e80
    7af0:	e0 42 20 00 	l.add r2,r2,r4
    7af4:	8c 82 00 02 	l.lbz r4,0x2(r2)
    7af8:	18 40 00 01 	l.movhi r2,0x1
    7afc:	a8 42 35 88 	l.ori r2,r2,0x3588
    7b00:	d4 02 20 00 	l.sw 0x0(r2),r4
				LOG("PMU IC_VERSION = 0x%x\n", ic_version);
    7b04:	18 80 00 01 	l.movhi r4,0x1
    7b08:	d4 01 18 00 	l.sw 0x0(r1),r3
    7b0c:	a8 84 24 d3 	l.ori r4,r4,0x24d3
    7b10:	04 00 0b 32 	l.jal a7d8 <debugger_printf>
    7b14:	9c 60 00 02 	l.addi r3,r0,0x2
				break;
    7b18:	00 00 00 09 	l.j 7b3c <pmu_init+0xfc>
    7b1c:	18 40 00 01 	l.movhi r2,0x1
	/* power_mode may parse from dts */
	if (power_mode == POWER_MODE_AXP) {
		pmu_exist = TRUE;
		LOG("pmu is exist\n");

		for (i = 0; i < ARRAY_SIZE(pmu_id_match_tlb); i++) {
    7b20:	9d ce 00 01 	l.addi r14,r14,0x1
    7b24:	9c 42 00 01 	l.addi r2,r2,0x1
    7b28:	a5 ce 00 ff 	l.andi r14,r14,0xff
    7b2c:	bc 2e 00 04 	l.sfnei r14,0x4
    7b30:	13 ff ff dc 	l.bf 7aa0 <pmu_init+0x60>
    7b34:	9e 10 00 03 	l.addi r16,r16,0x3
				LOG("PMU IC_VERSION = 0x%x\n", ic_version);
				break;
			}
		}

		if (ic_version == 0) {
    7b38:	18 40 00 01 	l.movhi r2,0x1
    7b3c:	a8 42 33 cc 	l.ori r2,r2,0x33cc
    7b40:	8c 42 00 00 	l.lbz r2,0x0(r2)
    7b44:	bc 22 00 00 	l.sfnei r2,0x0
    7b48:	10 00 00 08 	l.bf 7b68 <pmu_init+0x128>
    7b4c:	bc 2e 00 04 	l.sfnei r14,0x4
			ERR("no pmu found\n");
    7b50:	18 80 00 01 	l.movhi r4,0x1
    7b54:	9c 60 00 08 	l.addi r3,r0,0x8
    7b58:	04 00 0b 20 	l.jal a7d8 <debugger_printf>
    7b5c:	a8 84 24 ea 	l.ori r4,r4,0x24ea
    7b60:	00 00 00 09 	l.j 7b84 <pmu_init+0x144>
    7b64:	15 00 00 00 	l.nop 0x0
		} else if (i == ARRAY_SIZE(pmu_id_match_tlb)) {
    7b68:	10 00 00 07 	l.bf 7b84 <pmu_init+0x144>
    7b6c:	18 80 00 01 	l.movhi r4,0x1
			WRN("unknown pmu IC_NO_REG value = 0x%x\n", data);
    7b70:	8c 41 00 06 	l.lbz r2,0x6(r1)
    7b74:	a8 6e 00 00 	l.ori r3,r14,0x0
    7b78:	a8 84 24 fc 	l.ori r4,r4,0x24fc
    7b7c:	04 00 0b 17 	l.jal a7d8 <debugger_printf>
    7b80:	d4 01 10 00 	l.sw 0x0(r1),r2
		pmu_exist = FALSE;
		LOG("pmu is not exist\n");
		return OK;
	}

	interrupt_clear_pending(INTC_R_NMI_IRQ);
    7b84:	07 ff f3 c6 	l.jal 4a9c <interrupt_clear_pending>
    7b88:	9c 60 00 00 	l.addi r3,r0,0x0

	return OK;
}
    7b8c:	9c 21 00 24 	l.addi r1,r1,0x24
    7b90:	9d 60 00 00 	l.addi r11,r0,0x0
    7b94:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7b98:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    7b9c:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    7ba0:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    7ba4:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    7ba8:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    7bac:	44 00 48 00 	l.jr r9
    7bb0:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00007bb4 <pmu_exit>:

s32 pmu_exit(void)
{
	return OK;
}
    7bb4:	44 00 48 00 	l.jr r9
    7bb8:	9d 60 00 00 	l.addi r11,r0,0x0

00007bbc <is_pmu_exist>:

u32 is_pmu_exist(void)
{
	return pmu_exist;
}
    7bbc:	18 60 00 01 	l.movhi r3,0x1
    7bc0:	a8 63 33 c8 	l.ori r3,r3,0x33c8
    7bc4:	44 00 48 00 	l.jr r9
    7bc8:	85 63 00 00 	l.lwz r11,0x0(r3)

00007bcc <pmu_standby_init>:

s32 pmu_standby_init(void)
{
    7bcc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	struct message message_ws;
	u32 paras = GIC_R_EXTERNAL_NMI_IRQ - 32;
    7bd0:	9c 60 00 67 	l.addi r3,r0,0x67
{
	return pmu_exist;
}

s32 pmu_standby_init(void)
{
    7bd4:	9c 21 ff d8 	l.addi r1,r1,0xffffffd8
	struct message message_ws;
	u32 paras = GIC_R_EXTERNAL_NMI_IRQ - 32;
    7bd8:	d4 01 18 20 	l.sw 0x20(r1),r3

	message_ws.paras = &paras;
    7bdc:	9c 61 00 20 	l.addi r3,r1,0x20
    7be0:	d4 01 18 1c 	l.sw 0x1c(r1),r3
	set_wakeup_src(&message_ws);
    7be4:	04 00 0d 8f 	l.jal b220 <set_wakeup_src>
    7be8:	a8 61 00 00 	l.ori r3,r1,0x0

	return OK;
}
    7bec:	9c 21 00 28 	l.addi r1,r1,0x28
    7bf0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7bf4:	44 00 48 00 	l.jr r9
    7bf8:	9d 60 00 00 	l.addi r11,r0,0x0

00007bfc <pmu_standby_exit>:

s32 pmu_standby_exit(void)
{
    7bfc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	struct message message_ws;
	u32 paras = GIC_R_EXTERNAL_NMI_IRQ - 32;
    7c00:	9c 60 00 67 	l.addi r3,r0,0x67

	return OK;
}

s32 pmu_standby_exit(void)
{
    7c04:	9c 21 ff d8 	l.addi r1,r1,0xffffffd8
	struct message message_ws;
	u32 paras = GIC_R_EXTERNAL_NMI_IRQ - 32;
    7c08:	d4 01 18 20 	l.sw 0x20(r1),r3

	message_ws.paras = &paras;
    7c0c:	9c 61 00 20 	l.addi r3,r1,0x20
    7c10:	d4 01 18 1c 	l.sw 0x1c(r1),r3
	clear_wakeup_src(&message_ws);
    7c14:	04 00 0d d2 	l.jal b35c <clear_wakeup_src>
    7c18:	a8 61 00 00 	l.ori r3,r1,0x0

	return OK;
}
    7c1c:	9c 21 00 28 	l.addi r1,r1,0x28
    7c20:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7c24:	44 00 48 00 	l.jr r9
    7c28:	9d 60 00 00 	l.addi r11,r0,0x0

00007c2c <watchdog_init>:
*********************************************************************************************************
*/
s32 watchdog_init(void)
{
	/* initialize the pointer of watchdog registers */
	pwatchdog_regs = (struct watchdog_regs *)(WDOG0_REG_BASE);
    7c2c:	18 60 07 02 	l.movhi r3,0x702
    7c30:	18 80 00 01 	l.movhi r4,0x1
    7c34:	a8 63 04 00 	l.ori r3,r3,0x400
    7c38:	a8 84 35 90 	l.ori r4,r4,0x3590
*
* Returns    :  OK if initialize watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_init(void)
{
    7c3c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	/* initialize the pointer of watchdog registers */
	pwatchdog_regs = (struct watchdog_regs *)(WDOG0_REG_BASE);
    7c40:	d4 04 18 00 	l.sw 0x0(r4),r3

	/*
	 * set watchdog work mode
	 * set the watchdog0 clock source:24M/750
	 */
	pwatchdog_regs->config &= ~(0x1 << 8);
    7c44:	9c 40 fe ff 	l.addi r2,r0,0xfffffeff
    7c48:	84 83 00 14 	l.lwz r4,0x14(r3)
*
* Returns    :  OK if initialize watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_init(void)
{
    7c4c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	/*
	 * set watchdog work mode
	 * set the watchdog0 clock source:24M/750
	 */
	pwatchdog_regs->config &= ~(0x1 << 8);
    7c50:	e0 84 10 03 	l.and r4,r4,r2
	pwatchdog_regs->config |= WDOG0_CLK_SRC_32K;

	/* watchdog0 generates a reset signal to CPUS */
	pwatchdog_regs->config &= ~(0x3 << 0);
    7c54:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc

	/*
	 * set watchdog work mode
	 * set the watchdog0 clock source:24M/750
	 */
	pwatchdog_regs->config &= ~(0x1 << 8);
    7c58:	d4 03 20 14 	l.sw 0x14(r3),r4
	 */
	pwatchdog_regs->mode &= ~(0xf << 4);
	pwatchdog_regs->mode |= WDOG0_INTV_VALUE_04S;

	return OK;
}
    7c5c:	9d 60 00 00 	l.addi r11,r0,0x0
	/*
	 * set watchdog work mode
	 * set the watchdog0 clock source:24M/750
	 */
	pwatchdog_regs->config &= ~(0x1 << 8);
	pwatchdog_regs->config |= WDOG0_CLK_SRC_32K;
    7c60:	84 83 00 14 	l.lwz r4,0x14(r3)
    7c64:	d4 03 20 14 	l.sw 0x14(r3),r4

	/* watchdog0 generates a reset signal to CPUS */
	pwatchdog_regs->config &= ~(0x3 << 0);
    7c68:	84 83 00 14 	l.lwz r4,0x14(r3)
    7c6c:	e0 84 10 03 	l.and r4,r4,r2
	 * then interval time=0.5s
	 * the interval value maybe greater,
	 * then will decrease cpu performance loss
	 * set watchdog0 Interval Value:16000 cycles
	 */
	pwatchdog_regs->mode &= ~(0xf << 4);
    7c70:	9c 40 ff 0f 	l.addi r2,r0,0xffffff0f
	 */
	pwatchdog_regs->config &= ~(0x1 << 8);
	pwatchdog_regs->config |= WDOG0_CLK_SRC_32K;

	/* watchdog0 generates a reset signal to CPUS */
	pwatchdog_regs->config &= ~(0x3 << 0);
    7c74:	d4 03 20 14 	l.sw 0x14(r3),r4
	pwatchdog_regs->config |= WDOG0_RST_SYS;
    7c78:	84 83 00 14 	l.lwz r4,0x14(r3)
    7c7c:	a8 84 00 01 	l.ori r4,r4,0x1
    7c80:	d4 03 20 14 	l.sw 0x14(r3),r4
	 * then interval time=0.5s
	 * the interval value maybe greater,
	 * then will decrease cpu performance loss
	 * set watchdog0 Interval Value:16000 cycles
	 */
	pwatchdog_regs->mode &= ~(0xf << 4);
    7c84:	84 83 00 18 	l.lwz r4,0x18(r3)
    7c88:	e0 84 10 03 	l.and r4,r4,r2
    7c8c:	d4 03 20 18 	l.sw 0x18(r3),r4
	pwatchdog_regs->mode |= WDOG0_INTV_VALUE_04S;
    7c90:	84 83 00 18 	l.lwz r4,0x18(r3)
    7c94:	a8 84 00 40 	l.ori r4,r4,0x40
    7c98:	d4 03 20 18 	l.sw 0x18(r3),r4

	return OK;
}
    7c9c:	9c 21 00 04 	l.addi r1,r1,0x4
    7ca0:	44 00 48 00 	l.jr r9
    7ca4:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00007ca8 <watchdog_exit>:
*********************************************************************************************************
*/
s32 watchdog_exit(void)
{
	/* release regs addrress */
	pwatchdog_regs = NULL;
    7ca8:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if exit watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_exit(void)
{
    7cac:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	/* release regs addrress */
	pwatchdog_regs = NULL;
    7cb0:	a8 63 35 90 	l.ori r3,r3,0x3590
    7cb4:	9c 40 00 00 	l.addi r2,r0,0x0
*
* Returns    :  OK if exit watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_exit(void)
{
    7cb8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/* release regs addrress */
	pwatchdog_regs = NULL;
    7cbc:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}
    7cc0:	9c 21 00 04 	l.addi r1,r1,0x4
    7cc4:	a9 62 00 00 	l.ori r11,r2,0x0
    7cc8:	44 00 48 00 	l.jr r9
    7ccc:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00007cd0 <watchdog_enable>:
*********************************************************************************************************
*/
s32 watchdog_enable(void)
{
	/* enable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    7cd0:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if enable watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_enable(void)
{
    7cd4:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	/* enable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    7cd8:	a8 63 35 90 	l.ori r3,r3,0x3590
    7cdc:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    7ce0:	84 63 00 00 	l.lwz r3,0x0(r3)
*
* Returns    :  OK if enable watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_enable(void)
{
    7ce4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/* enable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    7ce8:	84 83 00 18 	l.lwz r4,0x18(r3)
	pwatchdog_regs->mode |= WDOG0_EN;

	return OK;
}
    7cec:	9d 60 00 00 	l.addi r11,r0,0x0
*********************************************************************************************************
*/
s32 watchdog_enable(void)
{
	/* enable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    7cf0:	e0 84 10 03 	l.and r4,r4,r2
    7cf4:	d4 03 20 18 	l.sw 0x18(r3),r4
	pwatchdog_regs->mode |= WDOG0_EN;
    7cf8:	84 83 00 18 	l.lwz r4,0x18(r3)
    7cfc:	a8 84 00 01 	l.ori r4,r4,0x1
    7d00:	d4 03 20 18 	l.sw 0x18(r3),r4

	return OK;
}
    7d04:	9c 21 00 04 	l.addi r1,r1,0x4
    7d08:	44 00 48 00 	l.jr r9
    7d0c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00007d10 <watchdog_disable>:
*********************************************************************************************************
*/
s32 watchdog_disable(void)
{
	/* disable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    7d10:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if disable watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_disable(void)
{
    7d14:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	/* disable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    7d18:	a8 63 35 90 	l.ori r3,r3,0x3590
    7d1c:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    7d20:	84 63 00 00 	l.lwz r3,0x0(r3)
*
* Returns    :  OK if disable watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_disable(void)
{
    7d24:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/* disable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    7d28:	84 83 00 18 	l.lwz r4,0x18(r3)
	pwatchdog_regs->mode |= WDOG0_DIS;

	return OK;
}
    7d2c:	9d 60 00 00 	l.addi r11,r0,0x0
*********************************************************************************************************
*/
s32 watchdog_disable(void)
{
	/* disable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    7d30:	e0 84 10 03 	l.and r4,r4,r2
    7d34:	d4 03 20 18 	l.sw 0x18(r3),r4
	pwatchdog_regs->mode |= WDOG0_DIS;
    7d38:	84 83 00 18 	l.lwz r4,0x18(r3)
    7d3c:	d4 03 20 18 	l.sw 0x18(r3),r4

	return OK;
}
    7d40:	9c 21 00 04 	l.addi r1,r1,0x4
    7d44:	44 00 48 00 	l.jr r9
    7d48:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00007d4c <itoa>:
#include "library_i.h"

static const char digit_string[] = "0123456789ABCDEF";

char *itoa(int value, char *string, int radix)
{
    7d4c:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
    7d50:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
    7d54:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
    7d58:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7d5c:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
    7d60:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
    7d64:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
    7d68:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
    7d6c:	a8 43 00 00 	l.ori r2,r3,0x0
    7d70:	9c 21 ff d0 	l.addi r1,r1,0xffffffd0
    7d74:	a9 c4 00 00 	l.ori r14,r4,0x0
	char stack[16];
	int  negative = 0;          /* defualt is positive value */
	int  i;
	int  j;

	if (value == 0) {
    7d78:	bc 23 00 00 	l.sfnei r3,0x0
    7d7c:	10 00 00 06 	l.bf 7d94 <itoa+0x48>
    7d80:	aa 85 00 00 	l.ori r20,r5,0x0
		/* zero */
		string[0] = '0';
    7d84:	9c 60 00 30 	l.addi r3,r0,0x30
		string[1] = '\0';
    7d88:	d8 04 10 01 	l.sb 0x1(r4),r2
		return string;
    7d8c:	00 00 00 31 	l.j 7e50 <itoa+0x104>
    7d90:	d8 04 18 00 	l.sb 0x0(r4),r3
static const char digit_string[] = "0123456789ABCDEF";

char *itoa(int value, char *string, int radix)
{
	char stack[16];
	int  negative = 0;          /* defualt is positive value */
    7d94:	9e 40 00 00 	l.addi r18,r0,0x0
		string[0] = '0';
		string[1] = '\0';
		return string;
	}

	if (value < 0) {
    7d98:	e5 63 90 00 	l.sfges r3,r18
    7d9c:	10 00 00 04 	l.bf 7dac <itoa+0x60>
    7da0:	15 00 00 00 	l.nop 0x0
		/* 'value' is negative, convert to postive first */
		negative = 1;
		value = -value ;
    7da4:	e0 40 18 02 	l.sub r2,r0,r3
		return string;
	}

	if (value < 0) {
		/* 'value' is negative, convert to postive first */
		negative = 1;
    7da8:	9e 40 00 01 	l.addi r18,r0,0x1
		value = -value ;
	}

	for (i = 0; value > 0; ++i) {
    7dac:	9e 00 00 00 	l.addi r16,r0,0x0

#include "library_i.h"

static const char digit_string[] = "0123456789ABCDEF";

char *itoa(int value, char *string, int radix)
    7db0:	00 00 00 03 	l.j 7dbc <itoa+0x70>
    7db4:	aa c1 00 00 	l.ori r22,r1,0x0
		/* 'value' is negative, convert to postive first */
		negative = 1;
		value = -value ;
	}

	for (i = 0; value > 0; ++i) {
    7db8:	aa 03 00 00 	l.ori r16,r3,0x0
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    7dbc:	a8 62 00 00 	l.ori r3,r2,0x0
    7dc0:	a8 94 00 00 	l.ori r4,r20,0x0
    7dc4:	04 00 13 79 	l.jal cba8 <__modsi3>
    7dc8:	e3 16 80 00 	l.add r24,r22,r16
    7dcc:	18 c0 00 01 	l.movhi r6,0x1
		value /= radix;
    7dd0:	a8 62 00 00 	l.ori r3,r2,0x0
		value = -value ;
	}

	for (i = 0; value > 0; ++i) {
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    7dd4:	a8 c6 2e 8c 	l.ori r6,r6,0x2e8c
		value /= radix;
    7dd8:	a8 94 00 00 	l.ori r4,r20,0x0
		value = -value ;
	}

	for (i = 0; value > 0; ++i) {
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    7ddc:	e1 6b 30 00 	l.add r11,r11,r6
    7de0:	8d 6b 00 00 	l.lbz r11,0x0(r11)
		value /= radix;
    7de4:	04 00 13 50 	l.jal cb24 <__divsi3>
    7de8:	d8 18 58 00 	l.sb 0x0(r24),r11
		/* 'value' is negative, convert to postive first */
		negative = 1;
		value = -value ;
	}

	for (i = 0; value > 0; ++i) {
    7dec:	9c 70 00 01 	l.addi r3,r16,0x1
    7df0:	bd 4b 00 00 	l.sfgtsi r11,0x0
    7df4:	13 ff ff f1 	l.bf 7db8 <itoa+0x6c>
    7df8:	a8 4b 00 00 	l.ori r2,r11,0x0
		value /= radix;
	}

	/* restore reversed order result to user string */
	j = 0;
	if (negative) {
    7dfc:	bc 12 00 00 	l.sfeqi r18,0x0
    7e00:	10 00 00 05 	l.bf 7e14 <itoa+0xc8>
    7e04:	a8 52 00 00 	l.ori r2,r18,0x0
		/* add sign at first charset. */
		string[j++] = '-';
    7e08:	9c 40 00 2d 	l.addi r2,r0,0x2d
    7e0c:	d8 0e 10 00 	l.sb 0x0(r14),r2
    7e10:	9c 40 00 01 	l.addi r2,r0,0x1

#include "library_i.h"

static const char digit_string[] = "0123456789ABCDEF";

char *itoa(int value, char *string, int radix)
    7e14:	e0 61 80 00 	l.add r3,r1,r16
    7e18:	e0 8e 10 00 	l.add r4,r14,r2
	j = 0;
	if (negative) {
		/* add sign at first charset. */
		string[j++] = '-';
	}
	for (--i; i >= 0; --i, ++j) {
    7e1c:	00 00 00 06 	l.j 7e34 <itoa+0xe8>
    7e20:	9c a1 ff ff 	l.addi r5,r1,0xffffffff
		string[j] = stack[i];
    7e24:	8c c3 00 00 	l.lbz r6,0x0(r3)
    7e28:	9c 63 ff ff 	l.addi r3,r3,0xffffffff
    7e2c:	d8 04 30 00 	l.sb 0x0(r4),r6
    7e30:	9c 84 00 01 	l.addi r4,r4,0x1
	j = 0;
	if (negative) {
		/* add sign at first charset. */
		string[j++] = '-';
	}
	for (--i; i >= 0; --i, ++j) {
    7e34:	e4 23 28 00 	l.sfne r3,r5
    7e38:	13 ff ff fb 	l.bf 7e24 <itoa+0xd8>
    7e3c:	15 00 00 00 	l.nop 0x0
		string[j] = stack[i];
	}
	/* must end with '\0'. */
	string[j] = '\0';
    7e40:	e0 4e 10 00 	l.add r2,r14,r2
    7e44:	e2 02 80 00 	l.add r16,r2,r16
    7e48:	9c 40 00 00 	l.addi r2,r0,0x0
    7e4c:	d8 10 10 01 	l.sb 0x1(r16),r2

	return string;
}
    7e50:	9c 21 00 30 	l.addi r1,r1,0x30
    7e54:	a9 6e 00 00 	l.ori r11,r14,0x0
    7e58:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7e5c:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
    7e60:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
    7e64:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
    7e68:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
    7e6c:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
    7e70:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
    7e74:	44 00 48 00 	l.jr r9
    7e78:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)

00007e7c <utoa>:

char *utoa(unsigned int value, char *string, int radix)
{
    7e7c:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    7e80:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    7e84:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    7e88:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    7e8c:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    7e90:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7e94:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
	char stack[16];
	int  i;
	int  j;

	if (value == 0) {
    7e98:	9e 00 00 00 	l.addi r16,r0,0x0

	return string;
}

char *utoa(unsigned int value, char *string, int radix)
{
    7e9c:	9c 21 ff d4 	l.addi r1,r1,0xffffffd4
    7ea0:	a8 43 00 00 	l.ori r2,r3,0x0
    7ea4:	a9 c4 00 00 	l.ori r14,r4,0x0
    7ea8:	aa 85 00 00 	l.ori r20,r5,0x0
	char stack[16];
	int  i;
	int  j;

	if (value == 0) {
    7eac:	e4 23 80 00 	l.sfne r3,r16
    7eb0:	10 00 00 07 	l.bf 7ecc <utoa+0x50>
    7eb4:	aa c1 00 00 	l.ori r22,r1,0x0
		/* zero */
		string[0] = '0';
    7eb8:	9c 60 00 30 	l.addi r3,r0,0x30
		string[1] = '\0';
    7ebc:	d8 04 10 01 	l.sb 0x1(r4),r2
		return string;
    7ec0:	00 00 00 21 	l.j 7f44 <utoa+0xc8>
    7ec4:	d8 04 18 00 	l.sb 0x0(r4),r3
	}

	for (i = 0; value > 0; ++i) {
    7ec8:	aa 03 00 00 	l.ori r16,r3,0x0
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    7ecc:	a8 62 00 00 	l.ori r3,r2,0x0
    7ed0:	a8 94 00 00 	l.ori r4,r20,0x0
    7ed4:	04 00 13 2d 	l.jal cb88 <__umodsi3>
    7ed8:	e2 56 80 00 	l.add r18,r22,r16
    7edc:	18 a0 00 01 	l.movhi r5,0x1
		value /= radix;
    7ee0:	a8 62 00 00 	l.ori r3,r2,0x0
		return string;
	}

	for (i = 0; value > 0; ++i) {
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    7ee4:	a8 a5 2e 8c 	l.ori r5,r5,0x2e8c
		value /= radix;
    7ee8:	a8 94 00 00 	l.ori r4,r20,0x0
		return string;
	}

	for (i = 0; value > 0; ++i) {
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    7eec:	e1 6b 28 00 	l.add r11,r11,r5
    7ef0:	8d 6b 00 00 	l.lbz r11,0x0(r11)
		value /= radix;
    7ef4:	04 00 12 cd 	l.jal ca28 <__udivsi3>
    7ef8:	d8 12 58 00 	l.sb 0x0(r18),r11
		string[0] = '0';
		string[1] = '\0';
		return string;
	}

	for (i = 0; value > 0; ++i) {
    7efc:	9c 70 00 01 	l.addi r3,r16,0x1
    7f00:	bc 2b 00 00 	l.sfnei r11,0x0
    7f04:	13 ff ff f1 	l.bf 7ec8 <utoa+0x4c>
    7f08:	a8 4b 00 00 	l.ori r2,r11,0x0
	string[j] = '\0';

	return string;
}

char *utoa(unsigned int value, char *string, int radix)
    7f0c:	a8 52 00 00 	l.ori r2,r18,0x0
		string[0] = '0';
		string[1] = '\0';
		return string;
	}

	for (i = 0; value > 0; ++i) {
    7f10:	a8 6e 00 00 	l.ori r3,r14,0x0
		stack[i] = digit_string[value % radix];
		value /= radix;
	}

	/* restore reversed order result to user string */
	for (--i, j = 0; i >= 0; --i, ++j) {
    7f14:	00 00 00 06 	l.j 7f2c <utoa+0xb0>
    7f18:	9c 81 ff ff 	l.addi r4,r1,0xffffffff
		string[j] = stack[i];
    7f1c:	8c a2 00 00 	l.lbz r5,0x0(r2)
    7f20:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    7f24:	d8 03 28 00 	l.sb 0x0(r3),r5
    7f28:	9c 63 00 01 	l.addi r3,r3,0x1
		stack[i] = digit_string[value % radix];
		value /= radix;
	}

	/* restore reversed order result to user string */
	for (--i, j = 0; i >= 0; --i, ++j) {
    7f2c:	e4 22 20 00 	l.sfne r2,r4
    7f30:	13 ff ff fb 	l.bf 7f1c <utoa+0xa0>
    7f34:	15 00 00 00 	l.nop 0x0
		string[j] = stack[i];
	}
	/* must end with '\0'. */
	string[j] = '\0';
    7f38:	e2 0e 80 00 	l.add r16,r14,r16
    7f3c:	9c 40 00 00 	l.addi r2,r0,0x0
    7f40:	d8 10 10 01 	l.sb 0x1(r16),r2

	return string;
}
    7f44:	9c 21 00 2c 	l.addi r1,r1,0x2c
    7f48:	a9 6e 00 00 	l.ori r11,r14,0x0
    7f4c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7f50:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    7f54:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    7f58:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    7f5c:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    7f60:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    7f64:	44 00 48 00 	l.jr r9
    7f68:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00007f6c <hexdump>:

void hexdump(char *name, char *base, int len)
{
    7f6c:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    7f70:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    7f74:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    7f78:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7f7c:	a8 44 00 00 	l.ori r2,r4,0x0
    7f80:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	u32 i;
	printk("%s :\n", name);
    7f84:	18 80 00 01 	l.movhi r4,0x1
    7f88:	d4 01 18 00 	l.sw 0x0(r1),r3
    7f8c:	a8 84 25 24 	l.ori r4,r4,0x2524
    7f90:	9c 60 00 0f 	l.addi r3,r0,0xf

	return string;
}

void hexdump(char *name, char *base, int len)
{
    7f94:	aa 05 00 00 	l.ori r16,r5,0x0
	u32 i;
	printk("%s :\n", name);
    7f98:	04 00 0a 10 	l.jal a7d8 <debugger_printf>
    7f9c:	9d c0 00 00 	l.addi r14,r0,0x0
	for (i = 0; i < len; i += 4) {
    7fa0:	00 00 00 12 	l.j 7fe8 <hexdump+0x7c>
    7fa4:	e4 8e 80 00 	l.sfltu r14,r16
		if (!(i&0xf))
    7fa8:	bc 23 00 00 	l.sfnei r3,0x0
    7fac:	10 00 00 06 	l.bf 7fc4 <hexdump+0x58>
    7fb0:	18 80 00 01 	l.movhi r4,0x1
		printk("\n0x%8p : ", base + i);
    7fb4:	9c 60 00 0f 	l.addi r3,r0,0xf
    7fb8:	a8 84 25 2a 	l.ori r4,r4,0x252a
    7fbc:	04 00 0a 07 	l.jal a7d8 <debugger_printf>
    7fc0:	d4 01 10 00 	l.sw 0x0(r1),r2
		printk("%8x ", readl(base + i));
    7fc4:	84 62 00 00 	l.lwz r3,0x0(r2)
    7fc8:	18 80 00 01 	l.movhi r4,0x1
    7fcc:	d4 01 18 00 	l.sw 0x0(r1),r3
    7fd0:	a8 84 25 34 	l.ori r4,r4,0x2534
    7fd4:	9c 60 00 0f 	l.addi r3,r0,0xf

void hexdump(char *name, char *base, int len)
{
	u32 i;
	printk("%s :\n", name);
	for (i = 0; i < len; i += 4) {
    7fd8:	9d ce 00 04 	l.addi r14,r14,0x4
		if (!(i&0xf))
		printk("\n0x%8p : ", base + i);
		printk("%8x ", readl(base + i));
    7fdc:	04 00 09 ff 	l.jal a7d8 <debugger_printf>
    7fe0:	9c 42 00 04 	l.addi r2,r2,0x4

void hexdump(char *name, char *base, int len)
{
	u32 i;
	printk("%s :\n", name);
	for (i = 0; i < len; i += 4) {
    7fe4:	e4 8e 80 00 	l.sfltu r14,r16
    7fe8:	13 ff ff f0 	l.bf 7fa8 <hexdump+0x3c>
    7fec:	a4 6e 00 0f 	l.andi r3,r14,0xf
		if (!(i&0xf))
		printk("\n0x%8p : ", base + i);
		printk("%8x ", readl(base + i));
	}
	printk("\n");
}
    7ff0:	9c 21 00 14 	l.addi r1,r1,0x14
	for (i = 0; i < len; i += 4) {
		if (!(i&0xf))
		printk("\n0x%8p : ", base + i);
		printk("%8x ", readl(base + i));
	}
	printk("\n");
    7ff4:	18 80 00 01 	l.movhi r4,0x1
    7ff8:	9c 60 00 0f 	l.addi r3,r0,0xf
    7ffc:	a8 84 2d 10 	l.ori r4,r4,0x2d10
}
    8000:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8004:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    8008:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
	for (i = 0; i < len; i += 4) {
		if (!(i&0xf))
		printk("\n0x%8p : ", base + i);
		printk("%8x ", readl(base + i));
	}
	printk("\n");
    800c:	00 00 09 f3 	l.j a7d8 <debugger_printf>
    8010:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00008014 <hstr2int>:

unsigned int hstr2int(const char *str, unsigned int len)
{
	unsigned int i = 0, tmp = 0;

	if ((str[0] == '0') && (str[1] == 'x')) {
    8014:	90 a3 00 00 	l.lbs r5,0x0(r3)
    8018:	bc 25 00 30 	l.sfnei r5,0x30
    801c:	10 00 00 23 	l.bf 80a8 <hstr2int+0x94>
    8020:	9d 60 00 00 	l.addi r11,r0,0x0
    8024:	90 a3 00 01 	l.lbs r5,0x1(r3)
    8028:	bc 25 00 78 	l.sfnei r5,0x78
    802c:	10 00 00 20 	l.bf 80ac <hstr2int+0x98>
    8030:	bc 24 00 00 	l.sfnei r4,0x0
		str += 2;
    8034:	9c 63 00 02 	l.addi r3,r3,0x2
		len -= 2;
    8038:	00 00 00 1c 	l.j 80a8 <hstr2int+0x94>
    803c:	9c 84 ff fe 	l.addi r4,r4,0xfffffffe
	}
	while (len--) {
		if (str[i] >= '0' && str[i] <= '9')
    8040:	90 a3 00 00 	l.lbs r5,0x0(r3)
    8044:	a4 c5 00 ff 	l.andi r6,r5,0xff
    8048:	9c e6 ff d0 	l.addi r7,r6,0xffffffd0
    804c:	a4 e7 00 ff 	l.andi r7,r7,0xff
    8050:	bc 47 00 09 	l.sfgtui r7,0x9
    8054:	10 00 00 05 	l.bf 8068 <hstr2int+0x54>
    8058:	9c e6 ff bf 	l.addi r7,r6,0xffffffbf
			tmp = tmp * 16 + (str[i] - '0');
    805c:	b9 6b 00 04 	l.slli r11,r11,0x4
    8060:	00 00 00 0f 	l.j 809c <hstr2int+0x88>
    8064:	9c a5 ff d0 	l.addi r5,r5,0xffffffd0
		else if (str[i] >= 'A' && str[i] <= 'F')
    8068:	a4 e7 00 ff 	l.andi r7,r7,0xff
    806c:	bc 47 00 05 	l.sfgtui r7,0x5
    8070:	10 00 00 05 	l.bf 8084 <hstr2int+0x70>
    8074:	15 00 00 00 	l.nop 0x0
			tmp = tmp * 16 + (str[i] - 'A') + 10;
    8078:	b9 6b 00 04 	l.slli r11,r11,0x4
    807c:	00 00 00 08 	l.j 809c <hstr2int+0x88>
    8080:	9c a5 ff c9 	l.addi r5,r5,0xffffffc9
		else if (str[i] >= 'a' && str[i] <= 'f')
    8084:	9c c6 ff 9f 	l.addi r6,r6,0xffffff9f
    8088:	a4 c6 00 ff 	l.andi r6,r6,0xff
    808c:	bc 46 00 05 	l.sfgtui r6,0x5
    8090:	10 00 00 09 	l.bf 80b4 <hstr2int+0xa0>
    8094:	9c a5 ff a9 	l.addi r5,r5,0xffffffa9
			tmp = tmp * 16 + (str[i] - 'a') + 10;
    8098:	b9 6b 00 04 	l.slli r11,r11,0x4
    809c:	e1 65 58 00 	l.add r11,r5,r11
    80a0:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    80a4:	9c 63 00 01 	l.addi r3,r3,0x1

	if ((str[0] == '0') && (str[1] == 'x')) {
		str += 2;
		len -= 2;
	}
	while (len--) {
    80a8:	bc 24 00 00 	l.sfnei r4,0x0
    80ac:	13 ff ff e5 	l.bf 8040 <hstr2int+0x2c>
    80b0:	15 00 00 00 	l.nop 0x0
			break;
		i++;
	}

	return tmp;
}
    80b4:	44 00 48 00 	l.jr r9
    80b8:	15 00 00 00 	l.nop 0x0

000080bc <dstr2int>:

unsigned int dstr2int(const char *str, unsigned int len)
{
	unsigned int i = 0, tmp = 0;

	while (len--) {
    80bc:	00 00 00 0d 	l.j 80f0 <dstr2int+0x34>
    80c0:	9d 60 00 00 	l.addi r11,r0,0x0
		if (str[i] >= '0' && str[i] <= '9')
    80c4:	90 a3 00 00 	l.lbs r5,0x0(r3)
    80c8:	9c a5 ff d0 	l.addi r5,r5,0xffffffd0
    80cc:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    80d0:	a4 c5 00 ff 	l.andi r6,r5,0xff
    80d4:	bc 46 00 09 	l.sfgtui r6,0x9
    80d8:	10 00 00 09 	l.bf 80fc <dstr2int+0x40>
    80dc:	9c 63 00 01 	l.addi r3,r3,0x1
			tmp = tmp * 10 + (str[i] - '0');
    80e0:	e0 cb 58 00 	l.add r6,r11,r11
    80e4:	b9 6b 00 03 	l.slli r11,r11,0x3
    80e8:	e1 66 58 00 	l.add r11,r6,r11
    80ec:	e1 65 58 00 	l.add r11,r5,r11

unsigned int dstr2int(const char *str, unsigned int len)
{
	unsigned int i = 0, tmp = 0;

	while (len--) {
    80f0:	bc 24 00 00 	l.sfnei r4,0x0
    80f4:	13 ff ff f4 	l.bf 80c4 <dstr2int+0x8>
    80f8:	15 00 00 00 	l.nop 0x0
			break;
		i++;
	}

	return tmp;
}
    80fc:	44 00 48 00 	l.jr r9
    8100:	15 00 00 00 	l.nop 0x0

00008104 <strlen>:
/*
 * strlen
 * returns number of characters in s (not including terminating null character)
 */
size_t strlen(const char *s)
{
    8104:	a8 83 00 00 	l.ori r4,r3,0x0
	const char *sc;

	for (sc = s; *sc != '\0'; ++sc)
    8108:	90 a4 00 00 	l.lbs r5,0x0(r4)
    810c:	bc 25 00 00 	l.sfnei r5,0x0
    8110:	13 ff ff fe 	l.bf 8108 <strlen+0x4>
    8114:	9c 84 00 01 	l.addi r4,r4,0x1
    8118:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
		;/* nothing */

	return sc - s;
}
    811c:	44 00 48 00 	l.jr r9
    8120:	e1 64 18 02 	l.sub r11,r4,r3

00008124 <strnlen>:

size_t strnlen(const char *s, size_t n)
{
    8124:	a8 a3 00 00 	l.ori r5,r3,0x0
	const char *sc;

	for (sc = s; ((sc - s) < n) && (*sc != '\0'); ++sc)
    8128:	e1 65 18 02 	l.sub r11,r5,r3
    812c:	e4 6b 20 00 	l.sfgeu r11,r4
    8130:	10 00 00 07 	l.bf 814c <strnlen+0x28>
    8134:	15 00 00 00 	l.nop 0x0
    8138:	90 c5 00 00 	l.lbs r6,0x0(r5)
    813c:	bc 26 00 00 	l.sfnei r6,0x0
    8140:	13 ff ff fa 	l.bf 8128 <strnlen+0x4>
    8144:	9c a5 00 01 	l.addi r5,r5,0x1
    8148:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
		;

	return sc - s;
}
    814c:	44 00 48 00 	l.jr r9
    8150:	15 00 00 00 	l.nop 0x0

00008154 <strcpy>:
 */
char *strcpy(char *dest, const char *src)
{
	char *tmp = dest;

	while ((*dest++ = *src++) != '\0')
    8154:	9c a0 00 00 	l.addi r5,r0,0x0
_PTR	 _EXFUN(memset,(_PTR, int, size_t));
char 	*_EXFUN(strcat,(char *, const char *));
char 	*_EXFUN(strchr,(const char *, int));
int	 _EXFUN(strcmp,(const char *, const char *));
int	 _EXFUN(strcoll,(const char *, const char *));
char 	*_EXFUN(strcpy,(char *, const char *));
    8158:	e0 c4 28 00 	l.add r6,r4,r5
    815c:	e0 e3 28 00 	l.add r7,r3,r5
    8160:	90 c6 00 00 	l.lbs r6,0x0(r6)
    8164:	d8 07 30 00 	l.sb 0x0(r7),r6
    8168:	bc 26 00 00 	l.sfnei r6,0x0
    816c:	13 ff ff fb 	l.bf 8158 <strcpy+0x4>
    8170:	9c a5 00 01 	l.addi r5,r5,0x1
		;/* nothing */

	return tmp;
}
    8174:	44 00 48 00 	l.jr r9
    8178:	a9 63 00 00 	l.ori r11,r3,0x0

0000817c <strncat>:
  return tmp;
}
*/

char *strncat(char *dest, const char *src, size_t count)
{
    817c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	char *tmp = dest;

	if (count) {
    8180:	a8 c3 00 00 	l.ori r6,r3,0x0
    8184:	bc 05 00 00 	l.sfeqi r5,0x0
    8188:	0c 00 00 04 	l.bnf 8198 <strncat+0x1c>
    818c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
				break;
			}
		}
	}
	return tmp;
}
    8190:	00 00 00 16 	l.j 81e8 <strncat+0x6c>
    8194:	9c 21 00 04 	l.addi r1,r1,0x4
char *strncat(char *dest, const char *src, size_t count)
{
	char *tmp = dest;

	if (count) {
		while (*dest)
    8198:	90 e6 00 00 	l.lbs r7,0x0(r6)
    819c:	bc 27 00 00 	l.sfnei r7,0x0
    81a0:	13 ff ff fe 	l.bf 8198 <strncat+0x1c>
    81a4:	9c c6 00 01 	l.addi r6,r6,0x1
    81a8:	9c c6 ff ff 	l.addi r6,r6,0xffffffff
size_t	 _EXFUN(strcspn,(const char *, const char *));
char 	*_EXFUN(strerror,(int));
size_t	 _EXFUN(strlen,(const char *));
char 	*_EXFUN(strncat,(char *, const char *, size_t));
    81ac:	00 00 00 0a 	l.j 81d4 <strncat+0x58>
    81b0:	e1 04 38 00 	l.add r8,r4,r7
			dest++;
		while ((*dest++ = *src++) != 0) {
    81b4:	9c e7 00 01 	l.addi r7,r7,0x1
			if (--count == 0) {
    81b8:	e4 25 38 00 	l.sfne r5,r7
    81bc:	10 00 00 05 	l.bf 81d0 <strncat+0x54>
    81c0:	9c c6 00 01 	l.addi r6,r6,0x1
				*dest = '\0';
    81c4:	9c 40 00 00 	l.addi r2,r0,0x0
				break;
    81c8:	00 00 00 07 	l.j 81e4 <strncat+0x68>
    81cc:	d8 06 10 00 	l.sb 0x0(r6),r2
    81d0:	e1 04 38 00 	l.add r8,r4,r7
	char *tmp = dest;

	if (count) {
		while (*dest)
			dest++;
		while ((*dest++ = *src++) != 0) {
    81d4:	91 08 00 00 	l.lbs r8,0x0(r8)
    81d8:	bc 28 00 00 	l.sfnei r8,0x0
    81dc:	13 ff ff f6 	l.bf 81b4 <strncat+0x38>
    81e0:	d8 06 40 00 	l.sb 0x0(r6),r8
				break;
			}
		}
	}
	return tmp;
}
    81e4:	9c 21 00 04 	l.addi r1,r1,0x4
    81e8:	a9 63 00 00 	l.ori r11,r3,0x0
    81ec:	44 00 48 00 	l.jr r9
    81f0:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

000081f4 <strcmp>:

int strcmp(const char *cs, const char *ct)
{
    81f4:	9c c0 00 00 	l.addi r6,r0,0x0
_PTR 	 _EXFUN(memcpy,(_PTR, const _PTR, size_t));
_PTR	 _EXFUN(memmove,(_PTR, const _PTR, size_t));
_PTR	 _EXFUN(memset,(_PTR, int, size_t));
char 	*_EXFUN(strcat,(char *, const char *));
char 	*_EXFUN(strchr,(const char *, int));
int	 _EXFUN(strcmp,(const char *, const char *));
    81f8:	e0 a3 30 00 	l.add r5,r3,r6
    81fc:	e0 e4 30 00 	l.add r7,r4,r6
	unsigned char c1, c2;

	while (1) {
		c1 = *cs++;
    8200:	8c a5 00 00 	l.lbz r5,0x0(r5)
		c2 = *ct++;
    8204:	8c e7 00 00 	l.lbz r7,0x0(r7)
		if (c1 != c2)
    8208:	e4 05 38 00 	l.sfeq r5,r7
    820c:	10 00 00 07 	l.bf 8228 <strcmp+0x34>
    8210:	bc 25 00 00 	l.sfnei r5,0x0
			return c1 < c2 ? -1 : 1;
    8214:	e4 65 38 00 	l.sfgeu r5,r7
    8218:	10 00 00 07 	l.bf 8234 <strcmp+0x40>
    821c:	9d 60 00 01 	l.addi r11,r0,0x1
    8220:	00 00 00 05 	l.j 8234 <strcmp+0x40>
    8224:	9d 60 ff ff 	l.addi r11,r0,0xffffffff
		if (!c1)
    8228:	13 ff ff f4 	l.bf 81f8 <strcmp+0x4>
    822c:	9c c6 00 01 	l.addi r6,r6,0x1
			break;
	}
	return 0;
    8230:	a9 65 00 00 	l.ori r11,r5,0x0
}
    8234:	44 00 48 00 	l.jr r9
    8238:	15 00 00 00 	l.nop 0x0

0000823c <strchr>:

char *strchr(const char *s, int c)
{
	const char *p = s;
	while (*p) {
		if (*p == (char)c)
    823c:	b8 84 00 18 	l.slli r4,r4,0x18
*/

char *strchr(const char *s, int c)
{
	const char *p = s;
	while (*p) {
    8240:	00 00 00 05 	l.j 8254 <strchr+0x18>
    8244:	b8 84 00 98 	l.srai r4,r4,0x18
		if (*p == (char)c)
    8248:	10 00 00 08 	l.bf 8268 <strchr+0x2c>
    824c:	15 00 00 00 	l.nop 0x0
			return (char *)p;
		else
			p++;
    8250:	9c 63 00 01 	l.addi r3,r3,0x1
*/

char *strchr(const char *s, int c)
{
	const char *p = s;
	while (*p) {
    8254:	90 a3 00 00 	l.lbs r5,0x0(r3)
    8258:	bc 25 00 00 	l.sfnei r5,0x0
    825c:	13 ff ff fb 	l.bf 8248 <strchr+0xc>
    8260:	e4 05 20 00 	l.sfeq r5,r4
			return (char *)p;
		else
			p++;
	}

	return 0;
    8264:	a8 65 00 00 	l.ori r3,r5,0x0

}
    8268:	44 00 48 00 	l.jr r9
    826c:	a9 63 00 00 	l.ori r11,r3,0x0

00008270 <memcpy>:
{
	char *cs;
	char *cd;

	/* check if 'src' and 'dest' are on LONG boundaries */
	if (0x03 & ((unsigned long)dest | (unsigned long)src)) { /* only for 32 archtecture plarform */
    8270:	e0 e4 18 04 	l.or r7,r4,r3

}

/* Basic mem functions */
void *memcpy(void *dest, const void *src, size_t n)
{
    8274:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	char *cs;
	char *cd;

	/* check if 'src' and 'dest' are on LONG boundaries */
	if (0x03 & ((unsigned long)dest | (unsigned long)src)) { /* only for 32 archtecture plarform */
    8278:	a4 e7 00 03 	l.andi r7,r7,0x3
    827c:	9c c0 00 00 	l.addi r6,r0,0x0
    8280:	e4 27 30 00 	l.sfne r7,r6
    8284:	10 00 00 09 	l.bf 82a8 <memcpy+0x38>
    8288:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		/* yes, speed up copy process */
		/* copy as many LONGs as possible */
		long *ls = (long *)src;
		long *ld = (long *)dest;

		size_t cnt = n >> 2;
    828c:	00 00 00 0c 	l.j 82bc <memcpy+0x4c>
    8290:	b8 c5 00 42 	l.srli r6,r5,0x2

_BEGIN_STD_C

_PTR 	 _EXFUN(memchr,(const _PTR, int, size_t));
int 	 _EXFUN(memcmp,(const _PTR, const _PTR, size_t));
_PTR 	 _EXFUN(memcpy,(_PTR, const _PTR, size_t));
    8294:	e0 e3 30 00 	l.add r7,r3,r6
		/* no, do a byte-wide copy */
		cs = (char *)src;
		cd = (char *)dest;

		while (n--)
			*cd++ = *cs++;
    8298:	8d 08 00 00 	l.lbz r8,0x0(r8)
    829c:	9c c6 00 01 	l.addi r6,r6,0x1
    82a0:	d8 07 40 00 	l.sb 0x0(r7),r8
    82a4:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
	if (0x03 & ((unsigned long)dest | (unsigned long)src)) { /* only for 32 archtecture plarform */
		/* no, do a byte-wide copy */
		cs = (char *)src;
		cd = (char *)dest;

		while (n--)
    82a8:	bc 25 00 00 	l.sfnei r5,0x0
    82ac:	13 ff ff fa 	l.bf 8294 <memcpy+0x24>
    82b0:	e1 04 30 00 	l.add r8,r4,r6
		while (cnt--)
			*cd++ = *cs++;
	}

	return dest;
}
    82b4:	00 00 00 1b 	l.j 8320 <memcpy+0xb0>
    82b8:	9c 21 00 04 	l.addi r1,r1,0x4
		/* copy as many LONGs as possible */
		long *ls = (long *)src;
		long *ld = (long *)dest;

		size_t cnt = n >> 2;
		while (cnt--)
    82bc:	00 00 00 08 	l.j 82dc <memcpy+0x6c>
    82c0:	bc 26 00 00 	l.sfnei r6,0x0
    82c4:	e1 63 38 00 	l.add r11,r3,r7
			*ld++ = *ls++;
    82c8:	85 08 00 00 	l.lwz r8,0x0(r8)
    82cc:	9c e7 00 04 	l.addi r7,r7,0x4
    82d0:	d4 0b 40 00 	l.sw 0x0(r11),r8
    82d4:	9c c6 ff ff 	l.addi r6,r6,0xffffffff
		/* copy as many LONGs as possible */
		long *ls = (long *)src;
		long *ld = (long *)dest;

		size_t cnt = n >> 2;
		while (cnt--)
    82d8:	bc 26 00 00 	l.sfnei r6,0x0
    82dc:	13 ff ff fa 	l.bf 82c4 <memcpy+0x54>
    82e0:	e1 04 38 00 	l.add r8,r4,r7
			*ld++ = *ls++;

		/* finally copy the remaining bytes */
		cs = (char *)(src + (n & ~0x03));
    82e4:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
    82e8:	e0 e5 10 03 	l.and r7,r5,r2
		cd = (char *)(dest + (n & ~0x03));

		cnt = n & 0x03;
    82ec:	a4 a5 00 03 	l.andi r5,r5,0x3
		size_t cnt = n >> 2;
		while (cnt--)
			*ld++ = *ls++;

		/* finally copy the remaining bytes */
		cs = (char *)(src + (n & ~0x03));
    82f0:	e0 84 38 00 	l.add r4,r4,r7
		cd = (char *)(dest + (n & ~0x03));

		cnt = n & 0x03;
		while (cnt--)
    82f4:	00 00 00 07 	l.j 8310 <memcpy+0xa0>
    82f8:	e0 e3 38 00 	l.add r7,r3,r7
    82fc:	e1 07 30 00 	l.add r8,r7,r6
			*cd++ = *cs++;
    8300:	8d 6b 00 00 	l.lbz r11,0x0(r11)
    8304:	9c c6 00 01 	l.addi r6,r6,0x1
    8308:	d8 08 58 00 	l.sb 0x0(r8),r11
    830c:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
		/* finally copy the remaining bytes */
		cs = (char *)(src + (n & ~0x03));
		cd = (char *)(dest + (n & ~0x03));

		cnt = n & 0x03;
		while (cnt--)
    8310:	bc 25 00 00 	l.sfnei r5,0x0
    8314:	13 ff ff fa 	l.bf 82fc <memcpy+0x8c>
    8318:	e1 64 30 00 	l.add r11,r4,r6
			*cd++ = *cs++;
	}

	return dest;
}
    831c:	9c 21 00 04 	l.addi r1,r1,0x4
    8320:	a9 63 00 00 	l.ori r11,r3,0x0
    8324:	44 00 48 00 	l.jr r9
    8328:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000832c <memmove>:

void *memmove(void *dest, const void *src, size_t n)
{
	if (dest <= src || (char *)dest >= ((char *)src + n)) {
    832c:	e4 a3 20 00 	l.sfleu r3,r4
    8330:	10 00 00 06 	l.bf 8348 <memmove+0x1c>
    8334:	a8 e5 00 00 	l.ori r7,r5,0x0
    8338:	e0 c4 28 00 	l.add r6,r4,r5
    833c:	e4 83 30 00 	l.sfltu r3,r6
    8340:	10 00 00 0e 	l.bf 8378 <memmove+0x4c>
    8344:	15 00 00 00 	l.nop 0x0
    8348:	00 00 00 07 	l.j 8364 <memmove+0x38>
    834c:	9c c0 00 00 	l.addi r6,r0,0x0
_PTR	 _EXFUN(memmove,(_PTR, const _PTR, size_t));
    8350:	e1 64 30 00 	l.add r11,r4,r6
		/*
		 * Non-Overlapping Buffers
		 * copy from lower addresses to higher addresses
		 */
		while (n--) {
			*(char *)dest = *(char *)src;
    8354:	8d 6b 00 00 	l.lbz r11,0x0(r11)
    8358:	9c c6 00 01 	l.addi r6,r6,0x1
    835c:	d8 08 58 00 	l.sb 0x0(r8),r11
    8360:	9c e7 ff ff 	l.addi r7,r7,0xffffffff

		/*
		 * Non-Overlapping Buffers
		 * copy from lower addresses to higher addresses
		 */
		while (n--) {
    8364:	bc 27 00 00 	l.sfnei r7,0x0
    8368:	13 ff ff fa 	l.bf 8350 <memmove+0x24>
    836c:	e1 03 30 00 	l.add r8,r3,r6
    8370:	00 00 00 10 	l.j 83b0 <memmove+0x84>
    8374:	e1 63 28 00 	l.add r11,r3,r5
	} else {
		/*
		 * Overlapping Buffers
		 * copy from higher addresses to lower addresses
		 */
		dest = (char *)dest + n - 1;
    8378:	9c c5 ff ff 	l.addi r6,r5,0xffffffff
    837c:	e0 63 30 00 	l.add r3,r3,r6
		src = (char *)src + n - 1;
    8380:	e0 84 30 00 	l.add r4,r4,r6
		while (n--) {
    8384:	00 00 00 07 	l.j 83a0 <memmove+0x74>
    8388:	9c c0 00 00 	l.addi r6,r0,0x0
    838c:	e1 03 30 00 	l.add r8,r3,r6
			*(char *)dest = *(char *)src;
    8390:	8d 6b 00 00 	l.lbz r11,0x0(r11)
    8394:	9c c6 ff ff 	l.addi r6,r6,0xffffffff
    8398:	d8 08 58 00 	l.sb 0x0(r8),r11
    839c:	9c e7 ff ff 	l.addi r7,r7,0xffffffff
		 * Overlapping Buffers
		 * copy from higher addresses to lower addresses
		 */
		dest = (char *)dest + n - 1;
		src = (char *)src + n - 1;
		while (n--) {
    83a0:	bc 27 00 00 	l.sfnei r7,0x0
    83a4:	13 ff ff fa 	l.bf 838c <memmove+0x60>
    83a8:	e1 64 30 00 	l.add r11,r4,r6
    83ac:	e1 63 28 02 	l.sub r11,r3,r5
			src = (char *)src - 1;
		}
	}

	return dest;
}
    83b0:	44 00 48 00 	l.jr r9
    83b4:	15 00 00 00 	l.nop 0x0

000083b8 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
	char *p1 = (void *)s1;
	char *p2 = (void *)s2;

	while ((*p1 == *p2) && (--n > 0)) {
    83b8:	9c c0 00 00 	l.addi r6,r0,0x0
#endif

_BEGIN_STD_C

_PTR 	 _EXFUN(memchr,(const _PTR, int, size_t));
int 	 _EXFUN(memcmp,(const _PTR, const _PTR, size_t));
    83bc:	e0 e3 30 00 	l.add r7,r3,r6
    83c0:	91 67 00 00 	l.lbs r11,0x0(r7)
    83c4:	e0 e4 30 00 	l.add r7,r4,r6
    83c8:	90 e7 00 00 	l.lbs r7,0x0(r7)
    83cc:	e4 2b 38 00 	l.sfne r11,r7
    83d0:	10 00 00 07 	l.bf 83ec <memcmp+0x34>
    83d4:	15 00 00 00 	l.nop 0x0
    83d8:	9c c6 00 01 	l.addi r6,r6,0x1
    83dc:	e4 25 30 00 	l.sfne r5,r6
    83e0:	13 ff ff f8 	l.bf 83c0 <memcmp+0x8>
    83e4:	e0 e3 30 00 	l.add r7,r3,r6
    83e8:	a8 eb 00 00 	l.ori r7,r11,0x0
		p1++;
		p2++;
	}

	return *p1 - *p2;
}
    83ec:	44 00 48 00 	l.jr r9
    83f0:	e1 6b 38 02 	l.sub r11,r11,r7

000083f4 <memchr>:
void *memchr(const void *s, int c, size_t n)
{
	char *p =  (char *)s;

	while (n--) {
		if (*p != (char)c)
    83f4:	b8 84 00 18 	l.slli r4,r4,0x18

void *memchr(const void *s, int c, size_t n)
{
	char *p =  (char *)s;

	while (n--) {
    83f8:	00 00 00 07 	l.j 8414 <memchr+0x20>
    83fc:	b8 84 00 98 	l.srai r4,r4,0x18
		if (*p != (char)c)
    8400:	90 c3 00 00 	l.lbs r6,0x0(r3)
    8404:	e4 06 20 00 	l.sfeq r6,r4
    8408:	10 00 00 08 	l.bf 8428 <memchr+0x34>
    840c:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
			p++;
    8410:	9c 63 00 01 	l.addi r3,r3,0x1

void *memchr(const void *s, int c, size_t n)
{
	char *p =  (char *)s;

	while (n--) {
    8414:	bc 25 00 00 	l.sfnei r5,0x0
    8418:	13 ff ff fa 	l.bf 8400 <memchr+0xc>
    841c:	a9 65 00 00 	l.ori r11,r5,0x0
    8420:	00 00 00 03 	l.j 842c <memchr+0x38>
    8424:	15 00 00 00 	l.nop 0x0
		if (*p != (char)c)
    8428:	a9 63 00 00 	l.ori r11,r3,0x0
		else
			return p;
	}

	return 0;
}
    842c:	44 00 48 00 	l.jr r9
    8430:	15 00 00 00 	l.nop 0x0

00008434 <memset>:

void *memset(void *s, int c, size_t n)
{
	char *p = s;

	while (n--)
    8434:	00 00 00 05 	l.j 8448 <memset+0x14>
    8438:	a8 c3 00 00 	l.ori r6,r3,0x0
		*p++ = c;
    843c:	d8 06 20 00 	l.sb 0x0(r6),r4
    8440:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
    8444:	9c c6 00 01 	l.addi r6,r6,0x1

void *memset(void *s, int c, size_t n)
{
	char *p = s;

	while (n--)
    8448:	bc 25 00 00 	l.sfnei r5,0x0
    844c:	13 ff ff fc 	l.bf 843c <memset+0x8>
    8450:	15 00 00 00 	l.nop 0x0
		*p++ = c;

	return s;
}
    8454:	44 00 48 00 	l.jr r9
    8458:	a9 63 00 00 	l.ori r11,r3,0x0

0000845c <sprintf>:

#define STRVAL_SIZE     32

int sprintf(char *buf, char *fmt, ...)
{
    845c:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    8460:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    8464:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    8468:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    846c:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    8470:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8474:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    8478:	9c 21 ff c4 	l.addi r1,r1,0xffffffc4
    847c:	aa 03 00 00 	l.ori r16,r3,0x0
	int nval;
	unsigned int i, index = 0;

	va_start(ap, fmt);

	for (p = fmt; *p; p++) {
    8480:	a9 c4 00 00 	l.ori r14,r4,0x0
	char strval[STRVAL_SIZE];
	char *p;
	int nval;
	unsigned int i, index = 0;

	va_start(ap, fmt);
    8484:	9c 61 00 3c 	l.addi r3,r1,0x3c
{
	va_list ap;
	char strval[STRVAL_SIZE];
	char *p;
	int nval;
	unsigned int i, index = 0;
    8488:	9c 40 00 00 	l.addi r2,r0,0x0

	va_start(ap, fmt);

	for (p = fmt; *p; p++) {
    848c:	aa 41 00 00 	l.ori r18,r1,0x0
    8490:	00 00 00 2a 	l.j 8538 <sprintf+0xdc>
    8494:	9e 81 00 20 	l.addi r20,r1,0x20
		for (i = 0; i < STRVAL_SIZE; i++)  /* clear strval[] */
			strval[i] = 0;
    8498:	9c 80 00 00 	l.addi r4,r0,0x0
    849c:	d8 06 20 00 	l.sb 0x0(r6),r4
    84a0:	9c c6 00 01 	l.addi r6,r6,0x1
	unsigned int i, index = 0;

	va_start(ap, fmt);

	for (p = fmt; *p; p++) {
		for (i = 0; i < STRVAL_SIZE; i++)  /* clear strval[] */
    84a4:	e4 26 a0 00 	l.sfne r6,r20
    84a8:	13 ff ff fd 	l.bf 849c <sprintf+0x40>
    84ac:	bc 05 00 25 	l.sfeqi r5,0x25
			strval[i] = 0;

		if (*p != '%') {
    84b0:	10 00 00 05 	l.bf 84c4 <sprintf+0x68>
    84b4:	e0 90 10 00 	l.add r4,r16,r2
			buf[index++] = *p;
    84b8:	9c 42 00 01 	l.addi r2,r2,0x1
			continue;
    84bc:	00 00 00 1e 	l.j 8534 <sprintf+0xd8>
    84c0:	d8 04 28 00 	l.sb 0x0(r4),r5
		}

		p++;
    84c4:	9d ce 00 01 	l.addi r14,r14,0x1

		switch (*p) {
    84c8:	90 8e 00 00 	l.lbs r4,0x0(r14)
    84cc:	bc 04 00 64 	l.sfeqi r4,0x64
    84d0:	0c 00 00 07 	l.bnf 84ec <sprintf+0x90>
    84d4:	9e c3 00 04 	l.addi r22,r3,0x4
		case 'd':
				nval = va_arg(ap, int);
				itoa(nval, strval, 10);
    84d8:	a8 81 00 00 	l.ori r4,r1,0x0
    84dc:	84 63 00 00 	l.lwz r3,0x0(r3)
    84e0:	07 ff fe 1b 	l.jal 7d4c <itoa>
    84e4:	9c a0 00 0a 	l.addi r5,r0,0xa

		p++;

		switch (*p) {
		case 'd':
				nval = va_arg(ap, int);
    84e8:	a8 76 00 00 	l.ori r3,r22,0x0
    84ec:	00 00 00 05 	l.j 8500 <sprintf+0xa4>
    84f0:	9c a0 00 00 	l.addi r5,r0,0x0
					strval[i] = pgm8(pval[i]);
			break;
*/
		}

		for (i = 0; strval[i] != '\0' && i < STRVAL_SIZE; i++)
    84f4:	9c a5 00 01 	l.addi r5,r5,0x1
			buf[index++] = strval[i];
    84f8:	d8 06 20 00 	l.sb 0x0(r6),r4
    84fc:	9c 42 00 01 	l.addi r2,r2,0x1
	return s;
}

#define STRVAL_SIZE     32

int sprintf(char *buf, char *fmt, ...)
    8500:	e0 92 28 00 	l.add r4,r18,r5
					strval[i] = pgm8(pval[i]);
			break;
*/
		}

		for (i = 0; strval[i] != '\0' && i < STRVAL_SIZE; i++)
    8504:	9c c0 00 01 	l.addi r6,r0,0x1
    8508:	bc a5 00 1f 	l.sfleui r5,0x1f
    850c:	10 00 00 03 	l.bf 8518 <sprintf+0xbc>
    8510:	90 84 00 00 	l.lbs r4,0x0(r4)
    8514:	9c c0 00 00 	l.addi r6,r0,0x0
    8518:	a4 c6 00 ff 	l.andi r6,r6,0xff
    851c:	bc 06 00 00 	l.sfeqi r6,0x0
    8520:	10 00 00 05 	l.bf 8534 <sprintf+0xd8>
    8524:	a4 c4 00 ff 	l.andi r6,r4,0xff
    8528:	bc 26 00 00 	l.sfnei r6,0x0
    852c:	13 ff ff f2 	l.bf 84f4 <sprintf+0x98>
    8530:	e0 d0 10 00 	l.add r6,r16,r2
	int nval;
	unsigned int i, index = 0;

	va_start(ap, fmt);

	for (p = fmt; *p; p++) {
    8534:	9d ce 00 01 	l.addi r14,r14,0x1
    8538:	90 ae 00 00 	l.lbs r5,0x0(r14)
    853c:	bc 05 00 00 	l.sfeqi r5,0x0
    8540:	0f ff ff d6 	l.bnf 8498 <sprintf+0x3c>
    8544:	a8 d2 00 00 	l.ori r6,r18,0x0

		for (i = 0; strval[i] != '\0' && i < STRVAL_SIZE; i++)
			buf[index++] = strval[i];
	}

	buf[index] = '\0';
    8548:	e2 10 10 00 	l.add r16,r16,r2

	va_end(ap);

	return (int)index;
}
    854c:	a9 62 00 00 	l.ori r11,r2,0x0

		for (i = 0; strval[i] != '\0' && i < STRVAL_SIZE; i++)
			buf[index++] = strval[i];
	}

	buf[index] = '\0';
    8550:	d8 10 28 00 	l.sb 0x0(r16),r5

	va_end(ap);

	return (int)index;
}
    8554:	9c 21 00 3c 	l.addi r1,r1,0x3c
    8558:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    855c:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    8560:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    8564:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    8568:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    856c:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    8570:	44 00 48 00 	l.jr r9
    8574:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00008578 <fdt_check_header>:
#include <libfdt.h>

#include "libfdt_internal.h"

int fdt_check_header(const void *fdt)
{
    8578:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	if (fdt_magic(fdt) == FDT_MAGIC) {
    857c:	18 40 d0 0d 	l.movhi r2,0xd00d
    8580:	8c 83 00 00 	l.lbz r4,0x0(r3)
    8584:	8c a3 00 03 	l.lbz r5,0x3(r3)
    8588:	b8 84 00 18 	l.slli r4,r4,0x18
    858c:	a8 42 fe ed 	l.ori r2,r2,0xfeed
    8590:	e0 85 20 04 	l.or r4,r5,r4
    8594:	8c a3 00 01 	l.lbz r5,0x1(r3)
    8598:	b8 a5 00 10 	l.slli r5,r5,0x10
    859c:	e0 84 28 04 	l.or r4,r4,r5
    85a0:	8c a3 00 02 	l.lbz r5,0x2(r3)
    85a4:	b8 a5 00 08 	l.slli r5,r5,0x8
    85a8:	e0 84 28 04 	l.or r4,r4,r5
    85ac:	e4 24 10 00 	l.sfne r4,r2
    85b0:	10 00 00 20 	l.bf 8630 <fdt_check_header+0xb8>
    85b4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		/* Complete tree */
		if (fdt_version(fdt) < FDT_FIRST_SUPPORTED_VERSION)
    85b8:	9c 83 00 14 	l.addi r4,r3,0x14
    85bc:	8c c4 00 00 	l.lbz r6,0x0(r4)
    85c0:	8c a4 00 03 	l.lbz r5,0x3(r4)
    85c4:	b8 c6 00 18 	l.slli r6,r6,0x18
    85c8:	e0 c5 30 04 	l.or r6,r5,r6
    85cc:	8c a4 00 01 	l.lbz r5,0x1(r4)
    85d0:	b8 a5 00 10 	l.slli r5,r5,0x10
    85d4:	e0 c6 28 04 	l.or r6,r6,r5
    85d8:	8c a4 00 02 	l.lbz r5,0x2(r4)
    85dc:	b8 a5 00 08 	l.slli r5,r5,0x8
    85e0:	e0 86 28 04 	l.or r4,r6,r5
    85e4:	bc 44 00 0f 	l.sfgtui r4,0xf
    85e8:	0c 00 00 26 	l.bnf 8680 <fdt_check_header+0x108>
    85ec:	9d 60 ff f6 	l.addi r11,r0,0xfffffff6
			return -FDT_ERR_BADVERSION;
		if (fdt_last_comp_version(fdt) > FDT_LAST_SUPPORTED_VERSION)
    85f0:	9c 63 00 18 	l.addi r3,r3,0x18
    85f4:	8c a3 00 00 	l.lbz r5,0x0(r3)
    85f8:	8c 83 00 03 	l.lbz r4,0x3(r3)
    85fc:	b8 a5 00 18 	l.slli r5,r5,0x18
    8600:	e0 a4 28 04 	l.or r5,r4,r5
    8604:	8c 83 00 01 	l.lbz r4,0x1(r3)
    8608:	b8 84 00 10 	l.slli r4,r4,0x10
    860c:	e0 a5 20 04 	l.or r5,r5,r4
    8610:	8c 83 00 02 	l.lbz r4,0x2(r3)
    8614:	b8 84 00 08 	l.slli r4,r4,0x8
    8618:	e0 65 20 04 	l.or r3,r5,r4
    861c:	bc 43 00 11 	l.sfgtui r3,0x11
    8620:	0c 00 00 17 	l.bnf 867c <fdt_check_header+0x104>
    8624:	15 00 00 00 	l.nop 0x0
	} else {
		return -FDT_ERR_BADMAGIC;
	}

	return 0;
}
    8628:	00 00 00 17 	l.j 8684 <fdt_check_header+0x10c>
    862c:	9c 21 00 04 	l.addi r1,r1,0x4
		/* Complete tree */
		if (fdt_version(fdt) < FDT_FIRST_SUPPORTED_VERSION)
			return -FDT_ERR_BADVERSION;
		if (fdt_last_comp_version(fdt) > FDT_LAST_SUPPORTED_VERSION)
			return -FDT_ERR_BADVERSION;
	} else if (fdt_magic(fdt) == FDT_SW_MAGIC) {
    8630:	18 40 2f f2 	l.movhi r2,0x2ff2
    8634:	a8 42 01 12 	l.ori r2,r2,0x112
    8638:	e4 24 10 00 	l.sfne r4,r2
    863c:	10 00 00 11 	l.bf 8680 <fdt_check_header+0x108>
    8640:	9d 60 ff f7 	l.addi r11,r0,0xfffffff7
		/* Unfinished sequential-write blob */
		if (fdt_size_dt_struct(fdt) == 0)
    8644:	9c 63 00 24 	l.addi r3,r3,0x24
    8648:	8c a3 00 00 	l.lbz r5,0x0(r3)
    864c:	8c 83 00 03 	l.lbz r4,0x3(r3)
    8650:	b8 a5 00 18 	l.slli r5,r5,0x18
    8654:	e0 a4 28 04 	l.or r5,r4,r5
    8658:	8c 83 00 01 	l.lbz r4,0x1(r3)
    865c:	b8 84 00 10 	l.slli r4,r4,0x10
    8660:	e0 a5 20 04 	l.or r5,r5,r4
    8664:	8c 83 00 02 	l.lbz r4,0x2(r3)
    8668:	b8 84 00 08 	l.slli r4,r4,0x8
    866c:	e0 65 20 04 	l.or r3,r5,r4
    8670:	bc 03 00 00 	l.sfeqi r3,0x0
    8674:	10 00 00 03 	l.bf 8680 <fdt_check_header+0x108>
    8678:	9d 60 ff f9 	l.addi r11,r0,0xfffffff9
			return -FDT_ERR_BADSTATE;
	} else {
		return -FDT_ERR_BADMAGIC;
	}

	return 0;
    867c:	9d 60 00 00 	l.addi r11,r0,0x0
}
    8680:	9c 21 00 04 	l.addi r1,r1,0x4
    8684:	44 00 48 00 	l.jr r9
    8688:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000868c <fdt_offset_ptr>:

const void *fdt_offset_ptr(const void *fdt, int offset, unsigned int len)
{
	const char *p;

	if (fdt_version(fdt) >= 0x11)
    868c:	9c c3 00 14 	l.addi r6,r3,0x14
    8690:	8d 06 00 00 	l.lbz r8,0x0(r6)
    8694:	8c e6 00 03 	l.lbz r7,0x3(r6)
    8698:	b9 08 00 18 	l.slli r8,r8,0x18
    869c:	e1 07 40 04 	l.or r8,r7,r8
    86a0:	8c e6 00 01 	l.lbz r7,0x1(r6)
    86a4:	b8 e7 00 10 	l.slli r7,r7,0x10
    86a8:	e1 08 38 04 	l.or r8,r8,r7
    86ac:	8c e6 00 02 	l.lbz r7,0x2(r6)
    86b0:	b8 e7 00 08 	l.slli r7,r7,0x8
    86b4:	e0 c8 38 04 	l.or r6,r8,r7
    86b8:	bc 46 00 10 	l.sfgtui r6,0x10
    86bc:	0c 00 00 15 	l.bnf 8710 <fdt_offset_ptr+0x84>
    86c0:	e0 e5 20 00 	l.add r7,r5,r4
		if (((offset + len) < offset)
    86c4:	e4 87 20 00 	l.sfltu r7,r4
    86c8:	10 00 00 22 	l.bf 8750 <fdt_offset_ptr+0xc4>
    86cc:	9d 60 00 00 	l.addi r11,r0,0x0
		    || ((offset + len) > fdt_size_dt_struct(fdt)))
    86d0:	9c c3 00 24 	l.addi r6,r3,0x24
    86d4:	e4 2b 58 00 	l.sfne r11,r11
    86d8:	8d 86 00 00 	l.lbz r12,0x0(r6)
    86dc:	8d 06 00 03 	l.lbz r8,0x3(r6)
    86e0:	b9 8c 00 18 	l.slli r12,r12,0x18
    86e4:	e1 88 60 04 	l.or r12,r8,r12
    86e8:	8d 06 00 01 	l.lbz r8,0x1(r6)
    86ec:	b9 08 00 10 	l.slli r8,r8,0x10
    86f0:	e1 8c 40 04 	l.or r12,r12,r8
    86f4:	8d 06 00 02 	l.lbz r8,0x2(r6)
    86f8:	b9 08 00 08 	l.slli r8,r8,0x8
    86fc:	10 00 00 05 	l.bf 8710 <fdt_offset_ptr+0x84>
    8700:	e0 cc 40 04 	l.or r6,r12,r8
    8704:	e4 47 30 00 	l.sfgtu r7,r6
    8708:	10 00 00 12 	l.bf 8750 <fdt_offset_ptr+0xc4>
    870c:	15 00 00 00 	l.nop 0x0
const char *_fdt_find_string(const char *strtab, int tabsize, const char *s);
int _fdt_node_end_offset(void *fdt, int nodeoffset);

static inline const void *_fdt_offset_ptr(const void *fdt, int offset)
{
	return (const char *)fdt + fdt_off_dt_struct(fdt) + offset;
    8710:	9c c3 00 08 	l.addi r6,r3,0x8
			return NULL;

	p = _fdt_offset_ptr(fdt, offset);

	if (p + len < p)
		return NULL;
    8714:	9d 60 00 00 	l.addi r11,r0,0x0
    8718:	8d 86 00 00 	l.lbz r12,0x0(r6)
    871c:	8d 06 00 01 	l.lbz r8,0x1(r6)
    8720:	8c e6 00 02 	l.lbz r7,0x2(r6)
		    || ((offset + len) > fdt_size_dt_struct(fdt)))
			return NULL;

	p = _fdt_offset_ptr(fdt, offset);

	if (p + len < p)
    8724:	e5 85 58 00 	l.sflts r5,r11
    8728:	10 00 00 0a 	l.bf 8750 <fdt_offset_ptr+0xc4>
    872c:	8c c6 00 03 	l.lbz r6,0x3(r6)
    8730:	b9 6c 00 18 	l.slli r11,r12,0x18
    8734:	b8 a8 00 10 	l.slli r5,r8,0x10
    8738:	e1 66 58 04 	l.or r11,r6,r11
    873c:	e1 6b 28 04 	l.or r11,r11,r5
    8740:	b8 a7 00 08 	l.slli r5,r7,0x8
    8744:	e1 6b 28 04 	l.or r11,r11,r5
    8748:	e1 6b 20 00 	l.add r11,r11,r4
    874c:	e1 63 58 00 	l.add r11,r3,r11
		return NULL;
	return p;
}
    8750:	44 00 48 00 	l.jr r9
    8754:	15 00 00 00 	l.nop 0x0

00008758 <fdt_next_tag>:

uint32_t fdt_next_tag(const void *fdt, int startoffset, int *nextoffset)
{
    8758:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
	const fdt32_t *tagp, *lenp;
	uint32_t tag;
	int offset = startoffset;
	const char *p;

	*nextoffset = -FDT_ERR_TRUNCATED;
    875c:	9c 40 ff f8 	l.addi r2,r0,0xfffffff8
		return NULL;
	return p;
}

uint32_t fdt_next_tag(const void *fdt, int startoffset, int *nextoffset)
{
    8760:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    8764:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    8768:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    876c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8770:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    8774:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
	const fdt32_t *tagp, *lenp;
	uint32_t tag;
	int offset = startoffset;
	const char *p;

	*nextoffset = -FDT_ERR_TRUNCATED;
    8778:	d4 05 10 00 	l.sw 0x0(r5),r2
		return NULL;
	return p;
}

uint32_t fdt_next_tag(const void *fdt, int startoffset, int *nextoffset)
{
    877c:	9c 21 ff e4 	l.addi r1,r1,0xffffffe4
    8780:	aa 05 00 00 	l.ori r16,r5,0x0
	uint32_t tag;
	int offset = startoffset;
	const char *p;

	*nextoffset = -FDT_ERR_TRUNCATED;
	tagp = fdt_offset_ptr(fdt, offset, FDT_TAGSIZE);
    8784:	9c a0 00 04 	l.addi r5,r0,0x4
		return NULL;
	return p;
}

uint32_t fdt_next_tag(const void *fdt, int startoffset, int *nextoffset)
{
    8788:	aa 43 00 00 	l.ori r18,r3,0x0
    878c:	aa c4 00 00 	l.ori r22,r4,0x0
	uint32_t tag;
	int offset = startoffset;
	const char *p;

	*nextoffset = -FDT_ERR_TRUNCATED;
	tagp = fdt_offset_ptr(fdt, offset, FDT_TAGSIZE);
    8790:	07 ff ff bf 	l.jal 868c <fdt_offset_ptr>
    8794:	9c 40 00 09 	l.addi r2,r0,0x9
	if (!tagp)
    8798:	bc 0b 00 00 	l.sfeqi r11,0x0
    879c:	10 00 00 44 	l.bf 88ac <fdt_next_tag+0x154>
    87a0:	9e 96 00 04 	l.addi r20,r22,0x4
		return FDT_END; /* premature end */
	tag = fdt32_to_cpu(*tagp);
    87a4:	8c 4b 00 00 	l.lbz r2,0x0(r11)
    87a8:	8c 6b 00 03 	l.lbz r3,0x3(r11)
    87ac:	b8 42 00 18 	l.slli r2,r2,0x18
    87b0:	e0 43 10 04 	l.or r2,r3,r2
    87b4:	8c 6b 00 01 	l.lbz r3,0x1(r11)
    87b8:	b8 63 00 10 	l.slli r3,r3,0x10
    87bc:	e0 42 18 04 	l.or r2,r2,r3
    87c0:	8c 6b 00 02 	l.lbz r3,0x2(r11)
    87c4:	b8 63 00 08 	l.slli r3,r3,0x8
    87c8:	e0 42 18 04 	l.or r2,r2,r3
	offset += FDT_TAGSIZE;

	*nextoffset = -FDT_ERR_BADSTRUCTURE;
    87cc:	9c 60 ff f5 	l.addi r3,r0,0xfffffff5
    87d0:	d4 10 18 00 	l.sw 0x0(r16),r3
	switch (tag) {
    87d4:	9c 62 ff ff 	l.addi r3,r2,0xffffffff
    87d8:	bc 43 00 08 	l.sfgtui r3,0x8
    87dc:	10 00 00 33 	l.bf 88a8 <fdt_next_tag+0x150>
    87e0:	a9 d4 00 00 	l.ori r14,r20,0x0
    87e4:	18 80 00 01 	l.movhi r4,0x1
    87e8:	b8 63 00 02 	l.slli r3,r3,0x2
    87ec:	a8 84 2e a0 	l.ori r4,r4,0x2ea0
    87f0:	e0 63 20 00 	l.add r3,r3,r4
    87f4:	84 63 00 00 	l.lwz r3,0x0(r3)
    87f8:	44 00 18 00 	l.jr r3
    87fc:	15 00 00 00 	l.nop 0x0
	case FDT_BEGIN_NODE:
		/* skip name */
		do {
			p = fdt_offset_ptr(fdt, offset++, 1);
    8800:	a8 72 00 00 	l.ori r3,r18,0x0
    8804:	a8 8e 00 00 	l.ori r4,r14,0x0
    8808:	07 ff ff a1 	l.jal 868c <fdt_offset_ptr>
    880c:	9c a0 00 01 	l.addi r5,r0,0x1
		} while (p && (*p != '\0'));
    8810:	bc 0b 00 00 	l.sfeqi r11,0x0
    8814:	10 00 00 25 	l.bf 88a8 <fdt_next_tag+0x150>
    8818:	15 00 00 00 	l.nop 0x0
    881c:	90 6b 00 00 	l.lbs r3,0x0(r11)
    8820:	bc 23 00 00 	l.sfnei r3,0x0
    8824:	13 ff ff f7 	l.bf 8800 <fdt_next_tag+0xa8>
    8828:	9d ce 00 01 	l.addi r14,r14,0x1

	default:
		return FDT_END;
	}

	if (!fdt_offset_ptr(fdt, startoffset, offset - startoffset))
    882c:	00 00 00 15 	l.j 8880 <fdt_next_tag+0x128>
    8830:	a8 72 00 00 	l.ori r3,r18,0x0
		if (!p)
			return FDT_END; /* premature end */
		break;

	case FDT_PROP:
		lenp = fdt_offset_ptr(fdt, offset, sizeof(*lenp));
    8834:	a8 72 00 00 	l.ori r3,r18,0x0
    8838:	a8 94 00 00 	l.ori r4,r20,0x0
    883c:	07 ff ff 94 	l.jal 868c <fdt_offset_ptr>
    8840:	9c a0 00 04 	l.addi r5,r0,0x4
		if (!lenp)
    8844:	bc 0b 00 00 	l.sfeqi r11,0x0
    8848:	10 00 00 18 	l.bf 88a8 <fdt_next_tag+0x150>
    884c:	9e 94 00 08 	l.addi r20,r20,0x8
			return FDT_END; /* premature end */
		/* skip-name offset, length and value */
		offset += sizeof(struct fdt_property) - FDT_TAGSIZE
    8850:	8d cb 00 00 	l.lbz r14,0x0(r11)
    8854:	8c 6b 00 03 	l.lbz r3,0x3(r11)
    8858:	b9 ce 00 18 	l.slli r14,r14,0x18
    885c:	e1 c3 70 04 	l.or r14,r3,r14
    8860:	8c 6b 00 01 	l.lbz r3,0x1(r11)
    8864:	b8 63 00 10 	l.slli r3,r3,0x10
    8868:	e1 ce 18 04 	l.or r14,r14,r3
    886c:	8c 6b 00 02 	l.lbz r3,0x2(r11)
    8870:	b8 63 00 08 	l.slli r3,r3,0x8
    8874:	e1 ce 18 04 	l.or r14,r14,r3
    8878:	e1 d4 70 00 	l.add r14,r20,r14

	default:
		return FDT_END;
	}

	if (!fdt_offset_ptr(fdt, startoffset, offset - startoffset))
    887c:	a8 72 00 00 	l.ori r3,r18,0x0
    8880:	a8 96 00 00 	l.ori r4,r22,0x0
    8884:	07 ff ff 82 	l.jal 868c <fdt_offset_ptr>
    8888:	e0 ae b0 02 	l.sub r5,r14,r22
    888c:	bc 0b 00 00 	l.sfeqi r11,0x0
    8890:	10 00 00 06 	l.bf 88a8 <fdt_next_tag+0x150>
    8894:	9d ce 00 03 	l.addi r14,r14,0x3
		return FDT_END; /* premature end */

	*nextoffset = FDT_TAGALIGN(offset);
    8898:	9c 60 ff fc 	l.addi r3,r0,0xfffffffc
    889c:	e1 ce 18 03 	l.and r14,r14,r3
	return tag;
    88a0:	00 00 00 03 	l.j 88ac <fdt_next_tag+0x154>
    88a4:	d4 10 70 00 	l.sw 0x0(r16),r14
	default:
		return FDT_END;
	}

	if (!fdt_offset_ptr(fdt, startoffset, offset - startoffset))
		return FDT_END; /* premature end */
    88a8:	9c 40 00 09 	l.addi r2,r0,0x9

	*nextoffset = FDT_TAGALIGN(offset);
	return tag;
}
    88ac:	9c 21 00 1c 	l.addi r1,r1,0x1c
    88b0:	a9 62 00 00 	l.ori r11,r2,0x0
    88b4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    88b8:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    88bc:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    88c0:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    88c4:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    88c8:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    88cc:	44 00 48 00 	l.jr r9
    88d0:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

000088d4 <_fdt_check_node_offset>:

int _fdt_check_node_offset(const void *fdt, int offset)
{
    88d4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    88d8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    88dc:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	if ((offset < 0) || (offset % FDT_TAGSIZE)
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_BEGIN_NODE))
		return -FDT_ERR_BADOFFSET;
    88e0:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
	return tag;
}

int _fdt_check_node_offset(const void *fdt, int offset)
{
	if ((offset < 0) || (offset % FDT_TAGSIZE)
    88e4:	bd 84 00 00 	l.sfltsi r4,0x0
    88e8:	10 00 00 0c 	l.bf 8918 <_fdt_check_node_offset+0x44>
    88ec:	d4 01 20 00 	l.sw 0x0(r1),r4
    88f0:	a4 a4 00 03 	l.andi r5,r4,0x3
    88f4:	bc 25 00 00 	l.sfnei r5,0x0
    88f8:	10 00 00 08 	l.bf 8918 <_fdt_check_node_offset+0x44>
    88fc:	15 00 00 00 	l.nop 0x0
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_BEGIN_NODE))
    8900:	07 ff ff 96 	l.jal 8758 <fdt_next_tag>
    8904:	a8 a1 00 00 	l.ori r5,r1,0x0
    8908:	bc 2b 00 01 	l.sfnei r11,0x1
    890c:	10 00 00 03 	l.bf 8918 <_fdt_check_node_offset+0x44>
    8910:	15 00 00 00 	l.nop 0x0
		return -FDT_ERR_BADOFFSET;

	return offset;
    8914:	84 41 00 00 	l.lwz r2,0x0(r1)
}
    8918:	9c 21 00 0c 	l.addi r1,r1,0xc
    891c:	a9 62 00 00 	l.ori r11,r2,0x0
    8920:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8924:	44 00 48 00 	l.jr r9
    8928:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000892c <_fdt_check_prop_offset>:

int _fdt_check_prop_offset(const void *fdt, int offset)
{
    892c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    8930:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8934:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	if ((offset < 0) || (offset % FDT_TAGSIZE)
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_PROP))
		return -FDT_ERR_BADOFFSET;
    8938:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
	return offset;
}

int _fdt_check_prop_offset(const void *fdt, int offset)
{
	if ((offset < 0) || (offset % FDT_TAGSIZE)
    893c:	bd 84 00 00 	l.sfltsi r4,0x0
    8940:	10 00 00 0c 	l.bf 8970 <_fdt_check_prop_offset+0x44>
    8944:	d4 01 20 00 	l.sw 0x0(r1),r4
    8948:	a4 a4 00 03 	l.andi r5,r4,0x3
    894c:	bc 25 00 00 	l.sfnei r5,0x0
    8950:	10 00 00 08 	l.bf 8970 <_fdt_check_prop_offset+0x44>
    8954:	15 00 00 00 	l.nop 0x0
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_PROP))
    8958:	07 ff ff 80 	l.jal 8758 <fdt_next_tag>
    895c:	a8 a1 00 00 	l.ori r5,r1,0x0
    8960:	bc 2b 00 03 	l.sfnei r11,0x3
    8964:	10 00 00 03 	l.bf 8970 <_fdt_check_prop_offset+0x44>
    8968:	15 00 00 00 	l.nop 0x0
		return -FDT_ERR_BADOFFSET;

	return offset;
    896c:	84 41 00 00 	l.lwz r2,0x0(r1)
}
    8970:	9c 21 00 0c 	l.addi r1,r1,0xc
    8974:	a9 62 00 00 	l.ori r11,r2,0x0
    8978:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    897c:	44 00 48 00 	l.jr r9
    8980:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00008984 <fdt_next_node>:

int fdt_next_node(const void *fdt, int offset, int *depth)
{
    8984:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    8988:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    898c:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
	int nextoffset = 0;
    8990:	9c 40 00 00 	l.addi r2,r0,0x0

	return offset;
}

int fdt_next_node(const void *fdt, int offset, int *depth)
{
    8994:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8998:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    899c:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
    89a0:	aa 43 00 00 	l.ori r18,r3,0x0
	int nextoffset = 0;
    89a4:	d4 01 10 00 	l.sw 0x0(r1),r2
	uint32_t tag;

	if (offset >= 0)
    89a8:	e5 84 10 00 	l.sflts r4,r2
    89ac:	10 00 00 08 	l.bf 89cc <fdt_next_node+0x48>
    89b0:	a9 c5 00 00 	l.ori r14,r5,0x0
		if ((nextoffset = _fdt_check_node_offset(fdt, offset)) < 0)
    89b4:	07 ff ff c8 	l.jal 88d4 <_fdt_check_node_offset>
    89b8:	15 00 00 00 	l.nop 0x0
    89bc:	d4 01 58 00 	l.sw 0x0(r1),r11
    89c0:	bd 8b 00 00 	l.sfltsi r11,0x0
    89c4:	10 00 00 2c 	l.bf 8a74 <fdt_next_node+0xf0>
    89c8:	a8 4b 00 00 	l.ori r2,r11,0x0
			return nextoffset;

	do {
		offset = nextoffset;
    89cc:	84 41 00 00 	l.lwz r2,0x0(r1)
		tag = fdt_next_tag(fdt, offset, &nextoffset);
    89d0:	a8 72 00 00 	l.ori r3,r18,0x0
    89d4:	a8 82 00 00 	l.ori r4,r2,0x0
    89d8:	07 ff ff 60 	l.jal 8758 <fdt_next_tag>
    89dc:	a8 a1 00 00 	l.ori r5,r1,0x0

		switch (tag) {
    89e0:	bc 0b 00 02 	l.sfeqi r11,0x2
    89e4:	10 00 00 0c 	l.bf 8a14 <fdt_next_node+0x90>
    89e8:	bc 0b 00 09 	l.sfeqi r11,0x9
    89ec:	10 00 00 14 	l.bf 8a3c <fdt_next_node+0xb8>
    89f0:	bc 0b 00 01 	l.sfeqi r11,0x1
    89f4:	0f ff ff f6 	l.bnf 89cc <fdt_next_node+0x48>
    89f8:	bc 0e 00 00 	l.sfeqi r14,0x0
		case FDT_PROP:
		case FDT_NOP:
			break;

		case FDT_BEGIN_NODE:
			if (depth)
    89fc:	10 00 00 1e 	l.bf 8a74 <fdt_next_node+0xf0>
    8a00:	15 00 00 00 	l.nop 0x0
				(*depth)++;
    8a04:	84 6e 00 00 	l.lwz r3,0x0(r14)
    8a08:	9c 63 00 01 	l.addi r3,r3,0x1
    8a0c:	00 00 00 1a 	l.j 8a74 <fdt_next_node+0xf0>
    8a10:	d4 0e 18 00 	l.sw 0x0(r14),r3
			break;

		case FDT_END_NODE:
			if (depth && ((--(*depth)) < 0))
    8a14:	bc 0e 00 00 	l.sfeqi r14,0x0
    8a18:	13 ff ff ee 	l.bf 89d0 <fdt_next_node+0x4c>
    8a1c:	84 41 00 00 	l.lwz r2,0x0(r1)
    8a20:	84 4e 00 00 	l.lwz r2,0x0(r14)
    8a24:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    8a28:	bd 62 00 00 	l.sfgesi r2,0x0
    8a2c:	13 ff ff e8 	l.bf 89cc <fdt_next_node+0x48>
    8a30:	d4 0e 10 00 	l.sw 0x0(r14),r2
				return nextoffset;
    8a34:	00 00 00 10 	l.j 8a74 <fdt_next_node+0xf0>
    8a38:	84 41 00 00 	l.lwz r2,0x0(r1)
			break;

		case FDT_END:
			if ((nextoffset >= 0)
    8a3c:	84 41 00 00 	l.lwz r2,0x0(r1)
    8a40:	bd 62 00 00 	l.sfgesi r2,0x0
    8a44:	10 00 00 0b 	l.bf 8a70 <fdt_next_node+0xec>
    8a48:	e0 60 70 02 	l.sub r3,r0,r14
			    || ((nextoffset == -FDT_ERR_TRUNCATED) && !depth))
    8a4c:	e1 ce 18 04 	l.or r14,r14,r3
    8a50:	bd 8e 00 00 	l.sfltsi r14,0x0
    8a54:	10 00 00 08 	l.bf 8a74 <fdt_next_node+0xf0>
    8a58:	ac 62 ff f8 	l.xori r3,r2,0xfffffff8
    8a5c:	e0 80 18 02 	l.sub r4,r0,r3
    8a60:	e0 64 18 04 	l.or r3,r4,r3
    8a64:	bd 83 00 00 	l.sfltsi r3,0x0
    8a68:	10 00 00 03 	l.bf 8a74 <fdt_next_node+0xf0>
    8a6c:	15 00 00 00 	l.nop 0x0
				return -FDT_ERR_NOTFOUND;
    8a70:	9c 40 ff ff 	l.addi r2,r0,0xffffffff
				return nextoffset;
		}
	} while (tag != FDT_BEGIN_NODE);

	return offset;
}
    8a74:	9c 21 00 18 	l.addi r1,r1,0x18
    8a78:	a9 62 00 00 	l.ori r11,r2,0x0
    8a7c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8a80:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    8a84:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    8a88:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    8a8c:	44 00 48 00 	l.jr r9
    8a90:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00008a94 <fdt_first_subnode>:

int fdt_first_subnode(const void *fdt, int offset)
{
    8a94:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    8a98:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8a9c:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	int depth = 0;
    8aa0:	9c 40 00 00 	l.addi r2,r0,0x0

	offset = fdt_next_node(fdt, offset, &depth);
    8aa4:	a8 a1 00 00 	l.ori r5,r1,0x0
    8aa8:	07 ff ff b7 	l.jal 8984 <fdt_next_node>
    8aac:	d4 01 10 00 	l.sw 0x0(r1),r2
	if (offset < 0 || depth != 1)
    8ab0:	e5 8b 10 00 	l.sflts r11,r2
    8ab4:	10 00 00 05 	l.bf 8ac8 <fdt_first_subnode+0x34>
    8ab8:	84 61 00 00 	l.lwz r3,0x0(r1)
    8abc:	bc 03 00 01 	l.sfeqi r3,0x1
    8ac0:	10 00 00 03 	l.bf 8acc <fdt_first_subnode+0x38>
    8ac4:	15 00 00 00 	l.nop 0x0
		return -FDT_ERR_NOTFOUND;
    8ac8:	9d 60 ff ff 	l.addi r11,r0,0xffffffff

	return offset;
}
    8acc:	9c 21 00 0c 	l.addi r1,r1,0xc
    8ad0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8ad4:	44 00 48 00 	l.jr r9
    8ad8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00008adc <fdt_next_subnode>:

int fdt_next_subnode(const void *fdt, int offset)
{
    8adc:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    8ae0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8ae4:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    8ae8:	a8 43 00 00 	l.ori r2,r3,0x0
    8aec:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
	int depth = 1;
    8af0:	9c 60 00 01 	l.addi r3,r0,0x1
    8af4:	d4 01 18 00 	l.sw 0x0(r1),r3
	/*
	 * With respect to the parent, the depth of the next subnode will be
	 * the same as the last.
	 */
	do {
		offset = fdt_next_node(fdt, offset, &depth);
    8af8:	a8 62 00 00 	l.ori r3,r2,0x0
    8afc:	07 ff ff a2 	l.jal 8984 <fdt_next_node>
    8b00:	a8 a1 00 00 	l.ori r5,r1,0x0
		if (offset < 0 || depth < 1)
    8b04:	bd 8b 00 00 	l.sfltsi r11,0x0
    8b08:	10 00 00 0a 	l.bf 8b30 <fdt_next_subnode+0x54>
    8b0c:	a8 8b 00 00 	l.ori r4,r11,0x0
    8b10:	84 61 00 00 	l.lwz r3,0x0(r1)
    8b14:	bd a3 00 00 	l.sflesi r3,0x0
    8b18:	10 00 00 06 	l.bf 8b30 <fdt_next_subnode+0x54>
    8b1c:	bc 23 00 01 	l.sfnei r3,0x1
			return -FDT_ERR_NOTFOUND;
	} while (depth > 1);
    8b20:	13 ff ff f6 	l.bf 8af8 <fdt_next_subnode+0x1c>
    8b24:	15 00 00 00 	l.nop 0x0

	return offset;
}
    8b28:	00 00 00 04 	l.j 8b38 <fdt_next_subnode+0x5c>
    8b2c:	9c 21 00 10 	l.addi r1,r1,0x10
	 * the same as the last.
	 */
	do {
		offset = fdt_next_node(fdt, offset, &depth);
		if (offset < 0 || depth < 1)
			return -FDT_ERR_NOTFOUND;
    8b30:	9c 80 ff ff 	l.addi r4,r0,0xffffffff
	} while (depth > 1);

	return offset;
}
    8b34:	9c 21 00 10 	l.addi r1,r1,0x10
    8b38:	a9 64 00 00 	l.ori r11,r4,0x0
    8b3c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8b40:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    8b44:	44 00 48 00 	l.jr r9
    8b48:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00008b4c <_fdt_find_string>:

const char *_fdt_find_string(const char *strtab, int tabsize, const char *s)
{
    8b4c:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    8b50:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    8b54:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    8b58:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    8b5c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8b60:	a8 43 00 00 	l.ori r2,r3,0x0
    8b64:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	int len = strlen(s) + 1;
    8b68:	a8 65 00 00 	l.ori r3,r5,0x0

	return offset;
}

const char *_fdt_find_string(const char *strtab, int tabsize, const char *s)
{
    8b6c:	aa 44 00 00 	l.ori r18,r4,0x0
	int len = strlen(s) + 1;
    8b70:	07 ff fd 65 	l.jal 8104 <strlen>
    8b74:	aa 05 00 00 	l.ori r16,r5,0x0
    8b78:	9d cb 00 01 	l.addi r14,r11,0x1
	const char *last = strtab + tabsize - len;
    8b7c:	e2 52 70 02 	l.sub r18,r18,r14
	const char *p;

	for (p = strtab; p <= last; p++)
    8b80:	00 00 00 09 	l.j 8ba4 <_fdt_find_string+0x58>
    8b84:	e2 42 90 00 	l.add r18,r2,r18
		if (memcmp(p, s, len) == 0)
    8b88:	a8 90 00 00 	l.ori r4,r16,0x0
    8b8c:	07 ff fe 0b 	l.jal 83b8 <memcmp>
    8b90:	a8 ae 00 00 	l.ori r5,r14,0x0
    8b94:	bc 0b 00 00 	l.sfeqi r11,0x0
    8b98:	10 00 00 07 	l.bf 8bb4 <_fdt_find_string+0x68>
    8b9c:	15 00 00 00 	l.nop 0x0
{
	int len = strlen(s) + 1;
	const char *last = strtab + tabsize - len;
	const char *p;

	for (p = strtab; p <= last; p++)
    8ba0:	9c 42 00 01 	l.addi r2,r2,0x1
    8ba4:	e4 a2 90 00 	l.sfleu r2,r18
    8ba8:	13 ff ff f8 	l.bf 8b88 <_fdt_find_string+0x3c>
    8bac:	a8 62 00 00 	l.ori r3,r2,0x0
		if (memcmp(p, s, len) == 0)
			return p;
	return NULL;
    8bb0:	9c 40 00 00 	l.addi r2,r0,0x0
}
    8bb4:	9c 21 00 14 	l.addi r1,r1,0x14
    8bb8:	a9 62 00 00 	l.ori r11,r2,0x0
    8bbc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8bc0:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    8bc4:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    8bc8:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    8bcc:	44 00 48 00 	l.jr r9
    8bd0:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00008bd4 <fdt_move>:

int fdt_move(const void *fdt, void *buf, int bufsize)
{
    8bd4:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    8bd8:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    8bdc:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    8be0:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    8be4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8be8:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    8bec:	a9 c3 00 00 	l.ori r14,r3,0x0
    8bf0:	aa 44 00 00 	l.ori r18,r4,0x0
	FDT_CHECK_HEADER(fdt);
    8bf4:	07 ff fe 61 	l.jal 8578 <fdt_check_header>
    8bf8:	aa 05 00 00 	l.ori r16,r5,0x0
    8bfc:	bc 2b 00 00 	l.sfnei r11,0x0
    8c00:	10 00 00 20 	l.bf 8c80 <fdt_move+0xac>
    8c04:	a8 4b 00 00 	l.ori r2,r11,0x0

	if (fdt_totalsize(fdt) > bufsize)
    8c08:	9c ce 00 04 	l.addi r6,r14,0x4
    8c0c:	9c a0 00 00 	l.addi r5,r0,0x0
    8c10:	8d 66 00 00 	l.lbz r11,0x0(r6)
    8c14:	8d 06 00 01 	l.lbz r8,0x1(r6)
    8c18:	8c e6 00 02 	l.lbz r7,0x2(r6)
    8c1c:	b8 6b 00 18 	l.slli r3,r11,0x18
    8c20:	8c c6 00 03 	l.lbz r6,0x3(r6)
    8c24:	b8 88 00 10 	l.slli r4,r8,0x10
    8c28:	e0 66 18 04 	l.or r3,r6,r3
    8c2c:	e0 63 20 04 	l.or r3,r3,r4
    8c30:	b8 87 00 08 	l.slli r4,r7,0x8
    8c34:	e0 63 20 04 	l.or r3,r3,r4
    8c38:	b8 90 00 9f 	l.srai r4,r16,0x1f
    8c3c:	e4 25 20 00 	l.sfne r5,r4
    8c40:	10 00 00 04 	l.bf 8c50 <fdt_move+0x7c>
    8c44:	e4 43 80 00 	l.sfgtu r3,r16
    8c48:	10 00 00 0d 	l.bf 8c7c <fdt_move+0xa8>
    8c4c:	15 00 00 00 	l.nop 0x0
		return -FDT_ERR_NOSPACE;

	memmove(buf, fdt, fdt_totalsize(fdt));
    8c50:	b9 6b 00 18 	l.slli r11,r11,0x18
    8c54:	b9 08 00 10 	l.slli r8,r8,0x10
    8c58:	b8 e7 00 08 	l.slli r7,r7,0x8
    8c5c:	e0 c6 58 04 	l.or r6,r6,r11
    8c60:	a8 72 00 00 	l.ori r3,r18,0x0
    8c64:	e0 a6 40 04 	l.or r5,r6,r8
    8c68:	a8 8e 00 00 	l.ori r4,r14,0x0
    8c6c:	07 ff fd b0 	l.jal 832c <memmove>
    8c70:	e0 a5 38 04 	l.or r5,r5,r7
	return 0;
    8c74:	00 00 00 04 	l.j 8c84 <fdt_move+0xb0>
    8c78:	9c 21 00 14 	l.addi r1,r1,0x14
int fdt_move(const void *fdt, void *buf, int bufsize)
{
	FDT_CHECK_HEADER(fdt);

	if (fdt_totalsize(fdt) > bufsize)
		return -FDT_ERR_NOSPACE;
    8c7c:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd

	memmove(buf, fdt, fdt_totalsize(fdt));
	return 0;
}
    8c80:	9c 21 00 14 	l.addi r1,r1,0x14
    8c84:	a9 62 00 00 	l.ori r11,r2,0x0
    8c88:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8c8c:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    8c90:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    8c94:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    8c98:	44 00 48 00 	l.jr r9
    8c9c:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00008ca0 <fdt64_to_cpu>:
{
	return (__force fdt32_t)CPU_TO_FDT32(x);
}

static inline uint64_t fdt64_to_cpu(fdt64_t x)
{
    8ca0:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    8ca4:	d4 01 18 00 	l.sw 0x0(r1),r3
    8ca8:	d4 01 20 04 	l.sw 0x4(r1),r4
	return (__force uint64_t)CPU_TO_FDT64(x);
    8cac:	8d 61 00 00 	l.lbz r11,0x0(r1)
    8cb0:	8c a1 00 01 	l.lbz r5,0x1(r1)
    8cb4:	b9 6b 00 18 	l.slli r11,r11,0x18
    8cb8:	b8 a5 00 10 	l.slli r5,r5,0x10
    8cbc:	8d 81 00 04 	l.lbz r12,0x4(r1)
    8cc0:	e1 6b 28 04 	l.or r11,r11,r5
    8cc4:	8c a1 00 02 	l.lbz r5,0x2(r1)
    8cc8:	8c c1 00 05 	l.lbz r6,0x5(r1)
    8ccc:	b9 8c 00 18 	l.slli r12,r12,0x18
    8cd0:	b8 a5 00 08 	l.slli r5,r5,0x8
    8cd4:	8c 61 00 06 	l.lbz r3,0x6(r1)
    8cd8:	a4 84 00 ff 	l.andi r4,r4,0xff
    8cdc:	b8 c6 00 10 	l.slli r6,r6,0x10
    8ce0:	e0 84 60 04 	l.or r4,r4,r12
    8ce4:	e1 6b 28 04 	l.or r11,r11,r5
    8ce8:	b8 63 00 08 	l.slli r3,r3,0x8
    8cec:	8c a1 00 03 	l.lbz r5,0x3(r1)
    8cf0:	e1 84 30 04 	l.or r12,r4,r6
}
    8cf4:	e1 6b 28 04 	l.or r11,r11,r5
    8cf8:	e1 8c 18 04 	l.or r12,r12,r3
    8cfc:	44 00 48 00 	l.jr r9
    8d00:	9c 21 00 08 	l.addi r1,r1,0x8

00008d04 <_fdt_offset_ptr>:
    8d04:	9c a3 00 08 	l.addi r5,r3,0x8
    8d08:	8c e5 00 00 	l.lbz r7,0x0(r5)
    8d0c:	8c c5 00 03 	l.lbz r6,0x3(r5)
    8d10:	b8 e7 00 18 	l.slli r7,r7,0x18
    8d14:	e0 e6 38 04 	l.or r7,r6,r7
    8d18:	8c c5 00 01 	l.lbz r6,0x1(r5)
    8d1c:	b8 c6 00 10 	l.slli r6,r6,0x10
    8d20:	e0 e7 30 04 	l.or r7,r7,r6
    8d24:	8c c5 00 02 	l.lbz r6,0x2(r5)
    8d28:	b8 c6 00 08 	l.slli r6,r6,0x8
    8d2c:	e0 a7 30 04 	l.or r5,r7,r6
    8d30:	e0 85 20 00 	l.add r4,r5,r4
}
    8d34:	44 00 48 00 	l.jr r9
    8d38:	e1 63 20 00 	l.add r11,r3,r4

00008d3c <_fdt_mem_rsv>:

static inline const struct fdt_reserve_entry *_fdt_mem_rsv(const void *fdt, int n)
{
	const struct fdt_reserve_entry *rsv_table =
		(const struct fdt_reserve_entry *)
		((const char *)fdt + fdt_off_mem_rsvmap(fdt));
    8d3c:	9c a3 00 10 	l.addi r5,r3,0x10

	return rsv_table + n;
    8d40:	b8 84 00 04 	l.slli r4,r4,0x4
}

static inline const struct fdt_reserve_entry *_fdt_mem_rsv(const void *fdt, int n)
{
	const struct fdt_reserve_entry *rsv_table =
		(const struct fdt_reserve_entry *)
    8d44:	8c e5 00 00 	l.lbz r7,0x0(r5)
    8d48:	8c c5 00 03 	l.lbz r6,0x3(r5)
    8d4c:	b8 e7 00 18 	l.slli r7,r7,0x18
    8d50:	e0 e6 38 04 	l.or r7,r6,r7
    8d54:	8c c5 00 01 	l.lbz r6,0x1(r5)
    8d58:	b8 c6 00 10 	l.slli r6,r6,0x10
    8d5c:	e0 e7 30 04 	l.or r7,r7,r6
    8d60:	8c c5 00 02 	l.lbz r6,0x2(r5)
    8d64:	b8 c6 00 08 	l.slli r6,r6,0x8
		((const char *)fdt + fdt_off_mem_rsvmap(fdt));
    8d68:	e0 a7 30 04 	l.or r5,r7,r6
	return (void *)(uintptr_t)_fdt_offset_ptr(fdt, offset);
}

static inline const struct fdt_reserve_entry *_fdt_mem_rsv(const void *fdt, int n)
{
	const struct fdt_reserve_entry *rsv_table =
    8d6c:	e0 63 28 00 	l.add r3,r3,r5
		(const struct fdt_reserve_entry *)
		((const char *)fdt + fdt_off_mem_rsvmap(fdt));

	return rsv_table + n;
}
    8d70:	44 00 48 00 	l.jr r9
    8d74:	e1 63 20 00 	l.add r11,r3,r4

00008d78 <_nextprop>:
		i++;
	return i;
}

static int _nextprop(const void *fdt, int offset)
{
    8d78:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    8d7c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    8d80:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8d84:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    8d88:	a9 c3 00 00 	l.ori r14,r3,0x0
    8d8c:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    8d90:	a8 44 00 00 	l.ori r2,r4,0x0
	uint32_t tag;
	int nextoffset;

	do {
		tag = fdt_next_tag(fdt, offset, &nextoffset);
    8d94:	a8 6e 00 00 	l.ori r3,r14,0x0
    8d98:	a8 82 00 00 	l.ori r4,r2,0x0
    8d9c:	07 ff fe 6f 	l.jal 8758 <fdt_next_tag>
    8da0:	a8 a1 00 00 	l.ori r5,r1,0x0

		switch (tag) {
    8da4:	bc 0b 00 03 	l.sfeqi r11,0x3
    8da8:	10 00 00 0f 	l.bf 8de4 <_nextprop+0x6c>
    8dac:	bc 0b 00 09 	l.sfeqi r11,0x9
    8db0:	0c 00 00 07 	l.bnf 8dcc <_nextprop+0x54>
    8db4:	84 41 00 00 	l.lwz r2,0x0(r1)
		case FDT_END:
			if (nextoffset >= 0)
    8db8:	bd 62 00 00 	l.sfgesi r2,0x0
    8dbc:	10 00 00 09 	l.bf 8de0 <_nextprop+0x68>
    8dc0:	15 00 00 00 	l.nop 0x0
		}
		offset = nextoffset;
	} while (tag == FDT_NOP);

	return -FDT_ERR_NOTFOUND;
}
    8dc4:	00 00 00 09 	l.j 8de8 <_nextprop+0x70>
    8dc8:	9c 21 00 14 	l.addi r1,r1,0x14

		case FDT_PROP:
			return offset;
		}
		offset = nextoffset;
	} while (tag == FDT_NOP);
    8dcc:	bc 0b 00 04 	l.sfeqi r11,0x4
    8dd0:	13 ff ff f2 	l.bf 8d98 <_nextprop+0x20>
    8dd4:	a8 6e 00 00 	l.ori r3,r14,0x0

	return -FDT_ERR_NOTFOUND;
    8dd8:	00 00 00 03 	l.j 8de4 <_nextprop+0x6c>
    8ddc:	9c 40 ff ff 	l.addi r2,r0,0xffffffff
		tag = fdt_next_tag(fdt, offset, &nextoffset);

		switch (tag) {
		case FDT_END:
			if (nextoffset >= 0)
				return -FDT_ERR_BADSTRUCTURE;
    8de0:	9c 40 ff f5 	l.addi r2,r0,0xfffffff5
		}
		offset = nextoffset;
	} while (tag == FDT_NOP);

	return -FDT_ERR_NOTFOUND;
}
    8de4:	9c 21 00 14 	l.addi r1,r1,0x14
    8de8:	a9 62 00 00 	l.ori r11,r2,0x0
    8dec:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8df0:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    8df4:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    8df8:	44 00 48 00 	l.jr r9
    8dfc:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00008e00 <fdt_string>:
		return 0;
}

const char *fdt_string(const void *fdt, int stroffset)
{
	return (const char *)fdt + fdt_off_dt_strings(fdt) + stroffset;
    8e00:	9c a3 00 0c 	l.addi r5,r3,0xc
    8e04:	8c e5 00 00 	l.lbz r7,0x0(r5)
    8e08:	8c c5 00 03 	l.lbz r6,0x3(r5)
    8e0c:	b8 e7 00 18 	l.slli r7,r7,0x18
    8e10:	e0 e6 38 04 	l.or r7,r6,r7
    8e14:	8c c5 00 01 	l.lbz r6,0x1(r5)
    8e18:	b8 c6 00 10 	l.slli r6,r6,0x10
    8e1c:	e0 e7 30 04 	l.or r7,r7,r6
    8e20:	8c c5 00 02 	l.lbz r6,0x2(r5)
    8e24:	b8 c6 00 08 	l.slli r6,r6,0x8
    8e28:	e0 a7 30 04 	l.or r5,r7,r6
    8e2c:	e0 85 20 00 	l.add r4,r5,r4
}
    8e30:	44 00 48 00 	l.jr r9
    8e34:	e1 63 20 00 	l.add r11,r3,r4

00008e38 <fdt_get_mem_rsv>:

	return (strlen(p) == len) && (memcmp(p, s, len) == 0);
}

int fdt_get_mem_rsv(const void *fdt, int n, uint64_t *address, uint64_t *size)
{
    8e38:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    8e3c:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    8e40:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    8e44:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
    8e48:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
    8e4c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8e50:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
    8e54:	aa 03 00 00 	l.ori r16,r3,0x0
    8e58:	a9 c4 00 00 	l.ori r14,r4,0x0
    8e5c:	aa 85 00 00 	l.ori r20,r5,0x0
	FDT_CHECK_HEADER(fdt);
    8e60:	07 ff fd c6 	l.jal 8578 <fdt_check_header>
    8e64:	aa 46 00 00 	l.ori r18,r6,0x0
    8e68:	bc 2b 00 00 	l.sfnei r11,0x0
    8e6c:	10 00 00 14 	l.bf 8ebc <fdt_get_mem_rsv+0x84>
    8e70:	a8 4b 00 00 	l.ori r2,r11,0x0
	*address = fdt64_to_cpu(_fdt_mem_rsv(fdt, n)->address);
    8e74:	a8 70 00 00 	l.ori r3,r16,0x0
    8e78:	07 ff ff b1 	l.jal 8d3c <_fdt_mem_rsv>
    8e7c:	a8 8e 00 00 	l.ori r4,r14,0x0
    8e80:	84 6b 00 00 	l.lwz r3,0x0(r11)
    8e84:	84 8b 00 04 	l.lwz r4,0x4(r11)
    8e88:	07 ff ff 86 	l.jal 8ca0 <fdt64_to_cpu>
    8e8c:	15 00 00 00 	l.nop 0x0
	*size = fdt64_to_cpu(_fdt_mem_rsv(fdt, n)->size);
    8e90:	a8 70 00 00 	l.ori r3,r16,0x0
}

int fdt_get_mem_rsv(const void *fdt, int n, uint64_t *address, uint64_t *size)
{
	FDT_CHECK_HEADER(fdt);
	*address = fdt64_to_cpu(_fdt_mem_rsv(fdt, n)->address);
    8e94:	d4 14 58 00 	l.sw 0x0(r20),r11
    8e98:	d4 14 60 04 	l.sw 0x4(r20),r12
	*size = fdt64_to_cpu(_fdt_mem_rsv(fdt, n)->size);
    8e9c:	07 ff ff a8 	l.jal 8d3c <_fdt_mem_rsv>
    8ea0:	a8 8e 00 00 	l.ori r4,r14,0x0
    8ea4:	84 6b 00 08 	l.lwz r3,0x8(r11)
    8ea8:	84 8b 00 0c 	l.lwz r4,0xc(r11)
    8eac:	07 ff ff 7d 	l.jal 8ca0 <fdt64_to_cpu>
    8eb0:	15 00 00 00 	l.nop 0x0
    8eb4:	d4 12 58 00 	l.sw 0x0(r18),r11
    8eb8:	d4 12 60 04 	l.sw 0x4(r18),r12
	return 0;
}
    8ebc:	9c 21 00 18 	l.addi r1,r1,0x18
    8ec0:	a9 62 00 00 	l.ori r11,r2,0x0
    8ec4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8ec8:	84 41 ff e8 	l.lwz r2,0xffffffe8(r1)
    8ecc:	85 c1 ff ec 	l.lwz r14,0xffffffec(r1)
    8ed0:	86 01 ff f0 	l.lwz r16,0xfffffff0(r1)
    8ed4:	86 41 ff f4 	l.lwz r18,0xfffffff4(r1)
    8ed8:	44 00 48 00 	l.jr r9
    8edc:	86 81 ff f8 	l.lwz r20,0xfffffff8(r1)

00008ee0 <fdt_num_mem_rsv>:

int fdt_num_mem_rsv(const void *fdt)
{
    8ee0:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    8ee4:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    8ee8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8eec:	a9 c3 00 00 	l.ori r14,r3,0x0
    8ef0:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    8ef4:	9c 40 00 00 	l.addi r2,r0,0x0
	int i = 0;

	while (fdt64_to_cpu(_fdt_mem_rsv(fdt, i)->size) != 0)
    8ef8:	a8 6e 00 00 	l.ori r3,r14,0x0
    8efc:	07 ff ff 90 	l.jal 8d3c <_fdt_mem_rsv>
    8f00:	a8 82 00 00 	l.ori r4,r2,0x0
    8f04:	84 6b 00 08 	l.lwz r3,0x8(r11)
    8f08:	84 8b 00 0c 	l.lwz r4,0xc(r11)
    8f0c:	07 ff ff 65 	l.jal 8ca0 <fdt64_to_cpu>
    8f10:	15 00 00 00 	l.nop 0x0
    8f14:	e1 6b 60 04 	l.or r11,r11,r12
    8f18:	bc 2b 00 00 	l.sfnei r11,0x0
    8f1c:	13 ff ff f7 	l.bf 8ef8 <fdt_num_mem_rsv+0x18>
    8f20:	9c 42 00 01 	l.addi r2,r2,0x1
    8f24:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
		i++;
	return i;
}
    8f28:	9c 21 00 0c 	l.addi r1,r1,0xc
    8f2c:	a9 62 00 00 	l.ori r11,r2,0x0
    8f30:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8f34:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    8f38:	44 00 48 00 	l.jr r9
    8f3c:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00008f40 <fdt_subnode_offset_namelen>:
	return -FDT_ERR_NOTFOUND;
}

int fdt_subnode_offset_namelen(const void *fdt, int offset,
			       const char *name, int namelen)
{
    8f40:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
    8f44:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
    8f48:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
    8f4c:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
    8f50:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8f54:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
    8f58:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
    8f5c:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
    8f60:	9c 21 ff dc 	l.addi r1,r1,0xffffffdc
    8f64:	aa 43 00 00 	l.ori r18,r3,0x0
    8f68:	a8 44 00 00 	l.ori r2,r4,0x0
    8f6c:	aa 85 00 00 	l.ori r20,r5,0x0
	int depth;

	FDT_CHECK_HEADER(fdt);
    8f70:	07 ff fd 82 	l.jal 8578 <fdt_check_header>
    8f74:	a9 c6 00 00 	l.ori r14,r6,0x0
    8f78:	bc 2b 00 00 	l.sfnei r11,0x0
    8f7c:	10 00 00 33 	l.bf 9048 <fdt_subnode_offset_namelen+0x108>
    8f80:	15 00 00 00 	l.nop 0x0

	for (depth = 0;
    8f84:	d4 01 58 00 	l.sw 0x0(r1),r11
    8f88:	00 00 00 26 	l.j 9020 <fdt_subnode_offset_namelen+0xe0>
    8f8c:	9f 0e 00 01 	l.addi r24,r14,0x1
	     (offset >= 0) && (depth >= 0);
	     offset = fdt_next_node(fdt, offset, &depth))
		if ((depth == 1)
    8f90:	10 00 00 20 	l.bf 9010 <fdt_subnode_offset_namelen+0xd0>
    8f94:	a8 82 00 00 	l.ori r4,r2,0x0
#include "libfdt_internal.h"

static int _fdt_nodename_eq(const void *fdt, int offset,
			    const char *s, int len)
{
	const char *p = fdt_offset_ptr(fdt, offset + FDT_TAGSIZE, len+1);
    8f98:	a8 72 00 00 	l.ori r3,r18,0x0
    8f9c:	9c 82 00 04 	l.addi r4,r2,0x4
    8fa0:	07 ff fd bb 	l.jal 868c <fdt_offset_ptr>
    8fa4:	a8 b8 00 00 	l.ori r5,r24,0x0

	if (! p)
    8fa8:	bc 0b 00 00 	l.sfeqi r11,0x0
    8fac:	10 00 00 18 	l.bf 900c <fdt_subnode_offset_namelen+0xcc>
    8fb0:	aa 0b 00 00 	l.ori r16,r11,0x0
		/* short match */
		return 0;

	if (memcmp(p, s, len) != 0)
    8fb4:	a8 6b 00 00 	l.ori r3,r11,0x0
    8fb8:	a8 94 00 00 	l.ori r4,r20,0x0
    8fbc:	07 ff fc ff 	l.jal 83b8 <memcmp>
    8fc0:	a8 ae 00 00 	l.ori r5,r14,0x0
    8fc4:	bc 2b 00 00 	l.sfnei r11,0x0
    8fc8:	10 00 00 12 	l.bf 9010 <fdt_subnode_offset_namelen+0xd0>
    8fcc:	a8 82 00 00 	l.ori r4,r2,0x0
		return 0;

	if (p[len] == '\0')
    8fd0:	e2 10 70 00 	l.add r16,r16,r14
    8fd4:	92 10 00 00 	l.lbs r16,0x0(r16)
    8fd8:	bc 10 00 00 	l.sfeqi r16,0x0
    8fdc:	10 00 00 1b 	l.bf 9048 <fdt_subnode_offset_namelen+0x108>
    8fe0:	a9 62 00 00 	l.ori r11,r2,0x0
		return 1;
	else if (!memchr(s, '@', len) && (p[len] == '@'))
    8fe4:	a8 74 00 00 	l.ori r3,r20,0x0
    8fe8:	9c 80 00 40 	l.addi r4,r0,0x40
    8fec:	07 ff fd 02 	l.jal 83f4 <memchr>
    8ff0:	a8 ae 00 00 	l.ori r5,r14,0x0
    8ff4:	bc 2b 00 00 	l.sfnei r11,0x0
    8ff8:	10 00 00 06 	l.bf 9010 <fdt_subnode_offset_namelen+0xd0>
    8ffc:	a8 82 00 00 	l.ori r4,r2,0x0
    9000:	bc 10 00 40 	l.sfeqi r16,0x40
    9004:	10 00 00 11 	l.bf 9048 <fdt_subnode_offset_namelen+0x108>
    9008:	a9 62 00 00 	l.ori r11,r2,0x0

	FDT_CHECK_HEADER(fdt);

	for (depth = 0;
	     (offset >= 0) && (depth >= 0);
	     offset = fdt_next_node(fdt, offset, &depth))
    900c:	a8 82 00 00 	l.ori r4,r2,0x0
    9010:	a8 72 00 00 	l.ori r3,r18,0x0
    9014:	07 ff fe 5c 	l.jal 8984 <fdt_next_node>
    9018:	a8 a1 00 00 	l.ori r5,r1,0x0
    901c:	a8 4b 00 00 	l.ori r2,r11,0x0
{
	int depth;

	FDT_CHECK_HEADER(fdt);

	for (depth = 0;
    9020:	bd 82 00 00 	l.sfltsi r2,0x0
    9024:	10 00 00 05 	l.bf 9038 <fdt_subnode_offset_namelen+0xf8>
    9028:	84 c1 00 00 	l.lwz r6,0x0(r1)
    902c:	bd 66 00 00 	l.sfgesi r6,0x0
    9030:	13 ff ff d8 	l.bf 8f90 <fdt_subnode_offset_namelen+0x50>
    9034:	bc 26 00 01 	l.sfnei r6,0x1
	     offset = fdt_next_node(fdt, offset, &depth))
		if ((depth == 1)
		    && _fdt_nodename_eq(fdt, offset, name, namelen))
			return offset;

	if (depth < 0)
    9038:	bd 66 00 00 	l.sfgesi r6,0x0
    903c:	10 00 00 03 	l.bf 9048 <fdt_subnode_offset_namelen+0x108>
    9040:	a9 62 00 00 	l.ori r11,r2,0x0
    9044:	9d 60 ff ff 	l.addi r11,r0,0xffffffff
		return -FDT_ERR_NOTFOUND;
	return offset; /* error */
}
    9048:	9c 21 00 24 	l.addi r1,r1,0x24
    904c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9050:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
    9054:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
    9058:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
    905c:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
    9060:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
    9064:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
    9068:	44 00 48 00 	l.jr r9
    906c:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)

00009070 <fdt_subnode_offset>:

int fdt_subnode_offset(const void *fdt, int parentoffset,
		       const char *name)
{
    9070:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9074:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    9078:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    907c:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    9080:	aa 03 00 00 	l.ori r16,r3,0x0
    9084:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
    9088:	a8 65 00 00 	l.ori r3,r5,0x0
	return offset; /* error */
}

int fdt_subnode_offset(const void *fdt, int parentoffset,
		       const char *name)
{
    908c:	a9 c4 00 00 	l.ori r14,r4,0x0
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
    9090:	07 ff fc 1d 	l.jal 8104 <strlen>
    9094:	a8 45 00 00 	l.ori r2,r5,0x0
}
    9098:	9c 21 00 10 	l.addi r1,r1,0x10
}

int fdt_subnode_offset(const void *fdt, int parentoffset,
		       const char *name)
{
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
    909c:	a8 70 00 00 	l.ori r3,r16,0x0
    90a0:	a8 8e 00 00 	l.ori r4,r14,0x0
    90a4:	a8 a2 00 00 	l.ori r5,r2,0x0
    90a8:	a8 cb 00 00 	l.ori r6,r11,0x0
}
    90ac:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    90b0:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    90b4:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
}

int fdt_subnode_offset(const void *fdt, int parentoffset,
		       const char *name)
{
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
    90b8:	03 ff ff a2 	l.j 8f40 <fdt_subnode_offset_namelen>
    90bc:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

000090c0 <fdt_get_name>:

	return offset;
}

const char *fdt_get_name(const void *fdt, int nodeoffset, int *len)
{
    90c0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    90c4:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    90c8:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    90cc:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    90d0:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    90d4:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    90d8:	aa 43 00 00 	l.ori r18,r3,0x0
    90dc:	aa 04 00 00 	l.ori r16,r4,0x0
	const struct fdt_node_header *nh = _fdt_offset_ptr(fdt, nodeoffset);
    90e0:	07 ff ff 09 	l.jal 8d04 <_fdt_offset_ptr>
    90e4:	a8 45 00 00 	l.ori r2,r5,0x0
	int err;

	if (((err = fdt_check_header(fdt)) != 0)
    90e8:	a8 72 00 00 	l.ori r3,r18,0x0
    90ec:	07 ff fd 23 	l.jal 8578 <fdt_check_header>
    90f0:	a9 cb 00 00 	l.ori r14,r11,0x0
    90f4:	bc 2b 00 00 	l.sfnei r11,0x0
    90f8:	10 00 00 10 	l.bf 9138 <fdt_get_name+0x78>
    90fc:	a8 cb 00 00 	l.ori r6,r11,0x0
	    || ((err = _fdt_check_node_offset(fdt, nodeoffset)) < 0))
    9100:	a8 72 00 00 	l.ori r3,r18,0x0
    9104:	07 ff fd f4 	l.jal 88d4 <_fdt_check_node_offset>
    9108:	a8 90 00 00 	l.ori r4,r16,0x0
    910c:	bd 8b 00 00 	l.sfltsi r11,0x0
    9110:	10 00 00 0a 	l.bf 9138 <fdt_get_name+0x78>
    9114:	a8 cb 00 00 	l.ori r6,r11,0x0
			goto fail;

	if (len)
    9118:	bc 02 00 00 	l.sfeqi r2,0x0
    911c:	10 00 00 05 	l.bf 9130 <fdt_get_name+0x70>
    9120:	15 00 00 00 	l.nop 0x0
		*len = strlen(nh->name);
    9124:	07 ff fb f8 	l.jal 8104 <strlen>
    9128:	9c 6e 00 04 	l.addi r3,r14,0x4
    912c:	d4 02 58 00 	l.sw 0x0(r2),r11

	return nh->name;
    9130:	00 00 00 07 	l.j 914c <fdt_get_name+0x8c>
    9134:	9d 6e 00 04 	l.addi r11,r14,0x4

 fail:
	if (len)
    9138:	bc 02 00 00 	l.sfeqi r2,0x0
    913c:	10 00 00 04 	l.bf 914c <fdt_get_name+0x8c>
    9140:	a9 62 00 00 	l.ori r11,r2,0x0
		*len = err;
    9144:	d4 02 30 00 	l.sw 0x0(r2),r6
	return NULL;
    9148:	9d 60 00 00 	l.addi r11,r0,0x0
}
    914c:	9c 21 00 14 	l.addi r1,r1,0x14
    9150:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9154:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    9158:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    915c:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    9160:	44 00 48 00 	l.jr r9
    9164:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00009168 <fdt_first_property_offset>:

int fdt_first_property_offset(const void *fdt, int nodeoffset)
{
    9168:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    916c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9170:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	int offset;

	if ((offset = _fdt_check_node_offset(fdt, nodeoffset)) < 0)
    9174:	07 ff fd d8 	l.jal 88d4 <_fdt_check_node_offset>
    9178:	a8 43 00 00 	l.ori r2,r3,0x0
    917c:	bd 8b 00 00 	l.sfltsi r11,0x0
    9180:	10 00 00 07 	l.bf 919c <fdt_first_property_offset+0x34>
    9184:	a8 8b 00 00 	l.ori r4,r11,0x0
		return offset;

	return _nextprop(fdt, offset);
}
    9188:	9c 21 00 08 	l.addi r1,r1,0x8
	int offset;

	if ((offset = _fdt_check_node_offset(fdt, nodeoffset)) < 0)
		return offset;

	return _nextprop(fdt, offset);
    918c:	a8 62 00 00 	l.ori r3,r2,0x0
}
    9190:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	int offset;

	if ((offset = _fdt_check_node_offset(fdt, nodeoffset)) < 0)
		return offset;

	return _nextprop(fdt, offset);
    9194:	03 ff fe f9 	l.j 8d78 <_nextprop>
    9198:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)
}
    919c:	9c 21 00 08 	l.addi r1,r1,0x8
    91a0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    91a4:	44 00 48 00 	l.jr r9
    91a8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000091ac <fdt_next_property_offset>:

int fdt_next_property_offset(const void *fdt, int offset)
{
    91ac:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    91b0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    91b4:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	if ((offset = _fdt_check_prop_offset(fdt, offset)) < 0)
    91b8:	07 ff fd dd 	l.jal 892c <_fdt_check_prop_offset>
    91bc:	a8 43 00 00 	l.ori r2,r3,0x0
    91c0:	bd 8b 00 00 	l.sfltsi r11,0x0
    91c4:	10 00 00 07 	l.bf 91e0 <fdt_next_property_offset+0x34>
    91c8:	a8 8b 00 00 	l.ori r4,r11,0x0
		return offset;

	return _nextprop(fdt, offset);
}
    91cc:	9c 21 00 08 	l.addi r1,r1,0x8
int fdt_next_property_offset(const void *fdt, int offset)
{
	if ((offset = _fdt_check_prop_offset(fdt, offset)) < 0)
		return offset;

	return _nextprop(fdt, offset);
    91d0:	a8 62 00 00 	l.ori r3,r2,0x0
}
    91d4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
int fdt_next_property_offset(const void *fdt, int offset)
{
	if ((offset = _fdt_check_prop_offset(fdt, offset)) < 0)
		return offset;

	return _nextprop(fdt, offset);
    91d8:	03 ff fe e8 	l.j 8d78 <_nextprop>
    91dc:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)
}
    91e0:	9c 21 00 08 	l.addi r1,r1,0x8
    91e4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    91e8:	44 00 48 00 	l.jr r9
    91ec:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000091f0 <fdt_get_property_by_offset>:

const struct fdt_property *fdt_get_property_by_offset(const void *fdt,
						      int offset,
						      int *lenp)
{
    91f0:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    91f4:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    91f8:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    91fc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9200:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    9204:	a8 45 00 00 	l.ori r2,r5,0x0
    9208:	aa 03 00 00 	l.ori r16,r3,0x0
	int err;
	const struct fdt_property *prop;

	if ((err = _fdt_check_prop_offset(fdt, offset)) < 0) {
    920c:	07 ff fd c8 	l.jal 892c <_fdt_check_prop_offset>
    9210:	a9 c4 00 00 	l.ori r14,r4,0x0
    9214:	bd 6b 00 00 	l.sfgesi r11,0x0
    9218:	10 00 00 08 	l.bf 9238 <fdt_get_property_by_offset+0x48>
    921c:	a8 ab 00 00 	l.ori r5,r11,0x0
		if (lenp)
    9220:	bc 02 00 00 	l.sfeqi r2,0x0
    9224:	10 00 00 16 	l.bf 927c <fdt_get_property_by_offset+0x8c>
    9228:	a9 62 00 00 	l.ori r11,r2,0x0
			*lenp = err;
    922c:	d4 02 28 00 	l.sw 0x0(r2),r5
		return NULL;
    9230:	00 00 00 13 	l.j 927c <fdt_get_property_by_offset+0x8c>
    9234:	9d 60 00 00 	l.addi r11,r0,0x0
	}

	prop = _fdt_offset_ptr(fdt, offset);
    9238:	a8 70 00 00 	l.ori r3,r16,0x0
    923c:	07 ff fe b2 	l.jal 8d04 <_fdt_offset_ptr>
    9240:	a8 8e 00 00 	l.ori r4,r14,0x0

	if (lenp)
    9244:	bc 02 00 00 	l.sfeqi r2,0x0
    9248:	10 00 00 0d 	l.bf 927c <fdt_get_property_by_offset+0x8c>
    924c:	9c 6b 00 04 	l.addi r3,r11,0x4
		*lenp = fdt32_to_cpu(prop->len);
    9250:	8c a3 00 00 	l.lbz r5,0x0(r3)
    9254:	8c 83 00 03 	l.lbz r4,0x3(r3)
    9258:	b8 a5 00 18 	l.slli r5,r5,0x18
    925c:	e0 a4 28 04 	l.or r5,r4,r5
    9260:	8c 83 00 01 	l.lbz r4,0x1(r3)
    9264:	b8 84 00 10 	l.slli r4,r4,0x10
    9268:	e0 a5 20 04 	l.or r5,r5,r4
    926c:	8c 83 00 02 	l.lbz r4,0x2(r3)
    9270:	b8 84 00 08 	l.slli r4,r4,0x8
    9274:	e0 65 20 04 	l.or r3,r5,r4
    9278:	d4 02 18 00 	l.sw 0x0(r2),r3

	return prop;
}
    927c:	9c 21 00 10 	l.addi r1,r1,0x10
    9280:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9284:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    9288:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    928c:	44 00 48 00 	l.jr r9
    9290:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00009294 <fdt_get_property_namelen>:

const struct fdt_property *fdt_get_property_namelen(const void *fdt,
						    int offset,
						    const char *name,
						    int namelen, int *lenp)
{
    9294:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9298:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
    929c:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
    92a0:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
    92a4:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
    92a8:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
    92ac:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
    92b0:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
    92b4:	9c 21 ff e0 	l.addi r1,r1,0xffffffe0
    92b8:	aa 03 00 00 	l.ori r16,r3,0x0
    92bc:	ab 05 00 00 	l.ori r24,r5,0x0
    92c0:	aa c6 00 00 	l.ori r22,r6,0x0
	for (offset = fdt_first_property_offset(fdt, offset);
    92c4:	07 ff ff a9 	l.jal 9168 <fdt_first_property_offset>
    92c8:	aa 87 00 00 	l.ori r20,r7,0x0
	     (offset >= 0);
	     (offset = fdt_next_property_offset(fdt, offset))) {
    92cc:	00 00 00 38 	l.j 93ac <fdt_get_property_namelen+0x118>
    92d0:	a9 cb 00 00 	l.ori r14,r11,0x0
		const struct fdt_property *prop;

		if (!(prop = fdt_get_property_by_offset(fdt, offset, lenp))) {
    92d4:	a8 8e 00 00 	l.ori r4,r14,0x0
    92d8:	07 ff ff c6 	l.jal 91f0 <fdt_get_property_by_offset>
    92dc:	a8 b4 00 00 	l.ori r5,r20,0x0
    92e0:	bc 0b 00 00 	l.sfeqi r11,0x0
    92e4:	10 00 00 1e 	l.bf 935c <fdt_get_property_namelen+0xc8>
    92e8:	a8 4b 00 00 	l.ori r2,r11,0x0
			offset = -FDT_ERR_INTERNAL;
			break;
		}
		if (_fdt_string_eq(fdt, fdt32_to_cpu(prop->nameoff),
    92ec:	9d 0b 00 08 	l.addi r8,r11,0x8
    92f0:	8c e8 00 00 	l.lbz r7,0x0(r8)
    92f4:	8c 68 00 03 	l.lbz r3,0x3(r8)
    92f8:	b8 e7 00 18 	l.slli r7,r7,0x18
    92fc:	8c c8 00 02 	l.lbz r6,0x2(r8)
    9300:	e0 e3 38 04 	l.or r7,r3,r7
    9304:	8c 68 00 01 	l.lbz r3,0x1(r8)
    9308:	b8 63 00 10 	l.slli r3,r3,0x10
    930c:	b8 c6 00 08 	l.slli r6,r6,0x8
    9310:	e0 e7 18 04 	l.or r7,r7,r3
}

static int _fdt_string_eq(const void *fdt, int stroffset,
			  const char *s, int len)
{
	const char *p = fdt_string(fdt, stroffset);
    9314:	a8 70 00 00 	l.ori r3,r16,0x0
    9318:	07 ff fe ba 	l.jal 8e00 <fdt_string>
    931c:	e0 87 30 04 	l.or r4,r7,r6

	return (strlen(p) == len) && (memcmp(p, s, len) == 0);
    9320:	a8 6b 00 00 	l.ori r3,r11,0x0
    9324:	07 ff fb 78 	l.jal 8104 <strlen>
    9328:	aa 4b 00 00 	l.ori r18,r11,0x0
    932c:	e4 2b b0 00 	l.sfne r11,r22
    9330:	10 00 00 1c 	l.bf 93a0 <fdt_get_property_namelen+0x10c>
    9334:	a8 70 00 00 	l.ori r3,r16,0x0
    9338:	a8 72 00 00 	l.ori r3,r18,0x0
    933c:	a8 98 00 00 	l.ori r4,r24,0x0
    9340:	07 ff fc 1e 	l.jal 83b8 <memcmp>
    9344:	a8 b6 00 00 	l.ori r5,r22,0x0
    9348:	bc 0b 00 00 	l.sfeqi r11,0x0
    934c:	10 00 00 0a 	l.bf 9374 <fdt_get_property_namelen+0xe0>
    9350:	a8 70 00 00 	l.ori r3,r16,0x0
    9354:	00 00 00 13 	l.j 93a0 <fdt_get_property_namelen+0x10c>
    9358:	15 00 00 00 	l.nop 0x0
	     (offset >= 0);
	     (offset = fdt_next_property_offset(fdt, offset))) {
		const struct fdt_property *prop;

		if (!(prop = fdt_get_property_by_offset(fdt, offset, lenp))) {
			offset = -FDT_ERR_INTERNAL;
    935c:	9d c0 ff f3 	l.addi r14,r0,0xfffffff3
		if (_fdt_string_eq(fdt, fdt32_to_cpu(prop->nameoff),
				   name, namelen))
			return prop;
	}

	if (lenp)
    9360:	bc 14 00 00 	l.sfeqi r20,0x0
    9364:	10 00 00 04 	l.bf 9374 <fdt_get_property_namelen+0xe0>
    9368:	a8 54 00 00 	l.ori r2,r20,0x0
		*lenp = offset;
    936c:	d4 14 70 00 	l.sw 0x0(r20),r14
	return NULL;
    9370:	9c 40 00 00 	l.addi r2,r0,0x0
}
    9374:	9c 21 00 20 	l.addi r1,r1,0x20
    9378:	a9 62 00 00 	l.ori r11,r2,0x0
    937c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9380:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
    9384:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
    9388:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
    938c:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
    9390:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
    9394:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
    9398:	44 00 48 00 	l.jr r9
    939c:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)
						    const char *name,
						    int namelen, int *lenp)
{
	for (offset = fdt_first_property_offset(fdt, offset);
	     (offset >= 0);
	     (offset = fdt_next_property_offset(fdt, offset))) {
    93a0:	07 ff ff 83 	l.jal 91ac <fdt_next_property_offset>
    93a4:	a8 8e 00 00 	l.ori r4,r14,0x0
    93a8:	a9 cb 00 00 	l.ori r14,r11,0x0
const struct fdt_property *fdt_get_property_namelen(const void *fdt,
						    int offset,
						    const char *name,
						    int namelen, int *lenp)
{
	for (offset = fdt_first_property_offset(fdt, offset);
    93ac:	bd 6e 00 00 	l.sfgesi r14,0x0
    93b0:	13 ff ff c9 	l.bf 92d4 <fdt_get_property_namelen+0x40>
    93b4:	a8 70 00 00 	l.ori r3,r16,0x0
		if (_fdt_string_eq(fdt, fdt32_to_cpu(prop->nameoff),
				   name, namelen))
			return prop;
	}

	if (lenp)
    93b8:	03 ff ff eb 	l.j 9364 <fdt_get_property_namelen+0xd0>
    93bc:	bc 14 00 00 	l.sfeqi r20,0x0

000093c0 <fdt_get_property>:
}

const struct fdt_property *fdt_get_property(const void *fdt,
					    int nodeoffset,
					    const char *name, int *lenp)
{
    93c0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    93c4:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    93c8:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    93cc:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    93d0:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    93d4:	aa 03 00 00 	l.ori r16,r3,0x0
    93d8:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	return fdt_get_property_namelen(fdt, nodeoffset, name,
					strlen(name), lenp);
    93dc:	a8 65 00 00 	l.ori r3,r5,0x0
}

const struct fdt_property *fdt_get_property(const void *fdt,
					    int nodeoffset,
					    const char *name, int *lenp)
{
    93e0:	aa 46 00 00 	l.ori r18,r6,0x0
    93e4:	a9 c4 00 00 	l.ori r14,r4,0x0
	return fdt_get_property_namelen(fdt, nodeoffset, name,
					strlen(name), lenp);
    93e8:	07 ff fb 47 	l.jal 8104 <strlen>
    93ec:	a8 45 00 00 	l.ori r2,r5,0x0
}
    93f0:	9c 21 00 14 	l.addi r1,r1,0x14

const struct fdt_property *fdt_get_property(const void *fdt,
					    int nodeoffset,
					    const char *name, int *lenp)
{
	return fdt_get_property_namelen(fdt, nodeoffset, name,
    93f4:	a8 70 00 00 	l.ori r3,r16,0x0
    93f8:	a8 8e 00 00 	l.ori r4,r14,0x0
    93fc:	a8 a2 00 00 	l.ori r5,r2,0x0
    9400:	a8 f2 00 00 	l.ori r7,r18,0x0
    9404:	a8 cb 00 00 	l.ori r6,r11,0x0
					strlen(name), lenp);
}
    9408:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    940c:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    9410:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    9414:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)

const struct fdt_property *fdt_get_property(const void *fdt,
					    int nodeoffset,
					    const char *name, int *lenp)
{
	return fdt_get_property_namelen(fdt, nodeoffset, name,
    9418:	03 ff ff 9f 	l.j 9294 <fdt_get_property_namelen>
    941c:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00009420 <fdt_getprop_namelen>:
					strlen(name), lenp);
}

const void *fdt_getprop_namelen(const void *fdt, int nodeoffset,
				const char *name, int namelen, int *lenp)
{
    9420:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	const struct fdt_property *prop;

	prop = fdt_get_property_namelen(fdt, nodeoffset, name, namelen, lenp);
    9424:	07 ff ff 9c 	l.jal 9294 <fdt_get_property_namelen>
    9428:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	if (! prop)
    942c:	bc 0b 00 00 	l.sfeqi r11,0x0
    9430:	10 00 00 03 	l.bf 943c <fdt_getprop_namelen+0x1c>
    9434:	15 00 00 00 	l.nop 0x0
		return NULL;

	return prop->data;
    9438:	9d 6b 00 0c 	l.addi r11,r11,0xc
}
    943c:	9c 21 00 04 	l.addi r1,r1,0x4
    9440:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9444:	44 00 48 00 	l.jr r9
    9448:	15 00 00 00 	l.nop 0x0

0000944c <fdt_getprop_by_offset>:

const void *fdt_getprop_by_offset(const void *fdt, int offset,
				  const char **namep, int *lenp)
{
    944c:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    9450:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    9454:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    9458:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    945c:	a9 c5 00 00 	l.ori r14,r5,0x0
    9460:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
	const struct fdt_property *prop;

	prop = fdt_get_property_by_offset(fdt, offset, lenp);
    9464:	a8 a6 00 00 	l.ori r5,r6,0x0
    9468:	07 ff ff 62 	l.jal 91f0 <fdt_get_property_by_offset>
    946c:	aa 03 00 00 	l.ori r16,r3,0x0
    9470:	a8 4b 00 00 	l.ori r2,r11,0x0
	if (!prop)
    9474:	bc 02 00 00 	l.sfeqi r2,0x0
    9478:	10 00 00 12 	l.bf 94c0 <fdt_getprop_by_offset+0x74>
    947c:	bc 0e 00 00 	l.sfeqi r14,0x0
		return NULL;
	if (namep)
    9480:	10 00 00 0f 	l.bf 94bc <fdt_getprop_by_offset+0x70>
    9484:	9c c2 00 08 	l.addi r6,r2,0x8
		*namep = fdt_string(fdt, fdt32_to_cpu(prop->nameoff));
    9488:	8c a6 00 00 	l.lbz r5,0x0(r6)
    948c:	8c 66 00 03 	l.lbz r3,0x3(r6)
    9490:	b8 a5 00 18 	l.slli r5,r5,0x18
    9494:	8c 86 00 02 	l.lbz r4,0x2(r6)
    9498:	e0 a3 28 04 	l.or r5,r3,r5
    949c:	8c 66 00 01 	l.lbz r3,0x1(r6)
    94a0:	b8 63 00 10 	l.slli r3,r3,0x10
    94a4:	b8 84 00 08 	l.slli r4,r4,0x8
    94a8:	e0 a5 18 04 	l.or r5,r5,r3
    94ac:	a8 70 00 00 	l.ori r3,r16,0x0
    94b0:	07 ff fe 54 	l.jal 8e00 <fdt_string>
    94b4:	e0 85 20 04 	l.or r4,r5,r4
    94b8:	d4 0e 58 00 	l.sw 0x0(r14),r11
	return prop->data;
    94bc:	9d 62 00 0c 	l.addi r11,r2,0xc
}
    94c0:	9c 21 00 10 	l.addi r1,r1,0x10
    94c4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    94c8:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    94cc:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    94d0:	44 00 48 00 	l.jr r9
    94d4:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

000094d8 <fdt_getprop>:

const void *fdt_getprop(const void *fdt, int nodeoffset,
			const char *name, int *lenp)
{
    94d8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    94dc:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    94e0:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    94e4:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    94e8:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    94ec:	aa 03 00 00 	l.ori r16,r3,0x0
    94f0:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	return fdt_getprop_namelen(fdt, nodeoffset, name, strlen(name), lenp);
    94f4:	a8 65 00 00 	l.ori r3,r5,0x0
	return prop->data;
}

const void *fdt_getprop(const void *fdt, int nodeoffset,
			const char *name, int *lenp)
{
    94f8:	aa 46 00 00 	l.ori r18,r6,0x0
    94fc:	a9 c4 00 00 	l.ori r14,r4,0x0
	return fdt_getprop_namelen(fdt, nodeoffset, name, strlen(name), lenp);
    9500:	07 ff fb 01 	l.jal 8104 <strlen>
    9504:	a8 45 00 00 	l.ori r2,r5,0x0
}
    9508:	9c 21 00 14 	l.addi r1,r1,0x14
}

const void *fdt_getprop(const void *fdt, int nodeoffset,
			const char *name, int *lenp)
{
	return fdt_getprop_namelen(fdt, nodeoffset, name, strlen(name), lenp);
    950c:	a8 70 00 00 	l.ori r3,r16,0x0
    9510:	a8 8e 00 00 	l.ori r4,r14,0x0
    9514:	a8 a2 00 00 	l.ori r5,r2,0x0
    9518:	a8 f2 00 00 	l.ori r7,r18,0x0
    951c:	a8 cb 00 00 	l.ori r6,r11,0x0
}
    9520:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9524:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    9528:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    952c:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
}

const void *fdt_getprop(const void *fdt, int nodeoffset,
			const char *name, int *lenp)
{
	return fdt_getprop_namelen(fdt, nodeoffset, name, strlen(name), lenp);
    9530:	03 ff ff bc 	l.j 9420 <fdt_getprop_namelen>
    9534:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00009538 <fdt_getprop_u32>:
}

int fdt_getprop_u32(const void *fdt, int nodeoffset,
		const char *prop, uint32_t *val)
{
    9538:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    953c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9540:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    9544:	a8 46 00 00 	l.ori r2,r6,0x0
	int len;
	const fdt32_t *data = NULL;

	data = fdt_getprop(fdt, nodeoffset, prop, &len);
    9548:	07 ff ff e4 	l.jal 94d8 <fdt_getprop>
    954c:	a8 c1 00 00 	l.ori r6,r1,0x0
	if ((data == NULL) || (len == 0) || (len % 4 != 0)) {
    9550:	bc 0b 00 00 	l.sfeqi r11,0x0
    9554:	10 00 00 25 	l.bf 95e8 <fdt_getprop_u32+0xb0>
    9558:	9c a0 ff f3 	l.addi r5,r0,0xfffffff3
    955c:	84 61 00 00 	l.lwz r3,0x0(r1)
    9560:	bc 03 00 00 	l.sfeqi r3,0x0
    9564:	10 00 00 21 	l.bf 95e8 <fdt_getprop_u32+0xb0>
    9568:	15 00 00 00 	l.nop 0x0
    956c:	a4 83 00 03 	l.andi r4,r3,0x3
    9570:	bc 24 00 00 	l.sfnei r4,0x0
    9574:	10 00 00 1d 	l.bf 95e8 <fdt_getprop_u32+0xb0>
    9578:	bc 02 00 00 	l.sfeqi r2,0x0
		return -FDT_ERR_INTERNAL;
	}
	if (val != NULL) {
    957c:	10 00 00 17 	l.bf 95d8 <fdt_getprop_u32+0xa0>
    9580:	b8 a3 00 9f 	l.srai r5,r3,0x1f
		const uint32_t *p = data;
		int j ;
		for (j = 0, p = data; j < len/4; j++) {
    9584:	a4 a5 00 03 	l.andi r5,r5,0x3
    9588:	e0 a5 18 00 	l.add r5,r5,r3
    958c:	00 00 00 10 	l.j 95cc <fdt_getprop_u32+0x94>
    9590:	b8 a5 00 82 	l.srai r5,r5,0x2
			*val = fdt32_to_cpu(p[j]);
    9594:	8c eb 00 00 	l.lbz r7,0x0(r11)
    9598:	8c cb 00 01 	l.lbz r6,0x1(r11)
    959c:	b8 e7 00 18 	l.slli r7,r7,0x18
    95a0:	b8 c6 00 10 	l.slli r6,r6,0x10
		return -FDT_ERR_INTERNAL;
	}
	if (val != NULL) {
		const uint32_t *p = data;
		int j ;
		for (j = 0, p = data; j < len/4; j++) {
    95a4:	9c 84 00 01 	l.addi r4,r4,0x1
			*val = fdt32_to_cpu(p[j]);
    95a8:	e0 c7 30 04 	l.or r6,r7,r6
    95ac:	8c eb 00 03 	l.lbz r7,0x3(r11)
    95b0:	e0 c6 38 04 	l.or r6,r6,r7
    95b4:	8c eb 00 02 	l.lbz r7,0x2(r11)
    95b8:	b8 e7 00 08 	l.slli r7,r7,0x8
		return -FDT_ERR_INTERNAL;
	}
	if (val != NULL) {
		const uint32_t *p = data;
		int j ;
		for (j = 0, p = data; j < len/4; j++) {
    95bc:	9d 6b 00 04 	l.addi r11,r11,0x4
			*val = fdt32_to_cpu(p[j]);
    95c0:	e0 c6 38 04 	l.or r6,r6,r7
    95c4:	d4 02 30 00 	l.sw 0x0(r2),r6
			val++;
    95c8:	9c 42 00 04 	l.addi r2,r2,0x4
		return -FDT_ERR_INTERNAL;
	}
	if (val != NULL) {
		const uint32_t *p = data;
		int j ;
		for (j = 0, p = data; j < len/4; j++) {
    95cc:	e5 84 28 00 	l.sflts r4,r5
    95d0:	13 ff ff f1 	l.bf 9594 <fdt_getprop_u32+0x5c>
    95d4:	15 00 00 00 	l.nop 0x0
			*val = fdt32_to_cpu(p[j]);
			val++;
		}
	}
	return len/4;
    95d8:	b8 a3 00 9f 	l.srai r5,r3,0x1f
    95dc:	a4 a5 00 03 	l.andi r5,r5,0x3
    95e0:	e0 65 18 00 	l.add r3,r5,r3
    95e4:	b8 a3 00 82 	l.srai r5,r3,0x2
}
    95e8:	9c 21 00 0c 	l.addi r1,r1,0xc
    95ec:	a9 65 00 00 	l.ori r11,r5,0x0
    95f0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    95f4:	44 00 48 00 	l.jr r9
    95f8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000095fc <fdt_get_phandle>:

uint32_t fdt_get_phandle(const void *fdt, int nodeoffset)
{
    95fc:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    9600:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    9604:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	const fdt32_t *php;
	int len;

	/* FIXME: This is a bit sub-optimal, since we potentially scan
	 * over all the properties twice. */
	php = fdt_getprop(fdt, nodeoffset, "phandle", &len);
    9608:	18 a0 00 01 	l.movhi r5,0x1
	}
	return len/4;
}

uint32_t fdt_get_phandle(const void *fdt, int nodeoffset)
{
    960c:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
	const fdt32_t *php;
	int len;

	/* FIXME: This is a bit sub-optimal, since we potentially scan
	 * over all the properties twice. */
	php = fdt_getprop(fdt, nodeoffset, "phandle", &len);
    9610:	a8 a5 25 3f 	l.ori r5,r5,0x253f
    9614:	a8 c1 00 00 	l.ori r6,r1,0x0
	}
	return len/4;
}

uint32_t fdt_get_phandle(const void *fdt, int nodeoffset)
{
    9618:	a9 c3 00 00 	l.ori r14,r3,0x0
	const fdt32_t *php;
	int len;

	/* FIXME: This is a bit sub-optimal, since we potentially scan
	 * over all the properties twice. */
	php = fdt_getprop(fdt, nodeoffset, "phandle", &len);
    961c:	07 ff ff af 	l.jal 94d8 <fdt_getprop>
    9620:	a8 44 00 00 	l.ori r2,r4,0x0
	if (!php || (len != sizeof(*php))) {
    9624:	bc 0b 00 00 	l.sfeqi r11,0x0
    9628:	10 00 00 06 	l.bf 9640 <fdt_get_phandle+0x44>
    962c:	18 a0 00 01 	l.movhi r5,0x1
    9630:	84 61 00 00 	l.lwz r3,0x0(r1)
    9634:	bc 03 00 04 	l.sfeqi r3,0x4
    9638:	10 00 00 0e 	l.bf 9670 <fdt_get_phandle+0x74>
    963c:	15 00 00 00 	l.nop 0x0
		php = fdt_getprop(fdt, nodeoffset, "linux,phandle", &len);
    9640:	a8 6e 00 00 	l.ori r3,r14,0x0
    9644:	a8 82 00 00 	l.ori r4,r2,0x0
    9648:	a8 a5 25 39 	l.ori r5,r5,0x2539
    964c:	07 ff ff a3 	l.jal 94d8 <fdt_getprop>
    9650:	a8 c1 00 00 	l.ori r6,r1,0x0
		if (!php || (len != sizeof(*php)))
    9654:	bc 0b 00 00 	l.sfeqi r11,0x0
    9658:	10 00 00 10 	l.bf 9698 <fdt_get_phandle+0x9c>
    965c:	a8 6b 00 00 	l.ori r3,r11,0x0
    9660:	84 41 00 00 	l.lwz r2,0x0(r1)
    9664:	bc 22 00 04 	l.sfnei r2,0x4
    9668:	10 00 00 0c 	l.bf 9698 <fdt_get_phandle+0x9c>
    966c:	9c 60 00 00 	l.addi r3,r0,0x0
			return 0;
	}

	return fdt32_to_cpu(*php);
    9670:	8c 6b 00 00 	l.lbz r3,0x0(r11)
    9674:	8c 4b 00 03 	l.lbz r2,0x3(r11)
    9678:	b8 63 00 18 	l.slli r3,r3,0x18
    967c:	e0 62 18 04 	l.or r3,r2,r3
    9680:	8c 4b 00 01 	l.lbz r2,0x1(r11)
    9684:	b8 42 00 10 	l.slli r2,r2,0x10
    9688:	e0 63 10 04 	l.or r3,r3,r2
    968c:	8c 4b 00 02 	l.lbz r2,0x2(r11)
    9690:	b8 42 00 08 	l.slli r2,r2,0x8
    9694:	e0 63 10 04 	l.or r3,r3,r2
}
    9698:	9c 21 00 10 	l.addi r1,r1,0x10
    969c:	a9 63 00 00 	l.ori r11,r3,0x0
    96a0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    96a4:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    96a8:	44 00 48 00 	l.jr r9
    96ac:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

000096b0 <fdt_get_alias_namelen>:

const char *fdt_get_alias_namelen(const void *fdt,
				  const char *name, int namelen)
{
    96b0:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    96b4:	aa 04 00 00 	l.ori r16,r4,0x0
	int aliasoffset;

	aliasoffset = fdt_path_offset(fdt, "/aliases");
    96b8:	18 80 00 01 	l.movhi r4,0x1
	return fdt32_to_cpu(*php);
}

const char *fdt_get_alias_namelen(const void *fdt,
				  const char *name, int namelen)
{
    96bc:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    96c0:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    96c4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	int aliasoffset;

	aliasoffset = fdt_path_offset(fdt, "/aliases");
    96c8:	a8 84 25 47 	l.ori r4,r4,0x2547
	return fdt32_to_cpu(*php);
}

const char *fdt_get_alias_namelen(const void *fdt,
				  const char *name, int namelen)
{
    96cc:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    96d0:	a8 43 00 00 	l.ori r2,r3,0x0
	int aliasoffset;

	aliasoffset = fdt_path_offset(fdt, "/aliases");
    96d4:	04 00 00 16 	l.jal 972c <fdt_path_offset>
    96d8:	a9 c5 00 00 	l.ori r14,r5,0x0
	if (aliasoffset < 0)
    96dc:	bd 8b 00 00 	l.sfltsi r11,0x0
    96e0:	10 00 00 0c 	l.bf 9710 <fdt_get_alias_namelen+0x60>
    96e4:	a8 8b 00 00 	l.ori r4,r11,0x0
		return NULL;

	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
}
    96e8:	9c 21 00 10 	l.addi r1,r1,0x10

	aliasoffset = fdt_path_offset(fdt, "/aliases");
	if (aliasoffset < 0)
		return NULL;

	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
    96ec:	a8 62 00 00 	l.ori r3,r2,0x0
    96f0:	a8 b0 00 00 	l.ori r5,r16,0x0
    96f4:	a8 ce 00 00 	l.ori r6,r14,0x0
    96f8:	9c e0 00 00 	l.addi r7,r0,0x0
}
    96fc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9700:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    9704:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)

	aliasoffset = fdt_path_offset(fdt, "/aliases");
	if (aliasoffset < 0)
		return NULL;

	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
    9708:	03 ff ff 46 	l.j 9420 <fdt_getprop_namelen>
    970c:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)
}
    9710:	9c 21 00 10 	l.addi r1,r1,0x10
    9714:	9d 60 00 00 	l.addi r11,r0,0x0
    9718:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    971c:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    9720:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    9724:	44 00 48 00 	l.jr r9
    9728:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

0000972c <fdt_path_offset>:
{
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
}

int fdt_path_offset(const void *fdt, const char *path)
{
    972c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9730:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    9734:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    9738:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
    973c:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    9740:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
    9744:	aa 03 00 00 	l.ori r16,r3,0x0
    9748:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
	const char *end = path + strlen(path);
    974c:	a8 64 00 00 	l.ori r3,r4,0x0
    9750:	07 ff fa 6d 	l.jal 8104 <strlen>
    9754:	a8 44 00 00 	l.ori r2,r4,0x0
	const char *p = path;
	int offset = 0;

	FDT_CHECK_HEADER(fdt);
    9758:	a8 70 00 00 	l.ori r3,r16,0x0
    975c:	07 ff fb 87 	l.jal 8578 <fdt_check_header>
    9760:	aa 8b 00 00 	l.ori r20,r11,0x0
    9764:	bc 2b 00 00 	l.sfnei r11,0x0
    9768:	10 00 00 38 	l.bf 9848 <fdt_path_offset+0x11c>
    976c:	a8 cb 00 00 	l.ori r6,r11,0x0

	/* see if we have an alias */
	if (*path != '/') {
    9770:	90 62 00 00 	l.lbs r3,0x0(r2)
    9774:	bc 03 00 2f 	l.sfeqi r3,0x2f
    9778:	10 00 00 2d 	l.bf 982c <fdt_path_offset+0x100>
    977c:	e2 82 a0 00 	l.add r20,r2,r20
		const char *q = strchr(path, '/');
    9780:	a8 62 00 00 	l.ori r3,r2,0x0
    9784:	07 ff fa ae 	l.jal 823c <strchr>
    9788:	9c 80 00 2f 	l.addi r4,r0,0x2f

		if (!q)
    978c:	bc 0b 00 00 	l.sfeqi r11,0x0
    9790:	0c 00 00 03 	l.bnf 979c <fdt_path_offset+0x70>
    9794:	a9 cb 00 00 	l.ori r14,r11,0x0
			q = end;
    9798:	a9 d4 00 00 	l.ori r14,r20,0x0

		p = fdt_get_alias_namelen(fdt, p, q - p);
    979c:	a8 82 00 00 	l.ori r4,r2,0x0
    97a0:	a8 70 00 00 	l.ori r3,r16,0x0
    97a4:	07 ff ff c3 	l.jal 96b0 <fdt_get_alias_namelen>
    97a8:	e0 ae 10 02 	l.sub r5,r14,r2
		if (!p)
			return -FDT_ERR_BADPATH;
    97ac:	9c c0 ff fb 	l.addi r6,r0,0xfffffffb

		if (!q)
			q = end;

		p = fdt_get_alias_namelen(fdt, p, q - p);
		if (!p)
    97b0:	bc 0b 00 00 	l.sfeqi r11,0x0
    97b4:	10 00 00 25 	l.bf 9848 <fdt_path_offset+0x11c>
    97b8:	a8 8b 00 00 	l.ori r4,r11,0x0
			return -FDT_ERR_BADPATH;
		offset = fdt_path_offset(fdt, p);
    97bc:	07 ff ff dc 	l.jal 972c <fdt_path_offset>
    97c0:	a8 70 00 00 	l.ori r3,r16,0x0
    97c4:	00 00 00 1c 	l.j 9834 <fdt_path_offset+0x108>
    97c8:	a8 4b 00 00 	l.ori r2,r11,0x0
	}

	while (*p) {
		const char *q;

		while (*p == '/')
    97cc:	90 6e 00 00 	l.lbs r3,0x0(r14)
    97d0:	bc 03 00 2f 	l.sfeqi r3,0x2f
    97d4:	13 ff ff fe 	l.bf 97cc <fdt_path_offset+0xa0>
    97d8:	9d ce 00 01 	l.addi r14,r14,0x1
    97dc:	9d ce ff ff 	l.addi r14,r14,0xffffffff
			p++;
		if (! *p)
    97e0:	bc 03 00 00 	l.sfeqi r3,0x0
    97e4:	10 00 00 18 	l.bf 9844 <fdt_path_offset+0x118>
    97e8:	a8 6e 00 00 	l.ori r3,r14,0x0
			return offset;
		q = strchr(p, '/');
    97ec:	07 ff fa 94 	l.jal 823c <strchr>
    97f0:	9c 80 00 2f 	l.addi r4,r0,0x2f
		if (! q)
    97f4:	bc 0b 00 00 	l.sfeqi r11,0x0
    97f8:	0c 00 00 03 	l.bnf 9804 <fdt_path_offset+0xd8>
    97fc:	aa 4b 00 00 	l.ori r18,r11,0x0
			q = end;
    9800:	aa 54 00 00 	l.ori r18,r20,0x0

		offset = fdt_subnode_offset_namelen(fdt, offset, p, q-p);
    9804:	a8 82 00 00 	l.ori r4,r2,0x0
    9808:	a8 70 00 00 	l.ori r3,r16,0x0
    980c:	a8 ae 00 00 	l.ori r5,r14,0x0
    9810:	07 ff fd cc 	l.jal 8f40 <fdt_subnode_offset_namelen>
    9814:	e0 d2 70 02 	l.sub r6,r18,r14
		if (offset < 0)
    9818:	bd 8b 00 00 	l.sfltsi r11,0x0
    981c:	10 00 00 0a 	l.bf 9844 <fdt_path_offset+0x118>
    9820:	a8 4b 00 00 	l.ori r2,r11,0x0
			return offset;

		p = q;
    9824:	00 00 00 04 	l.j 9834 <fdt_path_offset+0x108>
    9828:	a9 d2 00 00 	l.ori r14,r18,0x0
	int offset = 0;

	FDT_CHECK_HEADER(fdt);

	/* see if we have an alias */
	if (*path != '/') {
    982c:	a9 c2 00 00 	l.ori r14,r2,0x0

int fdt_path_offset(const void *fdt, const char *path)
{
	const char *end = path + strlen(path);
	const char *p = path;
	int offset = 0;
    9830:	a8 4b 00 00 	l.ori r2,r11,0x0
		offset = fdt_path_offset(fdt, p);

		p = q;
	}

	while (*p) {
    9834:	90 6e 00 00 	l.lbs r3,0x0(r14)
    9838:	bc 03 00 00 	l.sfeqi r3,0x0
    983c:	0f ff ff e6 	l.bnf 97d4 <fdt_path_offset+0xa8>
    9840:	bc 03 00 2f 	l.sfeqi r3,0x2f
    9844:	a8 c2 00 00 	l.ori r6,r2,0x0

		p = q;
	}

	return offset;
}
    9848:	9c 21 00 18 	l.addi r1,r1,0x18
    984c:	a9 66 00 00 	l.ori r11,r6,0x0
    9850:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9854:	84 41 ff e8 	l.lwz r2,0xffffffe8(r1)
    9858:	85 c1 ff ec 	l.lwz r14,0xffffffec(r1)
    985c:	86 01 ff f0 	l.lwz r16,0xfffffff0(r1)
    9860:	86 41 ff f4 	l.lwz r18,0xfffffff4(r1)
    9864:	44 00 48 00 	l.jr r9
    9868:	86 81 ff f8 	l.lwz r20,0xfffffff8(r1)

0000986c <fdt_get_alias>:

	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
}

const char *fdt_get_alias(const void *fdt, const char *name)
{
    986c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9870:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    9874:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    9878:	a9 c3 00 00 	l.ori r14,r3,0x0
    987c:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	return fdt_get_alias_namelen(fdt, name, strlen(name));
    9880:	a8 64 00 00 	l.ori r3,r4,0x0
    9884:	07 ff fa 20 	l.jal 8104 <strlen>
    9888:	a8 44 00 00 	l.ori r2,r4,0x0
}
    988c:	9c 21 00 0c 	l.addi r1,r1,0xc
	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
}

const char *fdt_get_alias(const void *fdt, const char *name)
{
	return fdt_get_alias_namelen(fdt, name, strlen(name));
    9890:	a8 6e 00 00 	l.ori r3,r14,0x0
    9894:	a8 82 00 00 	l.ori r4,r2,0x0
    9898:	a8 ab 00 00 	l.ori r5,r11,0x0
}
    989c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    98a0:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
}

const char *fdt_get_alias(const void *fdt, const char *name)
{
	return fdt_get_alias_namelen(fdt, name, strlen(name));
    98a4:	03 ff ff 83 	l.j 96b0 <fdt_get_alias_namelen>
    98a8:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

000098ac <fdt_get_path>:
}

int fdt_get_path(const void *fdt, int nodeoffset, char *buf, int buflen)
{
    98ac:	d7 e1 17 d4 	l.sw 0xffffffd4(r1),r2
    98b0:	d7 e1 a7 e4 	l.sw 0xffffffe4(r1),r20
    98b4:	d7 e1 c7 ec 	l.sw 0xffffffec(r1),r24
    98b8:	d7 e1 d7 f0 	l.sw 0xfffffff0(r1),r26
    98bc:	d7 e1 e7 f4 	l.sw 0xfffffff4(r1),r28
    98c0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    98c4:	d7 e1 77 d8 	l.sw 0xffffffd8(r1),r14
    98c8:	d7 e1 87 dc 	l.sw 0xffffffdc(r1),r16
    98cc:	d7 e1 97 e0 	l.sw 0xffffffe0(r1),r18
    98d0:	d7 e1 b7 e8 	l.sw 0xffffffe8(r1),r22
    98d4:	d7 e1 f7 f8 	l.sw 0xfffffff8(r1),r30
    98d8:	9c 21 ff cc 	l.addi r1,r1,0xffffffcc
    98dc:	ab 03 00 00 	l.ori r24,r3,0x0
    98e0:	ab 44 00 00 	l.ori r26,r4,0x0
    98e4:	aa 85 00 00 	l.ori r20,r5,0x0
	int pdepth = 0, p = 0;
	int offset, depth, namelen;
	const char *name;

	FDT_CHECK_HEADER(fdt);
    98e8:	07 ff fb 24 	l.jal 8578 <fdt_check_header>
    98ec:	ab 86 00 00 	l.ori r28,r6,0x0
    98f0:	bc 2b 00 00 	l.sfnei r11,0x0
    98f4:	10 00 00 53 	l.bf 9a40 <fdt_get_path+0x194>
    98f8:	a8 4b 00 00 	l.ori r2,r11,0x0

	if (buflen < 2)
    98fc:	bd bc 00 01 	l.sflesi r28,0x1
    9900:	10 00 00 4f 	l.bf 9a3c <fdt_get_path+0x190>
    9904:	aa 0b 00 00 	l.ori r16,r11,0x0
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
    9908:	d4 01 58 04 	l.sw 0x4(r1),r11
	return fdt_get_alias_namelen(fdt, name, strlen(name));
}

int fdt_get_path(const void *fdt, int nodeoffset, char *buf, int buflen)
{
	int pdepth = 0, p = 0;
    990c:	a9 cb 00 00 	l.ori r14,r11,0x0
    9910:	aa 4b 00 00 	l.ori r18,r11,0x0
	FDT_CHECK_HEADER(fdt);

	if (buflen < 2)
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
    9914:	00 00 00 38 	l.j 99f4 <fdt_get_path+0x148>
    9918:	9f c1 00 04 	l.addi r30,r1,0x4
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
		while (pdepth > depth) {
			do {
				p--;
			} while (buf[p-1] != '/');
    991c:	90 87 00 00 	l.lbs r4,0x0(r7)
	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
		while (pdepth > depth) {
			do {
				p--;
    9920:	9d ce ff ff 	l.addi r14,r14,0xffffffff
			} while (buf[p-1] != '/');
    9924:	bc 24 00 2f 	l.sfnei r4,0x2f
    9928:	13 ff ff fd 	l.bf 991c <fdt_get_path+0x70>
    992c:	9c e7 ff ff 	l.addi r7,r7,0xffffffff
			pdepth--;
    9930:	9e 52 ff ff 	l.addi r18,r18,0xffffffff
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
		while (pdepth > depth) {
    9934:	e5 b2 18 00 	l.sfles r18,r3
    9938:	10 00 00 04 	l.bf 9948 <fdt_get_path+0x9c>
    993c:	9c ee ff fe 	l.addi r7,r14,0xfffffffe
const char *fdt_get_alias(const void *fdt, const char *name)
{
	return fdt_get_alias_namelen(fdt, name, strlen(name));
}

int fdt_get_path(const void *fdt, int nodeoffset, char *buf, int buflen)
    9940:	03 ff ff f7 	l.j 991c <fdt_get_path+0x70>
    9944:	e0 f4 38 00 	l.add r7,r20,r7
				p--;
			} while (buf[p-1] != '/');
			pdepth--;
		}

		if (pdepth >= depth) {
    9948:	e5 92 18 00 	l.sflts r18,r3
    994c:	10 00 00 19 	l.bf 99b0 <fdt_get_path+0x104>
    9950:	e4 30 d0 00 	l.sfne r16,r26
			name = fdt_get_name(fdt, offset, &namelen);
    9954:	a8 78 00 00 	l.ori r3,r24,0x0
    9958:	a8 90 00 00 	l.ori r4,r16,0x0
    995c:	07 ff fd d9 	l.jal 90c0 <fdt_get_name>
    9960:	a8 a1 00 00 	l.ori r5,r1,0x0
			if (!name)
    9964:	bc 2b 00 00 	l.sfnei r11,0x0
    9968:	10 00 00 04 	l.bf 9978 <fdt_get_path+0xcc>
    996c:	84 e1 00 00 	l.lwz r7,0x0(r1)
				return namelen;
    9970:	00 00 00 34 	l.j 9a40 <fdt_get_path+0x194>
    9974:	a8 47 00 00 	l.ori r2,r7,0x0
			if ((p + namelen + 1) <= buflen) {
    9978:	e2 ce 38 00 	l.add r22,r14,r7
    997c:	e5 76 e0 00 	l.sfges r22,r28
    9980:	10 00 00 0c 	l.bf 99b0 <fdt_get_path+0x104>
    9984:	e4 30 d0 00 	l.sfne r16,r26
				memcpy(buf + p, name, namelen);
    9988:	e0 74 70 00 	l.add r3,r20,r14
    998c:	a8 8b 00 00 	l.ori r4,r11,0x0
    9990:	a8 a7 00 00 	l.ori r5,r7,0x0
    9994:	07 ff fa 37 	l.jal 8270 <memcpy>
    9998:	9d d6 00 01 	l.addi r14,r22,0x1
				p += namelen;
				buf[p++] = '/';
    999c:	e0 74 b0 00 	l.add r3,r20,r22
    99a0:	9c 80 00 2f 	l.addi r4,r0,0x2f
				pdepth++;
    99a4:	9e 52 00 01 	l.addi r18,r18,0x1
			if (!name)
				return namelen;
			if ((p + namelen + 1) <= buflen) {
				memcpy(buf + p, name, namelen);
				p += namelen;
				buf[p++] = '/';
    99a8:	d8 03 20 00 	l.sb 0x0(r3),r4
				pdepth++;
			}
		}

		if (offset == nodeoffset) {
    99ac:	e4 30 d0 00 	l.sfne r16,r26
    99b0:	10 00 00 0d 	l.bf 99e4 <fdt_get_path+0x138>
    99b4:	a8 90 00 00 	l.ori r4,r16,0x0
			if (pdepth < (depth + 1))
    99b8:	84 61 00 04 	l.lwz r3,0x4(r1)
    99bc:	e5 63 90 00 	l.sfges r3,r18
    99c0:	10 00 00 1f 	l.bf 9a3c <fdt_get_path+0x190>
    99c4:	bd ae 00 01 	l.sflesi r14,0x1
				return -FDT_ERR_NOSPACE;

			if (p > 1) /* special case so that root path is "/", not "" */
    99c8:	10 00 00 03 	l.bf 99d4 <fdt_get_path+0x128>
    99cc:	15 00 00 00 	l.nop 0x0
				p--;
    99d0:	9d ce ff ff 	l.addi r14,r14,0xffffffff
			buf[p] = '\0';
    99d4:	e1 d4 70 00 	l.add r14,r20,r14
    99d8:	9c 60 00 00 	l.addi r3,r0,0x0
			return 0;
    99dc:	00 00 00 19 	l.j 9a40 <fdt_get_path+0x194>
    99e0:	d8 0e 18 00 	l.sb 0x0(r14),r3
	if (buflen < 2)
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
    99e4:	a8 78 00 00 	l.ori r3,r24,0x0
    99e8:	07 ff fb e7 	l.jal 8984 <fdt_next_node>
    99ec:	a8 be 00 00 	l.ori r5,r30,0x0
    99f0:	aa 0b 00 00 	l.ori r16,r11,0x0

	if (buflen < 2)
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
    99f4:	e5 b0 d0 00 	l.sfles r16,r26
    99f8:	10 00 00 03 	l.bf 9a04 <fdt_get_path+0x158>
    99fc:	9c 60 00 01 	l.addi r3,r0,0x1
    9a00:	9c 60 00 00 	l.addi r3,r0,0x0
	FDT_CHECK_HEADER(fdt);

	if (buflen < 2)
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
    9a04:	a4 63 00 ff 	l.andi r3,r3,0xff
    9a08:	bc 03 00 00 	l.sfeqi r3,0x0
    9a0c:	10 00 00 04 	l.bf 9a1c <fdt_get_path+0x170>
    9a10:	bd 90 00 00 	l.sfltsi r16,0x0
    9a14:	0f ff ff c8 	l.bnf 9934 <fdt_get_path+0x88>
    9a18:	84 61 00 04 	l.lwz r3,0x4(r1)
			buf[p] = '\0';
			return 0;
		}
	}

	if ((offset == -FDT_ERR_NOTFOUND) || (offset >= 0))
    9a1c:	bd 70 ff ff 	l.sfgesi r16,0xffffffff
    9a20:	10 00 00 08 	l.bf 9a40 <fdt_get_path+0x194>
    9a24:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
		return -FDT_ERR_BADOFFSET;
	else if (offset == -FDT_ERR_BADOFFSET)
    9a28:	bc 30 ff fc 	l.sfnei r16,0xfffffffc
    9a2c:	10 00 00 05 	l.bf 9a40 <fdt_get_path+0x194>
    9a30:	a8 50 00 00 	l.ori r2,r16,0x0
		return -FDT_ERR_BADSTRUCTURE;
    9a34:	00 00 00 03 	l.j 9a40 <fdt_get_path+0x194>
    9a38:	9c 40 ff f5 	l.addi r2,r0,0xfffffff5
			}
		}

		if (offset == nodeoffset) {
			if (pdepth < (depth + 1))
				return -FDT_ERR_NOSPACE;
    9a3c:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd
		return -FDT_ERR_BADOFFSET;
	else if (offset == -FDT_ERR_BADOFFSET)
		return -FDT_ERR_BADSTRUCTURE;

	return offset; /* error from fdt_next_node() */
}
    9a40:	9c 21 00 34 	l.addi r1,r1,0x34
    9a44:	a9 62 00 00 	l.ori r11,r2,0x0
    9a48:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9a4c:	84 41 ff d4 	l.lwz r2,0xffffffd4(r1)
    9a50:	85 c1 ff d8 	l.lwz r14,0xffffffd8(r1)
    9a54:	86 01 ff dc 	l.lwz r16,0xffffffdc(r1)
    9a58:	86 41 ff e0 	l.lwz r18,0xffffffe0(r1)
    9a5c:	86 81 ff e4 	l.lwz r20,0xffffffe4(r1)
    9a60:	86 c1 ff e8 	l.lwz r22,0xffffffe8(r1)
    9a64:	87 01 ff ec 	l.lwz r24,0xffffffec(r1)
    9a68:	87 41 ff f0 	l.lwz r26,0xfffffff0(r1)
    9a6c:	87 81 ff f4 	l.lwz r28,0xfffffff4(r1)
    9a70:	44 00 48 00 	l.jr r9
    9a74:	87 c1 ff f8 	l.lwz r30,0xfffffff8(r1)

00009a78 <fdt_supernode_atdepth_offset>:

int fdt_supernode_atdepth_offset(const void *fdt, int nodeoffset,
				 int supernodedepth, int *nodedepth)
{
    9a78:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    9a7c:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    9a80:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    9a84:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    9a88:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9a8c:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    9a90:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    9a94:	9c 21 ff e0 	l.addi r1,r1,0xffffffe0
    9a98:	aa c3 00 00 	l.ori r22,r3,0x0
    9a9c:	aa 44 00 00 	l.ori r18,r4,0x0
    9aa0:	a8 45 00 00 	l.ori r2,r5,0x0
	int offset, depth;
	int supernodeoffset = -FDT_ERR_INTERNAL;

	FDT_CHECK_HEADER(fdt);
    9aa4:	07 ff fa b5 	l.jal 8578 <fdt_check_header>
    9aa8:	aa 06 00 00 	l.ori r16,r6,0x0
    9aac:	bc 2b 00 00 	l.sfnei r11,0x0
    9ab0:	10 00 00 2a 	l.bf 9b58 <fdt_supernode_atdepth_offset+0xe0>
    9ab4:	a8 eb 00 00 	l.ori r7,r11,0x0

	if (supernodedepth < 0)
    9ab8:	bd 82 00 00 	l.sfltsi r2,0x0
    9abc:	10 00 00 27 	l.bf 9b58 <fdt_supernode_atdepth_offset+0xe0>
    9ac0:	9c e0 ff ff 	l.addi r7,r0,0xffffffff
		return -FDT_ERR_NOTFOUND;

	for (offset = 0, depth = 0;
    9ac4:	d4 01 58 00 	l.sw 0x0(r1),r11
    9ac8:	00 00 00 13 	l.j 9b14 <fdt_supernode_atdepth_offset+0x9c>
    9acc:	9d c0 ff f3 	l.addi r14,r0,0xfffffff3
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
		if (depth == supernodedepth)
    9ad0:	e4 08 10 00 	l.sfeq r8,r2
    9ad4:	0c 00 00 03 	l.bnf 9ae0 <fdt_supernode_atdepth_offset+0x68>
    9ad8:	e4 2b 90 00 	l.sfne r11,r18
    9adc:	a9 cb 00 00 	l.ori r14,r11,0x0
			supernodeoffset = offset;

		if (offset == nodeoffset) {
    9ae0:	10 00 00 0a 	l.bf 9b08 <fdt_supernode_atdepth_offset+0x90>
    9ae4:	a8 76 00 00 	l.ori r3,r22,0x0
			if (nodedepth)
    9ae8:	bc 10 00 00 	l.sfeqi r16,0x0
    9aec:	10 00 00 03 	l.bf 9af8 <fdt_supernode_atdepth_offset+0x80>
    9af0:	e5 a2 40 00 	l.sfles r2,r8
				*nodedepth = depth;
    9af4:	d4 10 40 00 	l.sw 0x0(r16),r8

			if (supernodedepth > depth)
    9af8:	10 00 00 18 	l.bf 9b58 <fdt_supernode_atdepth_offset+0xe0>
    9afc:	a8 ee 00 00 	l.ori r7,r14,0x0
				return -FDT_ERR_NOTFOUND;
    9b00:	00 00 00 16 	l.j 9b58 <fdt_supernode_atdepth_offset+0xe0>
    9b04:	9c e0 ff ff 	l.addi r7,r0,0xffffffff
	if (supernodedepth < 0)
		return -FDT_ERR_NOTFOUND;

	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
    9b08:	a8 8b 00 00 	l.ori r4,r11,0x0
    9b0c:	07 ff fb 9e 	l.jal 8984 <fdt_next_node>
    9b10:	a8 a1 00 00 	l.ori r5,r1,0x0

	if (supernodedepth < 0)
		return -FDT_ERR_NOTFOUND;

	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
    9b14:	e5 ab 90 00 	l.sfles r11,r18
    9b18:	10 00 00 03 	l.bf 9b24 <fdt_supernode_atdepth_offset+0xac>
    9b1c:	9c 80 00 01 	l.addi r4,r0,0x1
    9b20:	9c 80 00 00 	l.addi r4,r0,0x0
	FDT_CHECK_HEADER(fdt);

	if (supernodedepth < 0)
		return -FDT_ERR_NOTFOUND;

	for (offset = 0, depth = 0;
    9b24:	a4 84 00 ff 	l.andi r4,r4,0xff
    9b28:	bc 04 00 00 	l.sfeqi r4,0x0
    9b2c:	10 00 00 04 	l.bf 9b3c <fdt_supernode_atdepth_offset+0xc4>
    9b30:	bd 6b 00 00 	l.sfgesi r11,0x0
    9b34:	13 ff ff e7 	l.bf 9ad0 <fdt_supernode_atdepth_offset+0x58>
    9b38:	85 01 00 00 	l.lwz r8,0x0(r1)
			else
				return supernodeoffset;
		}
	}

	if ((offset == -FDT_ERR_NOTFOUND) || (offset >= 0))
    9b3c:	bd 6b ff ff 	l.sfgesi r11,0xffffffff
    9b40:	10 00 00 06 	l.bf 9b58 <fdt_supernode_atdepth_offset+0xe0>
    9b44:	9c e0 ff fc 	l.addi r7,r0,0xfffffffc
		return -FDT_ERR_BADOFFSET;
	else if (offset == -FDT_ERR_BADOFFSET)
    9b48:	bc 2b ff fc 	l.sfnei r11,0xfffffffc
    9b4c:	10 00 00 03 	l.bf 9b58 <fdt_supernode_atdepth_offset+0xe0>
    9b50:	a8 eb 00 00 	l.ori r7,r11,0x0
		return -FDT_ERR_BADSTRUCTURE;
    9b54:	9c e0 ff f5 	l.addi r7,r0,0xfffffff5

	return offset; /* error from fdt_next_node() */
}
    9b58:	9c 21 00 20 	l.addi r1,r1,0x20
    9b5c:	a9 67 00 00 	l.ori r11,r7,0x0
    9b60:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9b64:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    9b68:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    9b6c:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    9b70:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    9b74:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    9b78:	44 00 48 00 	l.jr r9
    9b7c:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00009b80 <fdt_node_depth>:

int fdt_node_depth(const void *fdt, int nodeoffset)
{
    9b80:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9b84:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	int nodedepth;
	int err;

	err = fdt_supernode_atdepth_offset(fdt, nodeoffset, 0, &nodedepth);
    9b88:	9c a0 00 00 	l.addi r5,r0,0x0
    9b8c:	07 ff ff bb 	l.jal 9a78 <fdt_supernode_atdepth_offset>
    9b90:	a8 c1 00 00 	l.ori r6,r1,0x0
	if (err)
    9b94:	bc 0b 00 00 	l.sfeqi r11,0x0
    9b98:	10 00 00 06 	l.bf 9bb0 <fdt_node_depth+0x30>
    9b9c:	bd 8b 00 00 	l.sfltsi r11,0x0
		return (err < 0) ? err : -FDT_ERR_INTERNAL;
    9ba0:	10 00 00 05 	l.bf 9bb4 <fdt_node_depth+0x34>
    9ba4:	15 00 00 00 	l.nop 0x0
    9ba8:	00 00 00 03 	l.j 9bb4 <fdt_node_depth+0x34>
    9bac:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
	return nodedepth;
    9bb0:	85 61 00 00 	l.lwz r11,0x0(r1)
}
    9bb4:	9c 21 00 08 	l.addi r1,r1,0x8
    9bb8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9bbc:	44 00 48 00 	l.jr r9
    9bc0:	15 00 00 00 	l.nop 0x0

00009bc4 <fdt_parent_offset>:

int fdt_parent_offset(const void *fdt, int nodeoffset)
{
    9bc4:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    9bc8:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    9bcc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9bd0:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    9bd4:	a9 c3 00 00 	l.ori r14,r3,0x0
	int nodedepth = fdt_node_depth(fdt, nodeoffset);
    9bd8:	07 ff ff ea 	l.jal 9b80 <fdt_node_depth>
    9bdc:	a8 44 00 00 	l.ori r2,r4,0x0

	if (nodedepth < 0)
    9be0:	bd 8b 00 00 	l.sfltsi r11,0x0
    9be4:	10 00 00 0a 	l.bf 9c0c <fdt_parent_offset+0x48>
    9be8:	a8 6e 00 00 	l.ori r3,r14,0x0
		return nodedepth;
	return fdt_supernode_atdepth_offset(fdt, nodeoffset,
					    nodedepth - 1, NULL);
}
    9bec:	9c 21 00 0c 	l.addi r1,r1,0xc
{
	int nodedepth = fdt_node_depth(fdt, nodeoffset);

	if (nodedepth < 0)
		return nodedepth;
	return fdt_supernode_atdepth_offset(fdt, nodeoffset,
    9bf0:	a8 82 00 00 	l.ori r4,r2,0x0
    9bf4:	9c ab ff ff 	l.addi r5,r11,0xffffffff
    9bf8:	9c c0 00 00 	l.addi r6,r0,0x0
					    nodedepth - 1, NULL);
}
    9bfc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9c00:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
{
	int nodedepth = fdt_node_depth(fdt, nodeoffset);

	if (nodedepth < 0)
		return nodedepth;
	return fdt_supernode_atdepth_offset(fdt, nodeoffset,
    9c04:	03 ff ff 9d 	l.j 9a78 <fdt_supernode_atdepth_offset>
    9c08:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)
					    nodedepth - 1, NULL);
}
    9c0c:	9c 21 00 0c 	l.addi r1,r1,0xc
    9c10:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9c14:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    9c18:	44 00 48 00 	l.jr r9
    9c1c:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00009c20 <fdt_node_offset_by_prop_value>:

int fdt_node_offset_by_prop_value(const void *fdt, int startoffset,
				  const char *propname,
				  const void *propval, int proplen)
{
    9c20:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    9c24:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    9c28:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    9c2c:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    9c30:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    9c34:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9c38:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    9c3c:	9c 21 ff e0 	l.addi r1,r1,0xffffffe0
    9c40:	a9 c3 00 00 	l.ori r14,r3,0x0
    9c44:	a8 44 00 00 	l.ori r2,r4,0x0
    9c48:	aa 85 00 00 	l.ori r20,r5,0x0
    9c4c:	aa c6 00 00 	l.ori r22,r6,0x0
	int offset;
	const void *val;
	int len;

	FDT_CHECK_HEADER(fdt);
    9c50:	07 ff fa 4a 	l.jal 8578 <fdt_check_header>
    9c54:	aa 07 00 00 	l.ori r16,r7,0x0
    9c58:	bc 2b 00 00 	l.sfnei r11,0x0
    9c5c:	10 00 00 1f 	l.bf 9cd8 <fdt_node_offset_by_prop_value+0xb8>
    9c60:	a8 6e 00 00 	l.ori r3,r14,0x0
	/* FIXME: The algorithm here is pretty horrible: we scan each
	 * property of a node in fdt_getprop(), then if that didn't
	 * find what we want, we scan over them again making our way
	 * to the next node.  Still it's the easiest to implement
	 * approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    9c64:	a8 82 00 00 	l.ori r4,r2,0x0
    9c68:	00 00 00 16 	l.j 9cc0 <fdt_node_offset_by_prop_value+0xa0>
    9c6c:	a8 ab 00 00 	l.ori r5,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		val = fdt_getprop(fdt, offset, propname, &len);
    9c70:	a8 6e 00 00 	l.ori r3,r14,0x0
    9c74:	a8 82 00 00 	l.ori r4,r2,0x0
    9c78:	a8 b4 00 00 	l.ori r5,r20,0x0
    9c7c:	07 ff fe 17 	l.jal 94d8 <fdt_getprop>
    9c80:	a8 c1 00 00 	l.ori r6,r1,0x0
		if (val && (len == proplen)
    9c84:	bc 0b 00 00 	l.sfeqi r11,0x0
    9c88:	10 00 00 0b 	l.bf 9cb4 <fdt_node_offset_by_prop_value+0x94>
    9c8c:	a8 6b 00 00 	l.ori r3,r11,0x0
    9c90:	84 81 00 00 	l.lwz r4,0x0(r1)
    9c94:	e4 24 80 00 	l.sfne r4,r16
    9c98:	10 00 00 07 	l.bf 9cb4 <fdt_node_offset_by_prop_value+0x94>
    9c9c:	a8 96 00 00 	l.ori r4,r22,0x0
		    && (memcmp(val, propval, len) == 0))
    9ca0:	07 ff f9 c6 	l.jal 83b8 <memcmp>
    9ca4:	a8 b0 00 00 	l.ori r5,r16,0x0
    9ca8:	bc 0b 00 00 	l.sfeqi r11,0x0
    9cac:	10 00 00 0b 	l.bf 9cd8 <fdt_node_offset_by_prop_value+0xb8>
    9cb0:	a9 62 00 00 	l.ori r11,r2,0x0
	 * find what we want, we scan over them again making our way
	 * to the next node.  Still it's the easiest to implement
	 * approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
    9cb4:	a8 6e 00 00 	l.ori r3,r14,0x0
    9cb8:	a8 82 00 00 	l.ori r4,r2,0x0
    9cbc:	9c a0 00 00 	l.addi r5,r0,0x0
    9cc0:	07 ff fb 31 	l.jal 8984 <fdt_next_node>
    9cc4:	15 00 00 00 	l.nop 0x0
	/* FIXME: The algorithm here is pretty horrible: we scan each
	 * property of a node in fdt_getprop(), then if that didn't
	 * find what we want, we scan over them again making our way
	 * to the next node.  Still it's the easiest to implement
	 * approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    9cc8:	bd 6b 00 00 	l.sfgesi r11,0x0
    9ccc:	13 ff ff e9 	l.bf 9c70 <fdt_node_offset_by_prop_value+0x50>
    9cd0:	a8 4b 00 00 	l.ori r2,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		val = fdt_getprop(fdt, offset, propname, &len);
		if (val && (len == proplen)
		    && (memcmp(val, propval, len) == 0))
    9cd4:	a9 62 00 00 	l.ori r11,r2,0x0
			return offset;
	}

	return offset; /* error from fdt_next_node() */
}
    9cd8:	9c 21 00 20 	l.addi r1,r1,0x20
    9cdc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9ce0:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    9ce4:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    9ce8:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    9cec:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    9cf0:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    9cf4:	44 00 48 00 	l.jr r9
    9cf8:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00009cfc <fdt_node_offset_by_phandle>:

int fdt_node_offset_by_phandle(const void *fdt, uint32_t phandle)
{
    9cfc:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    9d00:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    9d04:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    9d08:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	int offset;

	if ((phandle == 0) || (phandle == -1))
    9d0c:	9c 44 ff ff 	l.addi r2,r4,0xffffffff

	return offset; /* error from fdt_next_node() */
}

int fdt_node_offset_by_phandle(const void *fdt, uint32_t phandle)
{
    9d10:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    9d14:	a9 c3 00 00 	l.ori r14,r3,0x0
    9d18:	aa 04 00 00 	l.ori r16,r4,0x0
	int offset;

	if ((phandle == 0) || (phandle == -1))
    9d1c:	bc 42 ff fd 	l.sfgtui r2,0xfffffffd
    9d20:	10 00 00 18 	l.bf 9d80 <fdt_node_offset_by_phandle+0x84>
    9d24:	9d 60 ff fa 	l.addi r11,r0,0xfffffffa
		return -FDT_ERR_BADPHANDLE;

	FDT_CHECK_HEADER(fdt);
    9d28:	07 ff fa 14 	l.jal 8578 <fdt_check_header>
    9d2c:	15 00 00 00 	l.nop 0x0
    9d30:	bc 2b 00 00 	l.sfnei r11,0x0
    9d34:	10 00 00 13 	l.bf 9d80 <fdt_node_offset_by_phandle+0x84>
    9d38:	a8 6e 00 00 	l.ori r3,r14,0x0
	 * potentially scan each property of a node in
	 * fdt_get_phandle(), then if that didn't find what
	 * we want, we scan over them again making our way to the next
	 * node.  Still it's the easiest to implement approach;
	 * performance can come later. */
	for (offset = fdt_next_node(fdt, -1, NULL);
    9d3c:	9c 80 ff ff 	l.addi r4,r0,0xffffffff
    9d40:	00 00 00 0a 	l.j 9d68 <fdt_node_offset_by_phandle+0x6c>
    9d44:	a8 ab 00 00 	l.ori r5,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		if (fdt_get_phandle(fdt, offset) == phandle)
    9d48:	a8 6e 00 00 	l.ori r3,r14,0x0
    9d4c:	07 ff fe 2c 	l.jal 95fc <fdt_get_phandle>
    9d50:	a8 82 00 00 	l.ori r4,r2,0x0
    9d54:	e4 0b 80 00 	l.sfeq r11,r16
    9d58:	10 00 00 09 	l.bf 9d7c <fdt_node_offset_by_phandle+0x80>
    9d5c:	a8 6e 00 00 	l.ori r3,r14,0x0
	 * we want, we scan over them again making our way to the next
	 * node.  Still it's the easiest to implement approach;
	 * performance can come later. */
	for (offset = fdt_next_node(fdt, -1, NULL);
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
    9d60:	a8 82 00 00 	l.ori r4,r2,0x0
    9d64:	9c a0 00 00 	l.addi r5,r0,0x0
    9d68:	07 ff fb 07 	l.jal 8984 <fdt_next_node>
    9d6c:	15 00 00 00 	l.nop 0x0
	 * potentially scan each property of a node in
	 * fdt_get_phandle(), then if that didn't find what
	 * we want, we scan over them again making our way to the next
	 * node.  Still it's the easiest to implement approach;
	 * performance can come later. */
	for (offset = fdt_next_node(fdt, -1, NULL);
    9d70:	bd 6b 00 00 	l.sfgesi r11,0x0
    9d74:	13 ff ff f5 	l.bf 9d48 <fdt_node_offset_by_phandle+0x4c>
    9d78:	a8 4b 00 00 	l.ori r2,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		if (fdt_get_phandle(fdt, offset) == phandle)
    9d7c:	a9 62 00 00 	l.ori r11,r2,0x0
			return offset;
	}

	return offset; /* error from fdt_next_node() */
}
    9d80:	9c 21 00 10 	l.addi r1,r1,0x10
    9d84:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9d88:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    9d8c:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    9d90:	44 00 48 00 	l.jr r9
    9d94:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00009d98 <fdt_stringlist_contains>:

int fdt_stringlist_contains(const char *strlist, int listlen, const char *str)
{
    9d98:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    9d9c:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    9da0:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    9da4:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
    9da8:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
    9dac:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9db0:	a9 c3 00 00 	l.ori r14,r3,0x0
    9db4:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
	int len = strlen(str);
    9db8:	a8 65 00 00 	l.ori r3,r5,0x0

	return offset; /* error from fdt_next_node() */
}

int fdt_stringlist_contains(const char *strlist, int listlen, const char *str)
{
    9dbc:	a8 44 00 00 	l.ori r2,r4,0x0
	int len = strlen(str);
    9dc0:	07 ff f8 d1 	l.jal 8104 <strlen>
    9dc4:	aa 45 00 00 	l.ori r18,r5,0x0
    9dc8:	aa 0b 00 00 	l.ori r16,r11,0x0
	const char *p;

	while (listlen >= len) {
    9dcc:	00 00 00 11 	l.j 9e10 <fdt_stringlist_contains+0x78>
    9dd0:	9e 8b 00 01 	l.addi r20,r11,0x1
		if (memcmp(str, strlist, len+1) == 0)
    9dd4:	a8 8e 00 00 	l.ori r4,r14,0x0
    9dd8:	07 ff f9 78 	l.jal 83b8 <memcmp>
    9ddc:	a8 b4 00 00 	l.ori r5,r20,0x0
    9de0:	bc 0b 00 00 	l.sfeqi r11,0x0
    9de4:	10 00 00 10 	l.bf 9e24 <fdt_stringlist_contains+0x8c>
    9de8:	a8 6e 00 00 	l.ori r3,r14,0x0
			return 1;
		p = memchr(strlist, '\0', listlen);
    9dec:	9c 80 00 00 	l.addi r4,r0,0x0
    9df0:	07 ff f9 81 	l.jal 83f4 <memchr>
    9df4:	a8 a2 00 00 	l.ori r5,r2,0x0
		if (!p)
    9df8:	bc 0b 00 00 	l.sfeqi r11,0x0
    9dfc:	10 00 00 0b 	l.bf 9e28 <fdt_stringlist_contains+0x90>
    9e00:	e1 cb 70 02 	l.sub r14,r11,r14
			return 0; /* malformed strlist.. */
		listlen -= (p-strlist) + 1;
    9e04:	ad ce ff ff 	l.xori r14,r14,0xffffffff
    9e08:	e0 42 70 00 	l.add r2,r2,r14
		strlist = p + 1;
    9e0c:	9d cb 00 01 	l.addi r14,r11,0x1
int fdt_stringlist_contains(const char *strlist, int listlen, const char *str)
{
	int len = strlen(str);
	const char *p;

	while (listlen >= len) {
    9e10:	e5 62 80 00 	l.sfges r2,r16
    9e14:	13 ff ff f0 	l.bf 9dd4 <fdt_stringlist_contains+0x3c>
    9e18:	a8 72 00 00 	l.ori r3,r18,0x0
		if (!p)
			return 0; /* malformed strlist.. */
		listlen -= (p-strlist) + 1;
		strlist = p + 1;
	}
	return 0;
    9e1c:	00 00 00 03 	l.j 9e28 <fdt_stringlist_contains+0x90>
    9e20:	9d 60 00 00 	l.addi r11,r0,0x0
	int len = strlen(str);
	const char *p;

	while (listlen >= len) {
		if (memcmp(str, strlist, len+1) == 0)
			return 1;
    9e24:	9d 60 00 01 	l.addi r11,r0,0x1
			return 0; /* malformed strlist.. */
		listlen -= (p-strlist) + 1;
		strlist = p + 1;
	}
	return 0;
}
    9e28:	9c 21 00 18 	l.addi r1,r1,0x18
    9e2c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9e30:	84 41 ff e8 	l.lwz r2,0xffffffe8(r1)
    9e34:	85 c1 ff ec 	l.lwz r14,0xffffffec(r1)
    9e38:	86 01 ff f0 	l.lwz r16,0xfffffff0(r1)
    9e3c:	86 41 ff f4 	l.lwz r18,0xfffffff4(r1)
    9e40:	44 00 48 00 	l.jr r9
    9e44:	86 81 ff f8 	l.lwz r20,0xfffffff8(r1)

00009e48 <fdt_stringlist_count>:

int fdt_stringlist_count(const void *fdt, int nodeoffset, const char *property)
{
    9e48:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    9e4c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    9e50:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9e54:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    9e58:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	const char *list, *end;
	int length, count = 0;

	list = fdt_getprop(fdt, nodeoffset, property, &length);
    9e5c:	07 ff fd 9f 	l.jal 94d8 <fdt_getprop>
    9e60:	a8 c1 00 00 	l.ori r6,r1,0x0
    9e64:	85 c1 00 00 	l.lwz r14,0x0(r1)
	if (!list)
    9e68:	bc 2b 00 00 	l.sfnei r11,0x0
    9e6c:	0c 00 00 13 	l.bnf 9eb8 <fdt_stringlist_count+0x70>
    9e70:	a8 4b 00 00 	l.ori r2,r11,0x0
		return length;

	end = list + length;
    9e74:	e2 0b 70 00 	l.add r16,r11,r14

	while (list < end) {
    9e78:	00 00 00 0a 	l.j 9ea0 <fdt_stringlist_count+0x58>
    9e7c:	9d c0 00 00 	l.addi r14,r0,0x0
		length = strnlen(list, end - list) + 1;
    9e80:	07 ff f8 a9 	l.jal 8124 <strnlen>
    9e84:	e0 90 10 02 	l.sub r4,r16,r2
    9e88:	9d 6b 00 01 	l.addi r11,r11,0x1

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end)
    9e8c:	e0 42 58 00 	l.add r2,r2,r11
    9e90:	e4 42 80 00 	l.sfgtu r2,r16
    9e94:	10 00 00 08 	l.bf 9eb4 <fdt_stringlist_count+0x6c>
    9e98:	d4 01 58 00 	l.sw 0x0(r1),r11
			return -FDT_ERR_BADVALUE;

		list += length;
		count++;
    9e9c:	9d ce 00 01 	l.addi r14,r14,0x1
	if (!list)
		return length;

	end = list + length;

	while (list < end) {
    9ea0:	e4 82 80 00 	l.sfltu r2,r16
    9ea4:	13 ff ff f7 	l.bf 9e80 <fdt_stringlist_count+0x38>
    9ea8:	a8 62 00 00 	l.ori r3,r2,0x0
		list += length;
		count++;
	}

	return count;
}
    9eac:	00 00 00 04 	l.j 9ebc <fdt_stringlist_count+0x74>
    9eb0:	9c 21 00 14 	l.addi r1,r1,0x14
	while (list < end) {
		length = strnlen(list, end - list) + 1;

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end)
			return -FDT_ERR_BADVALUE;
    9eb4:	9d c0 ff f1 	l.addi r14,r0,0xfffffff1
		list += length;
		count++;
	}

	return count;
}
    9eb8:	9c 21 00 14 	l.addi r1,r1,0x14
    9ebc:	a9 6e 00 00 	l.ori r11,r14,0x0
    9ec0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9ec4:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    9ec8:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    9ecc:	44 00 48 00 	l.jr r9
    9ed0:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00009ed4 <fdt_stringlist_search>:

int fdt_stringlist_search(const void *fdt, int nodeoffset, const char *property,
			  const char *string)
{
    9ed4:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    9ed8:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    9edc:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    9ee0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9ee4:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    9ee8:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    9eec:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    9ef0:	9c 21 ff e0 	l.addi r1,r1,0xffffffe0
    9ef4:	aa 86 00 00 	l.ori r20,r6,0x0
	int length, len, idx = 0;
	const char *list, *end;

	list = fdt_getprop(fdt, nodeoffset, property, &length);
    9ef8:	07 ff fd 78 	l.jal 94d8 <fdt_getprop>
    9efc:	a8 c1 00 00 	l.ori r6,r1,0x0
    9f00:	85 c1 00 00 	l.lwz r14,0x0(r1)
	if (!list)
    9f04:	bc 2b 00 00 	l.sfnei r11,0x0
    9f08:	0c 00 00 20 	l.bnf 9f88 <fdt_stringlist_search+0xb4>
    9f0c:	a8 4b 00 00 	l.ori r2,r11,0x0
		return length;

	len = strlen(string) + 1;
    9f10:	a8 74 00 00 	l.ori r3,r20,0x0
    9f14:	07 ff f8 7c 	l.jal 8104 <strlen>
    9f18:	e2 02 70 00 	l.add r16,r2,r14
}

int fdt_stringlist_search(const void *fdt, int nodeoffset, const char *property,
			  const char *string)
{
	int length, len, idx = 0;
    9f1c:	9d c0 00 00 	l.addi r14,r0,0x0
		return length;

	len = strlen(string) + 1;
	end = list + length;

	while (list < end) {
    9f20:	00 00 00 14 	l.j 9f70 <fdt_stringlist_search+0x9c>
    9f24:	9e 4b 00 01 	l.addi r18,r11,0x1
		length = strnlen(list, end - list) + 1;
    9f28:	07 ff f8 7f 	l.jal 8124 <strnlen>
    9f2c:	e0 90 10 02 	l.sub r4,r16,r2
    9f30:	9c eb 00 01 	l.addi r7,r11,0x1

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end)
    9f34:	e2 c2 38 00 	l.add r22,r2,r7
    9f38:	e4 56 80 00 	l.sfgtu r22,r16
    9f3c:	10 00 00 12 	l.bf 9f84 <fdt_stringlist_search+0xb0>
    9f40:	d4 01 38 00 	l.sw 0x0(r1),r7
			return -FDT_ERR_BADVALUE;

		if (length == len && memcmp(list, string, length) == 0)
    9f44:	e4 27 90 00 	l.sfne r7,r18
    9f48:	10 00 00 08 	l.bf 9f68 <fdt_stringlist_search+0x94>
    9f4c:	a8 62 00 00 	l.ori r3,r2,0x0
    9f50:	a8 94 00 00 	l.ori r4,r20,0x0
    9f54:	07 ff f9 19 	l.jal 83b8 <memcmp>
    9f58:	a8 b2 00 00 	l.ori r5,r18,0x0
    9f5c:	bc 0b 00 00 	l.sfeqi r11,0x0
    9f60:	10 00 00 0a 	l.bf 9f88 <fdt_stringlist_search+0xb4>
    9f64:	15 00 00 00 	l.nop 0x0
			return idx;

		list += length;
		idx++;
    9f68:	9d ce 00 01 	l.addi r14,r14,0x1
    9f6c:	a8 56 00 00 	l.ori r2,r22,0x0
		return length;

	len = strlen(string) + 1;
	end = list + length;

	while (list < end) {
    9f70:	e4 82 80 00 	l.sfltu r2,r16
    9f74:	13 ff ff ed 	l.bf 9f28 <fdt_stringlist_search+0x54>
    9f78:	a8 62 00 00 	l.ori r3,r2,0x0

		list += length;
		idx++;
	}

	return -FDT_ERR_NOTFOUND;
    9f7c:	00 00 00 03 	l.j 9f88 <fdt_stringlist_search+0xb4>
    9f80:	9d c0 ff ff 	l.addi r14,r0,0xffffffff
	while (list < end) {
		length = strnlen(list, end - list) + 1;

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end)
			return -FDT_ERR_BADVALUE;
    9f84:	9d c0 ff f1 	l.addi r14,r0,0xfffffff1
		list += length;
		idx++;
	}

	return -FDT_ERR_NOTFOUND;
}
    9f88:	9c 21 00 20 	l.addi r1,r1,0x20
    9f8c:	a9 6e 00 00 	l.ori r11,r14,0x0
    9f90:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9f94:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    9f98:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    9f9c:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    9fa0:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    9fa4:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    9fa8:	44 00 48 00 	l.jr r9
    9fac:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00009fb0 <fdt_stringlist_get>:

const char *fdt_stringlist_get(const void *fdt, int nodeoffset,
			       const char *property, int idx,
			       int *lenp)
{
    9fb0:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    9fb4:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    9fb8:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    9fbc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9fc0:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    9fc4:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
    9fc8:	aa 46 00 00 	l.ori r18,r6,0x0
	const char *list, *end;
	int length;

	list = fdt_getprop(fdt, nodeoffset, property, &length);
    9fcc:	a8 c1 00 00 	l.ori r6,r1,0x0
    9fd0:	07 ff fd 42 	l.jal 94d8 <fdt_getprop>
    9fd4:	a9 c7 00 00 	l.ori r14,r7,0x0
	if (!list) {
    9fd8:	bc 2b 00 00 	l.sfnei r11,0x0
    9fdc:	10 00 00 07 	l.bf 9ff8 <fdt_stringlist_get+0x48>
    9fe0:	a8 4b 00 00 	l.ori r2,r11,0x0
		if (lenp)
    9fe4:	bc 0e 00 00 	l.sfeqi r14,0x0
    9fe8:	10 00 00 26 	l.bf a080 <fdt_stringlist_get+0xd0>
    9fec:	84 61 00 00 	l.lwz r3,0x0(r1)
			*lenp = length;
    9ff0:	00 00 00 24 	l.j a080 <fdt_stringlist_get+0xd0>
    9ff4:	d4 0e 18 00 	l.sw 0x0(r14),r3

		return NULL;
	}

	end = list + length;
    9ff8:	86 01 00 00 	l.lwz r16,0x0(r1)

	while (list < end) {
    9ffc:	00 00 00 19 	l.j a060 <fdt_stringlist_get+0xb0>
    a000:	e2 0b 80 00 	l.add r16,r11,r16
		length = strnlen(list, end - list) + 1;
    a004:	a8 62 00 00 	l.ori r3,r2,0x0
    a008:	07 ff f8 47 	l.jal 8124 <strnlen>
    a00c:	e0 90 10 02 	l.sub r4,r16,r2
    a010:	9c 6b 00 01 	l.addi r3,r11,0x1
    a014:	d4 01 18 00 	l.sw 0x0(r1),r3

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end) {
    a018:	e0 62 18 00 	l.add r3,r2,r3
    a01c:	e4 a3 80 00 	l.sfleu r3,r16
    a020:	10 00 00 08 	l.bf a040 <fdt_stringlist_get+0x90>
    a024:	bc 32 00 00 	l.sfnei r18,0x0
			if (lenp)
				*lenp = -FDT_ERR_BADVALUE;

			return NULL;
    a028:	a8 4e 00 00 	l.ori r2,r14,0x0
	while (list < end) {
		length = strnlen(list, end - list) + 1;

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end) {
			if (lenp)
    a02c:	bc 0e 00 00 	l.sfeqi r14,0x0
    a030:	10 00 00 14 	l.bf a080 <fdt_stringlist_get+0xd0>
    a034:	9c 60 ff f1 	l.addi r3,r0,0xfffffff1
		list += length;
		idx--;
	}

	if (lenp)
		*lenp = -FDT_ERR_NOTFOUND;
    a038:	00 00 00 11 	l.j a07c <fdt_stringlist_get+0xcc>
    a03c:	d4 02 18 00 	l.sw 0x0(r2),r3
				*lenp = -FDT_ERR_BADVALUE;

			return NULL;
		}

		if (idx == 0) {
    a040:	10 00 00 07 	l.bf a05c <fdt_stringlist_get+0xac>
    a044:	9e 52 ff ff 	l.addi r18,r18,0xffffffff
			if (lenp)
    a048:	bc 0e 00 00 	l.sfeqi r14,0x0
    a04c:	10 00 00 0d 	l.bf a080 <fdt_stringlist_get+0xd0>
    a050:	9e 52 00 01 	l.addi r18,r18,0x1
				*lenp = length - 1;
    a054:	00 00 00 0b 	l.j a080 <fdt_stringlist_get+0xd0>
    a058:	d4 0e 58 00 	l.sw 0x0(r14),r11

			return list;
		}

		list += length;
		idx--;
    a05c:	a8 43 00 00 	l.ori r2,r3,0x0
		return NULL;
	}

	end = list + length;

	while (list < end) {
    a060:	e4 82 80 00 	l.sfltu r2,r16
    a064:	13 ff ff e8 	l.bf a004 <fdt_stringlist_get+0x54>
    a068:	bc 0e 00 00 	l.sfeqi r14,0x0

		list += length;
		idx--;
	}

	if (lenp)
    a06c:	10 00 00 05 	l.bf a080 <fdt_stringlist_get+0xd0>
    a070:	a8 4e 00 00 	l.ori r2,r14,0x0
		*lenp = -FDT_ERR_NOTFOUND;
    a074:	9c 60 ff ff 	l.addi r3,r0,0xffffffff
    a078:	d4 02 18 00 	l.sw 0x0(r2),r3

	return NULL;
    a07c:	9c 40 00 00 	l.addi r2,r0,0x0
}
    a080:	9c 21 00 18 	l.addi r1,r1,0x18
    a084:	a9 62 00 00 	l.ori r11,r2,0x0
    a088:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a08c:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    a090:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    a094:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    a098:	44 00 48 00 	l.jr r9
    a09c:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

0000a0a0 <fdt_node_check_compatible>:

int fdt_node_check_compatible(const void *fdt, int nodeoffset,
			      const char *compatible)
{
    a0a0:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    a0a4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a0a8:	a8 45 00 00 	l.ori r2,r5,0x0
    a0ac:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	const void *prop;
	int len;

	prop = fdt_getprop(fdt, nodeoffset, "compatible", &len);
    a0b0:	18 a0 00 01 	l.movhi r5,0x1
    a0b4:	a8 c1 00 00 	l.ori r6,r1,0x0
    a0b8:	07 ff fd 08 	l.jal 94d8 <fdt_getprop>
    a0bc:	a8 a5 25 50 	l.ori r5,r5,0x2550
    a0c0:	84 81 00 00 	l.lwz r4,0x0(r1)
	if (!prop)
    a0c4:	bc 2b 00 00 	l.sfnei r11,0x0
    a0c8:	10 00 00 04 	l.bf a0d8 <fdt_node_check_compatible+0x38>
    a0cc:	a8 6b 00 00 	l.ori r3,r11,0x0
		return len;
    a0d0:	00 00 00 08 	l.j a0f0 <fdt_node_check_compatible+0x50>
    a0d4:	a9 64 00 00 	l.ori r11,r4,0x0
	if (fdt_stringlist_contains(prop, len, compatible))
    a0d8:	07 ff ff 30 	l.jal 9d98 <fdt_stringlist_contains>
    a0dc:	a8 a2 00 00 	l.ori r5,r2,0x0
	const void *prop;
	int len;

	prop = fdt_getprop(fdt, nodeoffset, "compatible", &len);
	if (!prop)
		return len;
    a0e0:	e0 40 58 02 	l.sub r2,r0,r11
    a0e4:	e1 62 58 04 	l.or r11,r2,r11
    a0e8:	ad 6b ff ff 	l.xori r11,r11,0xffffffff
    a0ec:	b9 6b 00 5f 	l.srli r11,r11,0x1f
	if (fdt_stringlist_contains(prop, len, compatible))
		return 0;
	else
		return 1;
}
    a0f0:	9c 21 00 0c 	l.addi r1,r1,0xc
    a0f4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a0f8:	44 00 48 00 	l.jr r9
    a0fc:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000a100 <fdt_node_offset_by_compatible>:

int fdt_node_offset_by_compatible(const void *fdt, int startoffset,
				  const char *compatible)
{
    a100:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    a104:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    a108:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    a10c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a110:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    a114:	a9 c3 00 00 	l.ori r14,r3,0x0
    a118:	a8 44 00 00 	l.ori r2,r4,0x0
	int offset, err;

	FDT_CHECK_HEADER(fdt);
    a11c:	07 ff f9 17 	l.jal 8578 <fdt_check_header>
    a120:	aa 05 00 00 	l.ori r16,r5,0x0
    a124:	bc 2b 00 00 	l.sfnei r11,0x0
    a128:	10 00 00 16 	l.bf a180 <fdt_node_offset_by_compatible+0x80>
    a12c:	a8 6e 00 00 	l.ori r3,r14,0x0
	/* FIXME: The algorithm here is pretty horrible: we scan each
	 * property of a node in fdt_node_check_compatible(), then if
	 * that didn't find what we want, we scan over them again
	 * making our way to the next node.  Still it's the easiest to
	 * implement approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    a130:	a8 82 00 00 	l.ori r4,r2,0x0
    a134:	00 00 00 0d 	l.j a168 <fdt_node_offset_by_compatible+0x68>
    a138:	a8 ab 00 00 	l.ori r5,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		err = fdt_node_check_compatible(fdt, offset, compatible);
    a13c:	a8 6e 00 00 	l.ori r3,r14,0x0
    a140:	a8 82 00 00 	l.ori r4,r2,0x0
    a144:	07 ff ff d7 	l.jal a0a0 <fdt_node_check_compatible>
    a148:	a8 b0 00 00 	l.ori r5,r16,0x0
		if ((err < 0) && (err != -FDT_ERR_NOTFOUND))
    a14c:	bd 8b ff ff 	l.sfltsi r11,0xffffffff
    a150:	10 00 00 0c 	l.bf a180 <fdt_node_offset_by_compatible+0x80>
    a154:	bc 0b 00 00 	l.sfeqi r11,0x0
			return err;
		else if (err == 0)
    a158:	10 00 00 09 	l.bf a17c <fdt_node_offset_by_compatible+0x7c>
    a15c:	a8 6e 00 00 	l.ori r3,r14,0x0
	 * that didn't find what we want, we scan over them again
	 * making our way to the next node.  Still it's the easiest to
	 * implement approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
    a160:	a8 82 00 00 	l.ori r4,r2,0x0
    a164:	9c a0 00 00 	l.addi r5,r0,0x0
    a168:	07 ff fa 07 	l.jal 8984 <fdt_next_node>
    a16c:	15 00 00 00 	l.nop 0x0
	/* FIXME: The algorithm here is pretty horrible: we scan each
	 * property of a node in fdt_node_check_compatible(), then if
	 * that didn't find what we want, we scan over them again
	 * making our way to the next node.  Still it's the easiest to
	 * implement approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    a170:	bd 6b 00 00 	l.sfgesi r11,0x0
    a174:	13 ff ff f2 	l.bf a13c <fdt_node_offset_by_compatible+0x3c>
    a178:	a8 4b 00 00 	l.ori r2,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		err = fdt_node_check_compatible(fdt, offset, compatible);
		if ((err < 0) && (err != -FDT_ERR_NOTFOUND))
			return err;
		else if (err == 0)
    a17c:	a9 62 00 00 	l.ori r11,r2,0x0
			return offset;
	}

	return offset; /* error from fdt_next_node() */
}
    a180:	9c 21 00 10 	l.addi r1,r1,0x10
    a184:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a188:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    a18c:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    a190:	44 00 48 00 	l.jr r9
    a194:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

0000a198 <fdt_strerror>:
	FDT_ERRTABENT(FDT_ERR_BADLAYOUT),
};
#define FDT_ERRTABSIZE	(sizeof(fdt_errtable) / sizeof(fdt_errtable[0]))

const char *fdt_strerror(int errval)
{
    a198:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	if (errval > 0)
		return "<valid offset/length>";
    a19c:	19 60 00 01 	l.movhi r11,0x1
	FDT_ERRTABENT(FDT_ERR_BADLAYOUT),
};
#define FDT_ERRTABSIZE	(sizeof(fdt_errtable) / sizeof(fdt_errtable[0]))

const char *fdt_strerror(int errval)
{
    a1a0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	if (errval > 0)
    a1a4:	bd 43 00 00 	l.sfgtsi r3,0x0
    a1a8:	10 00 00 15 	l.bf a1fc <fdt_strerror+0x64>
    a1ac:	a9 6b 25 5b 	l.ori r11,r11,0x255b
		return "<valid offset/length>";
	else if (errval == 0)
		return "<no error>";
    a1b0:	19 60 00 01 	l.movhi r11,0x1

const char *fdt_strerror(int errval)
{
	if (errval > 0)
		return "<valid offset/length>";
	else if (errval == 0)
    a1b4:	bc 03 00 00 	l.sfeqi r3,0x0
    a1b8:	10 00 00 11 	l.bf a1fc <fdt_strerror+0x64>
    a1bc:	a9 6b 25 71 	l.ori r11,r11,0x2571

		if (s)
			return s;
	}

	return "<unknown error>";
    a1c0:	19 60 00 01 	l.movhi r11,0x1
{
	if (errval > 0)
		return "<valid offset/length>";
	else if (errval == 0)
		return "<no error>";
	else if (errval > -FDT_ERRTABSIZE) {
    a1c4:	bc a3 ff f3 	l.sfleui r3,0xfffffff3
    a1c8:	10 00 00 0d 	l.bf a1fc <fdt_strerror+0x64>
    a1cc:	a9 6b 25 7c 	l.ori r11,r11,0x257c
		const char *s = fdt_errtable[-errval].str;
    a1d0:	e0 60 18 02 	l.sub r3,r0,r3
    a1d4:	18 40 00 01 	l.movhi r2,0x1
    a1d8:	b8 63 00 02 	l.slli r3,r3,0x2
    a1dc:	a8 42 2e c4 	l.ori r2,r2,0x2ec4
    a1e0:	e0 63 10 00 	l.add r3,r3,r2
    a1e4:	85 63 00 00 	l.lwz r11,0x0(r3)

		if (s)
    a1e8:	bc 2b 00 00 	l.sfnei r11,0x0
    a1ec:	10 00 00 04 	l.bf a1fc <fdt_strerror+0x64>
    a1f0:	15 00 00 00 	l.nop 0x0
			return s;
	}

	return "<unknown error>";
    a1f4:	19 60 00 01 	l.movhi r11,0x1
    a1f8:	a9 6b 25 7c 	l.ori r11,r11,0x257c
}
    a1fc:	9c 21 00 04 	l.addi r1,r1,0x4
    a200:	44 00 48 00 	l.jr r9
    a204:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000a208 <fdt_address_cells>:
#include <libfdt.h>

#include "libfdt_internal.h"

int fdt_address_cells(const void *fdt, int nodeoffset)
{
    a208:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	const fdt32_t *ac;
	int val;
	int len;

	ac = fdt_getprop(fdt, nodeoffset, "#address-cells", &len);
    a20c:	18 a0 00 01 	l.movhi r5,0x1
#include <libfdt.h>

#include "libfdt_internal.h"

int fdt_address_cells(const void *fdt, int nodeoffset)
{
    a210:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	const fdt32_t *ac;
	int val;
	int len;

	ac = fdt_getprop(fdt, nodeoffset, "#address-cells", &len);
    a214:	a8 a5 26 4c 	l.ori r5,r5,0x264c
    a218:	07 ff fc b0 	l.jal 94d8 <fdt_getprop>
    a21c:	a8 c1 00 00 	l.ori r6,r1,0x0
    a220:	a8 6b 00 00 	l.ori r3,r11,0x0
	if (!ac)
    a224:	bc 03 00 00 	l.sfeqi r3,0x0
    a228:	10 00 00 15 	l.bf a27c <fdt_address_cells+0x74>
    a22c:	9d 60 00 02 	l.addi r11,r0,0x2
		return 2;

	if (len != sizeof(*ac))
    a230:	84 81 00 00 	l.lwz r4,0x0(r1)
    a234:	bc 24 00 04 	l.sfnei r4,0x4
    a238:	10 00 00 11 	l.bf a27c <fdt_address_cells+0x74>
    a23c:	9d 60 ff f2 	l.addi r11,r0,0xfffffff2
		return -FDT_ERR_BADNCELLS;

	val = fdt32_to_cpu(*ac);
    a240:	8c a3 00 00 	l.lbz r5,0x0(r3)
    a244:	8c 83 00 03 	l.lbz r4,0x3(r3)
    a248:	b8 a5 00 18 	l.slli r5,r5,0x18
    a24c:	e0 a4 28 04 	l.or r5,r4,r5
    a250:	8c 83 00 01 	l.lbz r4,0x1(r3)
    a254:	b8 84 00 10 	l.slli r4,r4,0x10
    a258:	e0 a5 20 04 	l.or r5,r5,r4
    a25c:	8c 83 00 02 	l.lbz r4,0x2(r3)
    a260:	b8 84 00 08 	l.slli r4,r4,0x8
    a264:	e0 65 20 04 	l.or r3,r5,r4
	if ((val <= 0) || (val > FDT_MAX_NCELLS))
    a268:	9c 83 ff ff 	l.addi r4,r3,0xffffffff
    a26c:	bc 44 00 03 	l.sfgtui r4,0x3
    a270:	10 00 00 03 	l.bf a27c <fdt_address_cells+0x74>
    a274:	15 00 00 00 	l.nop 0x0
		return 2;

	if (len != sizeof(*ac))
		return -FDT_ERR_BADNCELLS;

	val = fdt32_to_cpu(*ac);
    a278:	a9 63 00 00 	l.ori r11,r3,0x0
	if ((val <= 0) || (val > FDT_MAX_NCELLS))
		return -FDT_ERR_BADNCELLS;

	return val;
}
    a27c:	9c 21 00 08 	l.addi r1,r1,0x8
    a280:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a284:	44 00 48 00 	l.jr r9
    a288:	15 00 00 00 	l.nop 0x0

0000a28c <fdt_size_cells>:

int fdt_size_cells(const void *fdt, int nodeoffset)
{
    a28c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	const fdt32_t *sc;
	int val;
	int len;

	sc = fdt_getprop(fdt, nodeoffset, "#size-cells", &len);
    a290:	18 a0 00 01 	l.movhi r5,0x1

	return val;
}

int fdt_size_cells(const void *fdt, int nodeoffset)
{
    a294:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	const fdt32_t *sc;
	int val;
	int len;

	sc = fdt_getprop(fdt, nodeoffset, "#size-cells", &len);
    a298:	a8 a5 26 5b 	l.ori r5,r5,0x265b
    a29c:	07 ff fc 8f 	l.jal 94d8 <fdt_getprop>
    a2a0:	a8 c1 00 00 	l.ori r6,r1,0x0
    a2a4:	a8 6b 00 00 	l.ori r3,r11,0x0
	if (!sc)
    a2a8:	bc 03 00 00 	l.sfeqi r3,0x0
    a2ac:	10 00 00 14 	l.bf a2fc <fdt_size_cells+0x70>
    a2b0:	9d 60 00 02 	l.addi r11,r0,0x2
		return 2;

	if (len != sizeof(*sc))
    a2b4:	84 81 00 00 	l.lwz r4,0x0(r1)
    a2b8:	bc 24 00 04 	l.sfnei r4,0x4
    a2bc:	10 00 00 10 	l.bf a2fc <fdt_size_cells+0x70>
    a2c0:	9d 60 ff f2 	l.addi r11,r0,0xfffffff2
		return -FDT_ERR_BADNCELLS;

	val = fdt32_to_cpu(*sc);
    a2c4:	8c a3 00 00 	l.lbz r5,0x0(r3)
    a2c8:	8c 83 00 03 	l.lbz r4,0x3(r3)
    a2cc:	b8 a5 00 18 	l.slli r5,r5,0x18
    a2d0:	e0 a4 28 04 	l.or r5,r4,r5
    a2d4:	8c 83 00 01 	l.lbz r4,0x1(r3)
    a2d8:	b8 84 00 10 	l.slli r4,r4,0x10
    a2dc:	e0 a5 20 04 	l.or r5,r5,r4
    a2e0:	8c 83 00 02 	l.lbz r4,0x2(r3)
    a2e4:	b8 84 00 08 	l.slli r4,r4,0x8
    a2e8:	e0 65 20 04 	l.or r3,r5,r4
	if ((val < 0) || (val > FDT_MAX_NCELLS))
    a2ec:	bc 43 00 04 	l.sfgtui r3,0x4
    a2f0:	10 00 00 03 	l.bf a2fc <fdt_size_cells+0x70>
    a2f4:	15 00 00 00 	l.nop 0x0
		return 2;

	if (len != sizeof(*sc))
		return -FDT_ERR_BADNCELLS;

	val = fdt32_to_cpu(*sc);
    a2f8:	a9 63 00 00 	l.ori r11,r3,0x0
	if ((val < 0) || (val > FDT_MAX_NCELLS))
		return -FDT_ERR_BADNCELLS;

	return val;
}
    a2fc:	9c 21 00 08 	l.addi r1,r1,0x8
    a300:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a304:	44 00 48 00 	l.jr r9
    a308:	15 00 00 00 	l.nop 0x0

0000a30c <notifier_init>:
{
	u32 i;

	/*initialize notifiers as free status*/
	for (i = 0; i < NOTIFIER_MAX; i++) {
		notifiers[i].flag = NOTIFIER_FREE;
    a30c:	18 60 00 01 	l.movhi r3,0x1

/*global notifiers table*/
static struct notifier notifiers[NOTIFIER_MAX];

s32 notifier_init(void)
{
    a310:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	u32 i;

	/*initialize notifiers as free status*/
	for (i = 0; i < NOTIFIER_MAX; i++) {
		notifiers[i].flag = NOTIFIER_FREE;
    a314:	a8 63 34 78 	l.ori r3,r3,0x3478
    a318:	9c 40 00 00 	l.addi r2,r0,0x0

/*global notifiers table*/
static struct notifier notifiers[NOTIFIER_MAX];

s32 notifier_init(void)
{
    a31c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	u32 i;

	/*initialize notifiers as free status*/
	for (i = 0; i < NOTIFIER_MAX; i++) {
		notifiers[i].flag = NOTIFIER_FREE;
    a320:	d4 03 10 00 	l.sw 0x0(r3),r2
    a324:	d4 03 10 0c 	l.sw 0xc(r3),r2
    a328:	d4 03 10 18 	l.sw 0x18(r3),r2
    a32c:	d4 03 10 24 	l.sw 0x24(r3),r2
    a330:	d4 03 10 30 	l.sw 0x30(r3),r2
    a334:	d4 03 10 3c 	l.sw 0x3c(r3),r2
    a338:	d4 03 10 48 	l.sw 0x48(r3),r2
    a33c:	d4 03 10 54 	l.sw 0x54(r3),r2
	}
	return OK;
}
    a340:	9c 21 00 04 	l.addi r1,r1,0x4
    a344:	a9 62 00 00 	l.ori r11,r2,0x0
    a348:	44 00 48 00 	l.jr r9
    a34c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000a350 <notifier_exit>:

s32 notifier_exit(void)
{
	return OK;
}
    a350:	44 00 48 00 	l.jr r9
    a354:	9d 60 00 00 	l.addi r11,r0,0x0

0000a358 <notifier_insert>:
		notifier->next = NULL;
	}
}

s32 notifier_insert(struct notifier **head, __pNotifier_t pcb)
{
    a358:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    a35c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    a360:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    a364:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a368:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
{
	u32              i;
	struct notifier *notifier = NULL;

	/*allocate notifier from global table*/
	s32 cpsr = cpu_disable_int();
    a36c:	18 40 00 01 	l.movhi r2,0x1
		notifier->next = NULL;
	}
}

s32 notifier_insert(struct notifier **head, __pNotifier_t pcb)
{
    a370:	a9 c3 00 00 	l.ori r14,r3,0x0
{
	u32              i;
	struct notifier *notifier = NULL;

	/*allocate notifier from global table*/
	s32 cpsr = cpu_disable_int();
    a374:	04 00 08 94 	l.jal c5c4 <cpu_disable_int>
    a378:	aa 04 00 00 	l.ori r16,r4,0x0
    a37c:	a8 42 34 78 	l.ori r2,r2,0x3478
    a380:	a8 6b 00 00 	l.ori r3,r11,0x0
	for (i = 0; i < NOTIFIER_MAX; i++) {
    a384:	9c a0 00 00 	l.addi r5,r0,0x0
		if (notifiers[i].flag == NOTIFIER_FREE) {
    a388:	84 82 00 00 	l.lwz r4,0x0(r2)
    a38c:	bc 24 00 00 	l.sfnei r4,0x0
    a390:	10 00 00 0c 	l.bf a3c0 <notifier_insert+0x68>
    a394:	9c a5 00 01 	l.addi r5,r5,0x1
    a398:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
			notifiers[i].flag = NOTIFIER_USED;
    a39c:	e0 45 28 00 	l.add r2,r5,r5
    a3a0:	18 80 00 01 	l.movhi r4,0x1
    a3a4:	e0 42 28 00 	l.add r2,r2,r5
    a3a8:	a8 84 34 78 	l.ori r4,r4,0x3478
    a3ac:	b8 42 00 02 	l.slli r2,r2,0x2
    a3b0:	e0 42 20 00 	l.add r2,r2,r4
    a3b4:	9c 80 00 01 	l.addi r4,r0,0x1
    a3b8:	00 00 00 06 	l.j a3d0 <notifier_insert+0x78>
    a3bc:	d4 02 20 00 	l.sw 0x0(r2),r4
	u32              i;
	struct notifier *notifier = NULL;

	/*allocate notifier from global table*/
	s32 cpsr = cpu_disable_int();
	for (i = 0; i < NOTIFIER_MAX; i++) {
    a3c0:	bc 25 00 08 	l.sfnei r5,0x8
    a3c4:	13 ff ff f1 	l.bf a388 <notifier_insert+0x30>
    a3c8:	9c 42 00 0c 	l.addi r2,r2,0xc
}

static struct notifier *notifier_alloc(void)
{
	u32              i;
	struct notifier *notifier = NULL;
    a3cc:	9c 40 00 00 	l.addi r2,r0,0x0
			notifiers[i].flag = NOTIFIER_USED;
			notifier = &(notifiers[i]);
			break;
		}
	}
	cpu_enable_int(cpsr);
    a3d0:	04 00 08 87 	l.jal c5ec <cpu_enable_int>
    a3d4:	15 00 00 00 	l.nop 0x0

	ASSERT(pcb != NULL);

	/*allocate a notifier*/
	notifier = notifier_alloc();
	if (notifier == NULL) {
    a3d8:	bc 22 00 00 	l.sfnei r2,0x0
    a3dc:	10 00 00 07 	l.bf a3f8 <notifier_insert+0xa0>
    a3e0:	18 80 00 01 	l.movhi r4,0x1
		WRN("allocate notifier failed\n");
    a3e4:	9c 60 00 04 	l.addi r3,r0,0x4
    a3e8:	04 00 00 fc 	l.jal a7d8 <debugger_printf>
    a3ec:	a8 84 26 67 	l.ori r4,r4,0x2667
		return -ENOSPC;
    a3f0:	00 00 00 07 	l.j a40c <notifier_insert+0xb4>
    a3f4:	9d 60 ff e4 	l.addi r11,r0,0xffffffe4
	}

	/*add notifier to head of notifier list*/
	notifier->pcb  = pcb;
	notifier->next = *head;
    a3f8:	84 6e 00 00 	l.lwz r3,0x0(r14)
		WRN("allocate notifier failed\n");
		return -ENOSPC;
	}

	/*add notifier to head of notifier list*/
	notifier->pcb  = pcb;
    a3fc:	d4 02 80 04 	l.sw 0x4(r2),r16
	notifier->next = *head;
    a400:	d4 02 18 08 	l.sw 0x8(r2),r3
	*head = notifier;
    a404:	d4 0e 10 00 	l.sw 0x0(r14),r2

	return OK;
    a408:	9d 60 00 00 	l.addi r11,r0,0x0
}
    a40c:	9c 21 00 10 	l.addi r1,r1,0x10
    a410:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a414:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    a418:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    a41c:	44 00 48 00 	l.jr r9
    a420:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

0000a424 <notifier_delete>:

s32 notifier_delete(struct notifier **head, __pNotifier_t pcb)
{
    a424:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	struct notifier *pnext;
	struct notifier *pprev;

	ASSERT(pcb != NULL);

	if (*head == NULL) {
    a428:	84 c3 00 00 	l.lwz r6,0x0(r3)

	return OK;
}

s32 notifier_delete(struct notifier **head, __pNotifier_t pcb)
{
    a42c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	struct notifier *pnext;
	struct notifier *pprev;

	ASSERT(pcb != NULL);

	if (*head == NULL) {
    a430:	bc 06 00 00 	l.sfeqi r6,0x0
    a434:	10 00 00 1f 	l.bf a4b0 <notifier_delete+0x8c>
    a438:	9d 60 ff ed 	l.addi r11,r0,0xffffffed
		/*notifier list is empty, you can't delete anything*/
		return -ENODEV;
	}
	/*search the target notifier*/
	pprev = *head;
	if (pprev->next == NULL) {
    a43c:	84 a6 00 08 	l.lwz r5,0x8(r6)
    a440:	bc 25 00 00 	l.sfnei r5,0x0
    a444:	10 00 00 0a 	l.bf a46c <notifier_delete+0x48>
    a448:	15 00 00 00 	l.nop 0x0
		/*only one notifier in list*/
		if (pprev->pcb == pcb) {
    a44c:	84 e6 00 04 	l.lwz r7,0x4(r6)
    a450:	e4 27 20 00 	l.sfne r7,r4
    a454:	10 00 00 17 	l.bf a4b0 <notifier_delete+0x8c>
    a458:	9d 60 ff dc 	l.addi r11,r0,0xffffffdc
			/*find target, free this notifier and clear notifier list.*/
			*head = NULL;
    a45c:	d4 03 28 00 	l.sw 0x0(r3),r5
    a460:	00 00 00 10 	l.j a4a0 <notifier_delete+0x7c>
    a464:	a8 a6 00 00 	l.ori r5,r6,0x0
				pprev->next = pnext->next;
				target = pnext;
				break;
			}
			pprev = pnext;
			pnext = pnext->next;
    a468:	a8 a3 00 00 	l.ori r5,r3,0x0
			target = pprev;
		}
	} else {
		pnext = pprev->next;
		while (pnext) {
			if (pnext->pcb == pcb) {
    a46c:	84 65 00 04 	l.lwz r3,0x4(r5)
    a470:	e4 23 20 00 	l.sfne r3,r4
    a474:	10 00 00 05 	l.bf a488 <notifier_delete+0x64>
    a478:	15 00 00 00 	l.nop 0x0
				/*find target notifier.*/
				pprev->next = pnext->next;
    a47c:	84 65 00 08 	l.lwz r3,0x8(r5)
				target = pnext;
				break;
    a480:	00 00 00 08 	l.j a4a0 <notifier_delete+0x7c>
    a484:	d4 06 18 08 	l.sw 0x8(r6),r3
			}
			pprev = pnext;
			pnext = pnext->next;
    a488:	84 65 00 08 	l.lwz r3,0x8(r5)
			*head = NULL;
			target = pprev;
		}
	} else {
		pnext = pprev->next;
		while (pnext) {
    a48c:	bc 23 00 00 	l.sfnei r3,0x0
    a490:	13 ff ff f6 	l.bf a468 <notifier_delete+0x44>
    a494:	a8 c5 00 00 	l.ori r6,r5,0x0
			pprev = pnext;
			pnext = pnext->next;
		}
	}
	if (target == NULL) {
		return -EFAIL;
    a498:	00 00 00 06 	l.j a4b0 <notifier_delete+0x8c>
    a49c:	9d 60 ff dc 	l.addi r11,r0,0xffffffdc
}

static void notifier_free(struct notifier *notifier)
{
	if (notifier) {
		notifier->flag = NOTIFIER_FREE;
    a4a0:	9c 40 00 00 	l.addi r2,r0,0x0
    a4a4:	d4 05 10 00 	l.sw 0x0(r5),r2
		notifier->next = NULL;
    a4a8:	d4 05 10 08 	l.sw 0x8(r5),r2
		return -EFAIL;
	}
	/*free target notifier*/
	notifier_free(target);

	return OK;
    a4ac:	a9 62 00 00 	l.ori r11,r2,0x0
}
    a4b0:	9c 21 00 04 	l.addi r1,r1,0x4
    a4b4:	44 00 48 00 	l.jr r9
    a4b8:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000a4bc <notifier_notify>:

s32 notifier_notify(struct notifier **head, u32 command, u32 aux)
{
    a4bc:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    a4c0:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    a4c4:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    a4c8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a4cc:	aa 04 00 00 	l.ori r16,r4,0x0
    a4d0:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    a4d4:	a9 c5 00 00 	l.ori r14,r5,0x0
	struct notifier *notifier;

	/*broadcast message*/
	notifier = *head;
	while (notifier) {
    a4d8:	00 00 00 06 	l.j a4f0 <notifier_notify+0x34>
    a4dc:	84 43 00 00 	l.lwz r2,0x0(r3)
		notifier->pcb(command, aux);
    a4e0:	85 62 00 04 	l.lwz r11,0x4(r2)
    a4e4:	48 00 58 00 	l.jalr r11
    a4e8:	a8 8e 00 00 	l.ori r4,r14,0x0

		/*next notifier*/
		notifier = notifier->next;
    a4ec:	84 42 00 08 	l.lwz r2,0x8(r2)
{
	struct notifier *notifier;

	/*broadcast message*/
	notifier = *head;
	while (notifier) {
    a4f0:	bc 22 00 00 	l.sfnei r2,0x0
    a4f4:	13 ff ff fb 	l.bf a4e0 <notifier_notify+0x24>
    a4f8:	a8 70 00 00 	l.ori r3,r16,0x0

		/*next notifier*/
		notifier = notifier->next;
	}
	return OK;
}
    a4fc:	9c 21 00 10 	l.addi r1,r1,0x10
    a500:	a9 62 00 00 	l.ori r11,r2,0x0
    a504:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a508:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    a50c:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    a510:	44 00 48 00 	l.jr r9
    a514:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

0000a518 <message_valid>:

s32 message_valid(struct message *pmessage)
{
	/* valid message */
	if (!!pmessage->type)
		return TRUE;
    a518:	8d 63 00 02 	l.lbz r11,0x2(r3)
    a51c:	e1 60 58 02 	l.sub r11,r0,r11

	/* invalid message */
	return FALSE;
}
    a520:	44 00 48 00 	l.jr r9
    a524:	b9 6b 00 5f 	l.srli r11,r11,0x1f

0000a528 <message_manager_init>:
 * @return: OK if initialize succeeded, others if failed.
 */
s32 message_manager_init(void)
{
	return OK;
}
    a528:	44 00 48 00 	l.jr r9
    a52c:	9d 60 00 00 	l.addi r11,r0,0x0

0000a530 <message_manager_exit>:
 * @return: OK if exit succeeded, others if failed.
 */
s32 message_manager_exit(void)
{
	return OK;
}
    a530:	44 00 48 00 	l.jr r9
    a534:	9d 60 00 00 	l.addi r11,r0,0x0

0000a538 <message_coming_notify>:
 *
 * pmessage: the pointer of coming message frame.
 * @return: OK if notify succeeded, other if failed.
 */
s32 message_coming_notify(struct message *pmessage)
{
    a538:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    a53c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a540:	a8 43 00 00 	l.ori r2,r3,0x0
static s32 process_message(struct message *pmessage)
{
	s32 result;

	/* process message */
	switch (pmessage->type) {
    a544:	8c 63 00 02 	l.lbz r3,0x2(r3)
 *
 * pmessage: the pointer of coming message frame.
 * @return: OK if notify succeeded, other if failed.
 */
s32 message_coming_notify(struct message *pmessage)
{
    a548:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
static s32 process_message(struct message *pmessage)
{
	s32 result;

	/* process message */
	switch (pmessage->type) {
    a54c:	bc 03 00 61 	l.sfeqi r3,0x61
    a550:	10 00 00 55 	l.bf a6a4 <message_coming_notify+0x16c>
    a554:	9d 60 00 00 	l.addi r11,r0,0x0
    a558:	bc 43 00 61 	l.sfgtui r3,0x61
    a55c:	10 00 00 14 	l.bf a5ac <message_coming_notify+0x74>
    a560:	bc 03 00 62 	l.sfeqi r3,0x62
    a564:	bc 03 00 25 	l.sfeqi r3,0x25
    a568:	10 00 00 25 	l.bf a5fc <message_coming_notify+0xc4>
    a56c:	bc 43 00 25 	l.sfgtui r3,0x25
    a570:	10 00 00 09 	l.bf a594 <message_coming_notify+0x5c>
    a574:	bc 03 00 26 	l.sfeqi r3,0x26
    a578:	bc 03 00 22 	l.sfeqi r3,0x22
    a57c:	10 00 00 12 	l.bf a5c4 <message_coming_notify+0x8c>
    a580:	bc 03 00 24 	l.sfeqi r3,0x24
    a584:	0c 00 00 3d 	l.bnf a678 <message_coming_notify+0x140>
    a588:	18 80 00 01 	l.movhi r4,0x1
		LOG("cpu op req\n");
		result = cpu_op(pmessage);
		break;

	case SYS_OP_REQ:
		LOG("sys op req\n");
    a58c:	00 00 00 16 	l.j a5e4 <message_coming_notify+0xac>
    a590:	9c 60 00 02 	l.addi r3,r0,0x2
static s32 process_message(struct message *pmessage)
{
	s32 result;

	/* process message */
	switch (pmessage->type) {
    a594:	10 00 00 22 	l.bf a61c <message_coming_notify+0xe4>
    a598:	bc 03 00 60 	l.sfeqi r3,0x60
    a59c:	0c 00 00 38 	l.bnf a67c <message_coming_notify+0x144>
    a5a0:	18 80 00 01 	l.movhi r4,0x1
		result = set_wakeup_src(pmessage);
		break;

	case SET_DEBUG_LEVEL_REQ:
		INF("set debug level request\n");
		result = set_debug_level(pmessage->paras[0]);
    a5a4:	00 00 00 26 	l.j a63c <message_coming_notify+0x104>
    a5a8:	84 62 00 1c 	l.lwz r3,0x1c(r2)
static s32 process_message(struct message *pmessage)
{
	s32 result;

	/* process message */
	switch (pmessage->type) {
    a5ac:	10 00 00 28 	l.bf a64c <message_coming_notify+0x114>
    a5b0:	bc 03 00 64 	l.sfeqi r3,0x64
    a5b4:	0c 00 00 32 	l.bnf a67c <message_coming_notify+0x144>
    a5b8:	18 80 00 01 	l.movhi r4,0x1
		result = uart_set_baudrate(pmessage->paras[0]);
		break;

	case SET_DRAM_CRC_PARAS:
		INF("set dram crc paras request\n");
		result = standby_set_dram_crc_paras(pmessage->paras[0], pmessage->paras[1], pmessage->paras[2]);
    a5bc:	00 00 00 29 	l.j a660 <message_coming_notify+0x128>
    a5c0:	84 a2 00 1c 	l.lwz r5,0x1c(r2)

	/* process message */
	switch (pmessage->type) {

	case CPU_OP_REQ:
		LOG("cpu op req\n");
    a5c4:	18 80 00 01 	l.movhi r4,0x1
    a5c8:	9c 60 00 02 	l.addi r3,r0,0x2
    a5cc:	04 00 00 83 	l.jal a7d8 <debugger_printf>
    a5d0:	a8 84 26 85 	l.ori r4,r4,0x2685
		result = cpu_op(pmessage);
    a5d4:	04 00 03 9d 	l.jal b448 <cpu_op>
    a5d8:	a8 62 00 00 	l.ori r3,r2,0x0
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    a5dc:	00 00 00 33 	l.j a6a8 <message_coming_notify+0x170>
    a5e0:	8c 62 00 01 	l.lbz r3,0x1(r2)
		LOG("cpu op req\n");
		result = cpu_op(pmessage);
		break;

	case SYS_OP_REQ:
		LOG("sys op req\n");
    a5e4:	04 00 00 7d 	l.jal a7d8 <debugger_printf>
    a5e8:	a8 84 26 91 	l.ori r4,r4,0x2691
		result = sys_op(pmessage);
    a5ec:	04 00 07 6b 	l.jal c398 <sys_op>
    a5f0:	a8 62 00 00 	l.ori r3,r2,0x0
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    a5f4:	00 00 00 2d 	l.j a6a8 <message_coming_notify+0x170>
    a5f8:	8c 62 00 01 	l.lbz r3,0x1(r2)
		LOG("sys op req\n");
		result = sys_op(pmessage);
		break;

	case CLEAR_WAKEUP_SRC_REQ:
		LOG("clear wakeup src req\n");
    a5fc:	18 80 00 01 	l.movhi r4,0x1
    a600:	9c 60 00 02 	l.addi r3,r0,0x2
    a604:	04 00 00 75 	l.jal a7d8 <debugger_printf>
    a608:	a8 84 26 9d 	l.ori r4,r4,0x269d
		result = clear_wakeup_src(pmessage);
    a60c:	04 00 03 54 	l.jal b35c <clear_wakeup_src>
    a610:	a8 62 00 00 	l.ori r3,r2,0x0
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    a614:	00 00 00 25 	l.j a6a8 <message_coming_notify+0x170>
    a618:	8c 62 00 01 	l.lbz r3,0x1(r2)
		LOG("clear wakeup src req\n");
		result = clear_wakeup_src(pmessage);
		break;

	case SET_WAKEUP_SRC_REQ:
		LOG("set wakeup src req\n");
    a61c:	18 80 00 01 	l.movhi r4,0x1
    a620:	9c 60 00 02 	l.addi r3,r0,0x2
    a624:	04 00 00 6d 	l.jal a7d8 <debugger_printf>
    a628:	a8 84 26 b3 	l.ori r4,r4,0x26b3
		result = set_wakeup_src(pmessage);
    a62c:	04 00 02 fd 	l.jal b220 <set_wakeup_src>
    a630:	a8 62 00 00 	l.ori r3,r2,0x0
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    a634:	00 00 00 1d 	l.j a6a8 <message_coming_notify+0x170>
    a638:	8c 62 00 01 	l.lbz r3,0x1(r2)
		result = set_wakeup_src(pmessage);
		break;

	case SET_DEBUG_LEVEL_REQ:
		INF("set debug level request\n");
		result = set_debug_level(pmessage->paras[0]);
    a63c:	04 00 01 3a 	l.jal ab24 <set_debug_level>
    a640:	84 63 00 00 	l.lwz r3,0x0(r3)
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    a644:	00 00 00 19 	l.j a6a8 <message_coming_notify+0x170>
    a648:	8c 62 00 01 	l.lbz r3,0x1(r2)
		result = set_debug_level(pmessage->paras[0]);
		break;

	case SET_UART_BAUDRATE:
		INF("set uart baudrate request\n");
		result = uart_set_baudrate(pmessage->paras[0]);
    a64c:	84 62 00 1c 	l.lwz r3,0x1c(r2)
    a650:	07 ff ec 9c 	l.jal 58c0 <uart_set_baudrate>
    a654:	84 63 00 00 	l.lwz r3,0x0(r3)
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    a658:	00 00 00 14 	l.j a6a8 <message_coming_notify+0x170>
    a65c:	8c 62 00 01 	l.lbz r3,0x1(r2)
		result = uart_set_baudrate(pmessage->paras[0]);
		break;

	case SET_DRAM_CRC_PARAS:
		INF("set dram crc paras request\n");
		result = standby_set_dram_crc_paras(pmessage->paras[0], pmessage->paras[1], pmessage->paras[2]);
    a660:	84 65 00 00 	l.lwz r3,0x0(r5)
    a664:	84 85 00 04 	l.lwz r4,0x4(r5)
    a668:	04 00 02 43 	l.jal af74 <standby_set_dram_crc_paras>
    a66c:	84 a5 00 08 	l.lwz r5,0x8(r5)
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    a670:	00 00 00 0e 	l.j a6a8 <message_coming_notify+0x170>
    a674:	8c 62 00 01 	l.lbz r3,0x1(r2)
		INF("loopback message request\n");
		result = OK;
		break;

	default:
		ERR("imt [%x]\n", pmessage->type);
    a678:	18 80 00 01 	l.movhi r4,0x1
    a67c:	d4 01 18 00 	l.sw 0x0(r1),r3
    a680:	a8 84 26 c7 	l.ori r4,r4,0x26c7
    a684:	04 00 00 55 	l.jal a7d8 <debugger_printf>
    a688:	9c 60 00 08 	l.addi r3,r0,0x8
		hexdump("msg", (char *)pmessage, sizeof(struct message));
    a68c:	18 60 00 01 	l.movhi r3,0x1
    a690:	a8 82 00 00 	l.ori r4,r2,0x0
    a694:	a8 63 26 d5 	l.ori r3,r3,0x26d5
    a698:	07 ff f6 35 	l.jal 7f6c <hexdump>
    a69c:	9c a0 00 20 	l.addi r5,r0,0x20
		result = -ESRCH;
    a6a0:	9d 60 ff fd 	l.addi r11,r0,0xfffffffd
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    a6a4:	8c 62 00 01 	l.lbz r3,0x1(r2)
    a6a8:	a4 63 00 03 	l.andi r3,r3,0x3
    a6ac:	bc 03 00 00 	l.sfeqi r3,0x0
    a6b0:	10 00 00 06 	l.bf a6c8 <message_coming_notify+0x190>
    a6b4:	d8 02 58 03 	l.sb 0x3(r2),r11
		hwmsgbox_feedback_message(pmessage, SEND_MSG_TIMEOUT);
    a6b8:	18 80 00 01 	l.movhi r4,0x1
    a6bc:	a8 62 00 00 	l.ori r3,r2,0x0
    a6c0:	07 ff f1 72 	l.jal 6c88 <hwmsgbox_feedback_message>
    a6c4:	a8 84 86 a0 	l.ori r4,r4,0x86a0

	if (process_message(pmessage) != OK)
		WRN("message [%x, %x] process fail\n", pmessage, pmessage->type);

	return OK;
}
    a6c8:	9c 21 00 0c 	l.addi r1,r1,0xc
    a6cc:	9d 60 00 00 	l.addi r11,r0,0x0
    a6d0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a6d4:	44 00 48 00 	l.jr r9
    a6d8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000a6dc <print_align>:
	}
	return OK;
}

static s32 print_align(char *string, s32 len, s32 align)
{
    a6dc:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    a6e0:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    a6e4:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
    a6e8:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
    a6ec:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a6f0:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    a6f4:	aa 44 00 00 	l.ori r18,r4,0x0
    a6f8:	9c 21 ff d4 	l.addi r1,r1,0xffffffd4
	/*
	 * fill with space ' ' when align request,
	 * the max align length is 16 byte.
	 */
	char fill_ch[] = "                ";
    a6fc:	18 80 00 01 	l.movhi r4,0x1
	}
	return OK;
}

static s32 print_align(char *string, s32 len, s32 align)
{
    a700:	aa 85 00 00 	l.ori r20,r5,0x0
    a704:	a9 c3 00 00 	l.ori r14,r3,0x0
	/*
	 * fill with space ' ' when align request,
	 * the max align length is 16 byte.
	 */
	char fill_ch[] = "                ";
    a708:	a8 84 26 d9 	l.ori r4,r4,0x26d9
    a70c:	a8 61 00 00 	l.ori r3,r1,0x0
    a710:	9c a0 00 11 	l.addi r5,r0,0x11
    a714:	07 ff f6 d7 	l.jal 8270 <memcpy>
    a718:	9c 40 00 00 	l.addi r2,r0,0x0
	if (len < align) {
    a71c:	e5 72 a0 00 	l.sfges r18,r20
    a720:	10 00 00 06 	l.bf a738 <print_align+0x5c>
    a724:	a8 6e 00 00 	l.ori r3,r14,0x0
		/* fill at right */
		strncat(string, fill_ch, align - len);
    a728:	e0 54 90 02 	l.sub r2,r20,r18
    a72c:	a8 81 00 00 	l.ori r4,r1,0x0
    a730:	07 ff f6 93 	l.jal 817c <strncat>
    a734:	a8 a2 00 00 	l.ori r5,r2,0x0
		return align - len;
	}
	/* not fill anything */
	return 0;
}
    a738:	9c 21 00 2c 	l.addi r1,r1,0x2c
    a73c:	a9 62 00 00 	l.ori r11,r2,0x0
    a740:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a744:	84 41 ff e8 	l.lwz r2,0xffffffe8(r1)
    a748:	85 c1 ff ec 	l.lwz r14,0xffffffec(r1)
    a74c:	86 01 ff f0 	l.lwz r16,0xfffffff0(r1)
    a750:	86 41 ff f4 	l.lwz r18,0xfffffff4(r1)
    a754:	44 00 48 00 	l.jr r9
    a758:	86 81 ff f8 	l.lwz r20,0xfffffff8(r1)

0000a75c <debugger_init>:
*
* Returns    :  OK if initialize debugger succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_init(void)
{
    a75c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	/* initialize serial module */
	uart_init();
    a760:	07 ff eb a5 	l.jal 55f4 <uart_init>
    a764:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	install_isr(INTC_R_UART_IRQ, getcmd, NULL);
	interrupt_enable(INTC_R_UART_IRQ);
#endif

	return OK;
}
    a768:	9c 21 00 04 	l.addi r1,r1,0x4
    a76c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a770:	44 00 48 00 	l.jr r9
    a774:	9d 60 00 00 	l.addi r11,r0,0x0

0000a778 <debugger_exit>:
*********************************************************************************************************
*/
s32 debugger_exit(void)
{
	return OK;
}
    a778:	44 00 48 00 	l.jr r9
    a77c:	9d 60 00 00 	l.addi r11,r0,0x0

0000a780 <debugger_putc>:
*
* Returns    :  OK if put out charset succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_putc(char ch)
{
    a780:	b8 63 00 18 	l.slli r3,r3,0x18
    a784:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a788:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	uart_putc(ch);
    a78c:	07 ff eb f9 	l.jal 5770 <uart_putc>
    a790:	b8 63 00 98 	l.srai r3,r3,0x18

	return OK;
}
    a794:	9c 21 00 04 	l.addi r1,r1,0x4
    a798:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a79c:	44 00 48 00 	l.jr r9
    a7a0:	9d 60 00 00 	l.addi r11,r0,0x0

0000a7a4 <debugger_get>:
*
* Returns    :  the charset we read from uart.
*********************************************************************************************************
*/
u32 debugger_get(char *buf)
{
    a7a4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a7a8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return uart_get(buf);
}
    a7ac:	9c 21 00 04 	l.addi r1,r1,0x4
    a7b0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
* Returns    :  the charset we read from uart.
*********************************************************************************************************
*/
u32 debugger_get(char *buf)
{
	return uart_get(buf);
    a7b4:	03 ff ec 08 	l.j 57d4 <uart_get>
    a7b8:	15 00 00 00 	l.nop 0x0

0000a7bc <debugger_puts>:
*
* Returns    :  OK if put out string succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_puts(char *string)
{
    a7bc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	uart_puts(string);
    a7c0:	07 ff ec 1f 	l.jal 583c <uart_puts>
    a7c4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	return OK;
}
    a7c8:	9c 21 00 04 	l.addi r1,r1,0x4
    a7cc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a7d0:	44 00 48 00 	l.jr r9
    a7d4:	9d 60 00 00 	l.addi r11,r0,0x0

0000a7d8 <debugger_printf>:
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    a7d8:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    a7dc:	18 40 00 01 	l.movhi r2,0x1
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    a7e0:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    a7e4:	a8 42 33 64 	l.ori r2,r2,0x3364
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    a7e8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    a7ec:	85 62 00 00 	l.lwz r11,0x0(r2)
    a7f0:	9c 40 00 f0 	l.addi r2,r0,0xf0
    a7f4:	9d 6b 00 01 	l.addi r11,r11,0x1
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    a7f8:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    a7fc:	e1 62 58 88 	l.sra r11,r2,r11
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    a800:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
    a804:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
    a808:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
    a80c:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    a810:	e1 6b 18 03 	l.and r11,r11,r3
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    a814:	9c 21 ff c4 	l.addi r1,r1,0xffffffc4
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    a818:	bc 0b 00 00 	l.sfeqi r11,0x0
    a81c:	10 00 00 b8 	l.bf aafc <debugger_printf+0x324>
    a820:	aa 04 00 00 	l.ori r16,r4,0x0
		cpsr = cpu_disable_int();
    a824:	04 00 07 68 	l.jal c5c4 <cpu_disable_int>
    a828:	18 40 00 01 	l.movhi r2,0x1
		/* dump current timestemp */
		if (print_timeflg)
    a82c:	a8 42 33 68 	l.ori r2,r2,0x3368
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
		cpsr = cpu_disable_int();
    a830:	aa cb 00 00 	l.ori r22,r11,0x0
		/* dump current timestemp */
		if (print_timeflg)
    a834:	84 42 00 00 	l.lwz r2,0x0(r2)
    a838:	bc 02 00 00 	l.sfeqi r2,0x0
    a83c:	10 00 00 3d 	l.bf a930 <debugger_printf+0x158>
    a840:	15 00 00 00 	l.nop 0x0
	u32  sec;
	u32  div;
	u32  i;

	/* convert current ticks to millisecond. */
	millisec = current_time_tick() * (1000 / TICK_PER_SEC);
    a844:	04 00 09 73 	l.jal ce10 <current_time_tick>
    a848:	9c 40 00 5b 	l.addi r2,r0,0x5b
    a84c:	e2 8b 58 00 	l.add r20,r11,r11
    a850:	b9 6b 00 03 	l.slli r11,r11,0x3
	/*
	 * time print format : [secs.ms] s,
	 * example           : [0001.00] s.
	 */
	time[0]  = '[';
	time[5]  = '.';
    a854:	9c 60 00 2e 	l.addi r3,r0,0x2e
	u32  sec;
	u32  div;
	u32  i;

	/* convert current ticks to millisecond. */
	millisec = current_time_tick() * (1000 / TICK_PER_SEC);
    a858:	e2 94 58 00 	l.add r20,r20,r11

	/*
	 * time print format : [secs.ms] s,
	 * example           : [0001.00] s.
	 */
	time[0]  = '[';
    a85c:	d8 01 10 10 	l.sb 0x10(r1),r2
	time[5]  = '.';
    a860:	d8 01 18 15 	l.sb 0x15(r1),r3
	time[8]  = ']';
    a864:	9c 40 00 5d 	l.addi r2,r0,0x5d
	time[9]  = ' ';
    a868:	9c 60 00 20 	l.addi r3,r0,0x20
	 * time print format : [secs.ms] s,
	 * example           : [0001.00] s.
	 */
	time[0]  = '[';
	time[5]  = '.';
	time[8]  = ']';
    a86c:	d8 01 10 18 	l.sb 0x18(r1),r2
	time[9]  = ' ';
    a870:	d8 01 18 19 	l.sb 0x19(r1),r3
	time[10] = '\0';
    a874:	9c 40 00 00 	l.addi r2,r0,0x0

	/* second */
	sec = millisec / 1000;
    a878:	a8 74 00 00 	l.ori r3,r20,0x0
    a87c:	9c 80 03 e8 	l.addi r4,r0,0x3e8
    a880:	04 00 08 6a 	l.jal ca28 <__udivsi3>
    a884:	d8 01 10 1a 	l.sb 0x1a(r1),r2
	sec = sec % 10000;
    a888:	9c 80 27 10 	l.addi r4,r0,0x2710
    a88c:	a8 6b 00 00 	l.ori r3,r11,0x0
    a890:	04 00 08 be 	l.jal cb88 <__umodsi3>
    a894:	9d c1 00 11 	l.addi r14,r1,0x11
*
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
    a898:	9f 01 00 15 	l.addi r24,r1,0x15
	time[9]  = ' ';
	time[10] = '\0';

	/* second */
	sec = millisec / 1000;
	sec = sec % 10000;
    a89c:	aa 4b 00 00 	l.ori r18,r11,0x0
	div = 1000;
    a8a0:	9c 40 03 e8 	l.addi r2,r0,0x3e8
	for (i = 1; i <= 4; i++) {
		time[i] = ((u8)(sec / div)) + '0';
    a8a4:	a8 72 00 00 	l.ori r3,r18,0x0
    a8a8:	04 00 08 60 	l.jal ca28 <__udivsi3>
    a8ac:	a8 82 00 00 	l.ori r4,r2,0x0
    a8b0:	9c 8b 00 30 	l.addi r4,r11,0x30
		sec = sec % div;
    a8b4:	a8 72 00 00 	l.ori r3,r18,0x0
	/* second */
	sec = millisec / 1000;
	sec = sec % 10000;
	div = 1000;
	for (i = 1; i <= 4; i++) {
		time[i] = ((u8)(sec / div)) + '0';
    a8b8:	d8 0e 20 00 	l.sb 0x0(r14),r4
		sec = sec % div;
    a8bc:	a8 82 00 00 	l.ori r4,r2,0x0
    a8c0:	04 00 08 b2 	l.jal cb88 <__umodsi3>
    a8c4:	9d ce 00 01 	l.addi r14,r14,0x1
		div = div / 10;
    a8c8:	a8 62 00 00 	l.ori r3,r2,0x0
    a8cc:	9c 80 00 0a 	l.addi r4,r0,0xa
    a8d0:	04 00 08 56 	l.jal ca28 <__udivsi3>
    a8d4:	aa 4b 00 00 	l.ori r18,r11,0x0

	/* second */
	sec = millisec / 1000;
	sec = sec % 10000;
	div = 1000;
	for (i = 1; i <= 4; i++) {
    a8d8:	e4 2e c0 00 	l.sfne r14,r24
    a8dc:	13 ff ff f2 	l.bf a8a4 <debugger_printf+0xcc>
    a8e0:	a8 4b 00 00 	l.ori r2,r11,0x0
		time[i] = ((u8)(sec / div)) + '0';
		sec = sec % div;
		div = div / 10;
	}
	/* millisecond */
	millisec = millisec % 1000;
    a8e4:	a8 74 00 00 	l.ori r3,r20,0x0
    a8e8:	04 00 08 a8 	l.jal cb88 <__umodsi3>
    a8ec:	9c 80 03 e8 	l.addi r4,r0,0x3e8
	div = 100;
	for (i = 6; i <= 7; i++) {
		time[i] = ((u8)(millisec / div)) + '0';
    a8f0:	9c 80 00 64 	l.addi r4,r0,0x64
    a8f4:	a8 6b 00 00 	l.ori r3,r11,0x0
    a8f8:	04 00 08 4c 	l.jal ca28 <__udivsi3>
    a8fc:	a8 4b 00 00 	l.ori r2,r11,0x0
    a900:	9c 8b 00 30 	l.addi r4,r11,0x30
		millisec = millisec % div;
    a904:	a8 62 00 00 	l.ori r3,r2,0x0
	}
	/* millisecond */
	millisec = millisec % 1000;
	div = 100;
	for (i = 6; i <= 7; i++) {
		time[i] = ((u8)(millisec / div)) + '0';
    a908:	d8 01 20 16 	l.sb 0x16(r1),r4
		millisec = millisec % div;
    a90c:	04 00 08 9f 	l.jal cb88 <__umodsi3>
    a910:	9c 80 00 64 	l.addi r4,r0,0x64
	}
	/* millisecond */
	millisec = millisec % 1000;
	div = 100;
	for (i = 6; i <= 7; i++) {
		time[i] = ((u8)(millisec / div)) + '0';
    a914:	9c 80 00 0a 	l.addi r4,r0,0xa
    a918:	04 00 08 44 	l.jal ca28 <__udivsi3>
    a91c:	a8 6b 00 00 	l.ori r3,r11,0x0
* Returns    :  OK if put out string succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_puts(char *string)
{
	uart_puts(string);
    a920:	9c 61 00 10 	l.addi r3,r1,0x10
	}
	/* millisecond */
	millisec = millisec % 1000;
	div = 100;
	for (i = 6; i <= 7; i++) {
		time[i] = ((u8)(millisec / div)) + '0';
    a924:	9c 4b 00 30 	l.addi r2,r11,0x30
* Returns    :  OK if put out string succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_puts(char *string)
{
	uart_puts(string);
    a928:	07 ff eb c5 	l.jal 583c <uart_puts>
    a92c:	d8 01 10 17 	l.sb 0x17(r1),r2
	if (level & (0xf0 >> (debug_level + 1))) {
		cpsr = cpu_disable_int();
		/* dump current timestemp */
		if (print_timeflg)
		print_current_time();
		pdest = debugger_buffer;
    a930:	18 40 00 01 	l.movhi r2,0x1
		va_start(args, format);
    a934:	9c c1 00 3c 	l.addi r6,r1,0x3c
		while (*format) {
    a938:	00 00 00 58 	l.j aa98 <debugger_printf+0x2c0>
    a93c:	a8 42 36 d0 	l.ori r2,r2,0x36d0
			if (*format == '%') {
    a940:	10 00 00 53 	l.bf aa8c <debugger_printf+0x2b4>
    a944:	15 00 00 00 	l.nop 0x0
				++format;
    a948:	9e 10 00 01 	l.addi r16,r16,0x1
				if (('0' < (*format)) && ((*format) <= '9')) {
    a94c:	90 90 00 00 	l.lbs r4,0x0(r16)
    a950:	9c 64 ff cf 	l.addi r3,r4,0xffffffcf
    a954:	a4 63 00 ff 	l.andi r3,r3,0xff
    a958:	bc 43 00 08 	l.sfgtui r3,0x8
    a95c:	10 00 00 05 	l.bf a970 <debugger_printf+0x198>
    a960:	9e 40 00 00 	l.addi r18,r0,0x0
					/* we just suport wide from 1 to 9. */
					align = *format - '0';
    a964:	9e 44 ff d0 	l.addi r18,r4,0xffffffd0
					++format;
    a968:	9e 10 00 01 	l.addi r16,r16,0x1
				} else {
					align = 0;
				}

				switch (*format) {
    a96c:	90 90 00 00 	l.lbs r4,0x0(r16)
    a970:	bc 04 00 70 	l.sfeqi r4,0x70
    a974:	10 00 00 19 	l.bf a9d8 <debugger_printf+0x200>
    a978:	bd 44 00 70 	l.sfgtsi r4,0x70
    a97c:	10 00 00 09 	l.bf a9a0 <debugger_printf+0x1c8>
    a980:	bc 04 00 75 	l.sfeqi r4,0x75
    a984:	bc 04 00 63 	l.sfeqi r4,0x63
    a988:	10 00 00 2e 	l.bf aa40 <debugger_printf+0x268>
    a98c:	bc 04 00 64 	l.sfeqi r4,0x64
    a990:	0c 00 00 39 	l.bnf aa74 <debugger_printf+0x29c>
    a994:	15 00 00 00 	l.nop 0x0
				case 'd':
					{
						/* int */
						itoa(va_arg(args, int), string, 10);
    a998:	00 00 00 0a 	l.j a9c0 <debugger_printf+0x1e8>
    a99c:	84 66 00 00 	l.lwz r3,0x0(r6)
					++format;
				} else {
					align = 0;
				}

				switch (*format) {
    a9a0:	10 00 00 23 	l.bf aa2c <debugger_printf+0x254>
    a9a4:	bc 04 00 78 	l.sfeqi r4,0x78
    a9a8:	10 00 00 0c 	l.bf a9d8 <debugger_printf+0x200>
    a9ac:	bc 04 00 73 	l.sfeqi r4,0x73
    a9b0:	0c 00 00 31 	l.bnf aa74 <debugger_printf+0x29c>
    a9b4:	15 00 00 00 	l.nop 0x0
						break;
					}
				case 's':
					{
						/* string */
						psrc = va_arg(args, char *);
    a9b8:	00 00 00 26 	l.j aa50 <debugger_printf+0x278>
    a9bc:	86 46 00 00 	l.lwz r18,0x0(r6)

				switch (*format) {
				case 'd':
					{
						/* int */
						itoa(va_arg(args, int), string, 10);
    a9c0:	a8 81 00 00 	l.ori r4,r1,0x0
    a9c4:	9c a0 00 0a 	l.addi r5,r0,0xa
    a9c8:	07 ff f4 e1 	l.jal 7d4c <itoa>
    a9cc:	9f 06 00 04 	l.addi r24,r6,0x4
    a9d0:	00 00 00 08 	l.j a9f0 <debugger_printf+0x218>
    a9d4:	15 00 00 00 	l.nop 0x0
					}
				case 'x':
				case 'p':
					{
						/* hex */
						utoa(va_arg(args, unsigned long), string, 16);
    a9d8:	9f 06 00 04 	l.addi r24,r6,0x4
    a9dc:	84 66 00 00 	l.lwz r3,0x0(r6)
    a9e0:	a8 81 00 00 	l.ori r4,r1,0x0
    a9e4:	9c a0 00 10 	l.addi r5,r0,0x10
    a9e8:	07 ff f5 25 	l.jal 7e7c <utoa>
    a9ec:	15 00 00 00 	l.nop 0x0
						len = strlen(string);
    a9f0:	07 ff f5 c5 	l.jal 8104 <strlen>
    a9f4:	a8 61 00 00 	l.ori r3,r1,0x0
						len += print_align(string, len, align);
    a9f8:	a8 b2 00 00 	l.ori r5,r18,0x0
    a9fc:	a8 61 00 00 	l.ori r3,r1,0x0
    aa00:	a8 8b 00 00 	l.ori r4,r11,0x0
    aa04:	07 ff ff 36 	l.jal a6dc <print_align>
    aa08:	aa 8b 00 00 	l.ori r20,r11,0x0
    aa0c:	aa 4b 00 00 	l.ori r18,r11,0x0
						strcpy(pdest, string);
    aa10:	a8 62 00 00 	l.ori r3,r2,0x0
    aa14:	a8 81 00 00 	l.ori r4,r1,0x0
    aa18:	07 ff f5 cf 	l.jal 8154 <strcpy>
    aa1c:	e2 94 90 00 	l.add r20,r20,r18
						pdest += len;
    aa20:	e0 42 a0 00 	l.add r2,r2,r20
						break;
    aa24:	00 00 00 1c 	l.j aa94 <debugger_printf+0x2bc>
    aa28:	a8 d8 00 00 	l.ori r6,r24,0x0
					}
				case 'u':
					{
						/* unsigned int */
						utoa(va_arg(args, unsigned long), string, 10);
    aa2c:	9f 06 00 04 	l.addi r24,r6,0x4
    aa30:	84 66 00 00 	l.lwz r3,0x0(r6)
    aa34:	a8 81 00 00 	l.ori r4,r1,0x0
    aa38:	03 ff ff ec 	l.j a9e8 <debugger_printf+0x210>
    aa3c:	9c a0 00 0a 	l.addi r5,r0,0xa
						break;
					}
				case 'c':
					{
						/* charset, aligned by cpu word */
						*pdest = (char)va_arg(args, int);
    aa40:	84 66 00 00 	l.lwz r3,0x0(r6)
    aa44:	9c c6 00 04 	l.addi r6,r6,0x4
						break;
    aa48:	00 00 00 13 	l.j aa94 <debugger_printf+0x2bc>
    aa4c:	d8 02 18 00 	l.sb 0x0(r2),r3
					}
				case 's':
					{
						/* string */
						psrc = va_arg(args, char *);
						strcpy(pdest, psrc);
    aa50:	a8 62 00 00 	l.ori r3,r2,0x0
    aa54:	a8 92 00 00 	l.ori r4,r18,0x0
    aa58:	07 ff f5 bf 	l.jal 8154 <strcpy>
    aa5c:	9e 86 00 04 	l.addi r20,r6,0x4
						pdest += strlen(psrc);
    aa60:	07 ff f5 a9 	l.jal 8104 <strlen>
    aa64:	a8 72 00 00 	l.ori r3,r18,0x0
						break;
					}
				case 's':
					{
						/* string */
						psrc = va_arg(args, char *);
    aa68:	a8 d4 00 00 	l.ori r6,r20,0x0
						strcpy(pdest, psrc);
						pdest += strlen(psrc);
						break;
    aa6c:	00 00 00 0a 	l.j aa94 <debugger_printf+0x2bc>
    aa70:	e0 42 58 00 	l.add r2,r2,r11
					}
				default:
					{
						/* no-conversion */
						*pdest++ = '%';
    aa74:	9c 60 00 25 	l.addi r3,r0,0x25
    aa78:	d8 02 18 00 	l.sb 0x0(r2),r3
						*pdest++ = *format;
    aa7c:	8c 70 00 00 	l.lbz r3,0x0(r16)
    aa80:	d8 02 18 01 	l.sb 0x1(r2),r3
    aa84:	00 00 00 04 	l.j aa94 <debugger_printf+0x2bc>
    aa88:	9c 42 00 02 	l.addi r2,r2,0x2
					}
				}
			} else {
				*pdest++ = *format;
    aa8c:	d8 02 20 00 	l.sb 0x0(r2),r4
    aa90:	9c 42 00 01 	l.addi r2,r2,0x1
			}
			/* parse next token */
			++format;
    aa94:	9e 10 00 01 	l.addi r16,r16,0x1
		/* dump current timestemp */
		if (print_timeflg)
		print_current_time();
		pdest = debugger_buffer;
		va_start(args, format);
		while (*format) {
    aa98:	90 90 00 00 	l.lbs r4,0x0(r16)
    aa9c:	bc 24 00 00 	l.sfnei r4,0x0
    aaa0:	13 ff ff a8 	l.bf a940 <debugger_printf+0x168>
    aaa4:	bc 24 00 25 	l.sfnei r4,0x25
			/* parse next token */
			++format;
		}
		va_end(args);

		if (*(pdest - 1) == '\n')
    aaa8:	90 62 ff ff 	l.lbs r3,0xffffffff(r2)
    aaac:	18 a0 00 01 	l.movhi r5,0x1
    aab0:	bc 23 00 0a 	l.sfnei r3,0xa
    aab4:	10 00 00 06 	l.bf aacc <debugger_printf+0x2f4>
    aab8:	a8 a5 33 68 	l.ori r5,r5,0x3368
			print_timeflg = 1;
    aabc:	9c 60 00 01 	l.addi r3,r0,0x1
    aac0:	d4 05 18 00 	l.sw 0x0(r5),r3
		else
			print_timeflg = 0;
		/* must end with '\0' */
		*pdest = '\0';
    aac4:	00 00 00 04 	l.j aad4 <debugger_printf+0x2fc>
    aac8:	9c 60 00 00 	l.addi r3,r0,0x0
		va_end(args);

		if (*(pdest - 1) == '\n')
			print_timeflg = 1;
		else
			print_timeflg = 0;
    aacc:	d4 05 20 00 	l.sw 0x0(r5),r4
		/* must end with '\0' */
		*pdest = '\0';
    aad0:	9c 60 00 00 	l.addi r3,r0,0x0
    aad4:	d8 02 18 00 	l.sb 0x0(r2),r3
* Returns    :  OK if put out string succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_puts(char *string)
{
	uart_puts(string);
    aad8:	18 60 00 01 	l.movhi r3,0x1
			print_timeflg = 1;
		else
			print_timeflg = 0;
		/* must end with '\0' */
		*pdest = '\0';
		pdest++;
    aadc:	9c 42 00 01 	l.addi r2,r2,0x1
* Returns    :  OK if put out string succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_puts(char *string)
{
	uart_puts(string);
    aae0:	07 ff eb 57 	l.jal 583c <uart_puts>
    aae4:	a8 63 36 d0 	l.ori r3,r3,0x36d0
			print_timeflg = 0;
		/* must end with '\0' */
		*pdest = '\0';
		pdest++;
		debugger_puts(debugger_buffer);
		cpu_enable_int(cpsr);
    aae8:	04 00 06 c1 	l.jal c5ec <cpu_enable_int>
    aaec:	a8 76 00 00 	l.ori r3,r22,0x0

		return (pdest - debugger_buffer);
    aaf0:	18 60 00 01 	l.movhi r3,0x1
    aaf4:	a8 63 36 d0 	l.ori r3,r3,0x36d0
    aaf8:	e1 62 18 02 	l.sub r11,r2,r3
	}
	return OK;
}
    aafc:	9c 21 00 3c 	l.addi r1,r1,0x3c
    ab00:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    ab04:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
    ab08:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
    ab0c:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
    ab10:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
    ab14:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
    ab18:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
    ab1c:	44 00 48 00 	l.jr r9
    ab20:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)

0000ab24 <set_debug_level>:
*
* Returns    :  OK if set the debug level succeeded.
*********************************************************************************************************
*/
s32 set_debug_level(u32 level)
{
    ab24:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
	LOG("debug_mask from %d to %d\n", debug_level, level);
    ab28:	18 40 00 01 	l.movhi r2,0x1
*
* Returns    :  OK if set the debug level succeeded.
*********************************************************************************************************
*/
s32 set_debug_level(u32 level)
{
    ab2c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	LOG("debug_mask from %d to %d\n", debug_level, level);
    ab30:	a8 42 33 64 	l.ori r2,r2,0x3364
*
* Returns    :  OK if set the debug level succeeded.
*********************************************************************************************************
*/
s32 set_debug_level(u32 level)
{
    ab34:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	LOG("debug_mask from %d to %d\n", debug_level, level);
    ab38:	18 80 00 01 	l.movhi r4,0x1
*
* Returns    :  OK if set the debug level succeeded.
*********************************************************************************************************
*/
s32 set_debug_level(u32 level)
{
    ab3c:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    ab40:	a9 c3 00 00 	l.ori r14,r3,0x0
	LOG("debug_mask from %d to %d\n", debug_level, level);
    ab44:	84 62 00 00 	l.lwz r3,0x0(r2)
    ab48:	a8 84 26 ea 	l.ori r4,r4,0x26ea
    ab4c:	d4 01 18 00 	l.sw 0x0(r1),r3
    ab50:	9c 60 00 02 	l.addi r3,r0,0x2
    ab54:	07 ff ff 21 	l.jal a7d8 <debugger_printf>
    ab58:	d4 01 70 04 	l.sw 0x4(r1),r14
	debug_level  = level;
    ab5c:	d4 02 70 00 	l.sw 0x0(r2),r14

	return OK;
}
    ab60:	9c 21 00 14 	l.addi r1,r1,0x14
    ab64:	9d 60 00 00 	l.addi r11,r0,0x0
    ab68:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    ab6c:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    ab70:	44 00 48 00 	l.jr r9
    ab74:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

0000ab78 <daemon_register_service>:

/* the list of daemon notifier */
static struct notifier *daemon_list;

int daemon_register_service(__pNotifier_t pcb)
{
    ab78:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    ab7c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    ab80:	a8 83 00 00 	l.ori r4,r3,0x0
	return notifier_insert(&daemon_list, pcb);
}
    ab84:	9c 21 00 04 	l.addi r1,r1,0x4
/* the list of daemon notifier */
static struct notifier *daemon_list;

int daemon_register_service(__pNotifier_t pcb)
{
	return notifier_insert(&daemon_list, pcb);
    ab88:	18 60 00 01 	l.movhi r3,0x1
}
    ab8c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
/* the list of daemon notifier */
static struct notifier *daemon_list;

int daemon_register_service(__pNotifier_t pcb)
{
	return notifier_insert(&daemon_list, pcb);
    ab90:	03 ff fd f2 	l.j a358 <notifier_insert>
    ab94:	a8 63 34 d8 	l.ori r3,r3,0x34d8

0000ab98 <startup_entry>:
*
* Returns    :  none.
*********************************************************************************************************
*/
void startup_entry(void)
{
    ab98:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    ab9c:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    aba0:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    aba4:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    aba8:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
    abac:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
	notifier_init();
    abb0:	07 ff fd d7 	l.jal a30c <notifier_init>
    abb4:	9c 21 ff 90 	l.addi r1,r1,0xffffff90
	save_state_flag(REC_HOTPULG | 0x0);
    abb8:	04 00 1b 5b 	l.jal 11924 <save_state_flag>
    abbc:	a8 60 b0 00 	l.ori r3,r0,0xb000

	ccu_init();
    abc0:	04 00 1b 28 	l.jal 11860 <ccu_init>
    abc4:	9c 41 00 04 	l.addi r2,r1,0x4
	save_state_flag(REC_HOTPULG | 0x1);
    abc8:	04 00 1b 57 	l.jal 11924 <save_state_flag>
    abcc:	a8 60 b0 01 	l.ori r3,r0,0xb001

	pin_init();
    abd0:	07 ff e7 d8 	l.jal 4b30 <pin_init>
    abd4:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x2);
    abd8:	04 00 1b 53 	l.jal 11924 <save_state_flag>
    abdc:	a8 60 b0 02 	l.ori r3,r0,0xb002

	save_state_flag(REC_HOTPULG | 0x3);
    abe0:	04 00 1b 51 	l.jal 11924 <save_state_flag>
    abe4:	a8 60 b0 03 	l.ori r3,r0,0xb003

	interrupt_init();
    abe8:	07 ff e7 19 	l.jal 484c <interrupt_init>
    abec:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x4);
    abf0:	04 00 1b 4d 	l.jal 11924 <save_state_flag>
    abf4:	a8 60 b0 04 	l.ori r3,r0,0xb004

	arisc_para_init();
    abf8:	04 00 00 bd 	l.jal aeec <arisc_para_init>
    abfc:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x5);
    ac00:	04 00 1b 49 	l.jal 11924 <save_state_flag>
    ac04:	a8 60 b0 05 	l.ori r3,r0,0xb005

	debugger_init();
    ac08:	07 ff fe d5 	l.jal a75c <debugger_init>
    ac0c:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x6);
    ac10:	04 00 1b 45 	l.jal 11924 <save_state_flag>
    ac14:	a8 60 b0 06 	l.ori r3,r0,0xb006
	LOG("debugger system ok\n");
    ac18:	18 80 00 01 	l.movhi r4,0x1
    ac1c:	9c 60 00 02 	l.addi r3,r0,0x2
    ac20:	07 ff fe ee 	l.jal a7d8 <debugger_printf>
    ac24:	a8 84 27 04 	l.ori r4,r4,0x2704

	twi_init();
    ac28:	07 ff ec 32 	l.jal 5cf0 <twi_init>
    ac2c:	15 00 00 00 	l.nop 0x0
	LOG("twi driver ok\n");
    ac30:	18 80 00 01 	l.movhi r4,0x1
    ac34:	9c 60 00 02 	l.addi r3,r0,0x2
    ac38:	07 ff fe e8 	l.jal a7d8 <debugger_printf>
    ac3c:	a8 84 27 18 	l.ori r4,r4,0x2718
	save_state_flag(REC_HOTPULG | 0x7);
    ac40:	04 00 1b 39 	l.jal 11924 <save_state_flag>
    ac44:	a8 60 b0 07 	l.ori r3,r0,0xb007
	pin_set_multi_sel(PIN_GRP_PL, 5, 3);
	pin_set_pull     (PIN_GRP_PL, 5, PIN_PULL_UP);
	pin_set_drive    (PIN_GRP_PL, 5, PIN_MULTI_DRIVE_2);
#endif

	pmu_init();
    ac48:	07 ff f3 7e 	l.jal 7a40 <pmu_init>
    ac4c:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x8);
    ac50:	04 00 1b 35 	l.jal 11924 <save_state_flag>
    ac54:	a8 60 b0 08 	l.ori r3,r0,0xb008
	LOG("pmu driver ok\n");
    ac58:	18 80 00 01 	l.movhi r4,0x1
    ac5c:	9c 60 00 02 	l.addi r3,r0,0x2
    ac60:	07 ff fe de 	l.jal a7d8 <debugger_printf>
    ac64:	a8 84 27 27 	l.ori r4,r4,0x2727

	hwmsgbox_init();
    ac68:	07 ff ee fb 	l.jal 6854 <hwmsgbox_init>
    ac6c:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x9);
    ac70:	04 00 1b 2d 	l.jal 11924 <save_state_flag>
    ac74:	a8 60 b0 09 	l.ori r3,r0,0xb009
	LOG("hwmsgbox driver ok\n");
    ac78:	18 80 00 01 	l.movhi r4,0x1
    ac7c:	9c 60 00 02 	l.addi r3,r0,0x2
    ac80:	07 ff fe d6 	l.jal a7d8 <debugger_printf>
    ac84:	a8 84 27 36 	l.ori r4,r4,0x2736

	cpucfg_init();
    ac88:	04 00 08 e5 	l.jal d01c <cpucfg_init>
    ac8c:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0xa);
    ac90:	04 00 1b 25 	l.jal 11924 <save_state_flag>
    ac94:	a8 60 b0 0a 	l.ori r3,r0,0xb00a
	LOG("cpucfg driver ok\n");
    ac98:	18 80 00 01 	l.movhi r4,0x1
    ac9c:	9c 60 00 02 	l.addi r3,r0,0x2
    aca0:	07 ff fe ce 	l.jal a7d8 <debugger_printf>
    aca4:	a8 84 27 4a 	l.ori r4,r4,0x274a

	message_manager_init();
    aca8:	07 ff fe 20 	l.jal a528 <message_manager_init>
    acac:	15 00 00 00 	l.nop 0x0
	LOG("message manager ok\n");
    acb0:	18 80 00 01 	l.movhi r4,0x1
    acb4:	9c 60 00 02 	l.addi r3,r0,0x2
    acb8:	07 ff fe c8 	l.jal a7d8 <debugger_printf>
    acbc:	a8 84 27 5c 	l.ori r4,r4,0x275c

	timer_init();
    acc0:	07 ff e8 da 	l.jal 5028 <timer_init>
    acc4:	15 00 00 00 	l.nop 0x0
	LOG("timer driver ok\n");
    acc8:	18 80 00 01 	l.movhi r4,0x1
    accc:	9c 60 00 02 	l.addi r3,r0,0x2
    acd0:	07 ff fe c2 	l.jal a7d8 <debugger_printf>
    acd4:	a8 84 27 70 	l.ori r4,r4,0x2770

	standby_init();
    acd8:	04 00 00 8e 	l.jal af10 <standby_init>
    acdc:	15 00 00 00 	l.nop 0x0
	LOG("standby service ok\n");
    ace0:	18 80 00 01 	l.movhi r4,0x1
    ace4:	9c 60 00 02 	l.addi r3,r0,0x2
    ace8:	07 ff fe bc 	l.jal a7d8 <debugger_printf>
    acec:	a8 84 27 81 	l.ori r4,r4,0x2781

	time_ticks_init();
    acf0:	04 00 08 5a 	l.jal ce58 <time_ticks_init>
    acf4:	15 00 00 00 	l.nop 0x0
	LOG("time ticks ok\n");
    acf8:	18 80 00 01 	l.movhi r4,0x1
    acfc:	9c 60 00 02 	l.addi r3,r0,0x2
    ad00:	07 ff fe b6 	l.jal a7d8 <debugger_printf>
    ad04:	a8 84 27 95 	l.ori r4,r4,0x2795

	watchdog_init();
    ad08:	07 ff f3 c9 	l.jal 7c2c <watchdog_init>
    ad0c:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0xc);
    ad10:	04 00 1b 05 	l.jal 11924 <save_state_flag>
    ad14:	a8 60 b0 0c 	l.ori r3,r0,0xb00c
	LOG("watchdog ok\n");
    ad18:	18 80 00 01 	l.movhi r4,0x1
    ad1c:	9c 60 00 02 	l.addi r3,r0,0x2
    ad20:	07 ff fe ae 	l.jal a7d8 <debugger_printf>
    ad24:	a8 84 27 a4 	l.ori r4,r4,0x27a4
}

static s32 startup_state_notify(s32 result)
{
	struct message message;
	u32 arisc_version[13] = {0};
    ad28:	9c a0 00 34 	l.addi r5,r0,0x34
    ad2c:	a8 62 00 00 	l.ori r3,r2,0x0
    ad30:	07 ff f5 c1 	l.jal 8434 <memset>
    ad34:	9c 80 00 00 	l.addi r4,r0,0x0
	s32 ret;

	LOG("feedback startup result [%d]\n", result);
    ad38:	9c 60 00 00 	l.addi r3,r0,0x0
    ad3c:	18 80 00 01 	l.movhi r4,0x1
    ad40:	d4 01 18 00 	l.sw 0x0(r1),r3
    ad44:	a8 84 27 b1 	l.ori r4,r4,0x27b1
    ad48:	07 ff fe a4 	l.jal a7d8 <debugger_printf>
    ad4c:	9c 60 00 02 	l.addi r3,r0,0x2

	save_state_flag(REC_HOTPULG | 0xd);
    ad50:	04 00 1a f5 	l.jal 11924 <save_state_flag>
    ad54:	a8 60 b0 0d 	l.ori r3,r0,0xb00d

	/* initialize message */
	message.type = AR100_STARTUP_NOTIFY;
    ad58:	9c 60 ff 90 	l.addi r3,r0,0xffffff90

		while(1)
			;
	}

	strcpy((char *)(arisc_version), SUB_VER);
    ad5c:	18 80 00 01 	l.movhi r4,0x1
	LOG("feedback startup result [%d]\n", result);

	save_state_flag(REC_HOTPULG | 0xd);

	/* initialize message */
	message.type = AR100_STARTUP_NOTIFY;
    ad60:	d8 01 18 3a 	l.sb 0x3a(r1),r3
	message.attr = MESSAGE_ATTR_HARDSYN;
    ad64:	9c 60 00 02 	l.addi r3,r0,0x2

		while(1)
			;
	}

	strcpy((char *)(arisc_version), SUB_VER);
    ad68:	a8 84 27 cf 	l.ori r4,r4,0x27cf

	save_state_flag(REC_HOTPULG | 0xd);

	/* initialize message */
	message.type = AR100_STARTUP_NOTIFY;
	message.attr = MESSAGE_ATTR_HARDSYN;
    ad6c:	d8 01 18 39 	l.sb 0x39(r1),r3
	message.result = result;
    ad70:	9c 60 00 00 	l.addi r3,r0,0x0
	message.count = sizeof(arisc_version) / sizeof(u32);
	message.paras = arisc_version;
    ad74:	d4 01 10 54 	l.sw 0x54(r1),r2
	save_state_flag(REC_HOTPULG | 0xd);

	/* initialize message */
	message.type = AR100_STARTUP_NOTIFY;
	message.attr = MESSAGE_ATTR_HARDSYN;
	message.result = result;
    ad78:	d8 01 18 3b 	l.sb 0x3b(r1),r3
	message.count = sizeof(arisc_version) / sizeof(u32);
    ad7c:	9c 60 00 0d 	l.addi r3,r0,0xd
    ad80:	d8 01 18 3c 	l.sb 0x3c(r1),r3

		while(1)
			;
	}

	strcpy((char *)(arisc_version), SUB_VER);
    ad84:	07 ff f4 f4 	l.jal 8154 <strcpy>
    ad88:	a8 62 00 00 	l.ori r3,r2,0x0

	ret = hwmsgbox_send_message(&message, SEND_MSG_TIMEOUT);
    ad8c:	18 80 00 01 	l.movhi r4,0x1
    ad90:	9c 61 00 38 	l.addi r3,r1,0x38
    ad94:	07 ff ef 1e 	l.jal 6a0c <hwmsgbox_send_message>
    ad98:	a8 84 86 a0 	l.ori r4,r4,0x86a0
	if (ret == OK)
    ad9c:	bc 2b 00 00 	l.sfnei r11,0x0
    ada0:	10 00 00 06 	l.bf adb8 <startup_entry+0x220>
    ada4:	15 00 00 00 	l.nop 0x0
		LOG("send notify succeed\n");
    ada8:	18 80 00 01 	l.movhi r4,0x1
    adac:	9c 60 00 02 	l.addi r3,r0,0x2
    adb0:	00 00 00 05 	l.j adc4 <startup_entry+0x22c>
    adb4:	a8 84 27 fe 	l.ori r4,r4,0x27fe
	else
		LOG("send notify failed\n");
    adb8:	18 80 00 01 	l.movhi r4,0x1
    adbc:	9c 60 00 02 	l.addi r3,r0,0x2
    adc0:	a8 84 28 13 	l.ori r4,r4,0x2813
    adc4:	07 ff fe 85 	l.jal a7d8 <debugger_printf>
    adc8:	18 40 00 01 	l.movhi r2,0x1

	save_state_flag(REC_HOTPULG | 0xe);
    adcc:	04 00 1a d6 	l.jal 11924 <save_state_flag>
    add0:	a8 60 b0 0e 	l.ori r3,r0,0xb00e
	save_state_flag(REC_HOTPULG | 0xc);
	LOG("watchdog ok\n");

	/* feedback the startup state to ac327 */
	startup_state_notify(OK);
	set_paras();
    add4:	04 00 00 4d 	l.jal af08 <set_paras>
    add8:	a8 42 27 cf 	l.ori r2,r2,0x27cf
	save_state_flag(REC_HOTPULG | 0xf);
    addc:	04 00 1a d2 	l.jal 11924 <save_state_flag>
    ade0:	a8 60 b0 0f 	l.ori r3,r0,0xb00f
	LOG("startup feedback ok\n");
    ade4:	18 80 00 01 	l.movhi r4,0x1
    ade8:	9c 60 00 02 	l.addi r3,r0,0x2
    adec:	07 ff fe 7b 	l.jal a7d8 <debugger_printf>
    adf0:	a8 84 28 27 	l.ori r4,r4,0x2827

	LOG("ar100 firmware version : %s\n", SUB_VER);
    adf4:	18 80 00 01 	l.movhi r4,0x1
    adf8:	9c 60 00 02 	l.addi r3,r0,0x2
    adfc:	a8 84 28 3c 	l.ori r4,r4,0x283c
{
	s32 ret;
	struct message message;
	static u32 msg_paras[32];

	message.paras = msg_paras;
    ae00:	1a 80 00 01 	l.movhi r20,0x1
	startup_state_notify(OK);
	set_paras();
	save_state_flag(REC_HOTPULG | 0xf);
	LOG("startup feedback ok\n");

	LOG("ar100 firmware version : %s\n", SUB_VER);
    ae04:	07 ff fe 75 	l.jal a7d8 <debugger_printf>
    ae08:	d4 01 10 00 	l.sw 0x0(r1),r2
}

static void daemon_main(void)
{
	/* initialize cpu */
	cpu_init();
    ae0c:	04 00 05 e1 	l.jal c590 <cpu_init>
    ae10:	18 40 00 01 	l.movhi r2,0x1

	/* daemon & message & user defined task loop process */
	LOG("daemon service setup...\n");
    ae14:	18 80 00 01 	l.movhi r4,0x1
    ae18:	9c 60 00 02 	l.addi r3,r0,0x2
    ae1c:	a8 84 28 59 	l.ori r4,r4,0x2859
{
	s32 ret;
	struct message message;
	static u32 msg_paras[32];

	message.paras = msg_paras;
    ae20:	aa 94 34 dc 	l.ori r20,r20,0x34dc

	ret = hwmsgbox_query_message(&message, 0);
    ae24:	9d c1 00 38 	l.addi r14,r1,0x38
	while (1) {
		/* message loop process */
		message_process_loop();

		/* daemon list process */
		if (((current_time_tick()) % DAEMON_ONCE_TICKS) == 0) {
    ae28:	9e 40 01 f4 	l.addi r18,r0,0x1f4
{
	/* initialize cpu */
	cpu_init();

	/* daemon & message & user defined task loop process */
	LOG("daemon service setup...\n");
    ae2c:	07 ff fe 6b 	l.jal a7d8 <debugger_printf>
    ae30:	a8 42 33 64 	l.ori r2,r2,0x3364
	struct message message;
	static u32 msg_paras[32];

	message.paras = msg_paras;

	ret = hwmsgbox_query_message(&message, 0);
    ae34:	a8 6e 00 00 	l.ori r3,r14,0x0
    ae38:	9c 80 00 00 	l.addi r4,r0,0x0
    ae3c:	07 ff ef db 	l.jal 6da8 <hwmsgbox_query_message>
    ae40:	d4 01 a0 54 	l.sw 0x54(r1),r20
	if (ret == OK)
    ae44:	bc 2b 00 00 	l.sfnei r11,0x0
    ae48:	10 00 00 04 	l.bf ae58 <startup_entry+0x2c0>
    ae4c:	15 00 00 00 	l.nop 0x0
		message_coming_notify(&message);
    ae50:	07 ff fd ba 	l.jal a538 <message_coming_notify>
    ae54:	a8 6e 00 00 	l.ori r3,r14,0x0
	while (1) {
		/* message loop process */
		message_process_loop();

		/* daemon list process */
		if (((current_time_tick()) % DAEMON_ONCE_TICKS) == 0) {
    ae58:	04 00 07 ee 	l.jal ce10 <current_time_tick>
    ae5c:	15 00 00 00 	l.nop 0x0
    ae60:	9c 80 01 f4 	l.addi r4,r0,0x1f4
    ae64:	04 00 07 49 	l.jal cb88 <__umodsi3>
    ae68:	a8 6b 00 00 	l.ori r3,r11,0x0
    ae6c:	bc 2b 00 00 	l.sfnei r11,0x0
    ae70:	13 ff ff f1 	l.bf ae34 <startup_entry+0x29c>
    ae74:	aa 0b 00 00 	l.ori r16,r11,0x0
			/* daemon run one time */
			printk("------------------------------\n");
    ae78:	18 80 00 01 	l.movhi r4,0x1
    ae7c:	9c 60 00 0f 	l.addi r3,r0,0xf
    ae80:	07 ff fe 56 	l.jal a7d8 <debugger_printf>
    ae84:	a8 84 28 72 	l.ori r4,r4,0x2872
			LOG("system tick:%d\n", DAEMON_ONCE_TICKS);
    ae88:	18 80 00 01 	l.movhi r4,0x1
    ae8c:	9c 60 00 02 	l.addi r3,r0,0x2
    ae90:	a8 84 28 92 	l.ori r4,r4,0x2892
    ae94:	07 ff fe 51 	l.jal a7d8 <debugger_printf>
    ae98:	d4 01 90 00 	l.sw 0x0(r1),r18
			LOG("debug_mask:%d\n", debug_level);
    ae9c:	84 62 00 00 	l.lwz r3,0x0(r2)
    aea0:	18 80 00 01 	l.movhi r4,0x1
    aea4:	d4 01 18 00 	l.sw 0x0(r1),r3
    aea8:	a8 84 28 a2 	l.ori r4,r4,0x28a2
    aeac:	07 ff fe 4b 	l.jal a7d8 <debugger_printf>
    aeb0:	9c 60 00 02 	l.addi r3,r0,0x2
			LOG("uart_buadrate:%d\n", uart_get_baudrate());
    aeb4:	07 ff ea f9 	l.jal 5a98 <uart_get_baudrate>
    aeb8:	15 00 00 00 	l.nop 0x0
    aebc:	18 80 00 01 	l.movhi r4,0x1
    aec0:	9c 60 00 02 	l.addi r3,r0,0x2
    aec4:	a8 84 28 b1 	l.ori r4,r4,0x28b1
    aec8:	07 ff fe 44 	l.jal a7d8 <debugger_printf>
    aecc:	d4 01 58 00 	l.sw 0x0(r1),r11
			notifier_notify(&daemon_list, DAEMON_RUN_NOTIFY, 0);
    aed0:	18 60 00 01 	l.movhi r3,0x1
    aed4:	9c 80 01 00 	l.addi r4,r0,0x100
    aed8:	a8 63 34 d8 	l.ori r3,r3,0x34d8
    aedc:	07 ff fd 78 	l.jal a4bc <notifier_notify>
    aee0:	a8 b0 00 00 	l.ori r5,r16,0x0
	struct message message;
	static u32 msg_paras[32];

	message.paras = msg_paras;

	ret = hwmsgbox_query_message(&message, 0);
    aee4:	03 ff ff d5 	l.j ae38 <startup_entry+0x2a0>
    aee8:	a8 6e 00 00 	l.ori r3,r14,0x0

0000aeec <arisc_para_init>:
*
* Returns    :  none.
*********************************************************************************************************
*/
void arisc_para_init(void)
{
    aeec:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    aef0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	cpucfg_set_little_endian_address((void *)(ARISC_DTS_BASE), (void *)(ARISC_DTS_BASE + ARISC_DTS_SIZE));
    aef4:	18 60 44 00 	l.movhi r3,0x4400
}
    aef8:	9c 21 00 04 	l.addi r1,r1,0x4
    aefc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
* Returns    :  none.
*********************************************************************************************************
*/
void arisc_para_init(void)
{
	cpucfg_set_little_endian_address((void *)(ARISC_DTS_BASE), (void *)(ARISC_DTS_BASE + ARISC_DTS_SIZE));
    af00:	00 00 08 60 	l.j d080 <cpucfg_set_little_endian_address>
    af04:	18 80 44 10 	l.movhi r4,0x4410

0000af08 <set_paras>:
}

void set_paras(void)
{
}
    af08:	44 00 48 00 	l.jr r9
    af0c:	15 00 00 00 	l.nop 0x0

0000af10 <standby_init>:
* Returns    :  OK if initialize succeeded, others if failed.
*********************************************************************************************************
*/
s32 standby_init(void)
{
	before_crc = 0;
    af10:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if initialize succeeded, others if failed.
*********************************************************************************************************
*/
s32 standby_init(void)
{
    af14:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	before_crc = 0;
    af18:	a8 63 36 c8 	l.ori r3,r3,0x36c8
    af1c:	9c 40 00 00 	l.addi r2,r0,0x0
*
* Returns    :  OK if initialize succeeded, others if failed.
*********************************************************************************************************
*/
s32 standby_init(void)
{
    af20:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	before_crc = 0;
    af24:	d4 03 10 00 	l.sw 0x0(r3),r2
	after_crc = 0;
    af28:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if initialize succeeded, others if failed.
*********************************************************************************************************
*/
s32 standby_init(void)
{
    af2c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	before_crc = 0;
	after_crc = 0;
    af30:	a8 63 36 cc 	l.ori r3,r3,0x36cc

	wakeup_timer_init();
    af34:	04 00 00 92 	l.jal b17c <wakeup_timer_init>
    af38:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}
    af3c:	9c 21 00 08 	l.addi r1,r1,0x8
    af40:	a9 62 00 00 	l.ori r11,r2,0x0
    af44:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    af48:	44 00 48 00 	l.jr r9
    af4c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000af50 <standby_exit>:
*********************************************************************************************************
*/
s32 standby_exit(void)
{
	return OK;
}
    af50:	44 00 48 00 	l.jr r9
    af54:	9d 60 00 00 	l.addi r11,r0,0x0

0000af58 <long_jump>:

int long_jump(int (*fn)(void *arg), void *arg)
{
    af58:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    af5c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    af60:	a8 a3 00 00 	l.ori r5,r3,0x0
	INF("fn:%x,arg:%x\n", fn, arg);

	return (*fn)(arg);
}
    af64:	9c 21 00 04 	l.addi r1,r1,0x4
    af68:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)

int long_jump(int (*fn)(void *arg), void *arg)
{
	INF("fn:%x,arg:%x\n", fn, arg);

	return (*fn)(arg);
    af6c:	44 00 28 00 	l.jr r5
    af70:	a8 64 00 00 	l.ori r3,r4,0x0

0000af74 <standby_set_dram_crc_paras>:
u32 dram_crc_src     = 0x40000000;
u32 dram_crc_len     = (1024 * 1024);

s32 standby_set_dram_crc_paras(u32 enable, u32 src, u32 len)
{
	dram_crc_enable = enable;
    af74:	18 c0 00 01 	l.movhi r6,0x1
	dram_crc_src    = src;
	dram_crc_len    = len;

	return OK;
}
    af78:	9d 60 00 00 	l.addi r11,r0,0x0
u32 dram_crc_src     = 0x40000000;
u32 dram_crc_len     = (1024 * 1024);

s32 standby_set_dram_crc_paras(u32 enable, u32 src, u32 len)
{
	dram_crc_enable = enable;
    af7c:	a8 c6 33 d0 	l.ori r6,r6,0x33d0
    af80:	d4 06 18 00 	l.sw 0x0(r6),r3
	dram_crc_src    = src;
    af84:	18 60 00 01 	l.movhi r3,0x1
    af88:	a8 63 33 58 	l.ori r3,r3,0x3358
    af8c:	d4 03 20 00 	l.sw 0x0(r3),r4
	dram_crc_len    = len;
    af90:	18 60 00 01 	l.movhi r3,0x1
    af94:	a8 63 33 5c 	l.ori r3,r3,0x335c

	return OK;
}
    af98:	44 00 48 00 	l.jr r9
    af9c:	d4 03 28 00 	l.sw 0x0(r3),r5

0000afa0 <standby_dram_crc_enable>:

s32 standby_dram_crc_enable(void)
{
	return dram_crc_enable;
}
    afa0:	18 60 00 01 	l.movhi r3,0x1
    afa4:	a8 63 33 d0 	l.ori r3,r3,0x33d0
    afa8:	44 00 48 00 	l.jr r9
    afac:	85 63 00 00 	l.lwz r11,0x0(r3)

0000afb0 <standby_dram_crc>:

u32 standby_dram_crc(void)
{
	u32 *pdata = (u32 *)(dram_crc_src);
    afb0:	18 60 00 01 	l.movhi r3,0x1
	u32 crc = 0;

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
    afb4:	18 80 00 01 	l.movhi r4,0x1
	return dram_crc_enable;
}

u32 standby_dram_crc(void)
{
	u32 *pdata = (u32 *)(dram_crc_src);
    afb8:	a8 63 33 58 	l.ori r3,r3,0x3358
	u32 crc = 0;

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
    afbc:	a8 84 33 5c 	l.ori r4,r4,0x335c
	return dram_crc_enable;
}

u32 standby_dram_crc(void)
{
	u32 *pdata = (u32 *)(dram_crc_src);
    afc0:	84 63 00 00 	l.lwz r3,0x0(r3)
	u32 crc = 0;

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
    afc4:	84 84 00 00 	l.lwz r4,0x0(r4)
}

u32 standby_dram_crc(void)
{
	u32 *pdata = (u32 *)(dram_crc_src);
	u32 crc = 0;
    afc8:	9d 60 00 00 	l.addi r11,r0,0x0

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
    afcc:	00 00 00 05 	l.j afe0 <standby_dram_crc+0x30>
    afd0:	e0 83 20 00 	l.add r4,r3,r4
		crc += *pdata;
    afd4:	84 a3 00 00 	l.lwz r5,0x0(r3)
		pdata++;
    afd8:	9c 63 00 04 	l.addi r3,r3,0x4
	u32 *pdata = (u32 *)(dram_crc_src);
	u32 crc = 0;

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
		crc += *pdata;
    afdc:	e1 6b 28 00 	l.add r11,r11,r5
{
	u32 *pdata = (u32 *)(dram_crc_src);
	u32 crc = 0;

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
    afe0:	e4 83 20 00 	l.sfltu r3,r4
    afe4:	13 ff ff fc 	l.bf afd4 <standby_dram_crc+0x24>
    afe8:	15 00 00 00 	l.nop 0x0
		pdata++;
	}
	INF("crc finish...\n");

	return crc;
}
    afec:	44 00 48 00 	l.jr r9
    aff0:	15 00 00 00 	l.nop 0x0

0000aff4 <CPUX_IRQ_MAPTO_CPUS>:
	for (cpux_irq = 0; cpux_irq < ARRAY_SIZE(irq_table); cpux_irq++) {
		if (irq_table[cpux_irq][1] == (intno + GIC_SRC_SPI))
			return irq_table[cpux_irq][0];
	}

	return FAIL;
    aff4:	18 a0 00 01 	l.movhi r5,0x1

	return FAIL;
}

static inline s32 CPUX_IRQ_MAPTO_CPUS(u32 intno)
{
    aff8:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	for (cpux_irq = 0; cpux_irq < ARRAY_SIZE(irq_table); cpux_irq++) {
		if (irq_table[cpux_irq][1] == (intno + GIC_SRC_SPI))
			return irq_table[cpux_irq][0];
	}

	return FAIL;
    affc:	a8 a5 2f 10 	l.ori r5,r5,0x2f10

	return FAIL;
}

static inline s32 CPUX_IRQ_MAPTO_CPUS(u32 intno)
{
    b000:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	u32 cpux_irq;

	for (cpux_irq = 0; cpux_irq < ARRAY_SIZE(irq_table); cpux_irq++) {
    b004:	9c 80 00 00 	l.addi r4,r0,0x0
		if (irq_table[cpux_irq][1] == (intno + GIC_SRC_SPI))
    b008:	9c 63 00 20 	l.addi r3,r3,0x20
    b00c:	84 c5 00 00 	l.lwz r6,0x0(r5)
    b010:	e4 26 18 00 	l.sfne r6,r3
    b014:	10 00 00 09 	l.bf b038 <CPUX_IRQ_MAPTO_CPUS+0x44>
    b018:	9c 84 00 01 	l.addi r4,r4,0x1
    b01c:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
			return irq_table[cpux_irq][0];
    b020:	18 40 00 01 	l.movhi r2,0x1
    b024:	b8 84 00 03 	l.slli r4,r4,0x3
    b028:	a8 42 2f 0c 	l.ori r2,r2,0x2f0c
    b02c:	e0 84 10 00 	l.add r4,r4,r2
    b030:	00 00 00 06 	l.j b048 <CPUX_IRQ_MAPTO_CPUS+0x54>
    b034:	85 64 00 00 	l.lwz r11,0x0(r4)

static inline s32 CPUX_IRQ_MAPTO_CPUS(u32 intno)
{
	u32 cpux_irq;

	for (cpux_irq = 0; cpux_irq < ARRAY_SIZE(irq_table); cpux_irq++) {
    b038:	bc 24 00 07 	l.sfnei r4,0x7
    b03c:	13 ff ff f4 	l.bf b00c <CPUX_IRQ_MAPTO_CPUS+0x18>
    b040:	9c a5 00 08 	l.addi r5,r5,0x8
		if (irq_table[cpux_irq][1] == (intno + GIC_SRC_SPI))
			return irq_table[cpux_irq][0];
	}

	return FAIL;
    b044:	9d 60 ff ff 	l.addi r11,r0,0xffffffff
}
    b048:	9c 21 00 04 	l.addi r1,r1,0x4
    b04c:	44 00 48 00 	l.jr r9
    b050:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000b054 <CPUX_IRQ_MAPTO_CPUS_GRP>:
{
	u32 cpux_irq;

	for (cpux_irq = 0; cpux_irq < ARRAY_SIZE(grp_irq_table);
	     cpux_irq++) {
		if (grp_irq_table[cpux_irq][0] == (intno + GIC_SRC_SPI))
    b054:	bc 03 ff e0 	l.sfeqi r3,0xffffffe0
    b058:	10 00 00 03 	l.bf b064 <CPUX_IRQ_MAPTO_CPUS_GRP+0x10>
    b05c:	9d 60 00 00 	l.addi r11,r0,0x0
			return grp_irq_table[cpux_irq][1];
	}

	return FAIL;
    b060:	9d 60 ff ff 	l.addi r11,r0,0xffffffff
}
    b064:	44 00 48 00 	l.jr r9
    b068:	15 00 00 00 	l.nop 0x0

0000b06c <wakeup_timer_handler>:

static struct softtimer wakeup_timer;

static s32 wakeup_timer_handler(void *parg)
{
	wakeup_source = WAKESOURE_TIMER;
    b06c:	18 60 00 01 	l.movhi r3,0x1
    b070:	18 80 c0 00 	l.movhi r4,0xc000
    b074:	a8 63 36 c4 	l.ori r3,r3,0x36c4

	return OK;
}
    b078:	9d 60 00 00 	l.addi r11,r0,0x0

static struct softtimer wakeup_timer;

static s32 wakeup_timer_handler(void *parg)
{
	wakeup_source = WAKESOURE_TIMER;
    b07c:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    b080:	44 00 48 00 	l.jr r9
    b084:	15 00 00 00 	l.nop 0x0

0000b088 <group_irq_exit>:

	return OK;
}

static int group_irq_exit(void *parg)
{
    b088:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 *p = (u32 *)parg;
	u32 wakeup_root_irq = p[0];

	s32 group_irq_num = CPUX_IRQ_MAPTO_CPUS_GRP(wakeup_root_irq);
    b08c:	84 63 00 00 	l.lwz r3,0x0(r3)
    b090:	07 ff ff f1 	l.jal b054 <CPUX_IRQ_MAPTO_CPUS_GRP>
    b094:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	/* this is a group irq, we need to set group config, otherwise do nothing. */
	if (group_irq_num != FAIL)
    b098:	bc 0b ff ff 	l.sfeqi r11,0xffffffff
    b09c:	10 00 00 04 	l.bf b0ac <group_irq_exit+0x24>
    b0a0:	a8 6b 00 00 	l.ori r3,r11,0x0
		interrupt_set_group_config(group_irq_num, FALSE);
    b0a4:	07 ff e6 22 	l.jal 492c <interrupt_set_group_config>
    b0a8:	9c 80 00 00 	l.addi r4,r0,0x0

	return OK;
}
    b0ac:	9c 21 00 04 	l.addi r1,r1,0x4
    b0b0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    b0b4:	44 00 48 00 	l.jr r9
    b0b8:	9d 60 00 00 	l.addi r11,r0,0x0

0000b0bc <group_irq_init>:

	return OK;
}

static int group_irq_init(void *parg)
{
    b0bc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 *p = (u32 *)parg;
	u32 wakeup_root_irq = p[0];

	s32 group_irq_num = CPUX_IRQ_MAPTO_CPUS_GRP(wakeup_root_irq);
    b0c0:	84 63 00 00 	l.lwz r3,0x0(r3)
    b0c4:	07 ff ff e4 	l.jal b054 <CPUX_IRQ_MAPTO_CPUS_GRP>
    b0c8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	/* this is a group irq, we need to set group config, otherwise do nothing. */
	if (group_irq_num != FAIL)
    b0cc:	bc 0b ff ff 	l.sfeqi r11,0xffffffff
    b0d0:	10 00 00 04 	l.bf b0e0 <group_irq_init+0x24>
    b0d4:	a8 6b 00 00 	l.ori r3,r11,0x0
		interrupt_set_group_config(group_irq_num, TRUE);
    b0d8:	07 ff e6 15 	l.jal 492c <interrupt_set_group_config>
    b0dc:	9c 80 00 01 	l.addi r4,r0,0x1

	return OK;
}
    b0e0:	9c 21 00 04 	l.addi r1,r1,0x4
    b0e4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    b0e8:	44 00 48 00 	l.jr r9
    b0ec:	9d 60 00 00 	l.addi r11,r0,0x0

0000b0f0 <default_wakeup_handler>:
{
	stop_softtimer(&wakeup_timer);
}

s32 default_wakeup_handler(void *parg)
{
    b0f0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    b0f4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	u32 intno = interrupt_get_current_intno();
    b0f8:	07 ff e6 82 	l.jal 4b00 <interrupt_get_current_intno>
    b0fc:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8

	/*
	 * when wakeup event happen, we should mask the r_intc interrupt here first,
	 * otherwise cpus can't go out of the interrupt handler and the resume process can't go ahead.
	 */
	interrupt_set_mask(intno, TRUE);
    b100:	9c 80 00 01 	l.addi r4,r0,0x1
    b104:	a8 6b 00 00 	l.ori r3,r11,0x0
    b108:	07 ff e6 03 	l.jal 4914 <interrupt_set_mask>
    b10c:	a8 4b 00 00 	l.ori r2,r11,0x0
    b110:	18 a0 00 01 	l.movhi r5,0x1

static inline s32 CPUS_IRQ_MAPTO_CPUX(u32 intno)
{
	u32 cpus_irq;

	for (cpus_irq = 0; cpus_irq < ARRAY_SIZE(irq_table); cpus_irq++) {
    b114:	9c 80 00 00 	l.addi r4,r0,0x0
    b118:	a8 a5 2f 0c 	l.ori r5,r5,0x2f0c
		if (irq_table[cpus_irq][0] == intno)
    b11c:	84 65 00 00 	l.lwz r3,0x0(r5)
    b120:	e4 23 10 00 	l.sfne r3,r2
    b124:	10 00 00 0a 	l.bf b14c <default_wakeup_handler+0x5c>
    b128:	9c 84 00 01 	l.addi r4,r4,0x1
    b12c:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
			return (irq_table[cpus_irq][1] - GIC_SRC_SPI);
    b130:	18 40 00 01 	l.movhi r2,0x1
    b134:	b8 84 00 03 	l.slli r4,r4,0x3
    b138:	a8 42 2f 0c 	l.ori r2,r2,0x2f0c
    b13c:	e0 84 10 00 	l.add r4,r4,r2
    b140:	84 64 00 04 	l.lwz r3,0x4(r4)
    b144:	00 00 00 06 	l.j b15c <default_wakeup_handler+0x6c>
    b148:	9c 63 ff e0 	l.addi r3,r3,0xffffffe0

static inline s32 CPUS_IRQ_MAPTO_CPUX(u32 intno)
{
	u32 cpus_irq;

	for (cpus_irq = 0; cpus_irq < ARRAY_SIZE(irq_table); cpus_irq++) {
    b14c:	bc 24 00 07 	l.sfnei r4,0x7
    b150:	13 ff ff f3 	l.bf b11c <default_wakeup_handler+0x2c>
    b154:	9c a5 00 08 	l.addi r5,r5,0x8
		if (irq_table[cpus_irq][0] == intno)
			return (irq_table[cpus_irq][1] - GIC_SRC_SPI);
	}

	return FAIL;
    b158:	9c 60 ff ff 	l.addi r3,r0,0xffffffff

	wakeup_source = CPUS_IRQ_MAPTO_CPUX(intno);
    b15c:	18 40 00 01 	l.movhi r2,0x1

	return OK;
}
    b160:	9d 60 00 00 	l.addi r11,r0,0x0
	 * when wakeup event happen, we should mask the r_intc interrupt here first,
	 * otherwise cpus can't go out of the interrupt handler and the resume process can't go ahead.
	 */
	interrupt_set_mask(intno, TRUE);

	wakeup_source = CPUS_IRQ_MAPTO_CPUX(intno);
    b164:	a8 42 36 c4 	l.ori r2,r2,0x36c4
    b168:	d4 02 18 00 	l.sw 0x0(r2),r3

	return OK;
}
    b16c:	9c 21 00 08 	l.addi r1,r1,0x8
    b170:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    b174:	44 00 48 00 	l.jr r9
    b178:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000b17c <wakeup_timer_init>:
	return OK;
}

s32 wakeup_timer_init(void)
{
	wakeup_timer.cycle = 0;
    b17c:	18 60 00 01 	l.movhi r3,0x1
	wakeup_timer.expires = 0;
	wakeup_timer.cb = wakeup_timer_handler;
    b180:	18 80 00 00 	l.movhi r4,0x0

	return OK;
}

s32 wakeup_timer_init(void)
{
    b184:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	wakeup_timer.cycle = 0;
    b188:	a8 63 33 d4 	l.ori r3,r3,0x33d4
    b18c:	9c 40 00 00 	l.addi r2,r0,0x0
	wakeup_timer.expires = 0;
	wakeup_timer.cb = wakeup_timer_handler;
    b190:	a8 84 b0 6c 	l.ori r4,r4,0xb06c

	return OK;
}

s32 wakeup_timer_init(void)
{
    b194:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	wakeup_timer.cycle = 0;
    b198:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}

s32 wakeup_timer_init(void)
{
    b19c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	wakeup_timer.cycle = 0;
	wakeup_timer.expires = 0;
    b1a0:	d4 03 10 04 	l.sw 0x4(r3),r2
	wakeup_timer.cb = wakeup_timer_handler;
	wakeup_timer.arg = NULL;
    b1a4:	d4 03 10 0c 	l.sw 0xc(r3),r2
	wakeup_timer.start = SOFTTIMER_OFF;
    b1a8:	d4 03 10 10 	l.sw 0x10(r3),r2
	add_softtimer(&wakeup_timer);
    b1ac:	04 00 07 00 	l.jal cdac <add_softtimer>
    b1b0:	d4 03 20 08 	l.sw 0x8(r3),r4

	return OK;
}
    b1b4:	9c 21 00 08 	l.addi r1,r1,0x8
    b1b8:	a9 62 00 00 	l.ori r11,r2,0x0
    b1bc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    b1c0:	44 00 48 00 	l.jr r9
    b1c4:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000b1c8 <wakeup_timer_start>:

void wakeup_timer_start(void)
{
	if (wakeup_timer.cycle != 0)
    b1c8:	18 60 00 01 	l.movhi r3,0x1

	return OK;
}

void wakeup_timer_start(void)
{
    b1cc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (wakeup_timer.cycle != 0)
    b1d0:	a8 63 33 d4 	l.ori r3,r3,0x33d4
    b1d4:	84 83 00 00 	l.lwz r4,0x0(r3)
    b1d8:	bc 04 00 00 	l.sfeqi r4,0x0
    b1dc:	10 00 00 06 	l.bf b1f4 <wakeup_timer_start+0x2c>
    b1e0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		start_softtimer(&wakeup_timer);
}
    b1e4:	9c 21 00 04 	l.addi r1,r1,0x4
    b1e8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
}

void wakeup_timer_start(void)
{
	if (wakeup_timer.cycle != 0)
		start_softtimer(&wakeup_timer);
    b1ec:	00 00 06 e3 	l.j cd78 <start_softtimer>
    b1f0:	15 00 00 00 	l.nop 0x0
}
    b1f4:	9c 21 00 04 	l.addi r1,r1,0x4
    b1f8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    b1fc:	44 00 48 00 	l.jr r9
    b200:	15 00 00 00 	l.nop 0x0

0000b204 <wakeup_timer_stop>:

void wakeup_timer_stop(void)
{
    b204:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    b208:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	stop_softtimer(&wakeup_timer);
    b20c:	18 60 00 01 	l.movhi r3,0x1
}
    b210:	9c 21 00 04 	l.addi r1,r1,0x4
    b214:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		start_softtimer(&wakeup_timer);
}

void wakeup_timer_stop(void)
{
	stop_softtimer(&wakeup_timer);
    b218:	00 00 06 dd 	l.j cd8c <stop_softtimer>
    b21c:	a8 63 33 d4 	l.ori r3,r3,0x33d4

0000b220 <set_wakeup_src>:

	return OK;
}

s32 set_wakeup_src(struct message *pmessage)
{
    b220:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    b224:	a8 43 00 00 	l.ori r2,r3,0x0
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    b228:	84 63 00 1c 	l.lwz r3,0x1c(r3)

	return OK;
}

s32 set_wakeup_src(struct message *pmessage)
{
    b22c:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;

	LOG("wakeup_root_irq: %d\n", wakeup_root_irq);
    b230:	18 80 00 01 	l.movhi r4,0x1
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    b234:	86 03 00 00 	l.lwz r16,0x0(r3)

	return OK;
}

s32 set_wakeup_src(struct message *pmessage)
{
    b238:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    b23c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;

	LOG("wakeup_root_irq: %d\n", wakeup_root_irq);
    b240:	9c 60 00 02 	l.addi r3,r0,0x2

	return OK;
}

s32 set_wakeup_src(struct message *pmessage)
{
    b244:	9c 21 ff d8 	l.addi r1,r1,0xffffffd8

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
    b248:	a5 d0 03 ff 	l.andi r14,r16,0x3ff
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;

	LOG("wakeup_root_irq: %d\n", wakeup_root_irq);
    b24c:	a8 84 28 c3 	l.ori r4,r4,0x28c3
    b250:	07 ff fd 62 	l.jal a7d8 <debugger_printf>
    b254:	d4 01 70 00 	l.sw 0x0(r1),r14
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    b258:	b8 70 00 5e 	l.srli r3,r16,0x1e
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;

	LOG("wakeup_root_irq: %d\n", wakeup_root_irq);

	if (wakeup_src_type == 0x3) {
    b25c:	bc 23 00 03 	l.sfnei r3,0x3
    b260:	10 00 00 0c 	l.bf b290 <set_wakeup_src+0x70>
    b264:	15 00 00 00 	l.nop 0x0
		time_to_wakeup = pmessage->paras[0] & 0x3fffffff;
    b268:	84 42 00 1c 	l.lwz r2,0x1c(r2)
    b26c:	84 62 00 00 	l.lwz r3,0x0(r2)
		wakeup_timer.cycle = msec_to_ticks(time_to_wakeup);
    b270:	18 40 3f ff 	l.movhi r2,0x3fff
    b274:	a8 42 ff ff 	l.ori r2,r2,0xffff
    b278:	e0 63 10 03 	l.and r3,r3,r2
    b27c:	04 00 06 ea 	l.jal ce24 <msec_to_ticks>
    b280:	18 40 00 01 	l.movhi r2,0x1
    b284:	a8 42 33 d4 	l.ori r2,r2,0x33d4
    b288:	00 00 00 2e 	l.j b340 <set_wakeup_src+0x120>
    b28c:	d4 02 58 00 	l.sw 0x0(r2),r11
	} else {
		irq_no = CPUX_IRQ_MAPTO_CPUS(wakeup_root_irq);
    b290:	07 ff ff 59 	l.jal aff4 <CPUX_IRQ_MAPTO_CPUS>
    b294:	a8 6e 00 00 	l.ori r3,r14,0x0
		if (irq_no == -1) {
    b298:	bc 2b ff ff 	l.sfnei r11,0xffffffff
    b29c:	10 00 00 0e 	l.bf b2d4 <set_wakeup_src+0xb4>
    b2a0:	a8 4b 00 00 	l.ori r2,r11,0x0
			ERR("%s(%d) irq_no error, root_irq %x\n",
    b2a4:	18 60 00 01 	l.movhi r3,0x1
    b2a8:	18 80 00 01 	l.movhi r4,0x1
    b2ac:	a8 63 2f 44 	l.ori r3,r3,0x2f44
    b2b0:	a8 84 28 d8 	l.ori r4,r4,0x28d8
    b2b4:	d4 01 18 00 	l.sw 0x0(r1),r3
    b2b8:	9c 60 00 85 	l.addi r3,r0,0x85
    b2bc:	d4 01 70 08 	l.sw 0x8(r1),r14
    b2c0:	d4 01 18 04 	l.sw 0x4(r1),r3
    b2c4:	07 ff fd 45 	l.jal a7d8 <debugger_printf>
    b2c8:	9c 60 00 08 	l.addi r3,r0,0x8
				__func__, __LINE__, wakeup_root_irq);
			return -1;
    b2cc:	00 00 00 1e 	l.j b344 <set_wakeup_src+0x124>
    b2d0:	a9 62 00 00 	l.ori r11,r2,0x0
		/**
		 * 1.we should clear wakeup_source here to avoid
		 * missing or remain of wakeup event.
		 * 2.FIXME: modify wakeup_source only in process context
		 */
		if (wakeup_source == wakeup_root_irq) {
    b2d4:	18 60 00 01 	l.movhi r3,0x1
    b2d8:	a8 63 36 c4 	l.ori r3,r3,0x36c4
    b2dc:	84 83 00 00 	l.lwz r4,0x0(r3)
    b2e0:	e4 24 70 00 	l.sfne r4,r14
    b2e4:	10 00 00 04 	l.bf b2f4 <set_wakeup_src+0xd4>
    b2e8:	15 00 00 00 	l.nop 0x0
			wakeup_source = NO_WAKESOURCE;
    b2ec:	9c 80 00 00 	l.addi r4,r0,0x0
    b2f0:	d4 03 20 00 	l.sw 0x0(r3),r4
	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
    b2f4:	b8 70 00 4a 	l.srli r3,r16,0xa
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;
    b2f8:	ba 10 00 54 	l.srli r16,r16,0x14
		}

		switch (irq_no) {
		default:
			{
				para[0] = wakeup_root_irq;
    b2fc:	d4 01 70 0c 	l.sw 0xc(r1),r14
	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
    b300:	a4 63 03 ff 	l.andi r3,r3,0x3ff
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;
    b304:	a6 10 03 ff 	l.andi r16,r16,0x3ff

		switch (irq_no) {
		default:
			{
				para[0] = wakeup_root_irq;
				para[1] = wakeup_secondary_irq;
    b308:	d4 01 18 10 	l.sw 0x10(r1),r3
}

static int irq_wakesource_init(s32 irq_num, __pCBK_t init, void *init_parg, __pISR_t handler, void *parg)
{
	if (init != NULL)
		(*init)(init_parg);
    b30c:	9c 61 00 0c 	l.addi r3,r1,0xc
    b310:	07 ff ff 6b 	l.jal b0bc <group_irq_init>
    b314:	d4 01 80 14 	l.sw 0x14(r1),r16

	if (handler != NULL)
		install_isr(irq_num, handler, parg);
    b318:	18 80 00 00 	l.movhi r4,0x0
    b31c:	a8 62 00 00 	l.ori r3,r2,0x0
    b320:	a8 84 b0 f0 	l.ori r4,r4,0xb0f0
    b324:	07 ff e5 88 	l.jal 4944 <install_isr>
    b328:	9c a0 00 00 	l.addi r5,r0,0x0

	interrupt_enable(irq_num);
    b32c:	07 ff e5 64 	l.jal 48bc <interrupt_enable>
    b330:	a8 62 00 00 	l.ori r3,r2,0x0
	interrupt_set_mask(irq_num, FALSE);
    b334:	a8 62 00 00 	l.ori r3,r2,0x0
    b338:	07 ff e5 77 	l.jal 4914 <interrupt_set_mask>
    b33c:	9c 80 00 00 	l.addi r4,r0,0x0
				break;
			}
		}
	}

	return OK;
    b340:	9d 60 00 00 	l.addi r11,r0,0x0
}
    b344:	9c 21 00 28 	l.addi r1,r1,0x28
    b348:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    b34c:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    b350:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    b354:	44 00 48 00 	l.jr r9
    b358:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

0000b35c <clear_wakeup_src>:


s32 clear_wakeup_src(struct message *pmessage)
{
    b35c:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    b360:	84 43 00 1c 	l.lwz r2,0x1c(r3)
	return OK;
}


s32 clear_wakeup_src(struct message *pmessage)
{
    b364:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    b368:	84 42 00 00 	l.lwz r2,0x0(r2)
	return OK;
}


s32 clear_wakeup_src(struct message *pmessage)
{
    b36c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    b370:	b8 62 00 5e 	l.srli r3,r2,0x1e
	return OK;
}


s32 clear_wakeup_src(struct message *pmessage)
{
    b374:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;

	if (wakeup_src_type == 0x3) {
    b378:	bc 23 00 03 	l.sfnei r3,0x3
    b37c:	10 00 00 0a 	l.bf b3a4 <clear_wakeup_src+0x48>
    b380:	9c 21 ff d8 	l.addi r1,r1,0xffffffd8
		time_to_wakeup = pmessage->paras[0] & 0x3fffffff;
		wakeup_timer.cycle = msec_to_ticks(time_to_wakeup);
    b384:	18 80 3f ff 	l.movhi r4,0x3fff
    b388:	a8 84 ff ff 	l.ori r4,r4,0xffff
    b38c:	e0 62 20 03 	l.and r3,r2,r4
    b390:	04 00 06 a5 	l.jal ce24 <msec_to_ticks>
    b394:	18 40 00 01 	l.movhi r2,0x1
    b398:	a8 42 33 d4 	l.ori r2,r2,0x33d4
    b39c:	00 00 00 20 	l.j b41c <clear_wakeup_src+0xc0>
    b3a0:	d4 02 58 00 	l.sw 0x0(r2),r11

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
    b3a4:	a6 02 03 ff 	l.andi r16,r2,0x3ff

	if (wakeup_src_type == 0x3) {
		time_to_wakeup = pmessage->paras[0] & 0x3fffffff;
		wakeup_timer.cycle = msec_to_ticks(time_to_wakeup);
	} else {
		irq_no = CPUX_IRQ_MAPTO_CPUS(wakeup_root_irq);
    b3a8:	07 ff ff 13 	l.jal aff4 <CPUX_IRQ_MAPTO_CPUS>
    b3ac:	a8 70 00 00 	l.ori r3,r16,0x0
		if (irq_no == -1) {
    b3b0:	bc 2b ff ff 	l.sfnei r11,0xffffffff
    b3b4:	10 00 00 0e 	l.bf b3ec <clear_wakeup_src+0x90>
    b3b8:	a9 cb 00 00 	l.ori r14,r11,0x0
			ERR("%s(%d) irq_no error, root_irq %x\n",
    b3bc:	18 40 00 01 	l.movhi r2,0x1
    b3c0:	18 80 00 01 	l.movhi r4,0x1
    b3c4:	a8 42 2e f8 	l.ori r2,r2,0x2ef8
    b3c8:	9c 60 00 08 	l.addi r3,r0,0x8
    b3cc:	d4 01 10 00 	l.sw 0x0(r1),r2
    b3d0:	a8 84 28 d8 	l.ori r4,r4,0x28d8
    b3d4:	9c 40 00 ba 	l.addi r2,r0,0xba
    b3d8:	d4 01 80 08 	l.sw 0x8(r1),r16
    b3dc:	07 ff fc ff 	l.jal a7d8 <debugger_printf>
    b3e0:	d4 01 10 04 	l.sw 0x4(r1),r2
				__func__, __LINE__, wakeup_root_irq);
			return -1;
    b3e4:	00 00 00 0f 	l.j b420 <clear_wakeup_src+0xc4>
    b3e8:	a9 6e 00 00 	l.ori r11,r14,0x0
	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
    b3ec:	b8 62 00 4a 	l.srli r3,r2,0xa
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;
    b3f0:	b8 42 00 54 	l.srli r2,r2,0x14
			return -1;
		}
		switch (irq_no) {
		default:
			{
				para[0] = wakeup_root_irq;
    b3f4:	d4 01 80 0c 	l.sw 0xc(r1),r16
	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
    b3f8:	a4 63 03 ff 	l.andi r3,r3,0x3ff
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;
    b3fc:	a4 42 03 ff 	l.andi r2,r2,0x3ff
		}
		switch (irq_no) {
		default:
			{
				para[0] = wakeup_root_irq;
				para[1] = wakeup_secondary_irq;
    b400:	d4 01 18 10 	l.sw 0x10(r1),r3
}

static int irq_wakesource_exit(s32 irq_num, __pCBK_t exit, void *exit_parg, __pISR_t handler, void *parg)
{
	if (exit != NULL)
		(*exit)(exit_parg);
    b404:	9c 61 00 0c 	l.addi r3,r1,0xc
    b408:	07 ff ff 20 	l.jal b088 <group_irq_exit>
    b40c:	d4 01 10 14 	l.sw 0x14(r1),r2

	if (handler != NULL)
		install_isr(irq_num, handler, parg);
	interrupt_set_mask(irq_num, TRUE);
    b410:	a8 6e 00 00 	l.ori r3,r14,0x0
    b414:	07 ff e5 40 	l.jal 4914 <interrupt_set_mask>
    b418:	9c 80 00 01 	l.addi r4,r0,0x1
				break;
			}
		}
	}

	return OK;
    b41c:	9d 60 00 00 	l.addi r11,r0,0x0
}
    b420:	9c 21 00 28 	l.addi r1,r1,0x28
    b424:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    b428:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    b42c:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    b430:	44 00 48 00 	l.jr r9
    b434:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

0000b438 <is_suspend_lock>:
}

u32 is_suspend_lock(void)
{
	return suspend_lock;
}
    b438:	18 60 00 01 	l.movhi r3,0x1
    b43c:	a8 63 34 04 	l.ori r3,r3,0x3404
    b440:	44 00 48 00 	l.jr r9
    b444:	85 63 00 00 	l.lwz r11,0x0(r3)

0000b448 <cpu_op>:

int cpu_op(struct message *pmessage)
{
	u32 mpidr = pmessage->paras[0];
    b448:	84 83 00 1c 	l.lwz r4,0x1c(r3)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
{
    b44c:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
    b450:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
	u32 mpidr = pmessage->paras[0];
	u32 entrypoint = pmessage->paras[1];
    b454:	84 44 00 04 	l.lwz r2,0x4(r4)
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
{
	u32 mpidr = pmessage->paras[0];
    b458:	85 c4 00 00 	l.lwz r14,0x0(r4)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
{
    b45c:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
    b460:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
	u32 mpidr = pmessage->paras[0];
	u32 entrypoint = pmessage->paras[1];
	u32 cpu_state = pmessage->paras[2];
    b464:	86 04 00 08 	l.lwz r16,0x8(r4)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
{
    b468:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
    b46c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    b470:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
    b474:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
    b478:	9c 21 ff ac 	l.addi r1,r1,0xffffffac
	u32 mpidr = pmessage->paras[0];
	u32 entrypoint = pmessage->paras[1];
	u32 cpu_state = pmessage->paras[2];
	u32 cluster_state = pmessage->paras[3]; /* unused variable */
	u32 system_state = pmessage->paras[4];
    b47c:	86 44 00 10 	l.lwz r18,0x10(r4)

	LOG("mpidr:%x, entrypoint:%x; cpu_state:%x, cluster_state:%x, system_state:%x\n", mpidr, entrypoint, cpu_state, cluster_state, system_state);
    b480:	d4 01 70 00 	l.sw 0x0(r1),r14
    b484:	d4 01 10 04 	l.sw 0x4(r1),r2
    b488:	d4 01 80 08 	l.sw 0x8(r1),r16
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
{
    b48c:	ab 03 00 00 	l.ori r24,r3,0x0
	u32 entrypoint = pmessage->paras[1];
	u32 cpu_state = pmessage->paras[2];
	u32 cluster_state = pmessage->paras[3]; /* unused variable */
	u32 system_state = pmessage->paras[4];

	LOG("mpidr:%x, entrypoint:%x; cpu_state:%x, cluster_state:%x, system_state:%x\n", mpidr, entrypoint, cpu_state, cluster_state, system_state);
    b490:	84 64 00 0c 	l.lwz r3,0xc(r4)
    b494:	18 80 00 01 	l.movhi r4,0x1
    b498:	d4 01 18 0c 	l.sw 0xc(r1),r3
    b49c:	a8 84 28 fe 	l.ori r4,r4,0x28fe
    b4a0:	9c 60 00 02 	l.addi r3,r0,0x2
    b4a4:	07 ff fc cd 	l.jal a7d8 <debugger_printf>
    b4a8:	d4 01 90 10 	l.sw 0x10(r1),r18
	if (cpu_state == arisc_power_on) {
    b4ac:	bc 30 00 00 	l.sfnei r16,0x0
    b4b0:	10 00 00 0a 	l.bf b4d8 <cpu_op+0x90>
    b4b4:	bc 30 00 03 	l.sfnei r16,0x3
		set_secondary_entry(entrypoint, mpidr);
    b4b8:	a8 62 00 00 	l.ori r3,r2,0x0
    b4bc:	04 00 08 4d 	l.jal d5f0 <set_secondary_entry>
    b4c0:	a8 8e 00 00 	l.ori r4,r14,0x0
		cpu_power_up(0, mpidr);
    b4c4:	a8 70 00 00 	l.ori r3,r16,0x0
    b4c8:	04 00 08 a6 	l.jal d760 <cpu_power_up>
    b4cc:	a8 8e 00 00 	l.ori r4,r14,0x0
			cpu_power_down(0, mpidr);
		}
	}

	return 0;
}
    b4d0:	00 00 03 a8 	l.j c370 <cpu_op+0xf28>
    b4d4:	9c 21 00 54 	l.addi r1,r1,0x54

	LOG("mpidr:%x, entrypoint:%x; cpu_state:%x, cluster_state:%x, system_state:%x\n", mpidr, entrypoint, cpu_state, cluster_state, system_state);
	if (cpu_state == arisc_power_on) {
		set_secondary_entry(entrypoint, mpidr);
		cpu_power_up(0, mpidr);
	} else if (cpu_state == arisc_power_off) {
    b4d8:	10 00 03 a5 	l.bf c36c <cpu_op+0xf24>
    b4dc:	bc 02 00 00 	l.sfeqi r2,0x0
		if (entrypoint) {
    b4e0:	10 00 03 a0 	l.bf c360 <cpu_op+0xf18>
    b4e4:	bc 32 00 03 	l.sfnei r18,0x3
			if (system_state == arisc_power_off) {
    b4e8:	10 00 03 a1 	l.bf c36c <cpu_op+0xf24>
    b4ec:	18 60 f3 f3 	l.movhi r3,0xf3f3
{
	static u32 dts_has_parsed = 0;
	void *fdt;
	int32_t param_node;

	if (!!dts_has_parsed)
    b4f0:	18 40 00 01 	l.movhi r2,0x1
* Returns    :  OK if enter extended super-standby succeeded, others if failed.
*********************************************************************************************************
*/
static s32 standby_entry(struct message *pmessage)
{
	save_state_flag(REC_ESTANDBY | REC_ENTER);
    b4f4:	a8 63 10 00 	l.ori r3,r3,0x1000
    b4f8:	04 00 19 0b 	l.jal 11924 <save_state_flag>
    b4fc:	a8 42 34 00 	l.ori r2,r2,0x3400
{
	static u32 dts_has_parsed = 0;
	void *fdt;
	int32_t param_node;

	if (!!dts_has_parsed)
    b500:	84 42 00 00 	l.lwz r2,0x0(r2)
    b504:	bc 22 00 00 	l.sfnei r2,0x0
    b508:	10 00 00 51 	l.bf b64c <cpu_op+0x204>
    b50c:	18 60 f3 f3 	l.movhi r3,0xf3f3
		return 0;

	fdt = (void *)(ARISC_DTS_BASE);

	/* parse power tree */
	param_node = fdt_path_offset(fdt, "standby_param");
    b510:	18 80 00 01 	l.movhi r4,0x1
    b514:	18 60 44 00 	l.movhi r3,0x4400
    b518:	07 ff f8 85 	l.jal 972c <fdt_path_offset>
    b51c:	a8 84 29 48 	l.ori r4,r4,0x2948
	if (param_node < 0) {
    b520:	bd 6b 00 00 	l.sfgesi r11,0x0
    b524:	10 00 00 15 	l.bf b578 <cpu_op+0x130>
    b528:	a8 4b 00 00 	l.ori r2,r11,0x0
		WRN("no standby_param: %x\n", param_node);
    b52c:	18 80 00 01 	l.movhi r4,0x1
    b530:	9c 60 00 04 	l.addi r3,r0,0x4
    b534:	a8 84 29 56 	l.ori r4,r4,0x2956
    b538:	07 ff fc a8 	l.jal a7d8 <debugger_printf>
    b53c:	d4 01 58 00 	l.sw 0x0(r1),r11

		/* try "standby-param" more to keep compatibility with linux-4.9 and linux-5.4 */
		param_node = fdt_path_offset(fdt, "standby-param");
    b540:	18 80 00 01 	l.movhi r4,0x1
    b544:	18 60 44 00 	l.movhi r3,0x4400
    b548:	07 ff f8 79 	l.jal 972c <fdt_path_offset>
    b54c:	a8 84 29 70 	l.ori r4,r4,0x2970
		if (param_node < 0) {
    b550:	bd 6b 00 00 	l.sfgesi r11,0x0
    b554:	10 00 00 09 	l.bf b578 <cpu_op+0x130>
    b558:	a8 4b 00 00 	l.ori r2,r11,0x0
			ERR("no standby-param: %x\n", param_node);
    b55c:	18 80 00 01 	l.movhi r4,0x1
    b560:	9c 60 00 08 	l.addi r3,r0,0x8
    b564:	a8 84 29 7e 	l.ori r4,r4,0x297e
    b568:	07 ff fc 9c 	l.jal a7d8 <debugger_printf>
    b56c:	d4 01 58 00 	l.sw 0x0(r1),r11
{
	save_state_flag(REC_ESTANDBY | REC_ENTER);

	standby_dts_parse();

	save_state_flag(REC_ESTANDBY | REC_ENTER | 0x1);
    b570:	00 00 00 37 	l.j b64c <cpu_op+0x204>
    b574:	18 60 f3 f3 	l.movhi r3,0xf3f3
			ERR("no standby-param: %x\n", param_node);
			return -1;
		}
	}

	fdt_getprop_u32(fdt, param_node, "vdd-cpu", &standby_vdd_cpu);
    b578:	18 a0 00 01 	l.movhi r5,0x1
    b57c:	18 c0 00 01 	l.movhi r6,0x1
    b580:	a8 82 00 00 	l.ori r4,r2,0x0
    b584:	18 60 44 00 	l.movhi r3,0x4400
    b588:	a8 a5 29 98 	l.ori r5,r5,0x2998
    b58c:	07 ff f7 eb 	l.jal 9538 <fdt_getprop_u32>
    b590:	a8 c6 33 f4 	l.ori r6,r6,0x33f4
	fdt_getprop_u32(fdt, param_node, "vdd-sys", &standby_vdd_sys);
    b594:	18 a0 00 01 	l.movhi r5,0x1
    b598:	18 c0 00 01 	l.movhi r6,0x1
    b59c:	a8 82 00 00 	l.ori r4,r2,0x0
    b5a0:	18 60 44 00 	l.movhi r3,0x4400
    b5a4:	a8 a5 29 a0 	l.ori r5,r5,0x29a0
    b5a8:	07 ff f7 e4 	l.jal 9538 <fdt_getprop_u32>
    b5ac:	a8 c6 33 f8 	l.ori r6,r6,0x33f8
	fdt_getprop_u32(fdt, param_node, "vcc-pll", &standby_vcc_pll);
    b5b0:	18 a0 00 01 	l.movhi r5,0x1
    b5b4:	18 c0 00 01 	l.movhi r6,0x1
    b5b8:	a8 82 00 00 	l.ori r4,r2,0x0
    b5bc:	18 60 44 00 	l.movhi r3,0x4400
    b5c0:	a8 a5 29 a8 	l.ori r5,r5,0x29a8
    b5c4:	07 ff f7 dd 	l.jal 9538 <fdt_getprop_u32>
    b5c8:	a8 c6 33 fc 	l.ori r6,r6,0x33fc
	fdt_getprop_u32(fdt, param_node, "osc24m-on", &standby_osc24m_on);
    b5cc:	a8 82 00 00 	l.ori r4,r2,0x0
    b5d0:	18 a0 00 01 	l.movhi r5,0x1
    b5d4:	18 c0 00 01 	l.movhi r6,0x1
	LOG("standby power %x, %x, %x, %x\n",
    b5d8:	18 40 00 01 	l.movhi r2,0x1
	}

	fdt_getprop_u32(fdt, param_node, "vdd-cpu", &standby_vdd_cpu);
	fdt_getprop_u32(fdt, param_node, "vdd-sys", &standby_vdd_sys);
	fdt_getprop_u32(fdt, param_node, "vcc-pll", &standby_vcc_pll);
	fdt_getprop_u32(fdt, param_node, "osc24m-on", &standby_osc24m_on);
    b5dc:	18 60 44 00 	l.movhi r3,0x4400
    b5e0:	a8 a5 29 b0 	l.ori r5,r5,0x29b0
    b5e4:	a8 c6 33 60 	l.ori r6,r6,0x3360
    b5e8:	07 ff f7 d4 	l.jal 9538 <fdt_getprop_u32>
    b5ec:	a8 42 33 f4 	l.ori r2,r2,0x33f4
	LOG("standby power %x, %x, %x, %x\n",
    b5f0:	84 42 00 00 	l.lwz r2,0x0(r2)
    b5f4:	18 80 00 01 	l.movhi r4,0x1
    b5f8:	d4 01 10 00 	l.sw 0x0(r1),r2
    b5fc:	18 40 00 01 	l.movhi r2,0x1
    b600:	9c 60 00 02 	l.addi r3,r0,0x2
    b604:	a8 42 33 f8 	l.ori r2,r2,0x33f8
    b608:	a8 84 29 ba 	l.ori r4,r4,0x29ba
    b60c:	84 42 00 00 	l.lwz r2,0x0(r2)
    b610:	d4 01 10 04 	l.sw 0x4(r1),r2
    b614:	18 40 00 01 	l.movhi r2,0x1
    b618:	a8 42 33 fc 	l.ori r2,r2,0x33fc
    b61c:	84 42 00 00 	l.lwz r2,0x0(r2)
    b620:	d4 01 10 08 	l.sw 0x8(r1),r2
    b624:	18 40 00 01 	l.movhi r2,0x1
    b628:	a8 42 33 60 	l.ori r2,r2,0x3360
    b62c:	84 42 00 00 	l.lwz r2,0x0(r2)
    b630:	d4 01 10 0c 	l.sw 0xc(r1),r2
    b634:	07 ff fc 69 	l.jal a7d8 <debugger_printf>
    b638:	18 40 00 01 	l.movhi r2,0x1
		standby_vdd_cpu, standby_vdd_sys, standby_vcc_pll, standby_osc24m_on);

	dts_has_parsed = 1;
    b63c:	9c 60 00 01 	l.addi r3,r0,0x1
    b640:	a8 42 34 00 	l.ori r2,r2,0x3400
    b644:	d4 02 18 00 	l.sw 0x0(r2),r3
{
	save_state_flag(REC_ESTANDBY | REC_ENTER);

	standby_dts_parse();

	save_state_flag(REC_ESTANDBY | REC_ENTER | 0x1);
    b648:	18 60 f3 f3 	l.movhi r3,0xf3f3

	/* backup cpus source clock */
	iosc_freq_init();
	cpus_src = readl(CPUS_CFG_REG) & CPUS_CLK_SRC_SEL_MASK;
    b64c:	18 40 07 01 	l.movhi r2,0x701
{
	save_state_flag(REC_ESTANDBY | REC_ENTER);

	standby_dts_parse();

	save_state_flag(REC_ESTANDBY | REC_ENTER | 0x1);
    b650:	04 00 18 b5 	l.jal 11924 <save_state_flag>
    b654:	a8 63 10 01 	l.ori r3,r3,0x1001

	/* backup cpus source clock */
	iosc_freq_init();
    b658:	04 00 18 24 	l.jal 116e8 <iosc_freq_init>
    b65c:	15 00 00 00 	l.nop 0x0
	cpus_src = readl(CPUS_CFG_REG) & CPUS_CLK_SRC_SEL_MASK;
    b660:	84 62 00 00 	l.lwz r3,0x0(r2)
    b664:	18 40 07 00 	l.movhi r2,0x700
    b668:	e0 63 10 03 	l.and r3,r3,r2
    b66c:	18 40 00 01 	l.movhi r2,0x1
    b670:	a8 42 33 e8 	l.ori r2,r2,0x33e8
    b674:	d4 02 18 00 	l.sw 0x0(r2),r3
static u32 platform_standby_type(void)
{
	u32 type = 0;

	/* usb standby */
	if (interrupt_get_enabled(INTC_USB0_IRQ) ||
    b678:	9c 60 00 10 	l.addi r3,r0,0x10
    b67c:	07 ff e5 27 	l.jal 4b18 <interrupt_get_enabled>
    b680:	9c 40 20 00 	l.addi r2,r0,0x2000
    b684:	bc 2b 00 00 	l.sfnei r11,0x0
    b688:	10 00 00 09 	l.bf b6ac <cpu_op+0x264>
    b68c:	18 60 00 01 	l.movhi r3,0x1
			interrupt_get_enabled(INTC_USB1_IRQ)) {
    b690:	07 ff e5 22 	l.jal 4b18 <interrupt_get_enabled>
    b694:	9c 60 00 11 	l.addi r3,r0,0x11
static u32 platform_standby_type(void)
{
	u32 type = 0;

	/* usb standby */
	if (interrupt_get_enabled(INTC_USB0_IRQ) ||
    b698:	bc 2b 00 00 	l.sfnei r11,0x0
    b69c:	10 00 00 03 	l.bf b6a8 <cpu_op+0x260>
    b6a0:	15 00 00 00 	l.nop 0x0
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(1), VDD_SYS_PWR_RST_REG);
}

static u32 platform_standby_type(void)
{
	u32 type = 0;
    b6a4:	a8 4b 00 00 	l.ori r2,r11,0x0
	/* backup cpus source clock */
	iosc_freq_init();
	cpus_src = readl(CPUS_CFG_REG) & CPUS_CLK_SRC_SEL_MASK;

	/* parse standby type from enabled interrupt */
	standby_type = platform_standby_type();
    b6a8:	18 60 00 01 	l.movhi r3,0x1
    b6ac:	a8 63 33 ec 	l.ori r3,r3,0x33ec
    b6b0:	d4 03 10 00 	l.sw 0x0(r3),r2
	 *
	 * initialize enter super-standby porcess
	 *
	 * --------------------------------------------------------------------------
	 */
	save_state_flag(REC_ESTANDBY | REC_BEFORE_INIT);
    b6b4:	18 40 f3 f3 	l.movhi r2,0xf3f3
    b6b8:	04 00 18 9b 	l.jal 11924 <save_state_flag>
    b6bc:	a8 62 20 00 	l.ori r3,r2,0x2000
	return type;
}

static s32 standby_process_init(struct message *pmessage)
{
	suspend_lock = 1;
    b6c0:	18 60 00 01 	l.movhi r3,0x1
    b6c4:	9c 80 00 01 	l.addi r4,r0,0x1
    b6c8:	a8 63 34 04 	l.ori r3,r3,0x3404
    b6cc:	d4 03 20 00 	l.sw 0x0(r3),r4

	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x1);
    b6d0:	04 00 18 95 	l.jal 11924 <save_state_flag>
    b6d4:	a8 62 30 01 	l.ori r3,r2,0x3001

	cpucfg_cpu_suspend();
    b6d8:	04 00 07 65 	l.jal d46c <cpucfg_cpu_suspend>
    b6dc:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x2);
    b6e0:	a8 62 30 02 	l.ori r3,r2,0x3002
    b6e4:	04 00 18 90 	l.jal 11924 <save_state_flag>
    b6e8:	18 40 04 80 	l.movhi r2,0x480
    b6ec:	18 80 00 01 	l.movhi r4,0x1
    b6f0:	a8 42 01 08 	l.ori r2,r2,0x108
    b6f4:	a8 84 34 08 	l.ori r4,r4,0x3408
} static smc_region_save[SMC_REGION_COUNT];
static void smc_standby_init(void)
{
	int read_idx;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (readl(SMC_REGIN_ATTRIBUTE_REG(read_idx)) == 0)
    b6f8:	84 62 00 00 	l.lwz r3,0x0(r2)
    b6fc:	bc 03 00 00 	l.sfeqi r3,0x0
    b700:	10 00 00 0e 	l.bf b738 <cpu_op+0x2f0>
    b704:	15 00 00 00 	l.nop 0x0
			break;
		smc_region_save[read_idx].region_low =
			readl(SMC_REGIN_SETUP_LOW_REG(read_idx));
    b708:	84 62 ff f8 	l.lwz r3,0xfffffff8(r2)
{
	int read_idx;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (readl(SMC_REGIN_ATTRIBUTE_REG(read_idx)) == 0)
			break;
		smc_region_save[read_idx].region_low =
    b70c:	d4 04 18 00 	l.sw 0x0(r4),r3
			readl(SMC_REGIN_SETUP_LOW_REG(read_idx));
		smc_region_save[read_idx].region_high =
			readl(SMC_REGIN_SETUP_HIGH_REG(read_idx));
    b710:	84 62 ff fc 	l.lwz r3,0xfffffffc(r2)
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (readl(SMC_REGIN_ATTRIBUTE_REG(read_idx)) == 0)
			break;
		smc_region_save[read_idx].region_low =
			readl(SMC_REGIN_SETUP_LOW_REG(read_idx));
		smc_region_save[read_idx].region_high =
    b714:	d4 04 18 04 	l.sw 0x4(r4),r3
			readl(SMC_REGIN_SETUP_HIGH_REG(read_idx));
		smc_region_save[read_idx].region_attr =
			readl(SMC_REGIN_ATTRIBUTE_REG(read_idx));
    b718:	84 62 00 00 	l.lwz r3,0x0(r2)
			break;
		smc_region_save[read_idx].region_low =
			readl(SMC_REGIN_SETUP_LOW_REG(read_idx));
		smc_region_save[read_idx].region_high =
			readl(SMC_REGIN_SETUP_HIGH_REG(read_idx));
		smc_region_save[read_idx].region_attr =
    b71c:	9c 42 00 10 	l.addi r2,r2,0x10
    b720:	d4 04 18 08 	l.sw 0x8(r4),r3
	u32 region_attr;
} static smc_region_save[SMC_REGION_COUNT];
static void smc_standby_init(void)
{
	int read_idx;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
    b724:	18 60 04 80 	l.movhi r3,0x480
    b728:	a8 63 01 88 	l.ori r3,r3,0x188
    b72c:	e4 22 18 00 	l.sfne r2,r3
    b730:	13 ff ff f2 	l.bf b6f8 <cpu_op+0x2b0>
    b734:	9c 84 00 0c 	l.addi r4,r4,0xc
}

static void device_suspend(void)
{
	smc_standby_init();
	pmu_standby_init();
    b738:	07 ff f1 25 	l.jal 7bcc <pmu_standby_init>
    b73c:	18 40 00 01 	l.movhi r2,0x1
	twi_standby_init();
    b740:	07 ff eb ca 	l.jal 6668 <twi_standby_init>
    b744:	a8 42 33 ec 	l.ori r2,r2,0x33ec
	hwmsgbox_super_standby_init();
    b748:	07 ff ee 0b 	l.jal 6f74 <hwmsgbox_super_standby_init>
    b74c:	15 00 00 00 	l.nop 0x0

static void usb_suspend(void)
{
	u32 val;

	if (!(standby_type & CPUS_WAKEUP_USB)) {
    b750:	84 42 00 00 	l.lwz r2,0x0(r2)
    b754:	a4 42 20 00 	l.andi r2,r2,0x2000
    b758:	bc 22 00 00 	l.sfnei r2,0x0
    b75c:	10 00 00 07 	l.bf b778 <cpu_op+0x330>
    b760:	18 80 03 00 	l.movhi r4,0x300
		val = readl(VDD_SYS_PWROFF_GATING_REG);
    b764:	18 40 07 01 	l.movhi r2,0x701
    b768:	a8 42 02 50 	l.ori r2,r2,0x250
    b76c:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= VDD_SYS2USB_GATING(1);
		val |= VDD_USB2CPUS_GATING(1);
    b770:	00 00 00 1b 	l.j b7dc <cpu_op+0x394>
    b774:	a8 63 01 08 	l.ori r3,r3,0x108
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby suspend , usb0*/
		val = readl(CCU_USB0_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY0_MASK;
		val &= ~SCLK_GATING_OHCI0_MASK;
    b778:	18 a0 5f ff 	l.movhi r5,0x5fff
		val |= VDD_SYS2USB_GATING(1);
		val |= VDD_USB2CPUS_GATING(1);
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby suspend , usb0*/
		val = readl(CCU_USB0_CLOCK_REG);
    b77c:	a8 44 1a 70 	l.ori r2,r4,0x1a70
		val &= ~SCLK_GATING_USBPHY0_MASK;
		val &= ~SCLK_GATING_OHCI0_MASK;
    b780:	a8 a5 ff ff 	l.ori r5,r5,0xffff
		val |= VDD_SYS2USB_GATING(1);
		val |= VDD_USB2CPUS_GATING(1);
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby suspend , usb0*/
		val = readl(CCU_USB0_CLOCK_REG);
    b784:	84 62 00 00 	l.lwz r3,0x0(r2)
		val &= ~SCLK_GATING_OHCI0_MASK;
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val &= ~USBOHCI0_GATING_MASK;
		val &= ~USBEHCI0_GATING_MASK;
    b788:	9c c0 ff ee 	l.addi r6,r0,0xffffffee
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby suspend , usb0*/
		val = readl(CCU_USB0_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY0_MASK;
		val &= ~SCLK_GATING_OHCI0_MASK;
    b78c:	e0 63 28 03 	l.and r3,r3,r5
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		/* usb1*/
		val = readl(CCU_USB1_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY1_MASK;
		val &= ~SCLK_GATING_OHCI1_MASK;
    b790:	18 a0 5f ff 	l.movhi r5,0x5fff
	} else {
		/* for usb standby suspend , usb0*/
		val = readl(CCU_USB0_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY0_MASK;
		val &= ~SCLK_GATING_OHCI0_MASK;
		writel(val, CCU_USB0_CLOCK_REG);
    b794:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(CCU_USB_BUS_GATING_RST_REG);
    b798:	a8 44 1a 8c 	l.ori r2,r4,0x1a8c
		val &= ~USBOHCI0_GATING_MASK;
		val &= ~USBEHCI0_GATING_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		/* usb1*/
		val = readl(CCU_USB1_CLOCK_REG);
    b79c:	a8 84 1a 74 	l.ori r4,r4,0x1a74
		val = readl(CCU_USB0_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY0_MASK;
		val &= ~SCLK_GATING_OHCI0_MASK;
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
    b7a0:	84 62 00 00 	l.lwz r3,0x0(r2)
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		/* usb1*/
		val = readl(CCU_USB1_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY1_MASK;
		val &= ~SCLK_GATING_OHCI1_MASK;
    b7a4:	a8 a5 ff ff 	l.ori r5,r5,0xffff
		val &= ~SCLK_GATING_OHCI0_MASK;
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val &= ~USBOHCI0_GATING_MASK;
		val &= ~USBEHCI0_GATING_MASK;
    b7a8:	e0 63 30 03 	l.and r3,r3,r6
		val &= ~SCLK_GATING_OHCI1_MASK;
		writel(val, CCU_USB1_CLOCK_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val &= ~USBEHCI1_GATING_MASK;
		val &= ~USBOHCI1_GATING_MASK;
    b7ac:	9c c0 ff dd 	l.addi r6,r0,0xffffffdd
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val &= ~USBOHCI0_GATING_MASK;
		val &= ~USBEHCI0_GATING_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    b7b0:	d4 02 18 00 	l.sw 0x0(r2),r3

		/* usb1*/
		val = readl(CCU_USB1_CLOCK_REG);
    b7b4:	84 64 00 00 	l.lwz r3,0x0(r4)
		val &= ~SCLK_GATING_USBPHY1_MASK;
		val &= ~SCLK_GATING_OHCI1_MASK;
    b7b8:	e0 63 28 03 	l.and r3,r3,r5
		writel(val, CCU_USB1_CLOCK_REG);
    b7bc:	d4 04 18 00 	l.sw 0x0(r4),r3

		val = readl(CCU_USB_BUS_GATING_RST_REG);
    b7c0:	84 62 00 00 	l.lwz r3,0x0(r2)
		val &= ~USBEHCI1_GATING_MASK;
		val &= ~USBOHCI1_GATING_MASK;
    b7c4:	e0 63 30 03 	l.and r3,r3,r6
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    b7c8:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(VDD_SYS_PWROFF_GATING_REG);
    b7cc:	18 40 07 01 	l.movhi r2,0x701
    b7d0:	a8 42 02 50 	l.ori r2,r2,0x250
    b7d4:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= VDD_SYS2USB_GATING(1);
    b7d8:	a8 63 00 08 	l.ori r3,r3,0x8
		writel(val, VDD_SYS_PWROFF_GATING_REG);
    b7dc:	d4 02 18 00 	l.sw 0x0(r2),r3

	cpucfg_cpu_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x2);

	device_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x3);
    b7e0:	18 60 f3 f3 	l.movhi r3,0xf3f3
    b7e4:	04 00 18 50 	l.jal 11924 <save_state_flag>
    b7e8:	a8 63 30 03 	l.ori r3,r3,0x3003

static void dram_suspend(void)
{
#ifndef CFG_FPGA_PLATFORM
	/* calc dram checksum */
	if (standby_dram_crc_enable()) {
    b7ec:	07 ff fd ed 	l.jal afa0 <standby_dram_crc_enable>
    b7f0:	15 00 00 00 	l.nop 0x0
    b7f4:	bc 0b 00 00 	l.sfeqi r11,0x0
    b7f8:	10 00 00 0c 	l.bf b828 <cpu_op+0x3e0>
    b7fc:	18 40 03 00 	l.movhi r2,0x300
		before_crc = standby_dram_crc();
    b800:	07 ff fd ec 	l.jal afb0 <standby_dram_crc>
    b804:	18 40 00 01 	l.movhi r2,0x1
    b808:	a8 42 36 c8 	l.ori r2,r2,0x36c8
		LOG("before_crc: 0x%x\n", before_crc);
    b80c:	18 80 00 01 	l.movhi r4,0x1
static void dram_suspend(void)
{
#ifndef CFG_FPGA_PLATFORM
	/* calc dram checksum */
	if (standby_dram_crc_enable()) {
		before_crc = standby_dram_crc();
    b810:	d4 02 58 00 	l.sw 0x0(r2),r11
		LOG("before_crc: 0x%x\n", before_crc);
    b814:	9c 60 00 02 	l.addi r3,r0,0x2
    b818:	a8 84 29 d8 	l.ori r4,r4,0x29d8
    b81c:	07 ff fb ef 	l.jal a7d8 <debugger_printf>
    b820:	d4 01 58 00 	l.sw 0x0(r1),r11
	}
#endif
	pll_periph0 = readl(CCU_PLL_PERIPH0_REG);
    b824:	18 40 03 00 	l.movhi r2,0x300
    b828:	18 60 00 01 	l.movhi r3,0x1
    b82c:	aa 02 10 20 	l.ori r16,r2,0x1020
    b830:	a8 63 34 68 	l.ori r3,r3,0x3468
    b834:	84 90 00 00 	l.lwz r4,0x0(r16)

	device_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x3);

	dram_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x4);
    b838:	19 c0 f3 f3 	l.movhi r14,0xf3f3
	if (standby_dram_crc_enable()) {
		before_crc = standby_dram_crc();
		LOG("before_crc: 0x%x\n", before_crc);
	}
#endif
	pll_periph0 = readl(CCU_PLL_PERIPH0_REG);
    b83c:	d4 03 20 00 	l.sw 0x0(r3),r4
	mbus = readl(CCU_MBUS_CLK_REG);
    b840:	a8 62 15 40 	l.ori r3,r2,0x1540
	smc_standby_exit();
}

static void clk_save(void)
{
	pll_cpux_ctrl_reg_bak = readl(CCU_PLL_C0_REG);
    b844:	aa 42 10 00 	l.ori r18,r2,0x1000
		before_crc = standby_dram_crc();
		LOG("before_crc: 0x%x\n", before_crc);
	}
#endif
	pll_periph0 = readl(CCU_PLL_PERIPH0_REG);
	mbus = readl(CCU_MBUS_CLK_REG);
    b848:	84 83 00 00 	l.lwz r4,0x0(r3)
    b84c:	18 60 00 01 	l.movhi r3,0x1
}

static void clk_save(void)
{
	pll_cpux_ctrl_reg_bak = readl(CCU_PLL_C0_REG);
	c0_cpux_axi_cfg_reg_bak = readl(CCU_CPU_AXI_CFG_REG);
    b850:	aa 82 15 00 	l.ori r20,r2,0x1500
		before_crc = standby_dram_crc();
		LOG("before_crc: 0x%x\n", before_crc);
	}
#endif
	pll_periph0 = readl(CCU_PLL_PERIPH0_REG);
	mbus = readl(CCU_MBUS_CLK_REG);
    b854:	a8 63 34 6c 	l.ori r3,r3,0x346c
	u32 val;

	clk_save();

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    b858:	1a c0 07 01 	l.movhi r22,0x701
		before_crc = standby_dram_crc();
		LOG("before_crc: 0x%x\n", before_crc);
	}
#endif
	pll_periph0 = readl(CCU_PLL_PERIPH0_REG);
	mbus = readl(CCU_MBUS_CLK_REG);
    b85c:	d4 03 20 00 	l.sw 0x0(r3),r4
	dram_power_save_process(&arisc_para.dram_para);
    b860:	18 60 00 00 	l.movhi r3,0x0
    b864:	04 00 16 b7 	l.jal 11340 <dram_power_save_process>
    b868:	a8 63 40 08 	l.ori r3,r3,0x4008

	device_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x3);

	dram_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x4);
    b86c:	04 00 18 2e 	l.jal 11924 <save_state_flag>
    b870:	a8 6e 30 04 	l.ori r3,r14,0x3004

	cpucfg_cpu_suspend_late();
    b874:	04 00 07 30 	l.jal d534 <cpucfg_cpu_suspend_late>
    b878:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x5);
    b87c:	a8 6e 30 05 	l.ori r3,r14,0x3005
    b880:	04 00 18 29 	l.jal 11924 <save_state_flag>
    b884:	19 c0 00 01 	l.movhi r14,0x1
	smc_standby_exit();
}

static void clk_save(void)
{
	pll_cpux_ctrl_reg_bak = readl(CCU_PLL_C0_REG);
    b888:	18 60 00 01 	l.movhi r3,0x1
    b88c:	84 92 00 00 	l.lwz r4,0x0(r18)
    b890:	a8 63 34 70 	l.ori r3,r3,0x3470
	u32 val;

	clk_save();

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    b894:	18 a0 02 00 	l.movhi r5,0x200
	smc_standby_exit();
}

static void clk_save(void)
{
	pll_cpux_ctrl_reg_bak = readl(CCU_PLL_C0_REG);
    b898:	d4 03 20 00 	l.sw 0x0(r3),r4
	c0_cpux_axi_cfg_reg_bak = readl(CCU_CPU_AXI_CFG_REG);
    b89c:	18 60 00 01 	l.movhi r3,0x1
    b8a0:	84 94 00 00 	l.lwz r4,0x0(r20)
    b8a4:	a8 63 34 74 	l.ori r3,r3,0x3474

	/*
	 * set apbs2 clk to RC16M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    b8a8:	a9 ce 33 b0 	l.ori r14,r14,0x33b0
}

static void clk_save(void)
{
	pll_cpux_ctrl_reg_bak = readl(CCU_PLL_C0_REG);
	c0_cpux_axi_cfg_reg_bak = readl(CCU_CPU_AXI_CFG_REG);
    b8ac:	d4 03 20 00 	l.sw 0x0(r3),r4
	u32 val;

	clk_save();

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    b8b0:	18 80 f8 ff 	l.movhi r4,0xf8ff
    b8b4:	84 76 00 00 	l.lwz r3,0x0(r22)
    b8b8:	a8 84 ff ff 	l.ori r4,r4,0xffff
    b8bc:	e0 63 20 03 	l.and r3,r3,r4
    b8c0:	e0 63 28 04 	l.or r3,r3,r5
    b8c4:	d4 16 18 00 	l.sw 0x0(r22),r3

	/*
	 * set apbs2 clk to RC16M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    b8c8:	9c 60 00 00 	l.addi r3,r0,0x0
    b8cc:	84 8e 00 00 	l.lwz r4,0x0(r14)
    b8d0:	07 ff e8 ed 	l.jal 5c84 <twi_clkchangecb>
    b8d4:	aa d6 00 10 	l.ori r22,r22,0x10
	uart_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    b8d8:	9c 60 00 00 	l.addi r3,r0,0x0
    b8dc:	07 ff e8 46 	l.jal 59f4 <uart_clkchangecb>
    b8e0:	84 8e 00 00 	l.lwz r4,0x0(r14)
	writel((readl(APBS2_CFG_REG) & (~APBS2_CLK_SRC_SEL_MASK)) | APBS2_CLK_SRC_SEL(2), APBS2_CFG_REG);
    b8e4:	18 c0 f8 ff 	l.movhi r6,0xf8ff
    b8e8:	84 76 00 00 	l.lwz r3,0x0(r22)
    b8ec:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    b8f0:	18 80 02 00 	l.movhi r4,0x200
    b8f4:	e0 63 30 03 	l.and r3,r3,r6
    b8f8:	e0 63 20 04 	l.or r3,r3,r4
    b8fc:	d4 16 18 00 	l.sw 0x0(r22),r3
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
    b900:	9c 60 00 01 	l.addi r3,r0,0x1
    b904:	07 ff e8 3c 	l.jal 59f4 <uart_clkchangecb>
    b908:	84 8e 00 00 	l.lwz r4,0x0(r14)
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
    b90c:	84 8e 00 00 	l.lwz r4,0x0(r14)
    b910:	07 ff e8 dd 	l.jal 5c84 <twi_clkchangecb>
    b914:	9c 60 00 01 	l.addi r3,r0,0x1
	time_mdelay(10);
    b918:	07 ff e6 c3 	l.jal 5424 <time_mdelay>
    b91c:	9c 60 00 0a 	l.addi r3,r0,0xa

	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
    b920:	a8 62 15 10 	l.ori r3,r2,0x1510
    b924:	18 a0 f8 ff 	l.movhi r5,0xf8ff
    b928:	84 83 00 00 	l.lwz r4,0x0(r3)
    b92c:	a8 a5 ff ff 	l.ori r5,r5,0xffff
    b930:	18 c0 01 00 	l.movhi r6,0x100
    b934:	e0 84 28 03 	l.and r4,r4,r5
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
    b938:	18 a0 f8 ff 	l.movhi r5,0xf8ff
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
	time_mdelay(10);

	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
    b93c:	e0 84 30 04 	l.or r4,r4,r6
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
    b940:	a8 a5 ff ff 	l.ori r5,r5,0xffff
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
	time_mdelay(10);

	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
    b944:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
    b948:	a8 62 15 1c 	l.ori r3,r2,0x151c
    b94c:	84 83 00 00 	l.lwz r4,0x0(r3)
    b950:	e0 84 28 03 	l.and r4,r4,r5
    b954:	e0 84 30 04 	l.or r4,r4,r6
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(1), CCU_APB1_CFG_REG);
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(1), CCU_APB2_CFG_REG);
    b958:	18 c0 f8 ff 	l.movhi r6,0xf8ff
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
	time_mdelay(10);

	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
    b95c:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(1), CCU_APB1_CFG_REG);
    b960:	a8 62 15 20 	l.ori r3,r2,0x1520
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(1), CCU_APB2_CFG_REG);
    b964:	a8 c6 ff ff 	l.ori r6,r6,0xffff
	time_mdelay(10);

	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(1), CCU_APB1_CFG_REG);
    b968:	84 83 00 00 	l.lwz r4,0x0(r3)
    b96c:	e0 84 28 03 	l.and r4,r4,r5
    b970:	18 a0 01 00 	l.movhi r5,0x100
    b974:	e0 84 28 04 	l.or r4,r4,r5
    b978:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(1), CCU_APB2_CFG_REG);
    b97c:	a8 62 15 24 	l.ori r3,r2,0x1524
    b980:	84 83 00 00 	l.lwz r4,0x0(r3)
    b984:	e0 84 30 03 	l.and r4,r4,r6
    b988:	e0 84 28 04 	l.or r4,r4,r5
    b98c:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(1), CCU_CPU_AXI_CFG_REG);
    b990:	84 74 00 00 	l.lwz r3,0x0(r20)
    b994:	e0 63 30 03 	l.and r3,r3,r6
    b998:	e0 63 28 04 	l.or r3,r3,r5

	/* disable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(0), CCU_PLL_C0_REG);
    b99c:	18 a0 7f ff 	l.movhi r5,0x7fff
	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(1), CCU_APB1_CFG_REG);
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(1), CCU_APB2_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(1), CCU_CPU_AXI_CFG_REG);
    b9a0:	d4 14 18 00 	l.sw 0x0(r20),r3

	/* disable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(0), CCU_PLL_C0_REG);
    b9a4:	a8 a5 ff ff 	l.ori r5,r5,0xffff
    b9a8:	84 72 00 00 	l.lwz r3,0x0(r18)
    b9ac:	e0 63 28 03 	l.and r3,r3,r5
    b9b0:	d4 12 18 00 	l.sw 0x0(r18),r3
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(0), CCU_PLL_DDR0_REG);
    b9b4:	a8 62 10 10 	l.ori r3,r2,0x1010
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(0), CCU_PLL_PERIPH0_REG);
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(0), CCU_PLL_PERIPH1_REG);
    b9b8:	a8 42 10 28 	l.ori r2,r2,0x1028
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(1), CCU_APB2_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(1), CCU_CPU_AXI_CFG_REG);

	/* disable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(0), CCU_PLL_C0_REG);
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(0), CCU_PLL_DDR0_REG);
    b9bc:	84 83 00 00 	l.lwz r4,0x0(r3)
    b9c0:	e0 84 28 03 	l.and r4,r4,r5
    b9c4:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(0), CCU_PLL_PERIPH0_REG);
    b9c8:	84 70 00 00 	l.lwz r3,0x0(r16)
    b9cc:	e0 63 28 03 	l.and r3,r3,r5
    b9d0:	d4 10 18 00 	l.sw 0x0(r16),r3
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(0), CCU_PLL_PERIPH1_REG);
    b9d4:	84 62 00 00 	l.lwz r3,0x0(r2)
    b9d8:	e0 63 28 03 	l.and r3,r3,r5
    b9dc:	d4 02 18 00 	l.sw 0x0(r2),r3

	val = readl(RTC_XO_CTRL_REG) & (1 << 31);
    b9e0:	18 40 07 00 	l.movhi r2,0x700
    b9e4:	a8 42 01 60 	l.ori r2,r2,0x160
    b9e8:	84 42 00 00 	l.lwz r2,0x0(r2)
	if ((!standby_osc24m_on) || (!!val)) {
    b9ec:	bd 82 00 00 	l.sfltsi r2,0x0
    b9f0:	10 00 00 0a 	l.bf ba18 <cpu_op+0x5d0>
    b9f4:	15 00 00 00 	l.nop 0x0
    b9f8:	18 40 00 01 	l.movhi r2,0x1
    b9fc:	a8 42 33 60 	l.ori r2,r2,0x3360
    ba00:	84 42 00 00 	l.lwz r2,0x0(r2)
    ba04:	e0 60 10 02 	l.sub r3,r0,r2
    ba08:	e0 43 10 04 	l.or r2,r3,r2
    ba0c:	bd 82 00 00 	l.sfltsi r2,0x0
    ba10:	10 00 00 04 	l.bf ba20 <cpu_op+0x5d8>
    ba14:	15 00 00 00 	l.nop 0x0
		ccu_24mhosc_disable();
    ba18:	04 00 18 98 	l.jal 11c78 <ccu_24mhosc_disable>
    ba1c:	15 00 00 00 	l.nop 0x0

	cpucfg_cpu_suspend_late();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x5);

	clk_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x6);
    ba20:	19 c0 f3 f3 	l.movhi r14,0xf3f3
static void dm_suspend(void)
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
    ba24:	1a 00 00 01 	l.movhi r16,0x1

	cpucfg_cpu_suspend_late();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x5);

	clk_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x6);
    ba28:	a8 6e 30 06 	l.ori r3,r14,0x3006
    ba2c:	04 00 17 be 	l.jal 11924 <save_state_flag>
    ba30:	aa 10 35 88 	l.ori r16,r16,0x3588
	clk_restore();
}

static void system_suspend(void)
{
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);
    ba34:	18 80 07 01 	l.movhi r4,0x701
    ba38:	9c c0 ff fe 	l.addi r6,r0,0xfffffffe
    ba3c:	a8 44 02 60 	l.ori r2,r4,0x260

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
    ba40:	9c a0 ff fd 	l.addi r5,r0,0xfffffffd
	clk_restore();
}

static void system_suspend(void)
{
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);
    ba44:	84 62 00 00 	l.lwz r3,0x0(r2)
    ba48:	e0 63 30 03 	l.and r3,r3,r6
    ba4c:	d4 02 18 00 	l.sw 0x0(r2),r3

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
    ba50:	a8 44 02 54 	l.ori r2,r4,0x254
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(1), ANA_PWR_RST_REG);

	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
    ba54:	a8 84 02 50 	l.ori r4,r4,0x250

static void system_suspend(void)
{
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
    ba58:	84 62 00 00 	l.lwz r3,0x0(r2)
    ba5c:	e0 63 28 03 	l.and r3,r3,r5
    ba60:	d4 02 18 00 	l.sw 0x0(r2),r3
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(1), ANA_PWR_RST_REG);
    ba64:	84 62 00 00 	l.lwz r3,0x0(r2)
    ba68:	a8 63 00 01 	l.ori r3,r3,0x1
    ba6c:	d4 02 18 00 	l.sw 0x0(r2),r3

	clk_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x6);

	system_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x7);
    ba70:	a8 6e 30 07 	l.ori r3,r14,0x3007
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(1), ANA_PWR_RST_REG);

	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
    ba74:	84 44 00 00 	l.lwz r2,0x0(r4)
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
		if ((standby_vdd_cpu >> type) & 0x1)
    ba78:	19 c0 00 01 	l.movhi r14,0x1
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(1), ANA_PWR_RST_REG);

	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
    ba7c:	a8 42 00 04 	l.ori r2,r2,0x4
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
		if ((standby_vdd_cpu >> type) & 0x1)
    ba80:	a9 ce 33 f4 	l.ori r14,r14,0x33f4
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(1), ANA_PWR_RST_REG);

	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
    ba84:	d4 04 10 00 	l.sw 0x0(r4),r2

	clk_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x6);

	system_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x7);
    ba88:	04 00 17 a7 	l.jal 11924 <save_state_flag>
    ba8c:	9c 40 00 00 	l.addi r2,r0,0x0
static void dm_suspend(void)
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
    ba90:	00 00 00 0c 	l.j bac0 <cpu_op+0x678>
    ba94:	84 70 00 00 	l.lwz r3,0x0(r16)
		if ((standby_vdd_cpu >> type) & 0x1)
    ba98:	84 6e 00 00 	l.lwz r3,0x0(r14)
    ba9c:	e0 63 10 48 	l.srl r3,r3,r2
    baa0:	a4 63 00 01 	l.andi r3,r3,0x1
    baa4:	bc 03 00 00 	l.sfeqi r3,0x0
    baa8:	10 00 00 04 	l.bf bab8 <cpu_op+0x670>
    baac:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_OFF);
    bab0:	07 ff ee 92 	l.jal 74f8 <pmu_set_voltage_state>
    bab4:	9c 80 00 00 	l.addi r4,r0,0x0
static void dm_suspend(void)
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
    bab8:	9c 42 00 01 	l.addi r2,r2,0x1
    babc:	84 70 00 00 	l.lwz r3,0x0(r16)
    bac0:	e4 82 18 00 	l.sfltu r2,r3
    bac4:	13 ff ff f5 	l.bf ba98 <cpu_op+0x650>
    bac8:	15 00 00 00 	l.nop 0x0
		if ((standby_vdd_cpu >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vdd-sys powerdown */
	for (type = 0; type < axp_power_max; type++) {
    bacc:	1a 00 00 01 	l.movhi r16,0x1
		if ((standby_vdd_sys >> type) & 0x1)
    bad0:	19 c0 00 01 	l.movhi r14,0x1
static void dm_suspend(void)
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
    bad4:	9c 40 00 00 	l.addi r2,r0,0x0
		if ((standby_vdd_cpu >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vdd-sys powerdown */
	for (type = 0; type < axp_power_max; type++) {
    bad8:	aa 10 35 88 	l.ori r16,r16,0x3588
		if ((standby_vdd_sys >> type) & 0x1)
    badc:	00 00 00 0b 	l.j bb08 <cpu_op+0x6c0>
    bae0:	a9 ce 33 f8 	l.ori r14,r14,0x33f8
    bae4:	84 6e 00 00 	l.lwz r3,0x0(r14)
    bae8:	e0 63 10 48 	l.srl r3,r3,r2
    baec:	a4 63 00 01 	l.andi r3,r3,0x1
    baf0:	bc 03 00 00 	l.sfeqi r3,0x0
    baf4:	10 00 00 04 	l.bf bb04 <cpu_op+0x6bc>
    baf8:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_OFF);
    bafc:	07 ff ee 7f 	l.jal 74f8 <pmu_set_voltage_state>
    bb00:	9c 80 00 00 	l.addi r4,r0,0x0
		if ((standby_vdd_cpu >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vdd-sys powerdown */
	for (type = 0; type < axp_power_max; type++) {
    bb04:	9c 42 00 01 	l.addi r2,r2,0x1
    bb08:	84 70 00 00 	l.lwz r3,0x0(r16)
    bb0c:	e4 82 18 00 	l.sfltu r2,r3
    bb10:	13 ff ff f5 	l.bf bae4 <cpu_op+0x69c>
    bb14:	15 00 00 00 	l.nop 0x0
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vcc-pll powerdown */
	for (type = 0; type < axp_power_max; type++) {
    bb18:	1a 00 00 01 	l.movhi r16,0x1
		if ((standby_vcc_pll >> type) & 0x1)
    bb1c:	19 c0 00 01 	l.movhi r14,0x1
		if ((standby_vdd_cpu >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vdd-sys powerdown */
	for (type = 0; type < axp_power_max; type++) {
    bb20:	9c 40 00 00 	l.addi r2,r0,0x0
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vcc-pll powerdown */
	for (type = 0; type < axp_power_max; type++) {
    bb24:	aa 10 35 88 	l.ori r16,r16,0x3588
		if ((standby_vcc_pll >> type) & 0x1)
    bb28:	00 00 00 0b 	l.j bb54 <cpu_op+0x70c>
    bb2c:	a9 ce 33 fc 	l.ori r14,r14,0x33fc
    bb30:	84 6e 00 00 	l.lwz r3,0x0(r14)
    bb34:	e0 63 10 48 	l.srl r3,r3,r2
    bb38:	a4 63 00 01 	l.andi r3,r3,0x1
    bb3c:	bc 03 00 00 	l.sfeqi r3,0x0
    bb40:	10 00 00 04 	l.bf bb50 <cpu_op+0x708>
    bb44:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_OFF);
    bb48:	07 ff ee 6c 	l.jal 74f8 <pmu_set_voltage_state>
    bb4c:	9c 80 00 00 	l.addi r4,r0,0x0
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vcc-pll powerdown */
	for (type = 0; type < axp_power_max; type++) {
    bb50:	9c 42 00 01 	l.addi r2,r2,0x1
    bb54:	84 70 00 00 	l.lwz r3,0x0(r16)
    bb58:	e4 82 18 00 	l.sfltu r2,r3
    bb5c:	13 ff ff f5 	l.bf bb30 <cpu_op+0x6e8>
    bb60:	15 00 00 00 	l.nop 0x0

	system_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x7);

	dm_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x8);
    bb64:	18 40 f3 f3 	l.movhi r2,0xf3f3
		/*
		 * maybe add user defined task process here
		 */


		if (wakeup_source != NO_WAKESOURCE) {
    bb68:	19 c0 00 01 	l.movhi r14,0x1

	system_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x7);

	dm_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x8);
    bb6c:	a8 62 30 08 	l.ori r3,r2,0x3008
    bb70:	04 00 17 6d 	l.jal 11924 <save_state_flag>
    bb74:	a9 ce 36 c4 	l.ori r14,r14,0x36c4
	 * initialize enter super-standby porcess
	 *
	 * --------------------------------------------------------------------------
	 */
	save_state_flag(REC_ESTANDBY | REC_BEFORE_INIT);
	result = standby_process_init(pmessage);
    bb78:	18 60 00 01 	l.movhi r3,0x1
    bb7c:	9c c0 00 00 	l.addi r6,r0,0x0
    bb80:	a8 63 33 f0 	l.ori r3,r3,0x33f0
    bb84:	d4 03 30 00 	l.sw 0x0(r3),r6
	save_state_flag(REC_ESTANDBY | REC_AFTER_INIT);
    bb88:	04 00 17 67 	l.jal 11924 <save_state_flag>
    bb8c:	a8 62 40 00 	l.ori r3,r2,0x4000
	 *
	 * wait valid wakeup source porcess
	 *
	 * --------------------------------------------------------------------------
	 */
	LOG("wait wakeup\n");
    bb90:	18 80 00 01 	l.movhi r4,0x1
    bb94:	9c 60 00 02 	l.addi r3,r0,0x2
    bb98:	07 ff fb 10 	l.jal a7d8 <debugger_printf>
    bb9c:	a8 84 29 ea 	l.ori r4,r4,0x29ea
	save_state_flag(REC_ESTANDBY | REC_WAIT_WAKEUP);
    bba0:	a8 62 50 00 	l.ori r3,r2,0x5000
    bba4:	04 00 17 60 	l.jal 11924 <save_state_flag>
    bba8:	18 40 07 01 	l.movhi r2,0x701
	return 0;
}

static void wait_wakeup(void)
{
	wakeup_timer_start();
    bbac:	07 ff fd 87 	l.jal b1c8 <wakeup_timer_start>
    bbb0:	a8 42 03 3c 	l.ori r2,r2,0x33c
		/*
		 * maybe add user defined task process here
		 */


		if (wakeup_source != NO_WAKESOURCE) {
    bbb4:	84 6e 00 00 	l.lwz r3,0x0(r14)
    bbb8:	bc 03 00 00 	l.sfeqi r3,0x0
    bbbc:	10 00 01 dc 	l.bf c32c <cpu_op+0xee4>
    bbc0:	18 80 00 01 	l.movhi r4,0x1
			LOG("wakeup: %d\n", wakeup_source);
    bbc4:	18 40 00 01 	l.movhi r2,0x1
    bbc8:	a8 42 36 c4 	l.ori r2,r2,0x36c4
    bbcc:	a8 84 29 f7 	l.ori r4,r4,0x29f7
    bbd0:	84 42 00 00 	l.lwz r2,0x0(r2)
    bbd4:	9c 60 00 02 	l.addi r3,r0,0x2
    bbd8:	07 ff fb 00 	l.jal a7d8 <debugger_printf>
    bbdc:	d4 01 10 00 	l.sw 0x0(r1),r2

		writel(readl(LP_CTRL_REG) | ((1 << 24) | (1 << 25) | (1 << 26) | (1 << 27)), LP_CTRL_REG);
		cpu_enter_doze();
		writel(readl(LP_CTRL_REG) & (~((1 << 24) | (1 << 25) | (1 << 26) | (1 << 27))), LP_CTRL_REG);
	}
	wakeup_timer_stop();
    bbe0:	07 ff fd 89 	l.jal b204 <wakeup_timer_stop>
    bbe4:	18 40 f3 f3 	l.movhi r2,0xf3f3
	 *
	 * exit super-standby wakeup porcess
	 *
	 * --------------------------------------------------------------------------
	 */
	save_state_flag(REC_ESTANDBY | REC_BEFORE_EXIT);
    bbe8:	a8 62 60 00 	l.ori r3,r2,0x6000
    bbec:	04 00 17 4e 	l.jal 11924 <save_state_flag>
    bbf0:	1a 00 00 01 	l.movhi r16,0x1
	return OK;
}

static s32 standby_process_exit(struct message *pmessage)
{
	u32 resume_entry = pmessage->paras[1];
    bbf4:	84 78 00 1c 	l.lwz r3,0x1c(r24)
{
	u32 type;

	/* vcc-pll powerup */
	for (type = 0; type < axp_power_max; type++) {
		if ((standby_vcc_pll >> type) & 0x1)
    bbf8:	19 c0 00 01 	l.movhi r14,0x1
	return OK;
}

static s32 standby_process_exit(struct message *pmessage)
{
	u32 resume_entry = pmessage->paras[1];
    bbfc:	86 43 00 04 	l.lwz r18,0x4(r3)

	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x1);
    bc00:	a8 62 70 01 	l.ori r3,r2,0x7001
    bc04:	04 00 17 48 	l.jal 11924 <save_state_flag>
    bc08:	aa 10 35 88 	l.ori r16,r16,0x3588
static void dm_resume(void)
{
	u32 type;

	/* vcc-pll powerup */
	for (type = 0; type < axp_power_max; type++) {
    bc0c:	9c 40 00 00 	l.addi r2,r0,0x0
		if ((standby_vcc_pll >> type) & 0x1)
    bc10:	00 00 00 0b 	l.j bc3c <cpu_op+0x7f4>
    bc14:	a9 ce 33 fc 	l.ori r14,r14,0x33fc
    bc18:	84 6e 00 00 	l.lwz r3,0x0(r14)
    bc1c:	e0 63 10 48 	l.srl r3,r3,r2
    bc20:	a4 63 00 01 	l.andi r3,r3,0x1
    bc24:	bc 03 00 00 	l.sfeqi r3,0x0
    bc28:	10 00 00 04 	l.bf bc38 <cpu_op+0x7f0>
    bc2c:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_ON);
    bc30:	07 ff ee 32 	l.jal 74f8 <pmu_set_voltage_state>
    bc34:	9c 80 00 01 	l.addi r4,r0,0x1
static void dm_resume(void)
{
	u32 type;

	/* vcc-pll powerup */
	for (type = 0; type < axp_power_max; type++) {
    bc38:	9c 42 00 01 	l.addi r2,r2,0x1
    bc3c:	84 70 00 00 	l.lwz r3,0x0(r16)
    bc40:	e4 82 18 00 	l.sfltu r2,r3
    bc44:	13 ff ff f5 	l.bf bc18 <cpu_op+0x7d0>
    bc48:	15 00 00 00 	l.nop 0x0
		if ((standby_vcc_pll >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-sys powerup */
	for (type = 0; type < axp_power_max; type++) {
    bc4c:	1a 00 00 01 	l.movhi r16,0x1
		if ((standby_vdd_sys >> type) & 0x1)
    bc50:	19 c0 00 01 	l.movhi r14,0x1
static void dm_resume(void)
{
	u32 type;

	/* vcc-pll powerup */
	for (type = 0; type < axp_power_max; type++) {
    bc54:	9c 40 00 00 	l.addi r2,r0,0x0
		if ((standby_vcc_pll >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-sys powerup */
	for (type = 0; type < axp_power_max; type++) {
    bc58:	aa 10 35 88 	l.ori r16,r16,0x3588
		if ((standby_vdd_sys >> type) & 0x1)
    bc5c:	00 00 00 0b 	l.j bc88 <cpu_op+0x840>
    bc60:	a9 ce 33 f8 	l.ori r14,r14,0x33f8
    bc64:	84 6e 00 00 	l.lwz r3,0x0(r14)
    bc68:	e0 63 10 48 	l.srl r3,r3,r2
    bc6c:	a4 63 00 01 	l.andi r3,r3,0x1
    bc70:	bc 03 00 00 	l.sfeqi r3,0x0
    bc74:	10 00 00 04 	l.bf bc84 <cpu_op+0x83c>
    bc78:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_ON);
    bc7c:	07 ff ee 1f 	l.jal 74f8 <pmu_set_voltage_state>
    bc80:	9c 80 00 01 	l.addi r4,r0,0x1
		if ((standby_vcc_pll >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-sys powerup */
	for (type = 0; type < axp_power_max; type++) {
    bc84:	9c 42 00 01 	l.addi r2,r2,0x1
    bc88:	84 70 00 00 	l.lwz r3,0x0(r16)
    bc8c:	e4 82 18 00 	l.sfltu r2,r3
    bc90:	13 ff ff f5 	l.bf bc64 <cpu_op+0x81c>
    bc94:	15 00 00 00 	l.nop 0x0
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-cpu powerup */
	for (type = 0; type < axp_power_max; type++) {
    bc98:	1a 00 00 01 	l.movhi r16,0x1
		if ((standby_vdd_cpu >> type) & 0x1)
    bc9c:	19 c0 00 01 	l.movhi r14,0x1
		if ((standby_vcc_pll >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-sys powerup */
	for (type = 0; type < axp_power_max; type++) {
    bca0:	9c 40 00 00 	l.addi r2,r0,0x0
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-cpu powerup */
	for (type = 0; type < axp_power_max; type++) {
    bca4:	aa 10 35 88 	l.ori r16,r16,0x3588
		if ((standby_vdd_cpu >> type) & 0x1)
    bca8:	00 00 00 0b 	l.j bcd4 <cpu_op+0x88c>
    bcac:	a9 ce 33 f4 	l.ori r14,r14,0x33f4
    bcb0:	84 6e 00 00 	l.lwz r3,0x0(r14)
    bcb4:	e0 63 10 48 	l.srl r3,r3,r2
    bcb8:	a4 63 00 01 	l.andi r3,r3,0x1
    bcbc:	bc 03 00 00 	l.sfeqi r3,0x0
    bcc0:	10 00 00 04 	l.bf bcd0 <cpu_op+0x888>
    bcc4:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_ON);
    bcc8:	07 ff ee 0c 	l.jal 74f8 <pmu_set_voltage_state>
    bccc:	9c 80 00 01 	l.addi r4,r0,0x1
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-cpu powerup */
	for (type = 0; type < axp_power_max; type++) {
    bcd0:	9c 42 00 01 	l.addi r2,r2,0x1
    bcd4:	84 70 00 00 	l.lwz r3,0x0(r16)
    bcd8:	e4 82 18 00 	l.sfltu r2,r3
    bcdc:	13 ff ff f5 	l.bf bcb0 <cpu_op+0x868>
    bce0:	18 60 f3 f3 	l.movhi r3,0xf3f3

static void clk_resume_early(void)
{
	u32 val;

	val = readl(RTC_XO_CTRL_REG) & (1 << 31);
    bce4:	18 40 07 00 	l.movhi r2,0x700
	u32 resume_entry = pmessage->paras[1];

	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x1);

	dm_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x2);
    bce8:	a8 63 70 02 	l.ori r3,r3,0x7002
    bcec:	04 00 17 0e 	l.jal 11924 <save_state_flag>
    bcf0:	a8 42 01 60 	l.ori r2,r2,0x160

static void clk_resume_early(void)
{
	u32 val;

	val = readl(RTC_XO_CTRL_REG) & (1 << 31);
    bcf4:	84 42 00 00 	l.lwz r2,0x0(r2)
	if ((!standby_osc24m_on) || (!!val)) {
    bcf8:	bd 82 00 00 	l.sfltsi r2,0x0
    bcfc:	10 00 00 09 	l.bf bd20 <cpu_op+0x8d8>
    bd00:	18 40 00 01 	l.movhi r2,0x1
    bd04:	a8 42 33 60 	l.ori r2,r2,0x3360
    bd08:	84 42 00 00 	l.lwz r2,0x0(r2)
    bd0c:	e0 60 10 02 	l.sub r3,r0,r2
    bd10:	e0 43 10 04 	l.or r2,r3,r2
    bd14:	bd 82 00 00 	l.sfltsi r2,0x0
    bd18:	10 00 00 06 	l.bf bd30 <cpu_op+0x8e8>
    bd1c:	18 40 07 01 	l.movhi r2,0x701
		ccu_24mhosc_enable();
    bd20:	04 00 18 03 	l.jal 11d2c <ccu_24mhosc_enable>
    bd24:	18 40 07 01 	l.movhi r2,0x701
		time_mdelay(1);
    bd28:	07 ff e5 bf 	l.jal 5424 <time_mdelay>
    bd2c:	9c 60 00 01 	l.addi r3,r0,0x1
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
}

static void system_resume(void)
{
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(0), VDD_SYS_PWROFF_GATING_REG);
    bd30:	9c a0 ff fb 	l.addi r5,r0,0xfffffffb
    bd34:	a8 62 02 50 	l.ori r3,r2,0x250

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(1), ANA_PWR_RST_REG);
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(0), ANA_PWR_RST_REG);
    bd38:	9c c0 ff fe 	l.addi r6,r0,0xfffffffe
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
}

static void system_resume(void)
{
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(0), VDD_SYS_PWROFF_GATING_REG);
    bd3c:	84 83 00 00 	l.lwz r4,0x0(r3)

	/*
	 * set apbs2 clk to OSC24M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, CCU_HOSC_FREQ);
    bd40:	19 c0 01 6e 	l.movhi r14,0x16e
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
}

static void system_resume(void)
{
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(0), VDD_SYS_PWROFF_GATING_REG);
    bd44:	e0 84 28 03 	l.and r4,r4,r5
    bd48:	d4 03 20 00 	l.sw 0x0(r3),r4

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(1), ANA_PWR_RST_REG);
    bd4c:	a8 82 02 54 	l.ori r4,r2,0x254
    bd50:	84 64 00 00 	l.lwz r3,0x0(r4)
    bd54:	a8 63 00 02 	l.ori r3,r3,0x2
    bd58:	d4 04 18 00 	l.sw 0x0(r4),r3
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(0), ANA_PWR_RST_REG);
    bd5c:	84 64 00 00 	l.lwz r3,0x0(r4)
    bd60:	e0 63 30 03 	l.and r3,r3,r6
    bd64:	d4 04 18 00 	l.sw 0x0(r4),r3

	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(1), VDD_SYS_PWR_RST_REG);
    bd68:	a8 62 02 60 	l.ori r3,r2,0x260
    bd6c:	84 83 00 00 	l.lwz r4,0x0(r3)
    bd70:	a8 84 00 01 	l.ori r4,r4,0x1
    bd74:	d4 03 20 00 	l.sw 0x0(r3),r4
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x2);

	clk_resume_early();

	system_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x3);
    bd78:	18 60 f3 f3 	l.movhi r3,0xf3f3
    bd7c:	04 00 16 ea 	l.jal 11924 <save_state_flag>
    bd80:	a8 63 70 03 	l.ori r3,r3,0x7003

	/*
	 * set apbs2 clk to OSC24M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, CCU_HOSC_FREQ);
    bd84:	9c 60 00 00 	l.addi r3,r0,0x0
    bd88:	07 ff e7 bf 	l.jal 5c84 <twi_clkchangecb>
    bd8c:	a8 8e 36 00 	l.ori r4,r14,0x3600
	uart_clkchangecb(CCU_CLK_CLKCHG_REQ, CCU_HOSC_FREQ);
    bd90:	9c 60 00 00 	l.addi r3,r0,0x0
    bd94:	07 ff e7 18 	l.jal 59f4 <uart_clkchangecb>
    bd98:	a8 8e 36 00 	l.ori r4,r14,0x3600
	writel((readl(APBS2_CFG_REG) & (~APBS2_CLK_SRC_SEL_MASK)) | APBS2_CLK_SRC_SEL(0), APBS2_CFG_REG);
    bd9c:	a8 62 00 10 	l.ori r3,r2,0x10
    bda0:	18 a0 f8 ff 	l.movhi r5,0xf8ff
    bda4:	84 83 00 00 	l.lwz r4,0x0(r3)
    bda8:	a8 a5 ff ff 	l.ori r5,r5,0xffff
    bdac:	e0 84 28 03 	l.and r4,r4,r5
    bdb0:	d4 03 20 00 	l.sw 0x0(r3),r4
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);
    bdb4:	9c 60 00 01 	l.addi r3,r0,0x1
    bdb8:	07 ff e7 0f 	l.jal 59f4 <uart_clkchangecb>
    bdbc:	a8 8e 36 00 	l.ori r4,r14,0x3600
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);
    bdc0:	9c 60 00 01 	l.addi r3,r0,0x1
    bdc4:	07 ff e7 b0 	l.jal 5c84 <twi_clkchangecb>
    bdc8:	a8 8e 36 00 	l.ori r4,r14,0x3600

	/* set cpus clk to OSC24M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(0), CPUS_CFG_REG);
    bdcc:	18 c0 f8 ff 	l.movhi r6,0xf8ff
    bdd0:	84 62 00 00 	l.lwz r3,0x0(r2)
    bdd4:	a8 c6 ff ff 	l.ori r6,r6,0xffff

	/* enable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(1), CCU_PLL_C0_REG);
    bdd8:	18 a0 80 00 	l.movhi r5,0x8000
	writel((readl(APBS2_CFG_REG) & (~APBS2_CLK_SRC_SEL_MASK)) | APBS2_CLK_SRC_SEL(0), APBS2_CFG_REG);
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);

	/* set cpus clk to OSC24M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(0), CPUS_CFG_REG);
    bddc:	e0 63 30 03 	l.and r3,r3,r6

	/* enable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(1), CCU_PLL_C0_REG);
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(1), CCU_PLL_DDR0_REG);
    bde0:	18 c0 80 00 	l.movhi r6,0x8000
	writel((readl(APBS2_CFG_REG) & (~APBS2_CLK_SRC_SEL_MASK)) | APBS2_CLK_SRC_SEL(0), APBS2_CFG_REG);
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);

	/* set cpus clk to OSC24M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(0), CPUS_CFG_REG);
    bde4:	d4 02 18 00 	l.sw 0x0(r2),r3

	/* enable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(1), CCU_PLL_C0_REG);
    bde8:	18 40 03 00 	l.movhi r2,0x300
    bdec:	a8 82 10 00 	l.ori r4,r2,0x1000
    bdf0:	84 64 00 00 	l.lwz r3,0x0(r4)
    bdf4:	e0 63 28 04 	l.or r3,r3,r5
    bdf8:	d4 04 18 00 	l.sw 0x0(r4),r3
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(1), CCU_PLL_DDR0_REG);
    bdfc:	a8 62 10 10 	l.ori r3,r2,0x1010
    be00:	84 a3 00 00 	l.lwz r5,0x0(r3)
    be04:	e0 a5 30 04 	l.or r5,r5,r6
    be08:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(1), CCU_PLL_PERIPH0_REG);
    be0c:	a8 62 10 20 	l.ori r3,r2,0x1020
    be10:	84 a3 00 00 	l.lwz r5,0x0(r3)
    be14:	e0 a5 30 04 	l.or r5,r5,r6
    be18:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(1), CCU_PLL_PERIPH1_REG);
    be1c:	a8 62 10 28 	l.ori r3,r2,0x1028
    be20:	84 a3 00 00 	l.lwz r5,0x0(r3)
    be24:	e0 a5 30 04 	l.or r5,r5,r6

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
    be28:	18 c0 f8 ff 	l.movhi r6,0xf8ff

	/* enable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(1), CCU_PLL_C0_REG);
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(1), CCU_PLL_DDR0_REG);
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(1), CCU_PLL_PERIPH0_REG);
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(1), CCU_PLL_PERIPH1_REG);
    be2c:	d4 03 28 00 	l.sw 0x0(r3),r5

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
    be30:	a8 62 15 10 	l.ori r3,r2,0x1510
    be34:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    be38:	84 a3 00 00 	l.lwz r5,0x0(r3)
    be3c:	e0 a5 30 03 	l.and r5,r5,r6
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
    be40:	18 c0 f8 ff 	l.movhi r6,0xf8ff
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(1), CCU_PLL_DDR0_REG);
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(1), CCU_PLL_PERIPH0_REG);
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(1), CCU_PLL_PERIPH1_REG);

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
    be44:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
    be48:	a8 62 15 1c 	l.ori r3,r2,0x151c
    be4c:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    be50:	84 a3 00 00 	l.lwz r5,0x0(r3)
    be54:	e0 a5 30 03 	l.and r5,r5,r6
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(0), CCU_APB1_CFG_REG);
    be58:	18 c0 f8 ff 	l.movhi r6,0xf8ff
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(1), CCU_PLL_PERIPH0_REG);
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(1), CCU_PLL_PERIPH1_REG);

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
    be5c:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(0), CCU_APB1_CFG_REG);
    be60:	a8 62 15 20 	l.ori r3,r2,0x1520
    be64:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    be68:	84 a3 00 00 	l.lwz r5,0x0(r3)
    be6c:	e0 a5 30 03 	l.and r5,r5,r6
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(0), CCU_APB2_CFG_REG);
    be70:	18 c0 f8 ff 	l.movhi r6,0xf8ff
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(1), CCU_PLL_PERIPH1_REG);

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(0), CCU_APB1_CFG_REG);
    be74:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(0), CCU_APB2_CFG_REG);
    be78:	a8 62 15 24 	l.ori r3,r2,0x1524
    be7c:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    be80:	84 a3 00 00 	l.lwz r5,0x0(r3)
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(0), CCU_CPU_AXI_CFG_REG);
    be84:	a8 42 15 00 	l.ori r2,r2,0x1500

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(0), CCU_APB1_CFG_REG);
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(0), CCU_APB2_CFG_REG);
    be88:	e0 a5 30 03 	l.and r5,r5,r6
    be8c:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(0), CCU_CPU_AXI_CFG_REG);
    be90:	84 62 00 00 	l.lwz r3,0x0(r2)
    be94:	e0 63 30 03 	l.and r3,r3,r6
static void clk_restore(void)
{
	/* recovery CCU_PLL_C0_REG */
	writel(pll_cpux_ctrl_reg_bak, CCU_PLL_C0_REG);

	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(0)),
    be98:	18 c0 df ff 	l.movhi r6,0xdfff
	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(0), CCU_APB1_CFG_REG);
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(0), CCU_APB2_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(0), CCU_CPU_AXI_CFG_REG);
    be9c:	d4 02 18 00 	l.sw 0x0(r2),r3
}

static void clk_restore(void)
{
	/* recovery CCU_PLL_C0_REG */
	writel(pll_cpux_ctrl_reg_bak, CCU_PLL_C0_REG);
    bea0:	18 40 00 01 	l.movhi r2,0x1

	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(0)),
    bea4:	a8 c6 ff ff 	l.ori r6,r6,0xffff
}

static void clk_restore(void)
{
	/* recovery CCU_PLL_C0_REG */
	writel(pll_cpux_ctrl_reg_bak, CCU_PLL_C0_REG);
    bea8:	a8 42 34 70 	l.ori r2,r2,0x3470

	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(0)),
			CCU_PLL_C0_REG);
	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(1)),
    beac:	18 60 20 00 	l.movhi r3,0x2000
}

static void clk_restore(void)
{
	/* recovery CCU_PLL_C0_REG */
	writel(pll_cpux_ctrl_reg_bak, CCU_PLL_C0_REG);
    beb0:	84 42 00 00 	l.lwz r2,0x0(r2)
    beb4:	d4 04 10 00 	l.sw 0x0(r4),r2

	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(0)),
    beb8:	84 44 00 00 	l.lwz r2,0x0(r4)
    bebc:	e0 42 30 03 	l.and r2,r2,r6
    bec0:	d4 04 10 00 	l.sw 0x0(r4),r2
			CCU_PLL_C0_REG);
	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(1)),
    bec4:	84 44 00 00 	l.lwz r2,0x0(r4)
    bec8:	e0 42 18 04 	l.or r2,r2,r3
    becc:	d4 04 10 00 	l.sw 0x0(r4),r2
			CCU_PLL_C0_REG);

	while (!(readl(CCU_PLL_C0_REG) & C0_PLL_LOCK_STATUS_MASK))
    bed0:	84 44 00 00 	l.lwz r2,0x0(r4)
    bed4:	18 a0 10 00 	l.movhi r5,0x1000
    bed8:	e0 42 28 03 	l.and r2,r2,r5
    bedc:	bc 02 00 00 	l.sfeqi r2,0x0
    bee0:	13 ff ff fc 	l.bf bed0 <cpu_op+0xa88>
    bee4:	19 c0 03 00 	l.movhi r14,0x300
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
    bee8:	18 80 00 01 	l.movhi r4,0x1
    beec:	a8 4e 15 00 	l.ori r2,r14,0x1500
    bef0:	a8 84 34 74 	l.ori r4,r4,0x3474
    bef4:	84 62 00 00 	l.lwz r3,0x0(r2)
    bef8:	9c c0 ff fc 	l.addi r6,r0,0xfffffffc
    befc:	84 a4 00 00 	l.lwz r5,0x0(r4)
    bf00:	e0 63 30 03 	l.and r3,r3,r6
    bf04:	a4 a5 00 03 	l.andi r5,r5,0x3
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_APB_FACTOR_N_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_APB_FACTOR_N_MASK),
    bf08:	9c c0 fc ff 	l.addi r6,r0,0xfffffcff

	while (!(readl(CCU_PLL_C0_REG) & C0_PLL_LOCK_STATUS_MASK))
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
    bf0c:	e0 65 18 04 	l.or r3,r5,r3
	 * mbus default clk src is 24MHz, switch to pll_periph0(x2),
	 * so before increase mbus freq, should set div firstly.
	 * by Superm Wu at 2015-09-18
	 */
#ifndef CFG_FPGA_PLATFORM
	writel(mbus&0x7, CCU_MBUS_CLK_REG);
    bf10:	1a 00 00 01 	l.movhi r16,0x1

	while (!(readl(CCU_PLL_C0_REG) & C0_PLL_LOCK_STATUS_MASK))
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
    bf14:	d4 02 18 00 	l.sw 0x0(r2),r3
	 * mbus default clk src is 24MHz, switch to pll_periph0(x2),
	 * so before increase mbus freq, should set div firstly.
	 * by Superm Wu at 2015-09-18
	 */
#ifndef CFG_FPGA_PLATFORM
	writel(mbus&0x7, CCU_MBUS_CLK_REG);
    bf18:	aa 10 34 6c 	l.ori r16,r16,0x346c
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_APB_FACTOR_N_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_APB_FACTOR_N_MASK),
    bf1c:	84 62 00 00 	l.lwz r3,0x0(r2)
    bf20:	84 a4 00 00 	l.lwz r5,0x0(r4)
    bf24:	e0 63 30 03 	l.and r3,r3,r6
    bf28:	a4 a5 03 00 	l.andi r5,r5,0x300
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_CLK_SRC_SEL_MASK),
    bf2c:	18 c0 f8 ff 	l.movhi r6,0xf8ff
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_APB_FACTOR_N_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_APB_FACTOR_N_MASK),
    bf30:	e0 65 18 04 	l.or r3,r5,r3
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_CLK_SRC_SEL_MASK),
    bf34:	a8 c6 ff ff 	l.ori r6,r6,0xffff
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_APB_FACTOR_N_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_APB_FACTOR_N_MASK),
    bf38:	d4 02 18 00 	l.sw 0x0(r2),r3
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_CLK_SRC_SEL_MASK),
    bf3c:	18 a0 07 00 	l.movhi r5,0x700
    bf40:	84 62 00 00 	l.lwz r3,0x0(r2)
    bf44:	84 84 00 00 	l.lwz r4,0x0(r4)
    bf48:	e0 63 30 03 	l.and r3,r3,r6
    bf4c:	e0 84 28 03 	l.and r4,r4,r5
    bf50:	e0 64 18 04 	l.or r3,r4,r3
    bf54:	d4 02 18 00 	l.sw 0x0(r2),r3
			CCU_CPU_AXI_CFG_REG);
	time_mdelay(1);
    bf58:	9c 60 00 01 	l.addi r3,r0,0x1
    bf5c:	07 ff e5 32 	l.jal 5424 <time_mdelay>
    bf60:	18 40 f3 f3 	l.movhi r2,0xf3f3

	system_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x3);

	clk_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x4);
    bf64:	04 00 16 70 	l.jal 11924 <save_state_flag>
    bf68:	a8 62 70 04 	l.ori r3,r2,0x7004

	cpucfg_cpu_resume_early(resume_entry);
    bf6c:	04 00 05 c6 	l.jal d684 <cpucfg_cpu_resume_early>
    bf70:	a8 72 00 00 	l.ori r3,r18,0x0
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x5);
    bf74:	a8 62 70 05 	l.ori r3,r2,0x7005
    bf78:	04 00 16 6b 	l.jal 11924 <save_state_flag>
    bf7c:	a8 4e 10 20 	l.ori r2,r14,0x1020
}

static void dram_resume(void)
{
	/* restore dram controller and transing area. */
	LOG("power-up dram\n");
    bf80:	18 80 00 01 	l.movhi r4,0x1
    bf84:	9c 60 00 02 	l.addi r3,r0,0x2
    bf88:	07 ff fa 14 	l.jal a7d8 <debugger_printf>
    bf8c:	a8 84 2a 03 	l.ori r4,r4,0x2a03

	/* disable pll_periph0 firstly */
	writel(readl(CCU_PLL_PERIPH0_REG) & (~(1 << 31)), CCU_PLL_PERIPH0_REG);
    bf90:	18 80 7f ff 	l.movhi r4,0x7fff
    bf94:	84 62 00 00 	l.lwz r3,0x0(r2)
    bf98:	a8 84 ff ff 	l.ori r4,r4,0xffff
    bf9c:	e0 63 20 03 	l.and r3,r3,r4
    bfa0:	d4 02 18 00 	l.sw 0x0(r2),r3

	/* set pll factor but not enable pll */
	writel((pll_periph0&(~(0x1 << 31))), CCU_PLL_PERIPH0_REG);
    bfa4:	18 60 00 01 	l.movhi r3,0x1
    bfa8:	a8 63 34 68 	l.ori r3,r3,0x3468
    bfac:	84 63 00 00 	l.lwz r3,0x0(r3)
    bfb0:	e0 63 20 03 	l.and r3,r3,r4
    bfb4:	d4 02 18 00 	l.sw 0x0(r2),r3

	/* delay 100us for factor to be effective */
	time_udelay(100);
    bfb8:	07 ff e5 69 	l.jal 555c <time_udelay>
    bfbc:	9c 60 00 64 	l.addi r3,r0,0x64

	/* enable pll */
	writel((readl(CCU_PLL_PERIPH0_REG) | (0x1 << 31)), CCU_PLL_PERIPH0_REG);
    bfc0:	18 c0 80 00 	l.movhi r6,0x8000
    bfc4:	84 62 00 00 	l.lwz r3,0x0(r2)
    bfc8:	e0 63 30 04 	l.or r3,r3,r6
    bfcc:	d4 02 18 00 	l.sw 0x0(r2),r3

	time_udelay(20);
    bfd0:	9c 60 00 14 	l.addi r3,r0,0x14
    bfd4:	07 ff e5 62 	l.jal 555c <time_udelay>
    bfd8:	a8 4e 15 40 	l.ori r2,r14,0x1540
	 * mbus default clk src is 24MHz, switch to pll_periph0(x2),
	 * so before increase mbus freq, should set div firstly.
	 * by Superm Wu at 2015-09-18
	 */
#ifndef CFG_FPGA_PLATFORM
	writel(mbus&0x7, CCU_MBUS_CLK_REG);
    bfdc:	84 70 00 00 	l.lwz r3,0x0(r16)
    bfe0:	a4 63 00 07 	l.andi r3,r3,0x7
    bfe4:	d4 02 18 00 	l.sw 0x0(r2),r3
	time_udelay(200);
    bfe8:	07 ff e5 5d 	l.jal 555c <time_udelay>
    bfec:	9c 60 00 c8 	l.addi r3,r0,0xc8
	writel(mbus&((0x3 << 24) | 0x7), CCU_MBUS_CLK_REG);
    bff0:	a8 8e 00 07 	l.ori r4,r14,0x7
    bff4:	84 70 00 00 	l.lwz r3,0x0(r16)
    bff8:	e0 63 20 03 	l.and r3,r3,r4
    bffc:	d4 02 18 00 	l.sw 0x0(r2),r3
	time_udelay(20);
    c000:	07 ff e5 57 	l.jal 555c <time_udelay>
    c004:	9c 60 00 14 	l.addi r3,r0,0x14
	writel((readl(CCU_MBUS_CLK_REG) | (0x1 << 31)), CCU_MBUS_CLK_REG);
    c008:	18 a0 80 00 	l.movhi r5,0x8000
    c00c:	84 62 00 00 	l.lwz r3,0x0(r2)
    c010:	e0 63 28 04 	l.or r3,r3,r5
    c014:	d4 02 18 00 	l.sw 0x0(r2),r3
	time_udelay(10000);
    c018:	07 ff e5 51 	l.jal 555c <time_udelay>
    c01c:	9c 60 27 10 	l.addi r3,r0,0x2710
	dram_power_up_process(&arisc_para.dram_para);
    c020:	18 60 00 00 	l.movhi r3,0x0
    c024:	04 00 15 20 	l.jal 114a4 <dram_power_up_process>
    c028:	a8 63 40 08 	l.ori r3,r3,0x4008

	/* calc dram checksum */
	if (standby_dram_crc_enable()) {
    c02c:	07 ff fb dd 	l.jal afa0 <standby_dram_crc_enable>
    c030:	15 00 00 00 	l.nop 0x0
    c034:	bc 0b 00 00 	l.sfeqi r11,0x0
    c038:	10 00 00 19 	l.bf c09c <cpu_op+0xc54>
    c03c:	18 60 f3 f3 	l.movhi r3,0xf3f3
//		dram_master_enable(16, 1);
		after_crc = standby_dram_crc();
    c040:	07 ff fb dc 	l.jal afb0 <standby_dram_crc>
    c044:	18 40 00 01 	l.movhi r2,0x1
    c048:	a8 42 36 cc 	l.ori r2,r2,0x36cc
    c04c:	d4 02 58 00 	l.sw 0x0(r2),r11
		if (after_crc != before_crc) {
    c050:	18 40 00 01 	l.movhi r2,0x1
    c054:	a8 42 36 c8 	l.ori r2,r2,0x36c8
    c058:	84 42 00 00 	l.lwz r2,0x0(r2)
    c05c:	e4 0b 10 00 	l.sfeq r11,r2
    c060:	10 00 00 0e 	l.bf c098 <cpu_op+0xc50>
    c064:	18 60 f1 f1 	l.movhi r3,0xf1f1
			save_state_flag(REC_SSTANDBY | REC_DRAM_DBG | 0xf);
    c068:	04 00 16 2f 	l.jal 11924 <save_state_flag>
    c06c:	a8 63 90 0f 	l.ori r3,r3,0x900f
			ERR("dram crc error...\n");
    c070:	18 80 00 01 	l.movhi r4,0x1
    c074:	9c 60 00 08 	l.addi r3,r0,0x8
    c078:	07 ff f9 d8 	l.jal a7d8 <debugger_printf>
    c07c:	a8 84 2a 12 	l.ori r4,r4,0x2a12
			ERR("---->>>>LOOP<<<<----\n");
    c080:	18 80 00 01 	l.movhi r4,0x1
    c084:	9c 60 00 08 	l.addi r3,r0,0x8
    c088:	07 ff f9 d4 	l.jal a7d8 <debugger_printf>
    c08c:	a8 84 2a 29 	l.ori r4,r4,0x2a29
    c090:	00 00 00 00 	l.j c090 <cpu_op+0xc48>
    c094:	15 00 00 00 	l.nop 0x0

	cpucfg_cpu_resume_early(resume_entry);
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x5);

	dram_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x6);
    c098:	18 60 f3 f3 	l.movhi r3,0xf3f3

static void usb_resume(void)
{
	u32 val;

	if (!(standby_type & CPUS_WAKEUP_USB)) {
    c09c:	18 40 00 01 	l.movhi r2,0x1

	cpucfg_cpu_resume_early(resume_entry);
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x5);

	dram_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x6);
    c0a0:	a8 63 70 06 	l.ori r3,r3,0x7006
    c0a4:	04 00 16 20 	l.jal 11924 <save_state_flag>
    c0a8:	a8 42 33 ec 	l.ori r2,r2,0x33ec

static void usb_resume(void)
{
	u32 val;

	if (!(standby_type & CPUS_WAKEUP_USB)) {
    c0ac:	84 42 00 00 	l.lwz r2,0x0(r2)
    c0b0:	a4 42 20 00 	l.andi r2,r2,0x2000
    c0b4:	bc 22 00 00 	l.sfnei r2,0x0
    c0b8:	10 00 00 08 	l.bf c0d8 <cpu_op+0xc90>
    c0bc:	18 80 03 00 	l.movhi r4,0x300
		val = readl(VDD_SYS_PWROFF_GATING_REG);
    c0c0:	18 40 07 01 	l.movhi r2,0x701
		val &= ~VDD_SYS2USB_GATING(1);
		val &= ~VDD_USB2CPUS_GATING(1);
    c0c4:	9c c0 fe f7 	l.addi r6,r0,0xfffffef7
static void usb_resume(void)
{
	u32 val;

	if (!(standby_type & CPUS_WAKEUP_USB)) {
		val = readl(VDD_SYS_PWROFF_GATING_REG);
    c0c8:	a8 42 02 50 	l.ori r2,r2,0x250
    c0cc:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= SCLK_GATING_OHCI0_MASK;
		val |= USBPHY0_RST_MASK;
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(VDD_SYS_PWROFF_GATING_REG);
		val &= ~VDD_SYS2USB_GATING(1);
    c0d0:	00 00 00 1f 	l.j c14c <cpu_op+0xd04>
    c0d4:	e0 63 30 03 	l.and r3,r3,r6
		val |= USBOHCI1_GATING_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val |= USBEHCI1_RST_MASK;
		val |= USBOHCI1_RST_MASK;
    c0d8:	18 a0 00 22 	l.movhi r5,0x22
		val &= ~VDD_SYS2USB_GATING(1);
		val &= ~VDD_USB2CPUS_GATING(1);
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby resume */
		val = readl(CCU_USB_BUS_GATING_RST_REG);
    c0dc:	a8 44 1a 8c 	l.ori r2,r4,0x1a8c
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		val = readl(CCU_USB1_CLOCK_REG);
		val |= SCLK_GATING_USBPHY1_MASK;
		val |= SCLK_GATING_OHCI1_MASK;
		val |= USBPHY1_RST_MASK;
    c0e0:	18 c0 e0 00 	l.movhi r6,0xe000
		val &= ~VDD_SYS2USB_GATING(1);
		val &= ~VDD_USB2CPUS_GATING(1);
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby resume */
		val = readl(CCU_USB_BUS_GATING_RST_REG);
    c0e4:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= USBEHCI1_GATING_MASK;
		val |= USBOHCI1_GATING_MASK;
    c0e8:	a8 63 00 22 	l.ori r3,r3,0x22
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    c0ec:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(CCU_USB_BUS_GATING_RST_REG);
    c0f0:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= USBEHCI1_RST_MASK;
		val |= USBOHCI1_RST_MASK;
    c0f4:	e0 63 28 04 	l.or r3,r3,r5
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    c0f8:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(CCU_USB1_CLOCK_REG);
    c0fc:	a8 64 1a 74 	l.ori r3,r4,0x1a74
		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val |= USBOHCI0_RST_MASK;
		val |= USBEHCI0_RST_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		val = readl(CCU_USB0_CLOCK_REG);
    c100:	a8 84 1a 70 	l.ori r4,r4,0x1a70
		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val |= USBEHCI1_RST_MASK;
		val |= USBOHCI1_RST_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		val = readl(CCU_USB1_CLOCK_REG);
    c104:	84 a3 00 00 	l.lwz r5,0x0(r3)
		val |= SCLK_GATING_USBPHY1_MASK;
		val |= SCLK_GATING_OHCI1_MASK;
		val |= USBPHY1_RST_MASK;
    c108:	e0 a5 30 04 	l.or r5,r5,r6
		writel(val, CCU_USB1_CLOCK_REG);
    c10c:	d4 03 28 00 	l.sw 0x0(r3),r5
		val |= USBEHCI0_GATING_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val |= USBOHCI0_RST_MASK;
		val |= USBEHCI0_RST_MASK;
    c110:	18 a0 00 11 	l.movhi r5,0x11
		val |= SCLK_GATING_OHCI1_MASK;
		val |= USBPHY1_RST_MASK;
		writel(val, CCU_USB1_CLOCK_REG);

		/* for usb standby resume */
		val = readl(CCU_USB_BUS_GATING_RST_REG);
    c114:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= USBOHCI0_GATING_MASK;
		val |= USBEHCI0_GATING_MASK;
    c118:	a8 63 00 11 	l.ori r3,r3,0x11
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    c11c:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(CCU_USB_BUS_GATING_RST_REG);
    c120:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= USBOHCI0_RST_MASK;
		val |= USBEHCI0_RST_MASK;
    c124:	e0 63 28 04 	l.or r3,r3,r5
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    c128:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(CCU_USB0_CLOCK_REG);
    c12c:	84 44 00 00 	l.lwz r2,0x0(r4)
		val |= SCLK_GATING_USBPHY0_MASK;
		val |= SCLK_GATING_OHCI0_MASK;
		val |= USBPHY0_RST_MASK;
    c130:	e0 42 30 04 	l.or r2,r2,r6
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(VDD_SYS_PWROFF_GATING_REG);
		val &= ~VDD_SYS2USB_GATING(1);
    c134:	9c c0 ff f7 	l.addi r6,r0,0xfffffff7

		val = readl(CCU_USB0_CLOCK_REG);
		val |= SCLK_GATING_USBPHY0_MASK;
		val |= SCLK_GATING_OHCI0_MASK;
		val |= USBPHY0_RST_MASK;
		writel(val, CCU_USB0_CLOCK_REG);
    c138:	d4 04 10 00 	l.sw 0x0(r4),r2

		val = readl(VDD_SYS_PWROFF_GATING_REG);
    c13c:	18 40 07 01 	l.movhi r2,0x701
    c140:	a8 42 02 50 	l.ori r2,r2,0x250
    c144:	84 62 00 00 	l.lwz r3,0x0(r2)
		val &= ~VDD_SYS2USB_GATING(1);
    c148:	e0 63 30 03 	l.and r3,r3,r6
		writel(val, VDD_SYS_PWROFF_GATING_REG);
    c14c:	d4 02 18 00 	l.sw 0x0(r2),r3
}

static void device_resume(void)
{
	usb_resume();
	hwmsgbox_super_standby_exit();
    c150:	07 ff eb 94 	l.jal 6fa0 <hwmsgbox_super_standby_exit>
    c154:	18 40 03 00 	l.movhi r2,0x300
	twi_standby_exit();
    c158:	07 ff e9 86 	l.jal 6770 <twi_standby_exit>
    c15c:	a8 42 60 a0 	l.ori r2,r2,0x60a0
	pmu_standby_exit();
    c160:	07 ff ee a7 	l.jal 7bfc <pmu_standby_exit>
    c164:	15 00 00 00 	l.nop 0x0
	}
}
static void smc_standby_exit(void)
{
	int read_idx, resume_idx;
	if ((readl(SID_SEC_MODE_STA) & SID_SEC_MODE_MASK) == 0) {
    c168:	84 42 00 00 	l.lwz r2,0x0(r2)
    c16c:	a4 42 00 01 	l.andi r2,r2,0x1
    c170:	bc 02 00 00 	l.sfeqi r2,0x0
    c174:	10 00 00 2e 	l.bf c22c <cpu_op+0xde4>
    c178:	18 a0 00 01 	l.movhi r5,0x1
		/*chip non-secure, do not need smc config*/
		return;
	}

	/*enable smc control*/
	writel(0x0, SMC_ACTION_REG);
    c17c:	18 40 04 80 	l.movhi r2,0x480
    c180:	9c 80 00 00 	l.addi r4,r0,0x0
    c184:	a8 62 00 04 	l.ori r3,r2,0x4
    c188:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0, SMC_MST0_BYP_REG);
    c18c:	a8 62 00 70 	l.ori r3,r2,0x70
	writel(0, SMC_MST1_BYP_REG);
	writel(0, SMC_MST2_BYP_REG);
	writel(0xffffffff, SMC_MST0_SEC_REG);
	writel(0xffffffff, SMC_MST1_SEC_REG);
	writel(0xffffffff, SMC_MST2_SEC_REG);
    c190:	a8 a5 34 10 	l.ori r5,r5,0x3410
		return;
	}

	/*enable smc control*/
	writel(0x0, SMC_ACTION_REG);
	writel(0, SMC_MST0_BYP_REG);
    c194:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0, SMC_MST1_BYP_REG);
    c198:	a8 62 00 74 	l.ori r3,r2,0x74
    c19c:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0, SMC_MST2_BYP_REG);
    c1a0:	a8 62 00 78 	l.ori r3,r2,0x78
    c1a4:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0xffffffff, SMC_MST0_SEC_REG);
    c1a8:	9c 80 ff ff 	l.addi r4,r0,0xffffffff
    c1ac:	a8 62 00 80 	l.ori r3,r2,0x80
    c1b0:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0xffffffff, SMC_MST1_SEC_REG);
    c1b4:	a8 62 00 84 	l.ori r3,r2,0x84
	writel(0xffffffff, SMC_MST2_SEC_REG);
    c1b8:	a8 42 00 88 	l.ori r2,r2,0x88
	writel(0x0, SMC_ACTION_REG);
	writel(0, SMC_MST0_BYP_REG);
	writel(0, SMC_MST1_BYP_REG);
	writel(0, SMC_MST2_BYP_REG);
	writel(0xffffffff, SMC_MST0_SEC_REG);
	writel(0xffffffff, SMC_MST1_SEC_REG);
    c1bc:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0xffffffff, SMC_MST2_SEC_REG);
    c1c0:	d4 02 20 00 	l.sw 0x0(r2),r4
    c1c4:	18 80 00 01 	l.movhi r4,0x1
    c1c8:	9c 40 00 00 	l.addi r2,r0,0x0
    c1cc:	a8 84 34 08 	l.ori r4,r4,0x3408

	/*resume region settings*/
	resume_idx = 0;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (smc_region_save[read_idx].region_attr == 0)
    c1d0:	84 65 00 00 	l.lwz r3,0x0(r5)
    c1d4:	bc 03 00 00 	l.sfeqi r3,0x0
    c1d8:	10 00 00 15 	l.bf c22c <cpu_op+0xde4>
    c1dc:	18 c0 04 80 	l.movhi r6,0x480
u32 is_suspend_lock(void)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
    c1e0:	a8 c6 01 00 	l.ori r6,r6,0x100
    c1e4:	e0 62 30 00 	l.add r3,r2,r6
	/*resume region settings*/
	resume_idx = 0;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (smc_region_save[read_idx].region_attr == 0)
			break;
		writel(smc_region_save[resume_idx].region_low,
    c1e8:	84 c4 00 00 	l.lwz r6,0x0(r4)
    c1ec:	d4 03 30 00 	l.sw 0x0(r3),r6
u32 is_suspend_lock(void)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
    c1f0:	18 c0 04 80 	l.movhi r6,0x480
    c1f4:	a8 c6 01 04 	l.ori r6,r6,0x104
    c1f8:	e0 62 30 00 	l.add r3,r2,r6
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (smc_region_save[read_idx].region_attr == 0)
			break;
		writel(smc_region_save[resume_idx].region_low,
		       SMC_REGIN_SETUP_LOW_REG(resume_idx));
		writel(smc_region_save[resume_idx].region_high,
    c1fc:	84 c4 00 04 	l.lwz r6,0x4(r4)
		       SMC_REGIN_SETUP_HIGH_REG(resume_idx));
		writel(smc_region_save[resume_idx].region_attr,
    c200:	9c 84 00 0c 	l.addi r4,r4,0xc
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (smc_region_save[read_idx].region_attr == 0)
			break;
		writel(smc_region_save[resume_idx].region_low,
		       SMC_REGIN_SETUP_LOW_REG(resume_idx));
		writel(smc_region_save[resume_idx].region_high,
    c204:	d4 03 30 00 	l.sw 0x0(r3),r6
u32 is_suspend_lock(void)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
    c208:	18 c0 04 80 	l.movhi r6,0x480
    c20c:	a8 c6 01 08 	l.ori r6,r6,0x108
    c210:	e0 62 30 00 	l.add r3,r2,r6
			break;
		writel(smc_region_save[resume_idx].region_low,
		       SMC_REGIN_SETUP_LOW_REG(resume_idx));
		writel(smc_region_save[resume_idx].region_high,
		       SMC_REGIN_SETUP_HIGH_REG(resume_idx));
		writel(smc_region_save[resume_idx].region_attr,
    c214:	84 c5 00 00 	l.lwz r6,0x0(r5)
    c218:	9c 42 00 10 	l.addi r2,r2,0x10
    c21c:	d4 03 30 00 	l.sw 0x0(r3),r6
	writel(0xffffffff, SMC_MST1_SEC_REG);
	writel(0xffffffff, SMC_MST2_SEC_REG);

	/*resume region settings*/
	resume_idx = 0;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
    c220:	bc 22 00 80 	l.sfnei r2,0x80
    c224:	13 ff ff eb 	l.bf c1d0 <cpu_op+0xd88>
    c228:	9c a5 00 0c 	l.addi r5,r5,0xc

	dram_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x6);

	device_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x7);
    c22c:	18 40 f3 f3 	l.movhi r2,0xf3f3

	printk("wait ac327 resume...\n");

	/* wait cpu0 restore finished. */
	while (1) {
		ret = hwmsgbox_query_message(&message, 0);
    c230:	9e 01 00 14 	l.addi r16,r1,0x14

	dram_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x6);

	device_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x7);
    c234:	04 00 15 bc 	l.jal 11924 <save_state_flag>
    c238:	a8 62 70 07 	l.ori r3,r2,0x7007

	cpucfg_cpu_resume(resume_entry);
    c23c:	04 00 04 db 	l.jal d5a8 <cpucfg_cpu_resume>
    c240:	a8 72 00 00 	l.ori r3,r18,0x0
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x8);
    c244:	a8 62 70 08 	l.ori r3,r2,0x7008
    c248:	04 00 15 b7 	l.jal 11924 <save_state_flag>
    c24c:	9c 40 00 00 	l.addi r2,r0,0x0
	struct message message;

	/* no paras for resume notify message */
	message.paras = NULL;

	printk("wait ac327 resume...\n");
    c250:	18 80 00 01 	l.movhi r4,0x1
    c254:	9c 60 00 0f 	l.addi r3,r0,0xf
    c258:	a8 84 2a 43 	l.ori r4,r4,0x2a43
    c25c:	07 ff f9 5f 	l.jal a7d8 <debugger_printf>
    c260:	d4 01 10 30 	l.sw 0x30(r1),r2

	/* wait cpu0 restore finished. */
	while (1) {
		ret = hwmsgbox_query_message(&message, 0);
    c264:	a8 70 00 00 	l.ori r3,r16,0x0
    c268:	07 ff ea d0 	l.jal 6da8 <hwmsgbox_query_message>
    c26c:	9c 80 00 00 	l.addi r4,r0,0x0
		if (ret != OK)
    c270:	bc 2b 00 00 	l.sfnei r11,0x0
    c274:	13 ff ff fc 	l.bf c264 <cpu_op+0xe1c>
    c278:	a8 4b 00 00 	l.ori r2,r11,0x0
			continue; /* no message, query again */

		/* query valid message */
		if (message.type == SSTANDBY_RESTORE_NOTIFY) {
    c27c:	8c 61 00 16 	l.lbz r3,0x16(r1)
    c280:	bc 23 00 11 	l.sfnei r3,0x11
    c284:	10 00 00 23 	l.bf c310 <cpu_op+0xec8>
    c288:	18 80 00 01 	l.movhi r4,0x1
			/* cpu0 restore, feedback wakeup event. */
			LOG("cpu0 restore finished\n");
    c28c:	9c 60 00 02 	l.addi r3,r0,0x2
    c290:	a8 84 2a 59 	l.ori r4,r4,0x2a59
    c294:	07 ff f9 51 	l.jal a7d8 <debugger_printf>
    c298:	19 c0 00 01 	l.movhi r14,0x1
			/* init feedback message */
			message.count = 1;
    c29c:	9c 60 00 01 	l.addi r3,r0,0x1
			message.paras = (u32 *)&wakeup_source;
			hwmsgbox_feedback_message(&message, SEND_MSG_TIMEOUT); /* synchronous message, need feedback. */
    c2a0:	18 80 00 01 	l.movhi r4,0x1
		if (message.type == SSTANDBY_RESTORE_NOTIFY) {
			/* cpu0 restore, feedback wakeup event. */
			LOG("cpu0 restore finished\n");
			/* init feedback message */
			message.count = 1;
			message.paras = (u32 *)&wakeup_source;
    c2a4:	a9 ce 36 c4 	l.ori r14,r14,0x36c4
			hwmsgbox_feedback_message(&message, SEND_MSG_TIMEOUT); /* synchronous message, need feedback. */
    c2a8:	a8 84 86 a0 	l.ori r4,r4,0x86a0
		/* query valid message */
		if (message.type == SSTANDBY_RESTORE_NOTIFY) {
			/* cpu0 restore, feedback wakeup event. */
			LOG("cpu0 restore finished\n");
			/* init feedback message */
			message.count = 1;
    c2ac:	d8 01 18 18 	l.sb 0x18(r1),r3
			message.paras = (u32 *)&wakeup_source;
			hwmsgbox_feedback_message(&message, SEND_MSG_TIMEOUT); /* synchronous message, need feedback. */
    c2b0:	a8 70 00 00 	l.ori r3,r16,0x0
    c2b4:	07 ff ea 75 	l.jal 6c88 <hwmsgbox_feedback_message>
    c2b8:	d4 01 70 30 	l.sw 0x30(r1),r14
			/* invalid message detected, ignore it, by sunny at 2012-6-28 11:33:13. */
			ERR("standby ignore message [%x]\n", message.type);
		}
	}

	wakeup_source = NO_WAKESOURCE;
    c2bc:	d4 0e 10 00 	l.sw 0x0(r14),r2

	cpucfg_cpu_resume(resume_entry);
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x8);

	wait_cpu0_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x9);
    c2c0:	19 c0 f3 f3 	l.movhi r14,0xf3f3
    c2c4:	04 00 15 98 	l.jal 11924 <save_state_flag>
    c2c8:	a8 6e 70 09 	l.ori r3,r14,0x7009

	suspend_lock = 0;
    c2cc:	18 60 00 01 	l.movhi r3,0x1
    c2d0:	a8 63 34 04 	l.ori r3,r3,0x3404
    c2d4:	d4 03 10 00 	l.sw 0x0(r3),r2
	 *
	 * --------------------------------------------------------------------------
	 */
	save_state_flag(REC_ESTANDBY | REC_BEFORE_EXIT);
	standby_process_exit(pmessage);
	save_state_flag(REC_ESTANDBY | REC_AFTER_EXIT);
    c2d8:	a8 6e 80 00 	l.ori r3,r14,0x8000
    c2dc:	04 00 15 92 	l.jal 11924 <save_state_flag>
    c2e0:	18 40 07 01 	l.movhi r2,0x701

	/* restore cpus source clock */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | cpus_src, CPUS_CFG_REG);
    c2e4:	18 80 f8 ff 	l.movhi r4,0xf8ff
    c2e8:	84 62 00 00 	l.lwz r3,0x0(r2)
    c2ec:	a8 84 ff ff 	l.ori r4,r4,0xffff
    c2f0:	e0 63 20 03 	l.and r3,r3,r4
    c2f4:	18 80 00 01 	l.movhi r4,0x1
    c2f8:	a8 84 33 e8 	l.ori r4,r4,0x33e8
    c2fc:	84 84 00 00 	l.lwz r4,0x0(r4)
    c300:	e0 63 20 04 	l.or r3,r3,r4
    c304:	d4 02 18 00 	l.sw 0x0(r2),r3
			cpu_power_down(0, mpidr);
		}
	}

	return 0;
}
    c308:	00 00 00 1a 	l.j c370 <cpu_op+0xf28>
    c30c:	9c 21 00 54 	l.addi r1,r1,0x54
			message.paras = (u32 *)&wakeup_source;
			hwmsgbox_feedback_message(&message, SEND_MSG_TIMEOUT); /* synchronous message, need feedback. */
			break;
		} else {
			/* invalid message detected, ignore it, by sunny at 2012-6-28 11:33:13. */
			ERR("standby ignore message [%x]\n", message.type);
    c310:	18 80 00 01 	l.movhi r4,0x1
    c314:	d4 01 18 00 	l.sw 0x0(r1),r3
    c318:	a8 84 2a 70 	l.ori r4,r4,0x2a70
    c31c:	07 ff f9 2f 	l.jal a7d8 <debugger_printf>
    c320:	9c 60 00 08 	l.addi r3,r0,0x8

	printk("wait ac327 resume...\n");

	/* wait cpu0 restore finished. */
	while (1) {
		ret = hwmsgbox_query_message(&message, 0);
    c324:	03 ff ff d1 	l.j c268 <cpu_op+0xe20>
    c328:	a8 70 00 00 	l.ori r3,r16,0x0
		if (wakeup_source != NO_WAKESOURCE) {
			LOG("wakeup: %d\n", wakeup_source);
			break;
		}

		writel(readl(LP_CTRL_REG) | ((1 << 24) | (1 << 25) | (1 << 26) | (1 << 27)), LP_CTRL_REG);
    c32c:	84 62 00 00 	l.lwz r3,0x0(r2)
    c330:	18 a0 0f 00 	l.movhi r5,0xf00
    c334:	e0 63 28 04 	l.or r3,r3,r5
    c338:	d4 02 18 00 	l.sw 0x0(r2),r3
		cpu_enter_doze();
    c33c:	04 00 00 b8 	l.jal c61c <cpu_enter_doze>
    c340:	15 00 00 00 	l.nop 0x0
		writel(readl(LP_CTRL_REG) & (~((1 << 24) | (1 << 25) | (1 << 26) | (1 << 27))), LP_CTRL_REG);
    c344:	18 c0 f0 ff 	l.movhi r6,0xf0ff
    c348:	84 62 00 00 	l.lwz r3,0x0(r2)
    c34c:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    c350:	e0 63 30 03 	l.and r3,r3,r6
    c354:	d4 02 18 00 	l.sw 0x0(r2),r3
    c358:	03 ff fe 17 	l.j bbb4 <cpu_op+0x76c>
    c35c:	15 00 00 00 	l.nop 0x0

			} else {

			}
		} else {
			cpu_power_down(0, mpidr);
    c360:	a8 62 00 00 	l.ori r3,r2,0x0
    c364:	04 00 05 47 	l.jal d880 <cpu_power_down>
    c368:	a8 8e 00 00 	l.ori r4,r14,0x0
		}
	}

	return 0;
}
    c36c:	9c 21 00 54 	l.addi r1,r1,0x54
    c370:	9d 60 00 00 	l.addi r11,r0,0x0
    c374:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    c378:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
    c37c:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
    c380:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
    c384:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
    c388:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
    c38c:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
    c390:	44 00 48 00 	l.jr r9
    c394:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)

0000c398 <sys_op>:
{
	pmu_reset();
}

int sys_op(struct message *pmessage)
{
    c398:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
	u32 state = pmessage->paras[0];

	LOG("state:%x\n", state);
    c39c:	18 80 00 01 	l.movhi r4,0x1
	pmu_reset();
}

int sys_op(struct message *pmessage)
{
	u32 state = pmessage->paras[0];
    c3a0:	84 43 00 1c 	l.lwz r2,0x1c(r3)
{
	pmu_reset();
}

int sys_op(struct message *pmessage)
{
    c3a4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 state = pmessage->paras[0];
    c3a8:	84 42 00 00 	l.lwz r2,0x0(r2)
{
	pmu_reset();
}

int sys_op(struct message *pmessage)
{
    c3ac:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    c3b0:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
	u32 state = pmessage->paras[0];

	LOG("state:%x\n", state);
    c3b4:	9c 60 00 02 	l.addi r3,r0,0x2
{
	pmu_reset();
}

int sys_op(struct message *pmessage)
{
    c3b8:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	u32 state = pmessage->paras[0];

	LOG("state:%x\n", state);
    c3bc:	a8 84 29 3e 	l.ori r4,r4,0x293e
    c3c0:	07 ff f9 06 	l.jal a7d8 <debugger_printf>
    c3c4:	d4 01 10 00 	l.sw 0x0(r1),r2

	switch (state) {
    c3c8:	bc 02 00 00 	l.sfeqi r2,0x0
    c3cc:	10 00 00 06 	l.bf c3e4 <sys_op+0x4c>
    c3d0:	bc 42 00 02 	l.sfgtui r2,0x2
    c3d4:	10 00 00 35 	l.bf c4a8 <sys_op+0x110>
    c3d8:	18 80 00 01 	l.movhi r4,0x1
    c3dc:	00 00 00 2d 	l.j c490 <sys_op+0xf8>
    c3e0:	15 00 00 00 	l.nop 0x0
	case arisc_system_shutdown:
		{
			save_state_flag(REC_SHUTDOWN | 0x101);
    c3e4:	04 00 15 50 	l.jal 11924 <save_state_flag>
    c3e8:	a8 60 a1 01 	l.ori r3,r0,0xa101
	return 0;
}

static void system_shutdown(void)
{
	pmu_charging_reset();
    c3ec:	07 ff eb c4 	l.jal 72fc <pmu_charging_reset>
    c3f0:	1a 00 07 01 	l.movhi r16,0x701

	iosc_freq_init();
    c3f4:	04 00 14 bd 	l.jal 116e8 <iosc_freq_init>
    c3f8:	15 00 00 00 	l.nop 0x0

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    c3fc:	18 80 f8 ff 	l.movhi r4,0xf8ff
    c400:	84 70 00 00 	l.lwz r3,0x0(r16)
    c404:	a8 84 ff ff 	l.ori r4,r4,0xffff

	/*
	 * set apbs2 clk to RC16M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    c408:	19 c0 00 01 	l.movhi r14,0x1
	pmu_charging_reset();

	iosc_freq_init();

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    c40c:	e0 63 20 03 	l.and r3,r3,r4
    c410:	18 80 02 00 	l.movhi r4,0x200

	/*
	 * set apbs2 clk to RC16M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    c414:	a9 ce 33 b0 	l.ori r14,r14,0x33b0
	pmu_charging_reset();

	iosc_freq_init();

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    c418:	e0 63 20 04 	l.or r3,r3,r4
    c41c:	d4 10 18 00 	l.sw 0x0(r16),r3

	/*
	 * set apbs2 clk to RC16M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    c420:	a8 62 00 00 	l.ori r3,r2,0x0
    c424:	84 8e 00 00 	l.lwz r4,0x0(r14)
    c428:	07 ff e6 17 	l.jal 5c84 <twi_clkchangecb>
    c42c:	aa 10 00 10 	l.ori r16,r16,0x10
	uart_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    c430:	a8 62 00 00 	l.ori r3,r2,0x0
    c434:	07 ff e5 70 	l.jal 59f4 <uart_clkchangecb>
    c438:	84 8e 00 00 	l.lwz r4,0x0(r14)
	writel((readl(APBS2_CFG_REG) & (~APBS2_CLK_SRC_SEL_MASK)) | APBS2_CLK_SRC_SEL(2), APBS2_CFG_REG);
    c43c:	18 80 f8 ff 	l.movhi r4,0xf8ff
    c440:	84 70 00 00 	l.lwz r3,0x0(r16)
    c444:	a8 84 ff ff 	l.ori r4,r4,0xffff
    c448:	e0 63 20 03 	l.and r3,r3,r4
    c44c:	18 80 02 00 	l.movhi r4,0x200
    c450:	e0 63 20 04 	l.or r3,r3,r4
    c454:	d4 10 18 00 	l.sw 0x0(r16),r3
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
    c458:	9c 60 00 01 	l.addi r3,r0,0x1
    c45c:	07 ff e5 66 	l.jal 59f4 <uart_clkchangecb>
    c460:	84 8e 00 00 	l.lwz r4,0x0(r14)
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
    c464:	84 8e 00 00 	l.lwz r4,0x0(r14)
    c468:	07 ff e6 07 	l.jal 5c84 <twi_clkchangecb>
    c46c:	9c 60 00 01 	l.addi r3,r0,0x1
	time_mdelay(10);
    c470:	07 ff e3 ed 	l.jal 5424 <time_mdelay>
    c474:	9c 60 00 0a 	l.addi r3,r0,0xa

	ccu_24mhosc_disable();
    c478:	04 00 16 00 	l.jal 11c78 <ccu_24mhosc_disable>
    c47c:	15 00 00 00 	l.nop 0x0

	pmu_shutdown();
    c480:	07 ff eb 0f 	l.jal 70bc <pmu_shutdown>
    c484:	15 00 00 00 	l.nop 0x0
			WRN("invaid system power state (%d)\n", state);
			return -EINVAL;
		}
	}

	return 0;
    c488:	00 00 00 0d 	l.j c4bc <sys_op+0x124>
    c48c:	a9 62 00 00 	l.ori r11,r2,0x0
			break;
		}
	case arisc_system_reset:
	case arisc_system_reboot:
		{
			save_state_flag(REC_SHUTDOWN | 0x102);
    c490:	04 00 15 25 	l.jal 11924 <save_state_flag>
    c494:	a8 60 a1 02 	l.ori r3,r0,0xa102
	pmu_shutdown();
}

static void system_reset(void)
{
	pmu_reset();
    c498:	07 ff ec f3 	l.jal 7864 <pmu_reset>
    c49c:	15 00 00 00 	l.nop 0x0
			WRN("invaid system power state (%d)\n", state);
			return -EINVAL;
		}
	}

	return 0;
    c4a0:	00 00 00 07 	l.j c4bc <sys_op+0x124>
    c4a4:	9d 60 00 00 	l.addi r11,r0,0x0
			system_reset();
			break;
		}
	default:
		{
			WRN("invaid system power state (%d)\n", state);
    c4a8:	9c 60 00 04 	l.addi r3,r0,0x4
    c4ac:	a8 84 2a 91 	l.ori r4,r4,0x2a91
    c4b0:	07 ff f8 ca 	l.jal a7d8 <debugger_printf>
    c4b4:	d4 01 10 00 	l.sw 0x0(r1),r2
			return -EINVAL;
    c4b8:	9d 60 ff ea 	l.addi r11,r0,0xffffffea
		}
	}

	return 0;
}
    c4bc:	9c 21 00 14 	l.addi r1,r1,0x14
    c4c0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    c4c4:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    c4c8:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    c4cc:	44 00 48 00 	l.jr r9
    c4d0:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

0000c4d4 <icache_coherent>:
    c4d4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    c4d8:	d7 e1 1f f8 	l.sw 0xfffffff8(r1),r3
    c4dc:	d7 e1 27 f4 	l.sw 0xfffffff4(r1),r4
    c4e0:	d7 e1 2f f0 	l.sw 0xfffffff0(r1),r5
    c4e4:	22 00 00 00 	l.msync 
    c4e8:	23 00 00 00 	l.csync 
    c4ec:	9c 60 00 10 	l.addi r3,r0,0x10
    c4f0:	9c 80 00 00 	l.addi r4,r0,0x0
    c4f4:	9c a0 10 00 	l.addi r5,r0,0x1000

0000c4f8 <invalidate_block>:
    c4f8:	c0 80 20 02 	l.mtspr r0,r4,0x2002
    c4fc:	e4 24 28 00 	l.sfne r4,r5
    c500:	13 ff ff fe 	l.bf c4f8 <invalidate_block>
    c504:	e0 84 18 00 	l.add r4,r4,r3
    c508:	22 80 00 00 	l.psync 
    c50c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    c510:	84 61 ff f8 	l.lwz r3,0xfffffff8(r1)
    c514:	84 81 ff f4 	l.lwz r4,0xfffffff4(r1)
    c518:	84 a1 ff f0 	l.lwz r5,0xfffffff0(r1)
    c51c:	44 00 48 00 	l.jr r9
    c520:	15 00 00 00 	l.nop 0x0

0000c524 <cpu_stack_monitor>:
    c524:	18 60 00 01 	l.movhi r3,0x1
    c528:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    c52c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    c530:	a8 63 37 70 	l.ori r3,r3,0x3770
    c534:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    c538:	00 00 00 03 	l.j c544 <cpu_stack_monitor+0x20>
    c53c:	9c 80 00 00 	l.addi r4,r0,0x0
    c540:	9c 84 00 04 	l.addi r4,r4,0x4
    c544:	18 40 00 01 	l.movhi r2,0x1
    c548:	a8 42 3b 70 	l.ori r2,r2,0x3b70
    c54c:	e4 63 10 00 	l.sfgeu r3,r2
    c550:	10 00 00 06 	l.bf c568 <cpu_stack_monitor+0x44>
    c554:	15 00 00 00 	l.nop 0x0
    c558:	84 a3 00 00 	l.lwz r5,0x0(r3)
    c55c:	bc 05 00 00 	l.sfeqi r5,0x0
    c560:	13 ff ff f8 	l.bf c540 <cpu_stack_monitor+0x1c>
    c564:	9c 63 00 04 	l.addi r3,r3,0x4
    c568:	d4 01 20 00 	l.sw 0x0(r1),r4
    c56c:	18 80 00 01 	l.movhi r4,0x1
    c570:	9c 60 00 0f 	l.addi r3,r0,0xf
    c574:	07 ff f8 99 	l.jal a7d8 <debugger_printf>
    c578:	a8 84 2a b5 	l.ori r4,r4,0x2ab5
    c57c:	9c 21 00 0c 	l.addi r1,r1,0xc
    c580:	9d 60 00 00 	l.addi r11,r0,0x0
    c584:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    c588:	44 00 48 00 	l.jr r9
    c58c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000c590 <cpu_init>:
    c590:	18 60 00 00 	l.movhi r3,0x0
    c594:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    c598:	a8 63 c5 24 	l.ori r3,r3,0xc524
    c59c:	07 ff f9 77 	l.jal ab78 <daemon_register_service>
    c5a0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    c5a4:	9c 60 00 11 	l.addi r3,r0,0x11
    c5a8:	b4 83 00 00 	l.mfspr r4,r3,0x0
    c5ac:	a8 84 00 04 	l.ori r4,r4,0x4
    c5b0:	c0 03 20 00 	l.mtspr r3,r4,0x0
    c5b4:	9c 21 00 04 	l.addi r1,r1,0x4
    c5b8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    c5bc:	44 00 48 00 	l.jr r9
    c5c0:	15 00 00 00 	l.nop 0x0

0000c5c4 <cpu_disable_int>:
    c5c4:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    c5c8:	9c 40 ff f9 	l.addi r2,r0,0xfffffff9
    c5cc:	9c 60 00 11 	l.addi r3,r0,0x11
    c5d0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    c5d4:	b5 63 00 00 	l.mfspr r11,r3,0x0
    c5d8:	e0 8b 10 03 	l.and r4,r11,r2
    c5dc:	c0 03 20 00 	l.mtspr r3,r4,0x0
    c5e0:	9c 21 00 04 	l.addi r1,r1,0x4
    c5e4:	44 00 48 00 	l.jr r9
    c5e8:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000c5ec <cpu_enable_int>:
    c5ec:	9c 80 00 11 	l.addi r4,r0,0x11
    c5f0:	c0 04 18 00 	l.mtspr r4,r3,0x0
    c5f4:	44 00 48 00 	l.jr r9
    c5f8:	15 00 00 00 	l.nop 0x0

0000c5fc <exit>:
    c5fc:	18 80 00 01 	l.movhi r4,0x1
    c600:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    c604:	9c 60 00 02 	l.addi r3,r0,0x2
    c608:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    c60c:	07 ff f8 73 	l.jal a7d8 <debugger_printf>
    c610:	a8 84 2a c8 	l.ori r4,r4,0x2ac8
    c614:	00 00 00 00 	l.j c614 <exit+0x18>
    c618:	15 00 00 00 	l.nop 0x0

0000c61c <cpu_enter_doze>:
    c61c:	9c 80 00 10 	l.addi r4,r0,0x10
    c620:	9c 60 40 00 	l.addi r3,r0,0x4000
    c624:	c0 03 20 00 	l.mtspr r3,r4,0x0
    c628:	44 00 48 00 	l.jr r9
    c62c:	15 00 00 00 	l.nop 0x0

0000c630 <reset_handler>:
    c630:	18 20 00 00 	l.movhi r1,0x0
    c634:	18 40 00 00 	l.movhi r2,0x0
    c638:	18 60 00 00 	l.movhi r3,0x0
    c63c:	18 80 00 00 	l.movhi r4,0x0
    c640:	18 a0 00 00 	l.movhi r5,0x0
    c644:	18 c0 00 00 	l.movhi r6,0x0
    c648:	18 e0 00 00 	l.movhi r7,0x0
    c64c:	19 00 00 00 	l.movhi r8,0x0
    c650:	19 20 00 00 	l.movhi r9,0x0
    c654:	19 40 00 00 	l.movhi r10,0x0
    c658:	19 60 00 00 	l.movhi r11,0x0
    c65c:	19 80 00 00 	l.movhi r12,0x0
    c660:	19 a0 00 00 	l.movhi r13,0x0
    c664:	19 c0 00 00 	l.movhi r14,0x0
    c668:	19 e0 00 00 	l.movhi r15,0x0
    c66c:	1a 00 00 00 	l.movhi r16,0x0
    c670:	1a 20 00 00 	l.movhi r17,0x0
    c674:	1a 40 00 00 	l.movhi r18,0x0
    c678:	1a 60 00 00 	l.movhi r19,0x0
    c67c:	1a 80 00 00 	l.movhi r20,0x0
    c680:	1a a0 00 00 	l.movhi r21,0x0
    c684:	1a c0 00 00 	l.movhi r22,0x0
    c688:	1a e0 00 00 	l.movhi r23,0x0
    c68c:	1b 00 00 00 	l.movhi r24,0x0
    c690:	1b 20 00 00 	l.movhi r25,0x0
    c694:	1b 40 00 00 	l.movhi r26,0x0
    c698:	1b 60 00 00 	l.movhi r27,0x0
    c69c:	1b 80 00 00 	l.movhi r28,0x0
    c6a0:	1b a0 00 00 	l.movhi r29,0x0
    c6a4:	1b c0 00 00 	l.movhi r30,0x0
    c6a8:	1b e0 00 00 	l.movhi r31,0x0
    c6ac:	a8 20 00 01 	l.ori r1,r0,0x1
    c6b0:	a8 21 00 80 	l.ori r1,r1,0x80
    c6b4:	c0 00 08 11 	l.mtspr r0,r1,0x11
    c6b8:	c1 40 00 00 	l.mtspr r0,r0,0x5000
    c6bc:	18 20 00 01 	l.movhi r1,0x1
    c6c0:	a8 21 3b 70 	l.ori r1,r1,0x3b70
    c6c4:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd
    c6c8:	e0 21 10 03 	l.and r1,r1,r2
    c6cc:	b4 c0 00 11 	l.mfspr r6,r0,0x11
    c6d0:	9c a0 ff ff 	l.addi r5,r0,0xffffffff
    c6d4:	ac a5 00 10 	l.xori r5,r5,0x10
    c6d8:	e0 a6 28 03 	l.and r5,r6,r5
    c6dc:	c0 00 28 11 	l.mtspr r0,r5,0x11
    c6e0:	9d c0 00 10 	l.addi r14,r0,0x10
    c6e4:	9c c0 00 00 	l.addi r6,r0,0x0
    c6e8:	9c a0 10 00 	l.addi r5,r0,0x1000

0000c6ec <invalid_block>:
    c6ec:	c0 80 30 02 	l.mtspr r0,r6,0x2002
    c6f0:	e4 26 28 00 	l.sfne r6,r5
    c6f4:	13 ff ff fe 	l.bf c6ec <invalid_block>
    c6f8:	e0 c6 70 00 	l.add r6,r6,r14
    c6fc:	15 00 00 00 	l.nop 0x0
    c700:	15 00 00 00 	l.nop 0x0
    c704:	15 00 00 00 	l.nop 0x0
    c708:	15 00 00 00 	l.nop 0x0
    c70c:	15 00 00 00 	l.nop 0x0
    c710:	15 00 00 00 	l.nop 0x0
    c714:	15 00 00 00 	l.nop 0x0
    c718:	15 00 00 00 	l.nop 0x0
    c71c:	15 00 00 00 	l.nop 0x0
    c720:	15 00 00 00 	l.nop 0x0
    c724:	15 00 00 00 	l.nop 0x0
    c728:	18 a0 00 01 	l.movhi r5,0x1
    c72c:	a8 a5 33 b8 	l.ori r5,r5,0x33b8
    c730:	18 c0 00 01 	l.movhi r6,0x1
    c734:	a8 c6 37 70 	l.ori r6,r6,0x3770
    c738:	d4 05 00 00 	l.sw 0x0(r5),r0
    c73c:	e4 85 30 00 	l.sfltu r5,r6
    c740:	13 ff ff fe 	l.bf c738 <invalid_block+0x4c>
    c744:	9c a5 00 04 	l.addi r5,r5,0x4
    c748:	07 ff f9 14 	l.jal ab98 <startup_entry>
    c74c:	15 00 00 00 	l.nop 0x0
    c750:	9c 6b 00 00 	l.addi r3,r11,0x0
    c754:	07 ff ff aa 	l.jal c5fc <exit>
    c758:	15 00 00 00 	l.nop 0x0

0000c75c <bus_error_exception_handler>:
    c75c:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c760:	d4 01 18 04 	l.sw 0x4(r1),r3
    c764:	d4 01 20 08 	l.sw 0x8(r1),r4
    c768:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c76c:	9c 60 00 02 	l.addi r3,r0,0x2
    c770:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c774:	9c a1 00 00 	l.addi r5,r1,0x0
    c778:	00 00 00 6e 	l.j c930 <cpu_exception_handler_entry>
    c77c:	15 00 00 00 	l.nop 0x0

0000c780 <data_page_fault_exception_handler>:
    c780:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c784:	d4 01 18 04 	l.sw 0x4(r1),r3
    c788:	d4 01 20 08 	l.sw 0x8(r1),r4
    c78c:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c790:	9c 60 00 03 	l.addi r3,r0,0x3
    c794:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c798:	9c a1 00 00 	l.addi r5,r1,0x0
    c79c:	00 00 00 65 	l.j c930 <cpu_exception_handler_entry>
    c7a0:	15 00 00 00 	l.nop 0x0

0000c7a4 <insn_page_fault_exception_handler>:
    c7a4:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c7a8:	d4 01 18 04 	l.sw 0x4(r1),r3
    c7ac:	d4 01 20 08 	l.sw 0x8(r1),r4
    c7b0:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c7b4:	9c 60 00 04 	l.addi r3,r0,0x4
    c7b8:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c7bc:	9c a1 00 00 	l.addi r5,r1,0x0
    c7c0:	00 00 00 5c 	l.j c930 <cpu_exception_handler_entry>
    c7c4:	15 00 00 00 	l.nop 0x0

0000c7c8 <timer_exception_handler>:
    c7c8:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c7cc:	d4 01 18 04 	l.sw 0x4(r1),r3
    c7d0:	d4 01 20 08 	l.sw 0x8(r1),r4
    c7d4:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c7d8:	9c 60 00 05 	l.addi r3,r0,0x5
    c7dc:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c7e0:	9c a1 00 00 	l.addi r5,r1,0x0
    c7e4:	00 00 00 53 	l.j c930 <cpu_exception_handler_entry>
    c7e8:	15 00 00 00 	l.nop 0x0

0000c7ec <aligment_exception_handler>:
    c7ec:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c7f0:	d4 01 18 04 	l.sw 0x4(r1),r3
    c7f4:	d4 01 20 08 	l.sw 0x8(r1),r4
    c7f8:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c7fc:	9c 60 00 06 	l.addi r3,r0,0x6
    c800:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c804:	9c a1 00 00 	l.addi r5,r1,0x0
    c808:	00 00 00 4a 	l.j c930 <cpu_exception_handler_entry>
    c80c:	15 00 00 00 	l.nop 0x0

0000c810 <illegal_exception_handler>:
    c810:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c814:	d4 01 18 04 	l.sw 0x4(r1),r3
    c818:	d4 01 20 08 	l.sw 0x8(r1),r4
    c81c:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c820:	9c 60 00 07 	l.addi r3,r0,0x7
    c824:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c828:	9c a1 00 00 	l.addi r5,r1,0x0
    c82c:	00 00 00 41 	l.j c930 <cpu_exception_handler_entry>
    c830:	15 00 00 00 	l.nop 0x0

0000c834 <irq_exception_handler>:
    c834:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c838:	d4 01 18 04 	l.sw 0x4(r1),r3
    c83c:	d4 01 20 08 	l.sw 0x8(r1),r4
    c840:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c844:	9c 60 00 08 	l.addi r3,r0,0x8
    c848:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c84c:	9c a1 00 00 	l.addi r5,r1,0x0
    c850:	00 00 00 38 	l.j c930 <cpu_exception_handler_entry>
    c854:	15 00 00 00 	l.nop 0x0

0000c858 <dtlb_miss_exception_handler>:
    c858:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c85c:	d4 01 18 04 	l.sw 0x4(r1),r3
    c860:	d4 01 20 08 	l.sw 0x8(r1),r4
    c864:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c868:	9c 60 00 09 	l.addi r3,r0,0x9
    c86c:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c870:	9c a1 00 00 	l.addi r5,r1,0x0
    c874:	00 00 00 2f 	l.j c930 <cpu_exception_handler_entry>
    c878:	15 00 00 00 	l.nop 0x0

0000c87c <itlb_miss_exception_handler>:
    c87c:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c880:	d4 01 18 04 	l.sw 0x4(r1),r3
    c884:	d4 01 20 08 	l.sw 0x8(r1),r4
    c888:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c88c:	9c 60 00 0a 	l.addi r3,r0,0xa
    c890:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c894:	9c a1 00 00 	l.addi r5,r1,0x0
    c898:	00 00 00 26 	l.j c930 <cpu_exception_handler_entry>
    c89c:	15 00 00 00 	l.nop 0x0

0000c8a0 <range_exception_handler>:
    c8a0:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c8a4:	d4 01 18 04 	l.sw 0x4(r1),r3
    c8a8:	d4 01 20 08 	l.sw 0x8(r1),r4
    c8ac:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c8b0:	9c 60 00 0b 	l.addi r3,r0,0xb
    c8b4:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c8b8:	9c a1 00 00 	l.addi r5,r1,0x0
    c8bc:	00 00 00 1d 	l.j c930 <cpu_exception_handler_entry>
    c8c0:	15 00 00 00 	l.nop 0x0

0000c8c4 <syscall_exception_handler>:
    c8c4:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c8c8:	d4 01 18 04 	l.sw 0x4(r1),r3
    c8cc:	d4 01 20 08 	l.sw 0x8(r1),r4
    c8d0:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c8d4:	9c 60 00 0c 	l.addi r3,r0,0xc
    c8d8:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c8dc:	9c a1 00 00 	l.addi r5,r1,0x0
    c8e0:	00 00 00 14 	l.j c930 <cpu_exception_handler_entry>
    c8e4:	15 00 00 00 	l.nop 0x0

0000c8e8 <fpu_exception_handler>:
    c8e8:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c8ec:	d4 01 18 04 	l.sw 0x4(r1),r3
    c8f0:	d4 01 20 08 	l.sw 0x8(r1),r4
    c8f4:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c8f8:	9c 60 00 0d 	l.addi r3,r0,0xd
    c8fc:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c900:	9c a1 00 00 	l.addi r5,r1,0x0
    c904:	00 00 00 0b 	l.j c930 <cpu_exception_handler_entry>
    c908:	15 00 00 00 	l.nop 0x0

0000c90c <trap_exception_handler>:
    c90c:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c910:	d4 01 18 04 	l.sw 0x4(r1),r3
    c914:	d4 01 20 08 	l.sw 0x8(r1),r4
    c918:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c91c:	9c 60 00 0e 	l.addi r3,r0,0xe
    c920:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c924:	9c a1 00 00 	l.addi r5,r1,0x0
    c928:	00 00 00 02 	l.j c930 <cpu_exception_handler_entry>
    c92c:	15 00 00 00 	l.nop 0x0

0000c930 <cpu_exception_handler_entry>:
    c930:	d4 01 10 00 	l.sw 0x0(r1),r2
    c934:	d4 01 30 10 	l.sw 0x10(r1),r6
    c938:	d4 01 38 14 	l.sw 0x14(r1),r7
    c93c:	d4 01 40 18 	l.sw 0x18(r1),r8
    c940:	d4 01 48 1c 	l.sw 0x1c(r1),r9
    c944:	d4 01 50 20 	l.sw 0x20(r1),r10
    c948:	d4 01 58 24 	l.sw 0x24(r1),r11
    c94c:	d4 01 60 28 	l.sw 0x28(r1),r12
    c950:	d4 01 68 2c 	l.sw 0x2c(r1),r13
    c954:	d4 01 70 30 	l.sw 0x30(r1),r14
    c958:	d4 01 78 34 	l.sw 0x34(r1),r15
    c95c:	d4 01 80 38 	l.sw 0x38(r1),r16
    c960:	d4 01 88 3c 	l.sw 0x3c(r1),r17
    c964:	d4 01 90 40 	l.sw 0x40(r1),r18
    c968:	d4 01 98 44 	l.sw 0x44(r1),r19
    c96c:	d4 01 a0 48 	l.sw 0x48(r1),r20
    c970:	d4 01 a8 4c 	l.sw 0x4c(r1),r21
    c974:	d4 01 b0 50 	l.sw 0x50(r1),r22
    c978:	d4 01 b8 54 	l.sw 0x54(r1),r23
    c97c:	d4 01 c0 58 	l.sw 0x58(r1),r24
    c980:	d4 01 c8 5c 	l.sw 0x5c(r1),r25
    c984:	d4 01 d0 60 	l.sw 0x60(r1),r26
    c988:	d4 01 d8 64 	l.sw 0x64(r1),r27
    c98c:	d4 01 e0 68 	l.sw 0x68(r1),r28
    c990:	d4 01 e8 6c 	l.sw 0x6c(r1),r29
    c994:	d4 01 f0 70 	l.sw 0x70(r1),r30
    c998:	d4 01 f8 74 	l.sw 0x74(r1),r31
    c99c:	04 00 00 9a 	l.jal cc04 <cpu_exception_handler_entry_c>
    c9a0:	15 00 00 00 	l.nop 0x0
    c9a4:	84 41 00 00 	l.lwz r2,0x0(r1)
    c9a8:	84 61 00 04 	l.lwz r3,0x4(r1)
    c9ac:	84 81 00 08 	l.lwz r4,0x8(r1)
    c9b0:	84 a1 00 0c 	l.lwz r5,0xc(r1)
    c9b4:	84 c1 00 10 	l.lwz r6,0x10(r1)
    c9b8:	84 e1 00 14 	l.lwz r7,0x14(r1)
    c9bc:	85 01 00 18 	l.lwz r8,0x18(r1)
    c9c0:	85 21 00 1c 	l.lwz r9,0x1c(r1)
    c9c4:	85 41 00 20 	l.lwz r10,0x20(r1)
    c9c8:	85 61 00 24 	l.lwz r11,0x24(r1)
    c9cc:	85 81 00 28 	l.lwz r12,0x28(r1)
    c9d0:	85 a1 00 2c 	l.lwz r13,0x2c(r1)
    c9d4:	85 c1 00 30 	l.lwz r14,0x30(r1)
    c9d8:	85 e1 00 34 	l.lwz r15,0x34(r1)
    c9dc:	86 01 00 38 	l.lwz r16,0x38(r1)
    c9e0:	86 21 00 3c 	l.lwz r17,0x3c(r1)
    c9e4:	86 41 00 40 	l.lwz r18,0x40(r1)
    c9e8:	86 61 00 44 	l.lwz r19,0x44(r1)
    c9ec:	86 81 00 48 	l.lwz r20,0x48(r1)
    c9f0:	86 a1 00 4c 	l.lwz r21,0x4c(r1)
    c9f4:	86 c1 00 50 	l.lwz r22,0x50(r1)
    c9f8:	86 e1 00 54 	l.lwz r23,0x54(r1)
    c9fc:	87 01 00 58 	l.lwz r24,0x58(r1)
    ca00:	87 21 00 5c 	l.lwz r25,0x5c(r1)
    ca04:	87 41 00 60 	l.lwz r26,0x60(r1)
    ca08:	87 61 00 64 	l.lwz r27,0x64(r1)
    ca0c:	87 81 00 68 	l.lwz r28,0x68(r1)
    ca10:	87 a1 00 6c 	l.lwz r29,0x6c(r1)
    ca14:	87 c1 00 70 	l.lwz r30,0x70(r1)
    ca18:	87 e1 00 74 	l.lwz r31,0x74(r1)
    ca1c:	9c 21 01 00 	l.addi r1,r1,0x100
    ca20:	24 00 00 00 	l.rfe 
    ca24:	15 00 00 00 	l.nop 0x0

0000ca28 <__udivsi3>:
    ca28:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    ca2c:	d4 01 48 00 	l.sw 0x0(r1),r9
    ca30:	9d 60 00 00 	l.addi r11,r0,0x0
    ca34:	9d 04 00 00 	l.addi r8,r4,0x0
    ca38:	9c a3 00 00 	l.addi r5,r3,0x0
    ca3c:	e4 28 58 00 	l.sfne r8,r11
    ca40:	0c 00 00 36 	l.bnf cb18 <__udivsi3+0xf0>
    ca44:	9c e0 00 00 	l.addi r7,r0,0x0
    ca48:	e4 48 28 00 	l.sfgtu r8,r5
    ca4c:	10 00 00 32 	l.bf cb14 <__udivsi3+0xec>
    ca50:	e4 08 28 00 	l.sfeq r8,r5
    ca54:	10 00 00 2e 	l.bf cb0c <__udivsi3+0xe4>
    ca58:	e4 8b 40 00 	l.sfltu r11,r8
    ca5c:	0c 00 00 0d 	l.bnf ca90 <__udivsi3+0x68>
    ca60:	9d a0 00 20 	l.addi r13,r0,0x20
    ca64:	19 20 80 00 	l.movhi r9,0x8000
    ca68:	9c c0 ff ff 	l.addi r6,r0,0xffffffff
    ca6c:	e0 65 48 03 	l.and r3,r5,r9
    ca70:	b8 87 00 01 	l.slli r4,r7,0x1
    ca74:	9d e5 00 00 	l.addi r15,r5,0x0
    ca78:	b8 63 00 5f 	l.srli r3,r3,0x1f
    ca7c:	e1 ad 30 00 	l.add r13,r13,r6
    ca80:	e0 e4 18 04 	l.or r7,r4,r3
    ca84:	e4 87 40 00 	l.sfltu r7,r8
    ca88:	13 ff ff f9 	l.bf ca6c <__udivsi3+0x44>
    ca8c:	b8 a5 00 01 	l.slli r5,r5,0x1
    ca90:	b8 e7 00 41 	l.srli r7,r7,0x1
    ca94:	9d ad 00 01 	l.addi r13,r13,0x1
    ca98:	9d 20 00 00 	l.addi r9,r0,0x0
    ca9c:	e4 89 68 00 	l.sfltu r9,r13
    caa0:	0c 00 00 1e 	l.bnf cb18 <__udivsi3+0xf0>
    caa4:	9c af 00 00 	l.addi r5,r15,0x0
    caa8:	19 e0 80 00 	l.movhi r15,0x8000
    caac:	9e 20 00 00 	l.addi r17,r0,0x0
    cab0:	e0 65 78 03 	l.and r3,r5,r15
    cab4:	b8 87 00 01 	l.slli r4,r7,0x1
    cab8:	b8 63 00 5f 	l.srli r3,r3,0x1f
    cabc:	e0 e4 18 04 	l.or r7,r4,r3
    cac0:	e0 c7 40 02 	l.sub r6,r7,r8
    cac4:	e0 66 78 03 	l.and r3,r6,r15
    cac8:	b8 63 00 5f 	l.srli r3,r3,0x1f
    cacc:	9c 80 00 00 	l.addi r4,r0,0x0
    cad0:	e4 23 20 00 	l.sfne r3,r4
    cad4:	10 00 00 03 	l.bf cae0 <__udivsi3+0xb8>
    cad8:	b8 6b 00 01 	l.slli r3,r11,0x1
    cadc:	9c 80 00 01 	l.addi r4,r0,0x1
    cae0:	b8 a5 00 01 	l.slli r5,r5,0x1
    cae4:	e4 24 88 00 	l.sfne r4,r17
    cae8:	0c 00 00 03 	l.bnf caf4 <__udivsi3+0xcc>
    caec:	e1 63 20 04 	l.or r11,r3,r4
    caf0:	9c e6 00 00 	l.addi r7,r6,0x0
    caf4:	9d 29 00 01 	l.addi r9,r9,0x1
    caf8:	e4 89 68 00 	l.sfltu r9,r13
    cafc:	13 ff ff ed 	l.bf cab0 <__udivsi3+0x88>
    cb00:	15 00 00 00 	l.nop 0x0
    cb04:	00 00 00 05 	l.j cb18 <__udivsi3+0xf0>
    cb08:	15 00 00 00 	l.nop 0x0
    cb0c:	00 00 00 03 	l.j cb18 <__udivsi3+0xf0>
    cb10:	9d 60 00 01 	l.addi r11,r0,0x1
    cb14:	9c e5 00 00 	l.addi r7,r5,0x0
    cb18:	85 21 00 00 	l.lwz r9,0x0(r1)
    cb1c:	44 00 48 00 	l.jr r9
    cb20:	9c 21 00 04 	l.addi r1,r1,0x4

0000cb24 <__divsi3>:
    cb24:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    cb28:	d4 01 48 00 	l.sw 0x0(r1),r9
    cb2c:	d4 01 70 04 	l.sw 0x4(r1),r14
    cb30:	9c a3 00 00 	l.addi r5,r3,0x0
    cb34:	9d c0 00 00 	l.addi r14,r0,0x0
    cb38:	e5 85 00 00 	l.sflts r5,r0
    cb3c:	0c 00 00 04 	l.bnf cb4c <__divsi3+0x28>
    cb40:	9c 60 00 00 	l.addi r3,r0,0x0
    cb44:	9d c0 00 01 	l.addi r14,r0,0x1
    cb48:	e0 a0 28 02 	l.sub r5,r0,r5
    cb4c:	e5 84 00 00 	l.sflts r4,r0
    cb50:	0c 00 00 04 	l.bnf cb60 <__divsi3+0x3c>
    cb54:	15 00 00 00 	l.nop 0x0
    cb58:	9d ce 00 01 	l.addi r14,r14,0x1
    cb5c:	e0 80 20 02 	l.sub r4,r0,r4
    cb60:	07 ff ff b2 	l.jal ca28 <__udivsi3>
    cb64:	9c 65 00 00 	l.addi r3,r5,0x0
    cb68:	bc 0e 00 01 	l.sfeqi r14,0x1
    cb6c:	0c 00 00 03 	l.bnf cb78 <__divsi3+0x54>
    cb70:	15 00 00 00 	l.nop 0x0
    cb74:	e1 60 58 02 	l.sub r11,r0,r11
    cb78:	85 21 00 00 	l.lwz r9,0x0(r1)
    cb7c:	85 c1 00 04 	l.lwz r14,0x4(r1)
    cb80:	44 00 48 00 	l.jr r9
    cb84:	9c 21 00 08 	l.addi r1,r1,0x8

0000cb88 <__umodsi3>:
    cb88:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    cb8c:	d4 01 48 00 	l.sw 0x0(r1),r9
    cb90:	07 ff ff a6 	l.jal ca28 <__udivsi3>
    cb94:	15 00 00 00 	l.nop 0x0
    cb98:	9d 67 00 00 	l.addi r11,r7,0x0
    cb9c:	85 21 00 00 	l.lwz r9,0x0(r1)
    cba0:	44 00 48 00 	l.jr r9
    cba4:	9c 21 00 04 	l.addi r1,r1,0x4

0000cba8 <__modsi3>:
    cba8:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    cbac:	d4 01 48 00 	l.sw 0x0(r1),r9
    cbb0:	d4 01 70 04 	l.sw 0x4(r1),r14
    cbb4:	9d c0 00 00 	l.addi r14,r0,0x0
    cbb8:	e5 83 00 00 	l.sflts r3,r0
    cbbc:	0c 00 00 04 	l.bnf cbcc <__modsi3+0x24>
    cbc0:	15 00 00 00 	l.nop 0x0
    cbc4:	9d c0 00 01 	l.addi r14,r0,0x1
    cbc8:	e0 60 18 02 	l.sub r3,r0,r3
    cbcc:	e5 84 00 00 	l.sflts r4,r0
    cbd0:	0c 00 00 03 	l.bnf cbdc <__modsi3+0x34>
    cbd4:	15 00 00 00 	l.nop 0x0
    cbd8:	e0 80 20 02 	l.sub r4,r0,r4
    cbdc:	07 ff ff 93 	l.jal ca28 <__udivsi3>
    cbe0:	15 00 00 00 	l.nop 0x0
    cbe4:	bc 0e 00 01 	l.sfeqi r14,0x1
    cbe8:	0c 00 00 03 	l.bnf cbf4 <__modsi3+0x4c>
    cbec:	9d 67 00 00 	l.addi r11,r7,0x0
    cbf0:	e1 60 58 02 	l.sub r11,r0,r11
    cbf4:	85 21 00 00 	l.lwz r9,0x0(r1)
    cbf8:	85 c1 00 04 	l.lwz r14,0x4(r1)
    cbfc:	44 00 48 00 	l.jr r9
    cc00:	9c 21 00 08 	l.addi r1,r1,0x8

0000cc04 <cpu_exception_handler_entry_c>:
    cc04:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    cc08:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    cc0c:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    cc10:	a9 c5 00 00 	l.ori r14,r5,0x0
    cc14:	bc 23 00 08 	l.sfnei r3,0x8
    cc18:	10 00 00 07 	l.bf cc34 <cpu_exception_handler_entry_c+0x30>
    cc1c:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
    cc20:	9c 21 00 18 	l.addi r1,r1,0x18
    cc24:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    cc28:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    cc2c:	03 ff df 6c 	l.j 49dc <interrupt_entry>
    cc30:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)
    cc34:	18 40 00 01 	l.movhi r2,0x1
    cc38:	d4 01 18 00 	l.sw 0x0(r1),r3
    cc3c:	b8 63 00 02 	l.slli r3,r3,0x2
    cc40:	a8 42 33 6c 	l.ori r2,r2,0x336c
    cc44:	e0 63 10 00 	l.add r3,r3,r2
    cc48:	84 43 00 00 	l.lwz r2,0x0(r3)
    cc4c:	d4 01 20 08 	l.sw 0x8(r1),r4
    cc50:	18 80 00 01 	l.movhi r4,0x1
    cc54:	9c 60 00 0f 	l.addi r3,r0,0xf
    cc58:	a8 84 2a d5 	l.ori r4,r4,0x2ad5
    cc5c:	07 ff f6 df 	l.jal a7d8 <debugger_printf>
    cc60:	d4 01 10 04 	l.sw 0x4(r1),r2
    cc64:	18 80 00 01 	l.movhi r4,0x1
    cc68:	9c 60 00 0f 	l.addi r3,r0,0xf
    cc6c:	a8 84 2a fc 	l.ori r4,r4,0x2afc
    cc70:	07 ff f6 da 	l.jal a7d8 <debugger_printf>
    cc74:	9c 40 00 02 	l.addi r2,r0,0x2
    cc78:	d4 01 10 00 	l.sw 0x0(r1),r2
    cc7c:	18 80 00 01 	l.movhi r4,0x1
    cc80:	84 6e 00 00 	l.lwz r3,0x0(r14)
    cc84:	a8 84 2b 0c 	l.ori r4,r4,0x2b0c
    cc88:	d4 01 18 04 	l.sw 0x4(r1),r3
    cc8c:	9c 60 00 0f 	l.addi r3,r0,0xf
    cc90:	07 ff f6 d2 	l.jal a7d8 <debugger_printf>
    cc94:	9c 42 00 01 	l.addi r2,r2,0x1
    cc98:	bc 22 00 20 	l.sfnei r2,0x20
    cc9c:	13 ff ff f7 	l.bf cc78 <cpu_exception_handler_entry_c+0x74>
    cca0:	9d ce 00 04 	l.addi r14,r14,0x4
    cca4:	18 80 00 01 	l.movhi r4,0x1
    cca8:	9c 60 00 0f 	l.addi r3,r0,0xf
    ccac:	07 ff f6 cb 	l.jal a7d8 <debugger_printf>
    ccb0:	a8 84 2b 1c 	l.ori r4,r4,0x2b1c
    ccb4:	15 00 00 00 	l.nop 0x0
    ccb8:	00 00 00 00 	l.j ccb8 <cpu_exception_handler_entry_c+0xb4>
    ccbc:	15 00 00 00 	l.nop 0x0

0000ccc0 <timer_tick_server>:
    ccc0:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    ccc4:	18 40 00 01 	l.movhi r2,0x1
    ccc8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    cccc:	a8 42 35 60 	l.ori r2,r2,0x3560
    ccd0:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    ccd4:	84 62 00 00 	l.lwz r3,0x0(r2)
    ccd8:	9c 63 00 01 	l.addi r3,r3,0x1
    ccdc:	d4 02 18 00 	l.sw 0x0(r2),r3
    cce0:	18 40 00 01 	l.movhi r2,0x1
    cce4:	00 00 00 1c 	l.j cd54 <timer_tick_server+0x94>
    cce8:	a8 42 35 64 	l.ori r2,r2,0x3564
    ccec:	84 83 00 10 	l.lwz r4,0x10(r3)
    ccf0:	bc 04 00 00 	l.sfeqi r4,0x0
    ccf4:	10 00 00 12 	l.bf cd3c <timer_tick_server+0x7c>
    ccf8:	15 00 00 00 	l.nop 0x0
    ccfc:	84 83 00 04 	l.lwz r4,0x4(r3)
    cd00:	bd a4 00 00 	l.sflesi r4,0x0
    cd04:	10 00 00 05 	l.bf cd18 <timer_tick_server+0x58>
    cd08:	bc 24 00 00 	l.sfnei r4,0x0
    cd0c:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    cd10:	00 00 00 0b 	l.j cd3c <timer_tick_server+0x7c>
    cd14:	d4 03 20 04 	l.sw 0x4(r3),r4
    cd18:	10 00 00 09 	l.bf cd3c <timer_tick_server+0x7c>
    cd1c:	15 00 00 00 	l.nop 0x0
    cd20:	84 83 00 00 	l.lwz r4,0x0(r3)
    cd24:	85 63 00 08 	l.lwz r11,0x8(r3)
    cd28:	bc 0b 00 00 	l.sfeqi r11,0x0
    cd2c:	10 00 00 04 	l.bf cd3c <timer_tick_server+0x7c>
    cd30:	d4 03 20 04 	l.sw 0x4(r3),r4
    cd34:	48 00 58 00 	l.jalr r11
    cd38:	84 63 00 0c 	l.lwz r3,0xc(r3)
    cd3c:	18 60 00 01 	l.movhi r3,0x1
    cd40:	9c 42 00 04 	l.addi r2,r2,0x4
    cd44:	a8 63 35 6c 	l.ori r3,r3,0x356c
    cd48:	e4 02 18 00 	l.sfeq r2,r3
    cd4c:	10 00 00 06 	l.bf cd64 <timer_tick_server+0xa4>
    cd50:	15 00 00 00 	l.nop 0x0
    cd54:	84 62 00 00 	l.lwz r3,0x0(r2)
    cd58:	bc 23 00 00 	l.sfnei r3,0x0
    cd5c:	13 ff ff e4 	l.bf ccec <timer_tick_server+0x2c>
    cd60:	15 00 00 00 	l.nop 0x0
    cd64:	9c 21 00 08 	l.addi r1,r1,0x8
    cd68:	9d 60 00 00 	l.addi r11,r0,0x0
    cd6c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    cd70:	44 00 48 00 	l.jr r9
    cd74:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000cd78 <start_softtimer>:
    cd78:	84 83 00 00 	l.lwz r4,0x0(r3)
    cd7c:	d4 03 20 04 	l.sw 0x4(r3),r4
    cd80:	9c 80 00 01 	l.addi r4,r0,0x1
    cd84:	44 00 48 00 	l.jr r9
    cd88:	d4 03 20 10 	l.sw 0x10(r3),r4

0000cd8c <stop_softtimer>:
    cd8c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    cd90:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    cd94:	9c 40 00 00 	l.addi r2,r0,0x0
    cd98:	9c 21 00 04 	l.addi r1,r1,0x4
    cd9c:	d4 03 10 04 	l.sw 0x4(r3),r2
    cda0:	d4 03 10 10 	l.sw 0x10(r3),r2
    cda4:	44 00 48 00 	l.jr r9
    cda8:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000cdac <add_softtimer>:
    cdac:	18 80 00 01 	l.movhi r4,0x1
    cdb0:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    cdb4:	a8 84 30 78 	l.ori r4,r4,0x3078
    cdb8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    cdbc:	84 a4 00 00 	l.lwz r5,0x0(r4)
    cdc0:	bc 25 00 00 	l.sfnei r5,0x0
    cdc4:	10 00 00 10 	l.bf ce04 <add_softtimer+0x58>
    cdc8:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
    cdcc:	18 c0 00 01 	l.movhi r6,0x1
    cdd0:	a8 c6 35 6c 	l.ori r6,r6,0x356c
    cdd4:	84 86 00 00 	l.lwz r4,0x0(r6)
    cdd8:	bc 44 00 01 	l.sfgtui r4,0x1
    cddc:	10 00 00 0a 	l.bf ce04 <add_softtimer+0x58>
    cde0:	9d 60 ff ea 	l.addi r11,r0,0xffffffea
    cde4:	18 40 00 01 	l.movhi r2,0x1
    cde8:	b8 e4 00 02 	l.slli r7,r4,0x2
    cdec:	a8 42 35 64 	l.ori r2,r2,0x3564
    cdf0:	9c 84 00 01 	l.addi r4,r4,0x1
    cdf4:	e0 e7 10 00 	l.add r7,r7,r2
    cdf8:	d4 06 20 00 	l.sw 0x0(r6),r4
    cdfc:	d4 07 18 00 	l.sw 0x0(r7),r3
    ce00:	a9 65 00 00 	l.ori r11,r5,0x0
    ce04:	9c 21 00 04 	l.addi r1,r1,0x4
    ce08:	44 00 48 00 	l.jr r9
    ce0c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000ce10 <current_time_tick>:
    ce10:	18 60 00 01 	l.movhi r3,0x1
    ce14:	a8 63 35 60 	l.ori r3,r3,0x3560
    ce18:	85 63 00 00 	l.lwz r11,0x0(r3)
    ce1c:	44 00 48 00 	l.jr r9
    ce20:	15 00 00 00 	l.nop 0x0

0000ce24 <msec_to_ticks>:
    ce24:	e0 83 18 00 	l.add r4,r3,r3
    ce28:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    ce2c:	e0 84 18 00 	l.add r4,r4,r3
    ce30:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    ce34:	b8 a4 00 05 	l.slli r5,r4,0x5
    ce38:	e0 84 28 00 	l.add r4,r4,r5
    ce3c:	e0 64 18 00 	l.add r3,r4,r3
    ce40:	07 ff fe fa 	l.jal ca28 <__udivsi3>
    ce44:	9c 80 03 e8 	l.addi r4,r0,0x3e8
    ce48:	9c 21 00 04 	l.addi r1,r1,0x4
    ce4c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    ce50:	44 00 48 00 	l.jr r9
    ce54:	15 00 00 00 	l.nop 0x0

0000ce58 <time_ticks_init>:
    ce58:	18 60 00 00 	l.movhi r3,0x0
    ce5c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    ce60:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    ce64:	a8 63 cc c0 	l.ori r3,r3,0xccc0
    ce68:	9c 80 00 00 	l.addi r4,r0,0x0
    ce6c:	07 ff e0 c6 	l.jal 5184 <timer_request>
    ce70:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    ce74:	18 80 00 01 	l.movhi r4,0x1
    ce78:	a8 6b 00 00 	l.ori r3,r11,0x0
    ce7c:	a8 84 35 5c 	l.ori r4,r4,0x355c
    ce80:	bc 03 00 00 	l.sfeqi r3,0x0
    ce84:	d4 04 58 00 	l.sw 0x0(r4),r11
    ce88:	10 00 00 0a 	l.bf ceb0 <time_ticks_init+0x58>
    ce8c:	9d 60 ff dc 	l.addi r11,r0,0xffffffdc
    ce90:	18 80 00 01 	l.movhi r4,0x1
    ce94:	9c 40 00 00 	l.addi r2,r0,0x0
    ce98:	a8 84 35 60 	l.ori r4,r4,0x3560
    ce9c:	a8 a2 00 00 	l.ori r5,r2,0x0
    cea0:	d4 04 10 00 	l.sw 0x0(r4),r2
    cea4:	07 ff e0 fb 	l.jal 5290 <timer_start>
    cea8:	9c 80 00 0a 	l.addi r4,r0,0xa
    ceac:	a9 62 00 00 	l.ori r11,r2,0x0
    ceb0:	9c 21 00 08 	l.addi r1,r1,0x8
    ceb4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    ceb8:	44 00 48 00 	l.jr r9
    cebc:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000cec0 <cpu_power_switch_set>:
    cec0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    cec4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    cec8:	bc 05 00 00 	l.sfeqi r5,0x0
    cecc:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    ced0:	b8 63 00 04 	l.slli r3,r3,0x4
    ced4:	10 00 00 36 	l.bf cfac <cpu_power_switch_set+0xec>
    ced8:	b8 a4 00 02 	l.slli r5,r4,0x2
    cedc:	18 c0 07 00 	l.movhi r6,0x700
    cee0:	a8 c6 04 50 	l.ori r6,r6,0x450
    cee4:	e0 43 30 00 	l.add r2,r3,r6
    cee8:	e0 42 28 00 	l.add r2,r2,r5
    ceec:	84 62 00 00 	l.lwz r3,0x0(r2)
    cef0:	bc 23 00 00 	l.sfnei r3,0x0
    cef4:	10 00 00 07 	l.bf cf10 <cpu_power_switch_set+0x50>
    cef8:	15 00 00 00 	l.nop 0x0
    cefc:	d4 01 20 00 	l.sw 0x0(r1),r4
    cf00:	18 80 00 01 	l.movhi r4,0x1
    cf04:	9c 60 00 04 	l.addi r3,r0,0x4
    cf08:	00 00 00 35 	l.j cfdc <cpu_power_switch_set+0x11c>
    cf0c:	a8 84 2c 16 	l.ori r4,r4,0x2c16
    cf10:	9c 60 00 fe 	l.addi r3,r0,0xfe
    cf14:	d4 02 18 00 	l.sw 0x0(r2),r3
    cf18:	07 ff e1 91 	l.jal 555c <time_udelay>
    cf1c:	9c 60 00 14 	l.addi r3,r0,0x14
    cf20:	9c 60 00 f8 	l.addi r3,r0,0xf8
    cf24:	d4 02 18 00 	l.sw 0x0(r2),r3
    cf28:	07 ff e1 8d 	l.jal 555c <time_udelay>
    cf2c:	9c 60 00 0a 	l.addi r3,r0,0xa
    cf30:	9c 60 00 e0 	l.addi r3,r0,0xe0
    cf34:	d4 02 18 00 	l.sw 0x0(r2),r3
    cf38:	07 ff e1 89 	l.jal 555c <time_udelay>
    cf3c:	9c 60 00 0a 	l.addi r3,r0,0xa
    cf40:	9c 60 00 c0 	l.addi r3,r0,0xc0
    cf44:	d4 02 18 00 	l.sw 0x0(r2),r3
    cf48:	07 ff e1 85 	l.jal 555c <time_udelay>
    cf4c:	9c 60 00 0a 	l.addi r3,r0,0xa
    cf50:	9c 60 00 80 	l.addi r3,r0,0x80
    cf54:	d4 02 18 00 	l.sw 0x0(r2),r3
    cf58:	07 ff e1 81 	l.jal 555c <time_udelay>
    cf5c:	9c 60 00 0a 	l.addi r3,r0,0xa
    cf60:	9c 60 00 40 	l.addi r3,r0,0x40
    cf64:	d4 02 18 00 	l.sw 0x0(r2),r3
    cf68:	07 ff e1 7d 	l.jal 555c <time_udelay>
    cf6c:	9c 60 00 0a 	l.addi r3,r0,0xa
    cf70:	9c 60 00 00 	l.addi r3,r0,0x0
    cf74:	d4 02 18 00 	l.sw 0x0(r2),r3
    cf78:	9c 60 00 0a 	l.addi r3,r0,0xa
    cf7c:	07 ff e1 78 	l.jal 555c <time_udelay>
    cf80:	15 00 00 00 	l.nop 0x0
    cf84:	84 62 00 00 	l.lwz r3,0x0(r2)
    cf88:	bc 23 00 00 	l.sfnei r3,0x0
    cf8c:	13 ff ff fc 	l.bf cf7c <cpu_power_switch_set+0xbc>
    cf90:	9c 60 00 14 	l.addi r3,r0,0x14
    cf94:	84 62 00 00 	l.lwz r3,0x0(r2)
    cf98:	bc 23 00 00 	l.sfnei r3,0x0
    cf9c:	13 ff ff fe 	l.bf cf94 <cpu_power_switch_set+0xd4>
    cfa0:	15 00 00 00 	l.nop 0x0
    cfa4:	00 00 00 1a 	l.j d00c <cpu_power_switch_set+0x14c>
    cfa8:	9c 21 00 0c 	l.addi r1,r1,0xc
    cfac:	18 c0 07 00 	l.movhi r6,0x700
    cfb0:	a8 c6 04 50 	l.ori r6,r6,0x450
    cfb4:	e0 43 30 00 	l.add r2,r3,r6
    cfb8:	e0 42 28 00 	l.add r2,r2,r5
    cfbc:	84 62 00 00 	l.lwz r3,0x0(r2)
    cfc0:	bc 23 00 ff 	l.sfnei r3,0xff
    cfc4:	10 00 00 0a 	l.bf cfec <cpu_power_switch_set+0x12c>
    cfc8:	9c 60 00 ff 	l.addi r3,r0,0xff
    cfcc:	d4 01 20 00 	l.sw 0x0(r1),r4
    cfd0:	18 80 00 01 	l.movhi r4,0x1
    cfd4:	9c 60 00 04 	l.addi r3,r0,0x4
    cfd8:	a8 84 2c 3d 	l.ori r4,r4,0x2c3d
    cfdc:	07 ff f5 ff 	l.jal a7d8 <debugger_printf>
    cfe0:	15 00 00 00 	l.nop 0x0
    cfe4:	00 00 00 0a 	l.j d00c <cpu_power_switch_set+0x14c>
    cfe8:	9c 21 00 0c 	l.addi r1,r1,0xc
    cfec:	d4 02 18 00 	l.sw 0x0(r2),r3
    cff0:	07 ff e1 5b 	l.jal 555c <time_udelay>
    cff4:	9c 60 00 1e 	l.addi r3,r0,0x1e
    cff8:	84 62 00 00 	l.lwz r3,0x0(r2)
    cffc:	bc 23 00 ff 	l.sfnei r3,0xff
    d000:	13 ff ff fe 	l.bf cff8 <cpu_power_switch_set+0x138>
    d004:	15 00 00 00 	l.nop 0x0
    d008:	9c 21 00 0c 	l.addi r1,r1,0xc
    d00c:	9d 60 00 00 	l.addi r11,r0,0x0
    d010:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d014:	44 00 48 00 	l.jr r9
    d018:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000d01c <cpucfg_init>:
    d01c:	18 80 01 6e 	l.movhi r4,0x16e
    d020:	18 60 08 12 	l.movhi r3,0x812
    d024:	a8 84 36 00 	l.ori r4,r4,0x3600
    d028:	a8 63 00 20 	l.ori r3,r3,0x20
    d02c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    d030:	d4 03 20 00 	l.sw 0x0(r3),r4
    d034:	18 60 00 01 	l.movhi r3,0x1
    d038:	9c 40 00 00 	l.addi r2,r0,0x0
    d03c:	a8 63 37 50 	l.ori r3,r3,0x3750
    d040:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d044:	d4 03 10 00 	l.sw 0x0(r3),r2
    d048:	9c 21 00 04 	l.addi r1,r1,0x4
    d04c:	a9 62 00 00 	l.ori r11,r2,0x0
    d050:	44 00 48 00 	l.jr r9
    d054:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000d058 <cpucfg_exit>:
    d058:	18 60 00 01 	l.movhi r3,0x1
    d05c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    d060:	a8 63 37 50 	l.ori r3,r3,0x3750
    d064:	9c 40 00 00 	l.addi r2,r0,0x0
    d068:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d06c:	d4 03 10 00 	l.sw 0x0(r3),r2
    d070:	9c 21 00 04 	l.addi r1,r1,0x4
    d074:	a9 62 00 00 	l.ori r11,r2,0x0
    d078:	44 00 48 00 	l.jr r9
    d07c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000d080 <cpucfg_set_little_endian_address>:
    d080:	18 a0 00 01 	l.movhi r5,0x1
    d084:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d088:	a8 a5 37 50 	l.ori r5,r5,0x3750
    d08c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    d090:	84 c5 00 00 	l.lwz r6,0x0(r5)
    d094:	bd a6 00 03 	l.sflesi r6,0x3
    d098:	10 00 00 08 	l.bf d0b8 <cpucfg_set_little_endian_address+0x38>
    d09c:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    d0a0:	18 80 00 01 	l.movhi r4,0x1
    d0a4:	9c 60 00 04 	l.addi r3,r0,0x4
    d0a8:	07 ff f5 cc 	l.jal a7d8 <debugger_printf>
    d0ac:	a8 84 2c 65 	l.ori r4,r4,0x2c65
    d0b0:	00 00 00 1e 	l.j d128 <cpucfg_set_little_endian_address+0xa8>
    d0b4:	9d 60 ff e4 	l.addi r11,r0,0xffffffe4
    d0b8:	18 c0 07 00 	l.movhi r6,0x700
    d0bc:	9d 60 00 01 	l.addi r11,r0,0x1
    d0c0:	a8 c6 04 0c 	l.ori r6,r6,0x40c
    d0c4:	18 40 00 e0 	l.movhi r2,0xe0
    d0c8:	84 e6 00 00 	l.lwz r7,0x0(r6)
    d0cc:	a8 42 00 82 	l.ori r2,r2,0x82
    d0d0:	d4 01 38 00 	l.sw 0x0(r1),r7
    d0d4:	85 01 00 00 	l.lwz r8,0x0(r1)
    d0d8:	84 e5 00 00 	l.lwz r7,0x0(r5)
    d0dc:	e0 eb 38 08 	l.sll r7,r11,r7
    d0e0:	e0 e7 40 04 	l.or r7,r7,r8
    d0e4:	d4 01 38 00 	l.sw 0x0(r1),r7
    d0e8:	84 e1 00 00 	l.lwz r7,0x0(r1)
    d0ec:	d4 06 38 00 	l.sw 0x0(r6),r7
    d0f0:	84 c5 00 00 	l.lwz r6,0x0(r5)
    d0f4:	e0 c6 10 00 	l.add r6,r6,r2
    d0f8:	18 40 07 00 	l.movhi r2,0x700
    d0fc:	b8 c6 00 03 	l.slli r6,r6,0x3
    d100:	a8 42 04 14 	l.ori r2,r2,0x414
    d104:	d4 06 18 00 	l.sw 0x0(r6),r3
    d108:	84 65 00 00 	l.lwz r3,0x0(r5)
    d10c:	b8 63 00 03 	l.slli r3,r3,0x3
    d110:	e0 63 10 00 	l.add r3,r3,r2
    d114:	d4 03 20 00 	l.sw 0x0(r3),r4
    d118:	84 65 00 00 	l.lwz r3,0x0(r5)
    d11c:	e0 63 58 00 	l.add r3,r3,r11
    d120:	9d 60 00 00 	l.addi r11,r0,0x0
    d124:	d4 05 18 00 	l.sw 0x0(r5),r3
    d128:	9c 21 00 0c 	l.addi r1,r1,0xc
    d12c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d130:	44 00 48 00 	l.jr r9
    d134:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000d138 <cpucfg_remove_little_endian_address>:
    d138:	18 80 00 01 	l.movhi r4,0x1
    d13c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d140:	a8 84 37 50 	l.ori r4,r4,0x3750
    d144:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    d148:	84 a4 00 00 	l.lwz r5,0x0(r4)
    d14c:	bd 45 00 00 	l.sfgtsi r5,0x0
    d150:	10 00 00 08 	l.bf d170 <cpucfg_remove_little_endian_address+0x38>
    d154:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    d158:	18 80 00 01 	l.movhi r4,0x1
    d15c:	9c 60 00 04 	l.addi r3,r0,0x4
    d160:	07 ff f5 9e 	l.jal a7d8 <debugger_printf>
    d164:	a8 84 2c 8c 	l.ori r4,r4,0x2c8c
    d168:	00 00 00 30 	l.j d228 <cpucfg_remove_little_endian_address+0xf0>
    d16c:	9d 60 ff ed 	l.addi r11,r0,0xffffffed
    d170:	18 40 00 e0 	l.movhi r2,0xe0
    d174:	84 84 00 00 	l.lwz r4,0x0(r4)
    d178:	a8 42 00 82 	l.ori r2,r2,0x82
    d17c:	b8 63 00 89 	l.srai r3,r3,0x9
    d180:	e0 a4 10 00 	l.add r5,r4,r2
    d184:	00 00 00 08 	l.j d1a4 <cpucfg_remove_little_endian_address+0x6c>
    d188:	b8 a5 00 03 	l.slli r5,r5,0x3
    d18c:	84 c5 00 00 	l.lwz r6,0x0(r5)
    d190:	b8 c6 00 49 	l.srli r6,r6,0x9
    d194:	e4 06 18 00 	l.sfeq r6,r3
    d198:	10 00 00 06 	l.bf d1b0 <cpucfg_remove_little_endian_address+0x78>
    d19c:	9c a5 ff f8 	l.addi r5,r5,0xfffffff8
    d1a0:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    d1a4:	bc 24 00 00 	l.sfnei r4,0x0
    d1a8:	13 ff ff f9 	l.bf d18c <cpucfg_remove_little_endian_address+0x54>
    d1ac:	15 00 00 00 	l.nop 0x0
    d1b0:	18 60 07 00 	l.movhi r3,0x700
    d1b4:	18 40 00 e0 	l.movhi r2,0xe0
    d1b8:	a8 63 04 0c 	l.ori r3,r3,0x40c
    d1bc:	a8 42 00 82 	l.ori r2,r2,0x82
    d1c0:	84 a3 00 00 	l.lwz r5,0x0(r3)
    d1c4:	d4 01 28 00 	l.sw 0x0(r1),r5
    d1c8:	9c a0 00 01 	l.addi r5,r0,0x1
    d1cc:	84 c1 00 00 	l.lwz r6,0x0(r1)
    d1d0:	e0 a5 20 08 	l.sll r5,r5,r4
    d1d4:	ac a5 ff ff 	l.xori r5,r5,0xffffffff
    d1d8:	e0 a5 30 03 	l.and r5,r5,r6
    d1dc:	d4 01 28 00 	l.sw 0x0(r1),r5
    d1e0:	84 a1 00 00 	l.lwz r5,0x0(r1)
    d1e4:	d4 03 28 00 	l.sw 0x0(r3),r5
    d1e8:	e0 64 10 00 	l.add r3,r4,r2
    d1ec:	9c 40 00 00 	l.addi r2,r0,0x0
    d1f0:	b8 63 00 03 	l.slli r3,r3,0x3
    d1f4:	b8 84 00 03 	l.slli r4,r4,0x3
    d1f8:	d4 03 10 00 	l.sw 0x0(r3),r2
    d1fc:	18 40 07 00 	l.movhi r2,0x700
    d200:	18 60 00 01 	l.movhi r3,0x1
    d204:	a8 42 04 14 	l.ori r2,r2,0x414
    d208:	a8 63 37 50 	l.ori r3,r3,0x3750
    d20c:	e0 84 10 00 	l.add r4,r4,r2
    d210:	9c 40 00 00 	l.addi r2,r0,0x0
    d214:	d4 04 10 00 	l.sw 0x0(r4),r2
    d218:	a9 62 00 00 	l.ori r11,r2,0x0
    d21c:	84 83 00 00 	l.lwz r4,0x0(r3)
    d220:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    d224:	d4 03 20 00 	l.sw 0x0(r3),r4
    d228:	9c 21 00 0c 	l.addi r1,r1,0xc
    d22c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d230:	44 00 48 00 	l.jr r9
    d234:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000d238 <cpucfg_set_cpu_reset_state>:
    d238:	18 a0 09 01 	l.movhi r5,0x901
    d23c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d240:	84 c5 00 00 	l.lwz r6,0x0(r5)
    d244:	a4 84 00 01 	l.andi r4,r4,0x1
    d248:	d4 01 30 00 	l.sw 0x0(r1),r6
    d24c:	9c c0 00 01 	l.addi r6,r0,0x1
    d250:	84 e1 00 00 	l.lwz r7,0x0(r1)
    d254:	e0 c6 18 08 	l.sll r6,r6,r3
    d258:	e0 64 18 08 	l.sll r3,r4,r3
    d25c:	9d 60 00 00 	l.addi r11,r0,0x0
    d260:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    d264:	e0 c6 38 03 	l.and r6,r6,r7
    d268:	d4 01 30 00 	l.sw 0x0(r1),r6
    d26c:	84 c1 00 00 	l.lwz r6,0x0(r1)
    d270:	e0 63 30 04 	l.or r3,r3,r6
    d274:	d4 01 18 00 	l.sw 0x0(r1),r3
    d278:	84 61 00 00 	l.lwz r3,0x0(r1)
    d27c:	d4 05 18 00 	l.sw 0x0(r5),r3
    d280:	44 00 48 00 	l.jr r9
    d284:	9c 21 00 04 	l.addi r1,r1,0x4

0000d288 <cpucfg_counter_clear>:
    d288:	18 60 08 12 	l.movhi r3,0x812
    d28c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    d290:	a8 83 00 08 	l.ori r4,r3,0x8
    d294:	9c 40 00 00 	l.addi r2,r0,0x0
    d298:	a8 63 00 0c 	l.ori r3,r3,0xc
    d29c:	d4 04 10 00 	l.sw 0x0(r4),r2
    d2a0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d2a4:	d4 03 10 00 	l.sw 0x0(r3),r2
    d2a8:	9c 21 00 04 	l.addi r1,r1,0x4
    d2ac:	a9 62 00 00 	l.ori r11,r2,0x0
    d2b0:	44 00 48 00 	l.jr r9
    d2b4:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000d2b8 <cpucfg_counter_read>:
    d2b8:	18 60 08 11 	l.movhi r3,0x811
    d2bc:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    d2c0:	a8 83 00 04 	l.ori r4,r3,0x4
    d2c4:	84 a3 00 00 	l.lwz r5,0x0(r3)
    d2c8:	d4 01 28 00 	l.sw 0x0(r1),r5
    d2cc:	84 a4 00 00 	l.lwz r5,0x0(r4)
    d2d0:	d4 01 28 04 	l.sw 0x4(r1),r5
    d2d4:	84 c1 00 04 	l.lwz r6,0x4(r1)
    d2d8:	84 a4 00 00 	l.lwz r5,0x0(r4)
    d2dc:	e4 26 28 00 	l.sfne r6,r5
    d2e0:	13 ff ff f9 	l.bf d2c4 <cpucfg_counter_read+0xc>
    d2e4:	15 00 00 00 	l.nop 0x0
    d2e8:	84 c1 00 00 	l.lwz r6,0x0(r1)
    d2ec:	84 a3 00 00 	l.lwz r5,0x0(r3)
    d2f0:	e4 46 28 00 	l.sfgtu r6,r5
    d2f4:	13 ff ff f4 	l.bf d2c4 <cpucfg_counter_read+0xc>
    d2f8:	15 00 00 00 	l.nop 0x0
    d2fc:	85 61 00 04 	l.lwz r11,0x4(r1)
    d300:	85 81 00 00 	l.lwz r12,0x0(r1)
    d304:	44 00 48 00 	l.jr r9
    d308:	9c 21 00 08 	l.addi r1,r1,0x8

0000d30c <cpucfg_counter_ctrl>:
    d30c:	b8 63 00 18 	l.slli r3,r3,0x18
    d310:	18 80 08 12 	l.movhi r4,0x812
    d314:	b8 63 00 98 	l.srai r3,r3,0x18
    d318:	d4 04 18 00 	l.sw 0x0(r4),r3
    d31c:	44 00 48 00 	l.jr r9
    d320:	15 00 00 00 	l.nop 0x0

0000d324 <cpucfg_set_cpux_jump_addr>:
    d324:	18 80 07 00 	l.movhi r4,0x700
    d328:	9d 60 00 00 	l.addi r11,r0,0x0
    d32c:	a8 84 01 fc 	l.ori r4,r4,0x1fc
    d330:	d4 04 18 00 	l.sw 0x0(r4),r3
    d334:	44 00 48 00 	l.jr r9
    d338:	15 00 00 00 	l.nop 0x0

0000d33c <cpucfg_acinactm_process>:
    d33c:	18 80 09 01 	l.movhi r4,0x901
    d340:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    d344:	a8 84 00 14 	l.ori r4,r4,0x14
    d348:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    d34c:	84 a4 00 00 	l.lwz r5,0x0(r4)
    d350:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    d354:	d4 01 28 00 	l.sw 0x0(r1),r5
    d358:	a4 63 00 01 	l.andi r3,r3,0x1
    d35c:	84 a1 00 00 	l.lwz r5,0x0(r1)
    d360:	e0 a5 10 03 	l.and r5,r5,r2
    d364:	d4 01 28 00 	l.sw 0x0(r1),r5
    d368:	84 a1 00 00 	l.lwz r5,0x0(r1)
    d36c:	e0 63 28 04 	l.or r3,r3,r5
    d370:	d4 01 18 00 	l.sw 0x0(r1),r3
    d374:	84 61 00 00 	l.lwz r3,0x0(r1)
    d378:	d4 04 18 00 	l.sw 0x0(r4),r3
    d37c:	9c 21 00 08 	l.addi r1,r1,0x8
    d380:	44 00 48 00 	l.jr r9
    d384:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000d388 <cpucfg_wait_l2_enter_wfi>:
    d388:	18 60 09 01 	l.movhi r3,0x901
    d38c:	a8 63 00 80 	l.ori r3,r3,0x80
    d390:	84 83 00 00 	l.lwz r4,0x0(r3)
    d394:	a4 84 00 01 	l.andi r4,r4,0x1
    d398:	bc 04 00 00 	l.sfeqi r4,0x0
    d39c:	13 ff ff fd 	l.bf d390 <cpucfg_wait_l2_enter_wfi+0x8>
    d3a0:	15 00 00 00 	l.nop 0x0
    d3a4:	44 00 48 00 	l.jr r9
    d3a8:	15 00 00 00 	l.nop 0x0

0000d3ac <cpucfg_l1l2_reset_by_hardware>:
    d3ac:	18 80 09 01 	l.movhi r4,0x901
    d3b0:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    d3b4:	a8 84 00 10 	l.ori r4,r4,0x10
    d3b8:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    d3bc:	84 a4 00 00 	l.lwz r5,0x0(r4)
    d3c0:	9c 40 ff e0 	l.addi r2,r0,0xffffffe0
    d3c4:	d4 01 28 00 	l.sw 0x0(r1),r5
    d3c8:	a4 63 00 1f 	l.andi r3,r3,0x1f
    d3cc:	84 a1 00 00 	l.lwz r5,0x0(r1)
    d3d0:	e0 a5 10 03 	l.and r5,r5,r2
    d3d4:	d4 01 28 00 	l.sw 0x0(r1),r5
    d3d8:	84 a1 00 00 	l.lwz r5,0x0(r1)
    d3dc:	e0 63 28 04 	l.or r3,r3,r5
    d3e0:	d4 01 18 00 	l.sw 0x0(r1),r3
    d3e4:	84 61 00 00 	l.lwz r3,0x0(r1)
    d3e8:	d4 04 18 00 	l.sw 0x0(r4),r3
    d3ec:	9c 21 00 08 	l.addi r1,r1,0x8
    d3f0:	44 00 48 00 	l.jr r9
    d3f4:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000d3f8 <cpucfg_cluster0_process>:
    d3f8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d3fc:	bc 03 00 00 	l.sfeqi r3,0x0
    d400:	10 00 00 07 	l.bf d41c <cpucfg_cluster0_process+0x24>
    d404:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d408:	bc 03 00 01 	l.sfeqi r3,0x1
    d40c:	0c 00 00 10 	l.bnf d44c <cpucfg_cluster0_process+0x54>
    d410:	9c 60 00 04 	l.addi r3,r0,0x4
    d414:	00 00 00 06 	l.j d42c <cpucfg_cluster0_process+0x34>
    d418:	18 80 13 ff 	l.movhi r4,0x13ff
    d41c:	18 80 09 01 	l.movhi r4,0x901
    d420:	d4 04 18 00 	l.sw 0x0(r4),r3
    d424:	00 00 00 0f 	l.j d460 <cpucfg_cluster0_process+0x68>
    d428:	9c 21 00 04 	l.addi r1,r1,0x4
    d42c:	18 60 09 01 	l.movhi r3,0x901
    d430:	a8 84 01 00 	l.ori r4,r4,0x100
    d434:	d4 03 20 00 	l.sw 0x0(r3),r4
    d438:	a8 63 00 c0 	l.ori r3,r3,0xc0
    d43c:	9c 80 00 0f 	l.addi r4,r0,0xf
    d440:	d4 03 20 00 	l.sw 0x0(r3),r4
    d444:	00 00 00 07 	l.j d460 <cpucfg_cluster0_process+0x68>
    d448:	9c 21 00 04 	l.addi r1,r1,0x4
    d44c:	18 80 00 01 	l.movhi r4,0x1
    d450:	9c 21 00 04 	l.addi r1,r1,0x4
    d454:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d458:	03 ff f4 e0 	l.j a7d8 <debugger_printf>
    d45c:	a8 84 2c b3 	l.ori r4,r4,0x2cb3
    d460:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d464:	44 00 48 00 	l.jr r9
    d468:	15 00 00 00 	l.nop 0x0

0000d46c <cpucfg_cpu_suspend>:
    d46c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d470:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    d474:	9c 60 00 01 	l.addi r3,r0,0x1
    d478:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    d47c:	07 ff ff b0 	l.jal d33c <cpucfg_acinactm_process>
    d480:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    d484:	04 00 11 28 	l.jal 11924 <save_state_flag>
    d488:	a8 60 b0 00 	l.ori r3,r0,0xb000
    d48c:	07 ff ff bf 	l.jal d388 <cpucfg_wait_l2_enter_wfi>
    d490:	15 00 00 00 	l.nop 0x0
    d494:	04 00 11 24 	l.jal 11924 <save_state_flag>
    d498:	a8 60 b0 01 	l.ori r3,r0,0xb001
    d49c:	18 60 09 01 	l.movhi r3,0x901
    d4a0:	a8 63 00 c0 	l.ori r3,r3,0xc0
    d4a4:	84 83 00 00 	l.lwz r4,0x0(r3)
    d4a8:	d4 01 20 00 	l.sw 0x0(r1),r4
    d4ac:	84 81 00 00 	l.lwz r4,0x0(r1)
    d4b0:	e0 84 10 03 	l.and r4,r4,r2
    d4b4:	d4 01 20 00 	l.sw 0x0(r1),r4
    d4b8:	84 81 00 00 	l.lwz r4,0x0(r1)
    d4bc:	d4 03 20 00 	l.sw 0x0(r3),r4
    d4c0:	9c 60 00 00 	l.addi r3,r0,0x0
    d4c4:	07 ff ff 5d 	l.jal d238 <cpucfg_set_cpu_reset_state>
    d4c8:	a8 83 00 00 	l.ori r4,r3,0x0
    d4cc:	18 60 07 00 	l.movhi r3,0x700
    d4d0:	a8 63 04 40 	l.ori r3,r3,0x440
    d4d4:	84 83 00 00 	l.lwz r4,0x0(r3)
    d4d8:	d4 01 20 00 	l.sw 0x0(r1),r4
    d4dc:	84 81 00 00 	l.lwz r4,0x0(r1)
    d4e0:	e0 84 10 03 	l.and r4,r4,r2
    d4e4:	d4 01 20 00 	l.sw 0x0(r1),r4
    d4e8:	84 81 00 00 	l.lwz r4,0x0(r1)
    d4ec:	d4 03 20 00 	l.sw 0x0(r3),r4
    d4f0:	9c 60 00 00 	l.addi r3,r0,0x0
    d4f4:	07 ff ff 51 	l.jal d238 <cpucfg_set_cpu_reset_state>
    d4f8:	a8 83 00 00 	l.ori r4,r3,0x0
    d4fc:	9c 60 00 01 	l.addi r3,r0,0x1
    d500:	07 ff ff 4e 	l.jal d238 <cpucfg_set_cpu_reset_state>
    d504:	9c 80 00 00 	l.addi r4,r0,0x0
    d508:	9c 60 00 02 	l.addi r3,r0,0x2
    d50c:	07 ff ff 4b 	l.jal d238 <cpucfg_set_cpu_reset_state>
    d510:	9c 80 00 00 	l.addi r4,r0,0x0
    d514:	9c 60 00 03 	l.addi r3,r0,0x3
    d518:	07 ff ff 48 	l.jal d238 <cpucfg_set_cpu_reset_state>
    d51c:	9c 80 00 00 	l.addi r4,r0,0x0
    d520:	9c 21 00 0c 	l.addi r1,r1,0xc
    d524:	a8 60 b0 02 	l.ori r3,r0,0xb002
    d528:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d52c:	00 00 10 fe 	l.j 11924 <save_state_flag>
    d530:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000d534 <cpucfg_cpu_suspend_late>:
    d534:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d538:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    d53c:	9c 60 00 00 	l.addi r3,r0,0x0
    d540:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    d544:	07 ff ff ad 	l.jal d3f8 <cpucfg_cluster0_process>
    d548:	9c 40 00 00 	l.addi r2,r0,0x0
    d54c:	04 00 10 f6 	l.jal 11924 <save_state_flag>
    d550:	a8 60 b0 03 	l.ori r3,r0,0xb003
    d554:	18 60 07 00 	l.movhi r3,0x700
    d558:	a8 83 04 40 	l.ori r4,r3,0x440
    d55c:	a8 63 04 a0 	l.ori r3,r3,0x4a0
    d560:	d4 04 10 00 	l.sw 0x0(r4),r2
    d564:	d4 03 10 00 	l.sw 0x0(r3),r2
    d568:	07 ff df af 	l.jal 5424 <time_mdelay>
    d56c:	9c 60 00 01 	l.addi r3,r0,0x1
    d570:	9c 60 00 01 	l.addi r3,r0,0x1
    d574:	04 00 11 48 	l.jal 11a94 <ccu_set_poweroff_gating_state>
    d578:	a8 83 00 00 	l.ori r4,r3,0x0
    d57c:	04 00 10 ea 	l.jal 11924 <save_state_flag>
    d580:	a8 60 b0 04 	l.ori r3,r0,0xb004
    d584:	a8 62 00 00 	l.ori r3,r2,0x0
    d588:	a8 82 00 00 	l.ori r4,r2,0x0
    d58c:	07 ff fe 4d 	l.jal cec0 <cpu_power_switch_set>
    d590:	a8 a2 00 00 	l.ori r5,r2,0x0
    d594:	9c 21 00 08 	l.addi r1,r1,0x8
    d598:	a8 60 b0 05 	l.ori r3,r0,0xb005
    d59c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d5a0:	00 00 10 e1 	l.j 11924 <save_state_flag>
    d5a4:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000d5a8 <cpucfg_cpu_resume>:
    d5a8:	a8 60 b0 0c 	l.ori r3,r0,0xb00c
    d5ac:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d5b0:	04 00 10 dd 	l.jal 11924 <save_state_flag>
    d5b4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d5b8:	18 60 07 00 	l.movhi r3,0x700
    d5bc:	a8 63 04 40 	l.ori r3,r3,0x440
    d5c0:	84 83 00 00 	l.lwz r4,0x0(r3)
    d5c4:	a8 84 00 01 	l.ori r4,r4,0x1
    d5c8:	d4 03 20 00 	l.sw 0x0(r3),r4
    d5cc:	9c 60 00 00 	l.addi r3,r0,0x0
    d5d0:	07 ff ff 1a 	l.jal d238 <cpucfg_set_cpu_reset_state>
    d5d4:	9c 80 00 03 	l.addi r4,r0,0x3
    d5d8:	04 00 10 d3 	l.jal 11924 <save_state_flag>
    d5dc:	a8 60 b0 0d 	l.ori r3,r0,0xb00d
    d5e0:	9c 21 00 04 	l.addi r1,r1,0x4
    d5e4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d5e8:	44 00 48 00 	l.jr r9
    d5ec:	9d 60 00 00 	l.addi r11,r0,0x0

0000d5f0 <set_secondary_entry>:
    d5f0:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    d5f4:	18 40 01 02 	l.movhi r2,0x102
    d5f8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d5fc:	a8 42 00 08 	l.ori r2,r2,0x8
    d600:	e0 a4 10 00 	l.add r5,r4,r2
    d604:	18 40 08 10 	l.movhi r2,0x810
    d608:	b8 84 00 03 	l.slli r4,r4,0x3
    d60c:	a8 42 00 44 	l.ori r2,r2,0x44
    d610:	b8 a5 00 03 	l.slli r5,r5,0x3
    d614:	e0 84 10 00 	l.add r4,r4,r2
    d618:	9c 40 00 00 	l.addi r2,r0,0x0
    d61c:	d4 05 18 00 	l.sw 0x0(r5),r3
    d620:	d4 04 10 00 	l.sw 0x0(r4),r2
    d624:	9c 21 00 04 	l.addi r1,r1,0x4
    d628:	44 00 48 00 	l.jr r9
    d62c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000d630 <sun50i_set_AA32nAA64>:
    d630:	18 60 08 10 	l.movhi r3,0x810
    d634:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d638:	84 c3 00 00 	l.lwz r6,0x0(r3)
    d63c:	9c 84 00 04 	l.addi r4,r4,0x4
    d640:	d4 01 30 00 	l.sw 0x0(r1),r6
    d644:	9c c0 00 01 	l.addi r6,r0,0x1
    d648:	b8 a5 00 18 	l.slli r5,r5,0x18
    d64c:	e0 c6 20 08 	l.sll r6,r6,r4
    d650:	84 e1 00 00 	l.lwz r7,0x0(r1)
    d654:	b8 a5 00 98 	l.srai r5,r5,0x18
    d658:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    d65c:	e0 c6 38 03 	l.and r6,r6,r7
    d660:	e0 85 20 08 	l.sll r4,r5,r4
    d664:	d4 01 30 00 	l.sw 0x0(r1),r6
    d668:	84 c1 00 00 	l.lwz r6,0x0(r1)
    d66c:	e0 84 30 04 	l.or r4,r4,r6
    d670:	d4 01 20 00 	l.sw 0x0(r1),r4
    d674:	84 81 00 00 	l.lwz r4,0x0(r1)
    d678:	d4 03 20 00 	l.sw 0x0(r3),r4
    d67c:	44 00 48 00 	l.jr r9
    d680:	9c 21 00 04 	l.addi r1,r1,0x4

0000d684 <cpucfg_cpu_resume_early>:
    d684:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    d688:	a9 c3 00 00 	l.ori r14,r3,0x0
    d68c:	9c 60 00 00 	l.addi r3,r0,0x0
    d690:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d694:	9c a0 00 01 	l.addi r5,r0,0x1
    d698:	a8 83 00 00 	l.ori r4,r3,0x0
    d69c:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    d6a0:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    d6a4:	07 ff fe 07 	l.jal cec0 <cpu_power_switch_set>
    d6a8:	9c 40 00 01 	l.addi r2,r0,0x1
    d6ac:	04 00 10 9e 	l.jal 11924 <save_state_flag>
    d6b0:	a8 60 b0 06 	l.ori r3,r0,0xb006
    d6b4:	9c 80 00 00 	l.addi r4,r0,0x0
    d6b8:	04 00 10 f7 	l.jal 11a94 <ccu_set_poweroff_gating_state>
    d6bc:	9c 60 00 01 	l.addi r3,r0,0x1
    d6c0:	04 00 10 99 	l.jal 11924 <save_state_flag>
    d6c4:	a8 60 b0 07 	l.ori r3,r0,0xb007
    d6c8:	18 60 07 00 	l.movhi r3,0x700
    d6cc:	a8 83 04 a0 	l.ori r4,r3,0x4a0
    d6d0:	a8 63 04 40 	l.ori r3,r3,0x440
    d6d4:	d4 04 10 00 	l.sw 0x0(r4),r2
    d6d8:	18 80 00 01 	l.movhi r4,0x1
    d6dc:	d4 03 20 00 	l.sw 0x0(r3),r4
    d6e0:	9c 60 00 00 	l.addi r3,r0,0x0
    d6e4:	07 ff fe d5 	l.jal d238 <cpucfg_set_cpu_reset_state>
    d6e8:	a8 83 00 00 	l.ori r4,r3,0x0
    d6ec:	07 ff ff 43 	l.jal d3f8 <cpucfg_cluster0_process>
    d6f0:	9c 60 00 00 	l.addi r3,r0,0x0
    d6f4:	04 00 10 8c 	l.jal 11924 <save_state_flag>
    d6f8:	a8 60 b0 08 	l.ori r3,r0,0xb008
    d6fc:	07 ff ff 2c 	l.jal d3ac <cpucfg_l1l2_reset_by_hardware>
    d700:	9c 60 00 00 	l.addi r3,r0,0x0
    d704:	04 00 10 88 	l.jal 11924 <save_state_flag>
    d708:	a8 60 b0 09 	l.ori r3,r0,0xb009
    d70c:	07 ff ff 0c 	l.jal d33c <cpucfg_acinactm_process>
    d710:	9c 60 00 00 	l.addi r3,r0,0x0
    d714:	04 00 10 84 	l.jal 11924 <save_state_flag>
    d718:	a8 60 b0 0a 	l.ori r3,r0,0xb00a
    d71c:	07 ff ff 37 	l.jal d3f8 <cpucfg_cluster0_process>
    d720:	a8 62 00 00 	l.ori r3,r2,0x0
    d724:	a8 6e 00 00 	l.ori r3,r14,0x0
    d728:	07 ff ff b2 	l.jal d5f0 <set_secondary_entry>
    d72c:	9c 80 00 00 	l.addi r4,r0,0x0
    d730:	9c 60 00 00 	l.addi r3,r0,0x0
    d734:	a8 a2 00 00 	l.ori r5,r2,0x0
    d738:	07 ff ff be 	l.jal d630 <sun50i_set_AA32nAA64>
    d73c:	a8 83 00 00 	l.ori r4,r3,0x0
    d740:	04 00 10 79 	l.jal 11924 <save_state_flag>
    d744:	a8 60 b0 0b 	l.ori r3,r0,0xb00b
    d748:	9c 21 00 0c 	l.addi r1,r1,0xc
    d74c:	9d 60 00 00 	l.addi r11,r0,0x0
    d750:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d754:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    d758:	44 00 48 00 	l.jr r9
    d75c:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

0000d760 <cpu_power_up>:
    d760:	d7 e1 a7 ec 	l.sw 0xffffffec(r1),r20
    d764:	ba 83 00 02 	l.slli r20,r3,0x2
    d768:	d7 e1 17 dc 	l.sw 0xffffffdc(r1),r2
    d76c:	d7 e1 97 e8 	l.sw 0xffffffe8(r1),r18
    d770:	18 40 09 01 	l.movhi r2,0x901
    d774:	9e 40 00 01 	l.addi r18,r0,0x1
    d778:	d7 e1 77 e0 	l.sw 0xffffffe0(r1),r14
    d77c:	e1 d4 10 00 	l.add r14,r20,r2
    d780:	e0 52 20 08 	l.sll r2,r18,r4
    d784:	84 ae 00 00 	l.lwz r5,0x0(r14)
    d788:	d7 e1 b7 f0 	l.sw 0xfffffff0(r1),r22
    d78c:	ae c2 ff ff 	l.xori r22,r2,0xffffffff
    d790:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d794:	e0 b6 28 03 	l.and r5,r22,r5
    d798:	d7 e1 87 e4 	l.sw 0xffffffe4(r1),r16
    d79c:	d7 e1 c7 f4 	l.sw 0xfffffff4(r1),r24
    d7a0:	d7 e1 d7 f8 	l.sw 0xfffffff8(r1),r26
    d7a4:	d4 0e 28 00 	l.sw 0x0(r14),r5
    d7a8:	18 a0 07 00 	l.movhi r5,0x700
    d7ac:	9c 21 ff dc 	l.addi r1,r1,0xffffffdc
    d7b0:	a8 a5 04 40 	l.ori r5,r5,0x440
    d7b4:	ab 43 00 00 	l.ori r26,r3,0x0
    d7b8:	e2 14 28 00 	l.add r16,r20,r5
    d7bc:	ab 04 00 00 	l.ori r24,r4,0x0
    d7c0:	84 b0 00 00 	l.lwz r5,0x0(r16)
    d7c4:	e0 b6 28 03 	l.and r5,r22,r5
    d7c8:	d4 10 28 00 	l.sw 0x0(r16),r5
    d7cc:	07 ff ff 99 	l.jal d630 <sun50i_set_AA32nAA64>
    d7d0:	a8 b2 00 00 	l.ori r5,r18,0x0
    d7d4:	18 60 07 00 	l.movhi r3,0x700
    d7d8:	a8 98 00 00 	l.ori r4,r24,0x0
    d7dc:	a8 63 04 44 	l.ori r3,r3,0x444
    d7e0:	a8 b2 00 00 	l.ori r5,r18,0x0
    d7e4:	e2 94 18 00 	l.add r20,r20,r3
    d7e8:	84 74 00 00 	l.lwz r3,0x0(r20)
    d7ec:	e0 62 18 04 	l.or r3,r2,r3
    d7f0:	d4 14 18 00 	l.sw 0x0(r20),r3
    d7f4:	07 ff fd b3 	l.jal cec0 <cpu_power_switch_set>
    d7f8:	a8 7a 00 00 	l.ori r3,r26,0x0
    d7fc:	84 74 00 00 	l.lwz r3,0x0(r20)
    d800:	e2 d6 18 03 	l.and r22,r22,r3
    d804:	a8 72 00 00 	l.ori r3,r18,0x0
    d808:	d4 14 b0 00 	l.sw 0x0(r20),r22
    d80c:	07 ff df 54 	l.jal 555c <time_udelay>
    d810:	15 00 00 00 	l.nop 0x0
    d814:	84 70 00 00 	l.lwz r3,0x0(r16)
    d818:	e0 63 10 04 	l.or r3,r3,r2
    d81c:	d4 10 18 00 	l.sw 0x0(r16),r3
    d820:	84 6e 00 00 	l.lwz r3,0x0(r14)
    d824:	e0 63 10 04 	l.or r3,r3,r2
    d828:	d4 0e 18 00 	l.sw 0x0(r14),r3
    d82c:	18 60 09 01 	l.movhi r3,0x901
    d830:	a8 63 00 c0 	l.ori r3,r3,0xc0
    d834:	84 83 00 00 	l.lwz r4,0x0(r3)
    d838:	e0 82 20 04 	l.or r4,r2,r4
    d83c:	d4 03 20 00 	l.sw 0x0(r3),r4
    d840:	18 60 07 00 	l.movhi r3,0x700
    d844:	a8 63 05 0c 	l.ori r3,r3,0x50c
    d848:	84 83 00 00 	l.lwz r4,0x0(r3)
    d84c:	e0 42 20 04 	l.or r2,r2,r4
    d850:	d4 03 10 00 	l.sw 0x0(r3),r2
    d854:	9c 21 00 24 	l.addi r1,r1,0x24
    d858:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d85c:	84 41 ff dc 	l.lwz r2,0xffffffdc(r1)
    d860:	85 c1 ff e0 	l.lwz r14,0xffffffe0(r1)
    d864:	86 01 ff e4 	l.lwz r16,0xffffffe4(r1)
    d868:	86 41 ff e8 	l.lwz r18,0xffffffe8(r1)
    d86c:	86 81 ff ec 	l.lwz r20,0xffffffec(r1)
    d870:	86 c1 ff f0 	l.lwz r22,0xfffffff0(r1)
    d874:	87 01 ff f4 	l.lwz r24,0xfffffff4(r1)
    d878:	44 00 48 00 	l.jr r9
    d87c:	87 41 ff f8 	l.lwz r26,0xfffffff8(r1)

0000d880 <cpu_power_down>:
    d880:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    d884:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    d888:	ba 03 00 02 	l.slli r16,r3,0x2
    d88c:	aa 43 00 00 	l.ori r18,r3,0x0
    d890:	18 60 09 01 	l.movhi r3,0x901
    d894:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    d898:	a8 63 00 80 	l.ori r3,r3,0x80
    d89c:	a8 44 00 00 	l.ori r2,r4,0x0
    d8a0:	e0 b0 18 00 	l.add r5,r16,r3
    d8a4:	9c 64 00 10 	l.addi r3,r4,0x10
    d8a8:	9c 80 00 01 	l.addi r4,r0,0x1
    d8ac:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d8b0:	e0 64 18 08 	l.sll r3,r4,r3
    d8b4:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    d8b8:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    d8bc:	84 85 00 00 	l.lwz r4,0x0(r5)
    d8c0:	e0 83 20 03 	l.and r4,r3,r4
    d8c4:	bc 04 00 00 	l.sfeqi r4,0x0
    d8c8:	13 ff ff fd 	l.bf d8bc <cpu_power_down+0x3c>
    d8cc:	18 80 07 00 	l.movhi r4,0x700
    d8d0:	9c 60 00 01 	l.addi r3,r0,0x1
    d8d4:	e0 a3 10 08 	l.sll r5,r3,r2
    d8d8:	a8 84 05 0c 	l.ori r4,r4,0x50c
    d8dc:	ad c5 ff ff 	l.xori r14,r5,0xffffffff
    d8e0:	84 c4 00 00 	l.lwz r6,0x0(r4)
    d8e4:	e0 ce 30 03 	l.and r6,r14,r6
    d8e8:	d4 04 30 00 	l.sw 0x0(r4),r6
    d8ec:	18 80 09 01 	l.movhi r4,0x901
    d8f0:	a8 84 00 c0 	l.ori r4,r4,0xc0
    d8f4:	84 c4 00 00 	l.lwz r6,0x0(r4)
    d8f8:	e0 ce 30 03 	l.and r6,r14,r6
    d8fc:	d4 04 30 00 	l.sw 0x0(r4),r6
    d900:	18 c0 07 00 	l.movhi r6,0x700
    d904:	a8 c6 04 44 	l.ori r6,r6,0x444
    d908:	e0 90 30 00 	l.add r4,r16,r6
    d90c:	84 c4 00 00 	l.lwz r6,0x0(r4)
    d910:	e0 a6 28 04 	l.or r5,r6,r5
    d914:	d4 04 28 00 	l.sw 0x0(r4),r5
    d918:	23 00 00 00 	l.csync 
    d91c:	07 ff df 10 	l.jal 555c <time_udelay>
    d920:	15 00 00 00 	l.nop 0x0
    d924:	18 80 09 01 	l.movhi r4,0x901
    d928:	18 c0 07 00 	l.movhi r6,0x700
    d92c:	e0 70 20 00 	l.add r3,r16,r4
    d930:	a8 c6 04 40 	l.ori r6,r6,0x440
    d934:	84 83 00 00 	l.lwz r4,0x0(r3)
    d938:	e2 10 30 00 	l.add r16,r16,r6
    d93c:	e0 84 70 03 	l.and r4,r4,r14
    d940:	9c a0 00 00 	l.addi r5,r0,0x0
    d944:	d4 03 20 00 	l.sw 0x0(r3),r4
    d948:	a8 82 00 00 	l.ori r4,r2,0x0
    d94c:	84 70 00 00 	l.lwz r3,0x0(r16)
    d950:	e1 c3 70 03 	l.and r14,r3,r14
    d954:	a8 72 00 00 	l.ori r3,r18,0x0
    d958:	d4 10 70 00 	l.sw 0x0(r16),r14
    d95c:	9c 21 00 14 	l.addi r1,r1,0x14
    d960:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d964:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    d968:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    d96c:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    d970:	03 ff fd 54 	l.j cec0 <cpu_power_switch_set>
    d974:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

0000d978 <auto_cal_timing_standby>:
    d978:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    d97c:	e0 44 1b 06 	l.mul r2,r4,r3
    d980:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d984:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    d988:	a8 62 00 00 	l.ori r3,r2,0x0
    d98c:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    d990:	07 ff fc 7e 	l.jal cb88 <__umodsi3>
    d994:	9c 80 03 e8 	l.addi r4,r0,0x3e8
    d998:	e0 60 58 02 	l.sub r3,r0,r11
    d99c:	9c 80 03 e8 	l.addi r4,r0,0x3e8
    d9a0:	e1 63 58 04 	l.or r11,r3,r11
    d9a4:	a8 62 00 00 	l.ori r3,r2,0x0
    d9a8:	07 ff fc 20 	l.jal ca28 <__udivsi3>
    d9ac:	b9 cb 00 5f 	l.srli r14,r11,0x1f
    d9b0:	9c 21 00 0c 	l.addi r1,r1,0xc
    d9b4:	e1 6e 58 00 	l.add r11,r14,r11
    d9b8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d9bc:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    d9c0:	44 00 48 00 	l.jr r9
    d9c4:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

0000d9c8 <phy_write_leveling_standby>:
    d9c8:	18 80 04 83 	l.movhi r4,0x483
    d9cc:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    d9d0:	a8 c4 00 08 	l.ori r6,r4,0x8
    d9d4:	9c 40 ff 3f 	l.addi r2,r0,0xffffff3f
    d9d8:	84 e6 00 00 	l.lwz r7,0x0(r6)
    d9dc:	84 a3 00 04 	l.lwz r5,0x4(r3)
    d9e0:	e0 e7 10 03 	l.and r7,r7,r2
    d9e4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d9e8:	a8 e7 00 80 	l.ori r7,r7,0x80
    d9ec:	bc 25 00 04 	l.sfnei r5,0x4
    d9f0:	d4 06 38 00 	l.sw 0x0(r6),r7
    d9f4:	10 00 00 09 	l.bf da18 <phy_write_leveling_standby+0x50>
    d9f8:	15 00 00 00 	l.nop 0x0
    d9fc:	8c c3 00 27 	l.lbz r6,0x27(r3)
    da00:	a8 a4 00 0c 	l.ori r5,r4,0xc
    da04:	a8 84 00 10 	l.ori r4,r4,0x10
    da08:	d4 05 30 00 	l.sw 0x0(r5),r6
    da0c:	8c a3 00 26 	l.lbz r5,0x26(r3)
    da10:	00 00 00 0e 	l.j da48 <phy_write_leveling_standby+0x80>
    da14:	a8 a5 00 40 	l.ori r5,r5,0x40
    da18:	9c a5 ff fa 	l.addi r5,r5,0xfffffffa
    da1c:	bc 45 00 02 	l.sfgtui r5,0x2
    da20:	a8 a4 00 0c 	l.ori r5,r4,0xc
    da24:	10 00 00 06 	l.bf da3c <phy_write_leveling_standby+0x74>
    da28:	a8 84 00 10 	l.ori r4,r4,0x10
    da2c:	8c c3 00 2b 	l.lbz r6,0x2b(r3)
    da30:	d4 05 30 00 	l.sw 0x0(r5),r6
    da34:	00 00 00 05 	l.j da48 <phy_write_leveling_standby+0x80>
    da38:	8c a3 00 2a 	l.lbz r5,0x2a(r3)
    da3c:	9c c0 00 04 	l.addi r6,r0,0x4
    da40:	d4 05 30 00 	l.sw 0x0(r5),r6
    da44:	9c a0 00 40 	l.addi r5,r0,0x40
    da48:	d4 04 28 00 	l.sw 0x0(r4),r5
    da4c:	18 80 04 83 	l.movhi r4,0x483
    da50:	a8 a4 00 08 	l.ori r5,r4,0x8
    da54:	84 c5 00 00 	l.lwz r6,0x0(r5)
    da58:	a8 c6 00 04 	l.ori r6,r6,0x4
    da5c:	d4 05 30 00 	l.sw 0x0(r5),r6
    da60:	84 a3 00 1c 	l.lwz r5,0x1c(r3)
    da64:	a4 a5 00 01 	l.andi r5,r5,0x1
    da68:	bc 05 00 00 	l.sfeqi r5,0x0
    da6c:	10 00 00 0a 	l.bf da94 <phy_write_leveling_standby+0xcc>
    da70:	15 00 00 00 	l.nop 0x0
    da74:	a8 84 01 88 	l.ori r4,r4,0x188
    da78:	84 a4 00 00 	l.lwz r5,0x0(r4)
    da7c:	a4 a5 00 03 	l.andi r5,r5,0x3
    da80:	bc 25 00 03 	l.sfnei r5,0x3
    da84:	13 ff ff fd 	l.bf da78 <phy_write_leveling_standby+0xb0>
    da88:	15 00 00 00 	l.nop 0x0
    da8c:	00 00 00 09 	l.j dab0 <phy_write_leveling_standby+0xe8>
    da90:	18 80 04 83 	l.movhi r4,0x483
    da94:	a8 84 01 88 	l.ori r4,r4,0x188
    da98:	84 a4 00 00 	l.lwz r5,0x0(r4)
    da9c:	a4 a5 00 0f 	l.andi r5,r5,0xf
    daa0:	bc 25 00 0f 	l.sfnei r5,0xf
    daa4:	13 ff ff fd 	l.bf da98 <phy_write_leveling_standby+0xd0>
    daa8:	15 00 00 00 	l.nop 0x0
    daac:	18 80 04 83 	l.movhi r4,0x483
    dab0:	9c 40 ff fb 	l.addi r2,r0,0xfffffffb
    dab4:	a8 84 00 08 	l.ori r4,r4,0x8
    dab8:	9d 60 00 00 	l.addi r11,r0,0x0
    dabc:	84 a4 00 00 	l.lwz r5,0x0(r4)
    dac0:	e0 a5 10 03 	l.and r5,r5,r2
    dac4:	d4 04 28 00 	l.sw 0x0(r4),r5
    dac8:	a8 8b 00 00 	l.ori r4,r11,0x0
    dacc:	00 00 00 05 	l.j dae0 <phy_write_leveling_standby+0x118>
    dad0:	a8 ab 00 00 	l.ori r5,r11,0x0
    dad4:	10 00 00 03 	l.bf dae0 <phy_write_leveling_standby+0x118>
    dad8:	a8 a4 00 00 	l.ori r5,r4,0x0
    dadc:	9c a4 00 2e 	l.addi r5,r4,0x2e
    dae0:	18 40 01 20 	l.movhi r2,0x120
    dae4:	a8 42 c0 96 	l.ori r2,r2,0xc096
    dae8:	e0 a5 10 00 	l.add r5,r5,r2
    daec:	b8 a5 00 02 	l.slli r5,r5,0x2
    daf0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    daf4:	ac c5 00 3f 	l.xori r6,r5,0x3f
    daf8:	e0 e0 30 02 	l.sub r7,r0,r6
    dafc:	e0 c7 30 04 	l.or r6,r7,r6
    db00:	bd 66 00 00 	l.sfgesi r6,0x0
    db04:	10 00 00 06 	l.bf db1c <phy_write_leveling_standby+0x154>
    db08:	e0 c0 28 02 	l.sub r6,r0,r5
    db0c:	e0 a6 28 04 	l.or r5,r6,r5
    db10:	bd 65 00 00 	l.sfgesi r5,0x0
    db14:	0c 00 00 03 	l.bnf db20 <phy_write_leveling_standby+0x158>
    db18:	15 00 00 00 	l.nop 0x0
    db1c:	9d 60 00 01 	l.addi r11,r0,0x1
    db20:	9c 84 00 01 	l.addi r4,r4,0x1
    db24:	bc 24 00 04 	l.sfnei r4,0x4
    db28:	13 ff ff eb 	l.bf dad4 <phy_write_leveling_standby+0x10c>
    db2c:	bc a4 00 01 	l.sfleui r4,0x1
    db30:	18 a0 04 83 	l.movhi r5,0x483
    db34:	9c 40 ff 3f 	l.addi r2,r0,0xffffff3f
    db38:	a8 85 00 08 	l.ori r4,r5,0x8
    db3c:	84 c4 00 00 	l.lwz r6,0x0(r4)
    db40:	e0 c6 10 03 	l.and r6,r6,r2
    db44:	d4 04 30 00 	l.sw 0x0(r4),r6
    db48:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    db4c:	a4 c6 10 00 	l.andi r6,r6,0x1000
    db50:	bc 06 00 00 	l.sfeqi r6,0x0
    db54:	10 00 00 21 	l.bf dbd8 <phy_write_leveling_standby+0x210>
    db58:	15 00 00 00 	l.nop 0x0
    db5c:	84 c4 00 00 	l.lwz r6,0x0(r4)
    db60:	e0 c6 10 03 	l.and r6,r6,r2
    db64:	a8 c6 00 40 	l.ori r6,r6,0x40
    db68:	d4 04 30 00 	l.sw 0x0(r4),r6
    db6c:	84 c4 00 00 	l.lwz r6,0x0(r4)
    db70:	a8 c6 00 04 	l.ori r6,r6,0x4
    db74:	d4 04 30 00 	l.sw 0x0(r4),r6
    db78:	84 63 00 1c 	l.lwz r3,0x1c(r3)
    db7c:	a4 63 00 01 	l.andi r3,r3,0x1
    db80:	bc 03 00 00 	l.sfeqi r3,0x0
    db84:	10 00 00 0a 	l.bf dbac <phy_write_leveling_standby+0x1e4>
    db88:	15 00 00 00 	l.nop 0x0
    db8c:	a8 a5 01 88 	l.ori r5,r5,0x188
    db90:	84 65 00 00 	l.lwz r3,0x0(r5)
    db94:	a4 63 00 03 	l.andi r3,r3,0x3
    db98:	bc 23 00 03 	l.sfnei r3,0x3
    db9c:	13 ff ff fd 	l.bf db90 <phy_write_leveling_standby+0x1c8>
    dba0:	18 60 04 83 	l.movhi r3,0x483
    dba4:	00 00 00 09 	l.j dbc8 <phy_write_leveling_standby+0x200>
    dba8:	9c 40 ff fb 	l.addi r2,r0,0xfffffffb
    dbac:	a8 a5 01 88 	l.ori r5,r5,0x188
    dbb0:	84 65 00 00 	l.lwz r3,0x0(r5)
    dbb4:	a4 63 00 0f 	l.andi r3,r3,0xf
    dbb8:	bc 23 00 0f 	l.sfnei r3,0xf
    dbbc:	13 ff ff fd 	l.bf dbb0 <phy_write_leveling_standby+0x1e8>
    dbc0:	18 60 04 83 	l.movhi r3,0x483
    dbc4:	9c 40 ff fb 	l.addi r2,r0,0xfffffffb
    dbc8:	a8 63 00 08 	l.ori r3,r3,0x8
    dbcc:	84 83 00 00 	l.lwz r4,0x0(r3)
    dbd0:	e0 84 10 03 	l.and r4,r4,r2
    dbd4:	d4 03 20 00 	l.sw 0x0(r3),r4
    dbd8:	18 60 04 83 	l.movhi r3,0x483
    dbdc:	9c 40 ff 3f 	l.addi r2,r0,0xffffff3f
    dbe0:	a8 63 00 08 	l.ori r3,r3,0x8
    dbe4:	ad 6b 00 01 	l.xori r11,r11,0x1
    dbe8:	84 83 00 00 	l.lwz r4,0x0(r3)
    dbec:	e0 84 10 03 	l.and r4,r4,r2
    dbf0:	d4 03 20 00 	l.sw 0x0(r3),r4
    dbf4:	9c 21 00 04 	l.addi r1,r1,0x4
    dbf8:	44 00 48 00 	l.jr r9
    dbfc:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000dc00 <phy_read_calibration_standby>:
    dc00:	18 80 04 83 	l.movhi r4,0x483
    dc04:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    dc08:	a8 a4 00 08 	l.ori r5,r4,0x8
    dc0c:	9c 40 ff cf 	l.addi r2,r0,0xffffffcf
    dc10:	84 c5 00 00 	l.lwz r6,0x0(r5)
    dc14:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    dc18:	e0 c6 10 03 	l.and r6,r6,r2
    dc1c:	a8 c6 00 20 	l.ori r6,r6,0x20
    dc20:	d4 05 30 00 	l.sw 0x0(r5),r6
    dc24:	84 a3 00 04 	l.lwz r5,0x4(r3)
    dc28:	bc 25 00 04 	l.sfnei r5,0x4
    dc2c:	10 00 00 05 	l.bf dc40 <phy_read_calibration_standby+0x40>
    dc30:	a8 84 00 54 	l.ori r4,r4,0x54
    dc34:	84 a4 00 00 	l.lwz r5,0x0(r4)
    dc38:	a8 a5 00 02 	l.ori r5,r5,0x2
    dc3c:	d4 04 28 00 	l.sw 0x0(r4),r5
    dc40:	18 80 04 83 	l.movhi r4,0x483
    dc44:	a8 a4 00 08 	l.ori r5,r4,0x8
    dc48:	84 c5 00 00 	l.lwz r6,0x0(r5)
    dc4c:	a8 c6 00 01 	l.ori r6,r6,0x1
    dc50:	d4 05 30 00 	l.sw 0x0(r5),r6
    dc54:	84 a3 00 1c 	l.lwz r5,0x1c(r3)
    dc58:	a4 a5 00 01 	l.andi r5,r5,0x1
    dc5c:	bc 25 00 00 	l.sfnei r5,0x0
    dc60:	10 00 00 0b 	l.bf dc8c <phy_read_calibration_standby+0x8c>
    dc64:	15 00 00 00 	l.nop 0x0
    dc68:	00 00 00 16 	l.j dcc0 <phy_read_calibration_standby+0xc0>
    dc6c:	a8 84 01 84 	l.ori r4,r4,0x184
    dc70:	84 a4 00 00 	l.lwz r5,0x0(r4)
    dc74:	a4 a5 00 20 	l.andi r5,r5,0x20
    dc78:	bc 25 00 00 	l.sfnei r5,0x0
    dc7c:	0c 00 00 05 	l.bnf dc90 <phy_read_calibration_standby+0x90>
    dc80:	9d 60 00 01 	l.addi r11,r0,0x1
    dc84:	00 00 00 15 	l.j dcd8 <phy_read_calibration_standby+0xd8>
    dc88:	18 a0 04 83 	l.movhi r5,0x483
    dc8c:	a8 84 01 84 	l.ori r4,r4,0x184
    dc90:	84 a4 00 00 	l.lwz r5,0x0(r4)
    dc94:	a4 a5 00 03 	l.andi r5,r5,0x3
    dc98:	bc 25 00 03 	l.sfnei r5,0x3
    dc9c:	13 ff ff f5 	l.bf dc70 <phy_read_calibration_standby+0x70>
    dca0:	9d 60 00 00 	l.addi r11,r0,0x0
    dca4:	00 00 00 0d 	l.j dcd8 <phy_read_calibration_standby+0xd8>
    dca8:	18 a0 04 83 	l.movhi r5,0x483
    dcac:	84 a4 00 00 	l.lwz r5,0x0(r4)
    dcb0:	a4 a5 00 20 	l.andi r5,r5,0x20
    dcb4:	bc 25 00 00 	l.sfnei r5,0x0
    dcb8:	10 00 00 07 	l.bf dcd4 <phy_read_calibration_standby+0xd4>
    dcbc:	9d 60 00 01 	l.addi r11,r0,0x1
    dcc0:	84 a4 00 00 	l.lwz r5,0x0(r4)
    dcc4:	a4 a5 00 0f 	l.andi r5,r5,0xf
    dcc8:	bc 25 00 0f 	l.sfnei r5,0xf
    dccc:	13 ff ff f8 	l.bf dcac <phy_read_calibration_standby+0xac>
    dcd0:	9d 60 00 00 	l.addi r11,r0,0x0
    dcd4:	18 a0 04 83 	l.movhi r5,0x483
    dcd8:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    dcdc:	a8 85 00 08 	l.ori r4,r5,0x8
    dce0:	84 c4 00 00 	l.lwz r6,0x0(r4)
    dce4:	e0 c6 10 03 	l.and r6,r6,r2
    dce8:	9c 40 ff cf 	l.addi r2,r0,0xffffffcf
    dcec:	d4 04 30 00 	l.sw 0x0(r4),r6
    dcf0:	84 c4 00 00 	l.lwz r6,0x0(r4)
    dcf4:	e0 c6 10 03 	l.and r6,r6,r2
    dcf8:	d4 04 30 00 	l.sw 0x0(r4),r6
    dcfc:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    dd00:	a4 c6 10 00 	l.andi r6,r6,0x1000
    dd04:	bc 06 00 00 	l.sfeqi r6,0x0
    dd08:	10 00 00 33 	l.bf ddd4 <phy_read_calibration_standby+0x1d4>
    dd0c:	15 00 00 00 	l.nop 0x0
    dd10:	84 c4 00 00 	l.lwz r6,0x0(r4)
    dd14:	e0 c6 10 03 	l.and r6,r6,r2
    dd18:	a8 c6 00 10 	l.ori r6,r6,0x10
    dd1c:	d4 04 30 00 	l.sw 0x0(r4),r6
    dd20:	84 c4 00 00 	l.lwz r6,0x0(r4)
    dd24:	a8 c6 00 01 	l.ori r6,r6,0x1
    dd28:	d4 04 30 00 	l.sw 0x0(r4),r6
    dd2c:	84 63 00 1c 	l.lwz r3,0x1c(r3)
    dd30:	a4 63 00 01 	l.andi r3,r3,0x1
    dd34:	bc 23 00 00 	l.sfnei r3,0x0
    dd38:	10 00 00 0b 	l.bf dd64 <phy_read_calibration_standby+0x164>
    dd3c:	15 00 00 00 	l.nop 0x0
    dd40:	00 00 00 18 	l.j dda0 <phy_read_calibration_standby+0x1a0>
    dd44:	a8 a5 01 84 	l.ori r5,r5,0x184
    dd48:	84 65 00 00 	l.lwz r3,0x0(r5)
    dd4c:	a4 63 00 20 	l.andi r3,r3,0x20
    dd50:	bc 23 00 00 	l.sfnei r3,0x0
    dd54:	0c 00 00 05 	l.bnf dd68 <phy_read_calibration_standby+0x168>
    dd58:	15 00 00 00 	l.nop 0x0
    dd5c:	00 00 00 18 	l.j ddbc <phy_read_calibration_standby+0x1bc>
    dd60:	9d 60 00 01 	l.addi r11,r0,0x1
    dd64:	a8 a5 01 84 	l.ori r5,r5,0x184
    dd68:	84 65 00 00 	l.lwz r3,0x0(r5)
    dd6c:	a4 63 00 03 	l.andi r3,r3,0x3
    dd70:	bc 23 00 03 	l.sfnei r3,0x3
    dd74:	13 ff ff f5 	l.bf dd48 <phy_read_calibration_standby+0x148>
    dd78:	18 60 04 83 	l.movhi r3,0x483
    dd7c:	00 00 00 12 	l.j ddc4 <phy_read_calibration_standby+0x1c4>
    dd80:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    dd84:	84 65 00 00 	l.lwz r3,0x0(r5)
    dd88:	a4 63 00 20 	l.andi r3,r3,0x20
    dd8c:	bc 23 00 00 	l.sfnei r3,0x0
    dd90:	0c 00 00 04 	l.bnf dda0 <phy_read_calibration_standby+0x1a0>
    dd94:	15 00 00 00 	l.nop 0x0
    dd98:	00 00 00 09 	l.j ddbc <phy_read_calibration_standby+0x1bc>
    dd9c:	9d 60 00 01 	l.addi r11,r0,0x1
    dda0:	84 65 00 00 	l.lwz r3,0x0(r5)
    dda4:	a4 63 00 0f 	l.andi r3,r3,0xf
    dda8:	bc 23 00 0f 	l.sfnei r3,0xf
    ddac:	13 ff ff f6 	l.bf dd84 <phy_read_calibration_standby+0x184>
    ddb0:	18 60 04 83 	l.movhi r3,0x483
    ddb4:	00 00 00 04 	l.j ddc4 <phy_read_calibration_standby+0x1c4>
    ddb8:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    ddbc:	18 60 04 83 	l.movhi r3,0x483
    ddc0:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    ddc4:	a8 63 00 08 	l.ori r3,r3,0x8
    ddc8:	84 83 00 00 	l.lwz r4,0x0(r3)
    ddcc:	e0 84 10 03 	l.and r4,r4,r2
    ddd0:	d4 03 20 00 	l.sw 0x0(r3),r4
    ddd4:	18 60 04 83 	l.movhi r3,0x483
    ddd8:	9c 40 ff cf 	l.addi r2,r0,0xffffffcf
    dddc:	a8 63 00 08 	l.ori r3,r3,0x8
    dde0:	ad 6b 00 01 	l.xori r11,r11,0x1
    dde4:	84 83 00 00 	l.lwz r4,0x0(r3)
    dde8:	e0 84 10 03 	l.and r4,r4,r2
    ddec:	d4 03 20 00 	l.sw 0x0(r3),r4
    ddf0:	9c 21 00 04 	l.addi r1,r1,0x4
    ddf4:	44 00 48 00 	l.jr r9
    ddf8:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000ddfc <phy_read_training_standby>:
    ddfc:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    de00:	84 83 00 04 	l.lwz r4,0x4(r3)
    de04:	bc 24 00 08 	l.sfnei r4,0x8
    de08:	10 00 00 08 	l.bf de28 <phy_read_training_standby+0x2c>
    de0c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    de10:	18 80 04 83 	l.movhi r4,0x483
    de14:	9c 40 00 00 	l.addi r2,r0,0x0
    de18:	a8 a4 08 00 	l.ori r5,r4,0x800
    de1c:	a8 84 08 1c 	l.ori r4,r4,0x81c
    de20:	d4 05 10 00 	l.sw 0x0(r5),r2
    de24:	d4 04 10 00 	l.sw 0x0(r4),r2
    de28:	94 a3 00 18 	l.lhz r5,0x18(r3)
    de2c:	a4 a5 00 0f 	l.andi r5,r5,0xf
    de30:	e0 a5 28 00 	l.add r5,r5,r5
    de34:	bc 05 00 00 	l.sfeqi r5,0x0
    de38:	0c 00 00 03 	l.bnf de44 <phy_read_training_standby+0x48>
    de3c:	18 80 04 83 	l.movhi r4,0x483
    de40:	9c a0 00 0f 	l.addi r5,r0,0xf
    de44:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
    de48:	a8 c4 01 98 	l.ori r6,r4,0x198
    de4c:	84 e6 00 00 	l.lwz r7,0x0(r6)
    de50:	e0 e7 10 03 	l.and r7,r7,r2
    de54:	9c 40 ff c0 	l.addi r2,r0,0xffffffc0
    de58:	a8 e7 00 02 	l.ori r7,r7,0x2
    de5c:	d4 06 38 00 	l.sw 0x0(r6),r7
    de60:	a8 c4 08 04 	l.ori r6,r4,0x804
    de64:	84 e6 00 00 	l.lwz r7,0x0(r6)
    de68:	e0 e7 10 03 	l.and r7,r7,r2
    de6c:	e0 e5 38 04 	l.or r7,r5,r7
    de70:	d4 06 38 00 	l.sw 0x0(r6),r7
    de74:	a8 c4 08 08 	l.ori r6,r4,0x808
    de78:	84 e6 00 00 	l.lwz r7,0x0(r6)
    de7c:	e0 e7 10 03 	l.and r7,r7,r2
    de80:	e0 e5 38 04 	l.or r7,r5,r7
    de84:	d4 06 38 00 	l.sw 0x0(r6),r7
    de88:	a8 c4 0a 04 	l.ori r6,r4,0xa04
    de8c:	84 e6 00 00 	l.lwz r7,0x0(r6)
    de90:	e0 e7 10 03 	l.and r7,r7,r2
    de94:	e0 e5 38 04 	l.or r7,r5,r7
    de98:	d4 06 38 00 	l.sw 0x0(r6),r7
    de9c:	a8 c4 0a 08 	l.ori r6,r4,0xa08
    dea0:	84 e6 00 00 	l.lwz r7,0x0(r6)
    dea4:	e0 e7 10 03 	l.and r7,r7,r2
    dea8:	e0 a5 38 04 	l.or r5,r5,r7
    deac:	d4 06 28 00 	l.sw 0x0(r6),r5
    deb0:	a8 a4 01 90 	l.ori r5,r4,0x190
    deb4:	a8 84 08 40 	l.ori r4,r4,0x840
    deb8:	84 c5 00 00 	l.lwz r6,0x0(r5)
    debc:	a8 c6 00 06 	l.ori r6,r6,0x6
    dec0:	d4 05 30 00 	l.sw 0x0(r5),r6
    dec4:	84 c5 00 00 	l.lwz r6,0x0(r5)
    dec8:	a8 c6 00 01 	l.ori r6,r6,0x1
    decc:	d4 05 30 00 	l.sw 0x0(r5),r6
    ded0:	84 a4 00 00 	l.lwz r5,0x0(r4)
    ded4:	a4 a5 00 0c 	l.andi r5,r5,0xc
    ded8:	bc 25 00 0c 	l.sfnei r5,0xc
    dedc:	13 ff ff fd 	l.bf ded0 <phy_read_training_standby+0xd4>
    dee0:	15 00 00 00 	l.nop 0x0
    dee4:	85 64 00 00 	l.lwz r11,0x0(r4)
    dee8:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    deec:	a5 6b 00 03 	l.andi r11,r11,0x3
    def0:	a4 c6 00 01 	l.andi r6,r6,0x1
    def4:	e1 60 58 02 	l.sub r11,r0,r11
    def8:	bc 26 00 00 	l.sfnei r6,0x0
    defc:	10 00 00 0f 	l.bf df38 <phy_read_training_standby+0x13c>
    df00:	b9 6b 00 5f 	l.srli r11,r11,0x1f
    df04:	18 80 04 83 	l.movhi r4,0x483
    df08:	a8 84 0a 40 	l.ori r4,r4,0xa40
    df0c:	84 a4 00 00 	l.lwz r5,0x0(r4)
    df10:	a4 a5 00 0c 	l.andi r5,r5,0xc
    df14:	bc 25 00 0c 	l.sfnei r5,0xc
    df18:	13 ff ff fd 	l.bf df0c <phy_read_training_standby+0x110>
    df1c:	15 00 00 00 	l.nop 0x0
    df20:	84 84 00 00 	l.lwz r4,0x0(r4)
    df24:	a4 84 00 03 	l.andi r4,r4,0x3
    df28:	bc 24 00 00 	l.sfnei r4,0x0
    df2c:	0c 00 00 04 	l.bnf df3c <phy_read_training_standby+0x140>
    df30:	18 80 04 83 	l.movhi r4,0x483
    df34:	9d 60 00 01 	l.addi r11,r0,0x1
    df38:	18 80 04 83 	l.movhi r4,0x483
    df3c:	a8 a4 08 50 	l.ori r5,r4,0x850
    df40:	84 a5 00 00 	l.lwz r5,0x0(r5)
    df44:	a8 a4 08 54 	l.ori r5,r4,0x854
    df48:	84 a5 00 00 	l.lwz r5,0x0(r5)
    df4c:	a8 a4 08 58 	l.ori r5,r4,0x858
    df50:	84 a5 00 00 	l.lwz r5,0x0(r5)
    df54:	a8 a4 08 5c 	l.ori r5,r4,0x85c
    df58:	84 a5 00 00 	l.lwz r5,0x0(r5)
    df5c:	a8 a4 08 60 	l.ori r5,r4,0x860
    df60:	84 a5 00 00 	l.lwz r5,0x0(r5)
    df64:	a8 a4 08 64 	l.ori r5,r4,0x864
    df68:	84 a5 00 00 	l.lwz r5,0x0(r5)
    df6c:	a8 a4 08 68 	l.ori r5,r4,0x868
    df70:	84 a5 00 00 	l.lwz r5,0x0(r5)
    df74:	a8 a4 08 6c 	l.ori r5,r4,0x86c
    df78:	84 a5 00 00 	l.lwz r5,0x0(r5)
    df7c:	a8 a4 08 70 	l.ori r5,r4,0x870
    df80:	a8 84 08 98 	l.ori r4,r4,0x898
    df84:	84 a5 00 00 	l.lwz r5,0x0(r5)
    df88:	84 a4 00 00 	l.lwz r5,0x0(r4)
    df8c:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    df90:	84 e4 00 00 	l.lwz r7,0x0(r4)
    df94:	e0 a7 28 02 	l.sub r5,r7,r5
    df98:	bc 45 00 06 	l.sfgtui r5,0x6
    df9c:	10 00 00 09 	l.bf dfc0 <phy_read_training_standby+0x1c4>
    dfa0:	18 40 04 83 	l.movhi r2,0x483
    dfa4:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    dfa8:	18 40 10 00 	l.movhi r2,0x1000
    dfac:	e0 a5 10 03 	l.and r5,r5,r2
    dfb0:	bc 05 00 00 	l.sfeqi r5,0x0
    dfb4:	0c 00 00 03 	l.bnf dfc0 <phy_read_training_standby+0x1c4>
    dfb8:	18 40 04 83 	l.movhi r2,0x483
    dfbc:	9d 60 00 01 	l.addi r11,r0,0x1
    dfc0:	9c 84 00 04 	l.addi r4,r4,0x4
    dfc4:	a8 42 08 bc 	l.ori r2,r2,0x8bc
    dfc8:	e4 24 10 00 	l.sfne r4,r2
    dfcc:	13 ff ff ef 	l.bf df88 <phy_read_training_standby+0x18c>
    dfd0:	18 a0 04 83 	l.movhi r5,0x483
    dfd4:	a8 e5 08 74 	l.ori r7,r5,0x874
    dfd8:	84 e7 00 00 	l.lwz r7,0x0(r7)
    dfdc:	a8 e5 08 78 	l.ori r7,r5,0x878
    dfe0:	84 e7 00 00 	l.lwz r7,0x0(r7)
    dfe4:	a8 e5 08 7c 	l.ori r7,r5,0x87c
    dfe8:	84 e7 00 00 	l.lwz r7,0x0(r7)
    dfec:	a8 e5 08 80 	l.ori r7,r5,0x880
    dff0:	84 e7 00 00 	l.lwz r7,0x0(r7)
    dff4:	a8 e5 08 84 	l.ori r7,r5,0x884
    dff8:	84 e7 00 00 	l.lwz r7,0x0(r7)
    dffc:	a8 e5 08 88 	l.ori r7,r5,0x888
    e000:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e004:	a8 e5 08 8c 	l.ori r7,r5,0x88c
    e008:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e00c:	a8 e5 08 90 	l.ori r7,r5,0x890
    e010:	a8 a5 08 94 	l.ori r5,r5,0x894
    e014:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e018:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e01c:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e020:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    e024:	84 e4 00 00 	l.lwz r7,0x0(r4)
    e028:	e0 a7 28 02 	l.sub r5,r7,r5
    e02c:	bc 45 00 06 	l.sfgtui r5,0x6
    e030:	10 00 00 09 	l.bf e054 <phy_read_training_standby+0x258>
    e034:	18 40 04 83 	l.movhi r2,0x483
    e038:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    e03c:	18 40 10 00 	l.movhi r2,0x1000
    e040:	e0 a5 10 03 	l.and r5,r5,r2
    e044:	bc 05 00 00 	l.sfeqi r5,0x0
    e048:	0c 00 00 03 	l.bnf e054 <phy_read_training_standby+0x258>
    e04c:	18 40 04 83 	l.movhi r2,0x483
    e050:	9d 60 00 01 	l.addi r11,r0,0x1
    e054:	9c 84 00 04 	l.addi r4,r4,0x4
    e058:	a8 42 08 e0 	l.ori r2,r2,0x8e0
    e05c:	e4 24 10 00 	l.sfne r4,r2
    e060:	13 ff ff ef 	l.bf e01c <phy_read_training_standby+0x220>
    e064:	bc 26 00 00 	l.sfnei r6,0x0
    e068:	10 00 00 4e 	l.bf e1a0 <phy_read_training_standby+0x3a4>
    e06c:	18 a0 04 83 	l.movhi r5,0x483
    e070:	18 80 04 83 	l.movhi r4,0x483
    e074:	a8 a4 0a 50 	l.ori r5,r4,0xa50
    e078:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e07c:	a8 a4 0a 54 	l.ori r5,r4,0xa54
    e080:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e084:	a8 a4 0a 58 	l.ori r5,r4,0xa58
    e088:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e08c:	a8 a4 0a 5c 	l.ori r5,r4,0xa5c
    e090:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e094:	a8 a4 0a 60 	l.ori r5,r4,0xa60
    e098:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e09c:	a8 a4 0a 64 	l.ori r5,r4,0xa64
    e0a0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e0a4:	a8 a4 0a 68 	l.ori r5,r4,0xa68
    e0a8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e0ac:	a8 a4 0a 6c 	l.ori r5,r4,0xa6c
    e0b0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e0b4:	a8 a4 0a 70 	l.ori r5,r4,0xa70
    e0b8:	a8 84 0a 98 	l.ori r4,r4,0xa98
    e0bc:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e0c0:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e0c4:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    e0c8:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e0cc:	e0 a6 28 02 	l.sub r5,r6,r5
    e0d0:	bc 45 00 06 	l.sfgtui r5,0x6
    e0d4:	10 00 00 09 	l.bf e0f8 <phy_read_training_standby+0x2fc>
    e0d8:	18 40 04 83 	l.movhi r2,0x483
    e0dc:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    e0e0:	18 40 10 00 	l.movhi r2,0x1000
    e0e4:	e0 a5 10 03 	l.and r5,r5,r2
    e0e8:	bc 05 00 00 	l.sfeqi r5,0x0
    e0ec:	0c 00 00 03 	l.bnf e0f8 <phy_read_training_standby+0x2fc>
    e0f0:	18 40 04 83 	l.movhi r2,0x483
    e0f4:	9d 60 00 01 	l.addi r11,r0,0x1
    e0f8:	9c 84 00 04 	l.addi r4,r4,0x4
    e0fc:	a8 42 0a bc 	l.ori r2,r2,0xabc
    e100:	e4 24 10 00 	l.sfne r4,r2
    e104:	13 ff ff ef 	l.bf e0c0 <phy_read_training_standby+0x2c4>
    e108:	18 a0 04 83 	l.movhi r5,0x483
    e10c:	a8 c5 0a 74 	l.ori r6,r5,0xa74
    e110:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e114:	a8 c5 0a 78 	l.ori r6,r5,0xa78
    e118:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e11c:	a8 c5 0a 7c 	l.ori r6,r5,0xa7c
    e120:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e124:	a8 c5 0a 80 	l.ori r6,r5,0xa80
    e128:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e12c:	a8 c5 0a 84 	l.ori r6,r5,0xa84
    e130:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e134:	a8 c5 0a 88 	l.ori r6,r5,0xa88
    e138:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e13c:	a8 c5 0a 8c 	l.ori r6,r5,0xa8c
    e140:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e144:	a8 c5 0a 90 	l.ori r6,r5,0xa90
    e148:	a8 a5 0a 94 	l.ori r5,r5,0xa94
    e14c:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e150:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e154:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e158:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    e15c:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e160:	e0 a6 28 02 	l.sub r5,r6,r5
    e164:	bc 45 00 06 	l.sfgtui r5,0x6
    e168:	10 00 00 09 	l.bf e18c <phy_read_training_standby+0x390>
    e16c:	18 40 04 83 	l.movhi r2,0x483
    e170:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    e174:	18 40 10 00 	l.movhi r2,0x1000
    e178:	e0 a5 10 03 	l.and r5,r5,r2
    e17c:	bc 05 00 00 	l.sfeqi r5,0x0
    e180:	0c 00 00 03 	l.bnf e18c <phy_read_training_standby+0x390>
    e184:	18 40 04 83 	l.movhi r2,0x483
    e188:	9d 60 00 01 	l.addi r11,r0,0x1
    e18c:	9c 84 00 04 	l.addi r4,r4,0x4
    e190:	a8 42 0a e0 	l.ori r2,r2,0xae0
    e194:	e4 24 10 00 	l.sfne r4,r2
    e198:	13 ff ff ef 	l.bf e154 <phy_read_training_standby+0x358>
    e19c:	18 a0 04 83 	l.movhi r5,0x483
    e1a0:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
    e1a4:	a8 85 01 90 	l.ori r4,r5,0x190
    e1a8:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e1ac:	e0 c6 10 03 	l.and r6,r6,r2
    e1b0:	d4 04 30 00 	l.sw 0x0(r4),r6
    e1b4:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    e1b8:	a4 c6 10 00 	l.andi r6,r6,0x1000
    e1bc:	bc 06 00 00 	l.sfeqi r6,0x0
    e1c0:	10 00 00 2e 	l.bf e278 <phy_read_training_standby+0x47c>
    e1c4:	a8 c5 01 98 	l.ori r6,r5,0x198
    e1c8:	a8 a5 08 40 	l.ori r5,r5,0x840
    e1cc:	84 e6 00 00 	l.lwz r7,0x0(r6)
    e1d0:	e0 e7 10 03 	l.and r7,r7,r2
    e1d4:	a8 e7 00 02 	l.ori r7,r7,0x2
    e1d8:	d4 06 38 00 	l.sw 0x0(r6),r7
    e1dc:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e1e0:	a8 c6 00 06 	l.ori r6,r6,0x6
    e1e4:	d4 04 30 00 	l.sw 0x0(r4),r6
    e1e8:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e1ec:	a8 c6 00 01 	l.ori r6,r6,0x1
    e1f0:	d4 04 30 00 	l.sw 0x0(r4),r6
    e1f4:	84 85 00 00 	l.lwz r4,0x0(r5)
    e1f8:	a4 84 00 0c 	l.andi r4,r4,0xc
    e1fc:	bc 24 00 0c 	l.sfnei r4,0xc
    e200:	13 ff ff fd 	l.bf e1f4 <phy_read_training_standby+0x3f8>
    e204:	15 00 00 00 	l.nop 0x0
    e208:	84 85 00 00 	l.lwz r4,0x0(r5)
    e20c:	a4 84 00 03 	l.andi r4,r4,0x3
    e210:	bc 24 00 00 	l.sfnei r4,0x0
    e214:	0c 00 00 03 	l.bnf e220 <phy_read_training_standby+0x424>
    e218:	15 00 00 00 	l.nop 0x0
    e21c:	9d 60 00 01 	l.addi r11,r0,0x1
    e220:	84 63 00 1c 	l.lwz r3,0x1c(r3)
    e224:	a4 63 00 01 	l.andi r3,r3,0x1
    e228:	bc 23 00 00 	l.sfnei r3,0x0
    e22c:	10 00 00 0e 	l.bf e264 <phy_read_training_standby+0x468>
    e230:	18 60 04 83 	l.movhi r3,0x483
    e234:	a8 63 0a 40 	l.ori r3,r3,0xa40
    e238:	84 83 00 00 	l.lwz r4,0x0(r3)
    e23c:	a4 84 00 0c 	l.andi r4,r4,0xc
    e240:	bc 24 00 0c 	l.sfnei r4,0xc
    e244:	13 ff ff fd 	l.bf e238 <phy_read_training_standby+0x43c>
    e248:	15 00 00 00 	l.nop 0x0
    e24c:	84 63 00 00 	l.lwz r3,0x0(r3)
    e250:	a4 63 00 03 	l.andi r3,r3,0x3
    e254:	bc 23 00 00 	l.sfnei r3,0x0
    e258:	0c 00 00 03 	l.bnf e264 <phy_read_training_standby+0x468>
    e25c:	18 60 04 83 	l.movhi r3,0x483
    e260:	9d 60 00 01 	l.addi r11,r0,0x1
    e264:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
    e268:	a8 63 01 90 	l.ori r3,r3,0x190
    e26c:	84 83 00 00 	l.lwz r4,0x0(r3)
    e270:	e0 84 10 03 	l.and r4,r4,r2
    e274:	d4 03 20 00 	l.sw 0x0(r3),r4
    e278:	18 60 04 83 	l.movhi r3,0x483
    e27c:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
    e280:	a8 63 01 98 	l.ori r3,r3,0x198
    e284:	ad 6b 00 01 	l.xori r11,r11,0x1
    e288:	84 83 00 00 	l.lwz r4,0x0(r3)
    e28c:	e0 84 10 03 	l.and r4,r4,r2
    e290:	d4 03 20 00 	l.sw 0x0(r3),r4
    e294:	9c 21 00 04 	l.addi r1,r1,0x4
    e298:	44 00 48 00 	l.jr r9
    e29c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000e2a0 <phy_write_training_standby>:
    e2a0:	18 80 04 83 	l.movhi r4,0x483
    e2a4:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    e2a8:	a8 a4 01 34 	l.ori r5,r4,0x134
    e2ac:	9c 40 00 00 	l.addi r2,r0,0x0
    e2b0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    e2b4:	d4 05 10 00 	l.sw 0x0(r5),r2
    e2b8:	a8 a4 01 38 	l.ori r5,r4,0x138
    e2bc:	d4 05 10 00 	l.sw 0x0(r5),r2
    e2c0:	a8 a4 01 9c 	l.ori r5,r4,0x19c
    e2c4:	d4 05 10 00 	l.sw 0x0(r5),r2
    e2c8:	a8 a4 01 a0 	l.ori r5,r4,0x1a0
    e2cc:	d4 05 10 00 	l.sw 0x0(r5),r2
    e2d0:	a8 a4 01 98 	l.ori r5,r4,0x198
    e2d4:	9c 40 ff f3 	l.addi r2,r0,0xfffffff3
    e2d8:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e2dc:	e0 c6 10 03 	l.and r6,r6,r2
    e2e0:	a8 c6 00 08 	l.ori r6,r6,0x8
    e2e4:	d4 05 30 00 	l.sw 0x0(r5),r6
    e2e8:	a8 a4 01 90 	l.ori r5,r4,0x190
    e2ec:	a8 84 08 e0 	l.ori r4,r4,0x8e0
    e2f0:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e2f4:	a8 c6 00 10 	l.ori r6,r6,0x10
    e2f8:	d4 05 30 00 	l.sw 0x0(r5),r6
    e2fc:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e300:	a8 c6 00 20 	l.ori r6,r6,0x20
    e304:	d4 05 30 00 	l.sw 0x0(r5),r6
    e308:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e30c:	a4 a5 00 03 	l.andi r5,r5,0x3
    e310:	bc 25 00 03 	l.sfnei r5,0x3
    e314:	13 ff ff fd 	l.bf e308 <phy_write_training_standby+0x68>
    e318:	15 00 00 00 	l.nop 0x0
    e31c:	85 64 00 00 	l.lwz r11,0x0(r4)
    e320:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    e324:	a5 6b 00 0c 	l.andi r11,r11,0xc
    e328:	a4 c6 00 01 	l.andi r6,r6,0x1
    e32c:	e1 60 58 02 	l.sub r11,r0,r11
    e330:	bc 26 00 00 	l.sfnei r6,0x0
    e334:	10 00 00 0f 	l.bf e370 <phy_write_training_standby+0xd0>
    e338:	b9 6b 00 5f 	l.srli r11,r11,0x1f
    e33c:	18 80 04 83 	l.movhi r4,0x483
    e340:	a8 84 0a e0 	l.ori r4,r4,0xae0
    e344:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e348:	a4 a5 00 03 	l.andi r5,r5,0x3
    e34c:	bc 25 00 03 	l.sfnei r5,0x3
    e350:	13 ff ff fd 	l.bf e344 <phy_write_training_standby+0xa4>
    e354:	15 00 00 00 	l.nop 0x0
    e358:	84 84 00 00 	l.lwz r4,0x0(r4)
    e35c:	a4 84 00 0c 	l.andi r4,r4,0xc
    e360:	bc 24 00 00 	l.sfnei r4,0x0
    e364:	0c 00 00 04 	l.bnf e374 <phy_write_training_standby+0xd4>
    e368:	18 80 04 83 	l.movhi r4,0x483
    e36c:	9d 60 00 01 	l.addi r11,r0,0x1
    e370:	18 80 04 83 	l.movhi r4,0x483
    e374:	a8 a4 08 f0 	l.ori r5,r4,0x8f0
    e378:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e37c:	a8 a4 08 f4 	l.ori r5,r4,0x8f4
    e380:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e384:	a8 a4 08 f8 	l.ori r5,r4,0x8f8
    e388:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e38c:	a8 a4 08 fc 	l.ori r5,r4,0x8fc
    e390:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e394:	a8 a4 09 00 	l.ori r5,r4,0x900
    e398:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e39c:	a8 a4 09 04 	l.ori r5,r4,0x904
    e3a0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e3a4:	a8 a4 09 08 	l.ori r5,r4,0x908
    e3a8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e3ac:	a8 a4 09 0c 	l.ori r5,r4,0x90c
    e3b0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e3b4:	a8 a4 09 10 	l.ori r5,r4,0x910
    e3b8:	a8 84 09 38 	l.ori r4,r4,0x938
    e3bc:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e3c0:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e3c4:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    e3c8:	84 e4 00 00 	l.lwz r7,0x0(r4)
    e3cc:	e0 a7 28 02 	l.sub r5,r7,r5
    e3d0:	bc 45 00 06 	l.sfgtui r5,0x6
    e3d4:	10 00 00 09 	l.bf e3f8 <phy_write_training_standby+0x158>
    e3d8:	18 40 04 83 	l.movhi r2,0x483
    e3dc:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    e3e0:	18 40 10 00 	l.movhi r2,0x1000
    e3e4:	e0 a5 10 03 	l.and r5,r5,r2
    e3e8:	bc 05 00 00 	l.sfeqi r5,0x0
    e3ec:	0c 00 00 03 	l.bnf e3f8 <phy_write_training_standby+0x158>
    e3f0:	18 40 04 83 	l.movhi r2,0x483
    e3f4:	9d 60 00 01 	l.addi r11,r0,0x1
    e3f8:	9c 84 00 04 	l.addi r4,r4,0x4
    e3fc:	a8 42 09 5c 	l.ori r2,r2,0x95c
    e400:	e4 24 10 00 	l.sfne r4,r2
    e404:	13 ff ff ef 	l.bf e3c0 <phy_write_training_standby+0x120>
    e408:	18 a0 04 83 	l.movhi r5,0x483
    e40c:	a8 e5 09 14 	l.ori r7,r5,0x914
    e410:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e414:	a8 e5 09 18 	l.ori r7,r5,0x918
    e418:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e41c:	a8 e5 09 1c 	l.ori r7,r5,0x91c
    e420:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e424:	a8 e5 09 20 	l.ori r7,r5,0x920
    e428:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e42c:	a8 e5 09 24 	l.ori r7,r5,0x924
    e430:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e434:	a8 e5 09 28 	l.ori r7,r5,0x928
    e438:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e43c:	a8 e5 09 2c 	l.ori r7,r5,0x92c
    e440:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e444:	a8 e5 09 30 	l.ori r7,r5,0x930
    e448:	a8 a5 09 34 	l.ori r5,r5,0x934
    e44c:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e450:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e454:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e458:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    e45c:	84 e4 00 00 	l.lwz r7,0x0(r4)
    e460:	e0 a7 28 02 	l.sub r5,r7,r5
    e464:	bc 45 00 06 	l.sfgtui r5,0x6
    e468:	10 00 00 09 	l.bf e48c <phy_write_training_standby+0x1ec>
    e46c:	18 40 04 83 	l.movhi r2,0x483
    e470:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    e474:	18 40 10 00 	l.movhi r2,0x1000
    e478:	e0 a5 10 03 	l.and r5,r5,r2
    e47c:	bc 05 00 00 	l.sfeqi r5,0x0
    e480:	0c 00 00 03 	l.bnf e48c <phy_write_training_standby+0x1ec>
    e484:	18 40 04 83 	l.movhi r2,0x483
    e488:	9d 60 00 01 	l.addi r11,r0,0x1
    e48c:	9c 84 00 04 	l.addi r4,r4,0x4
    e490:	a8 42 09 80 	l.ori r2,r2,0x980
    e494:	e4 24 10 00 	l.sfne r4,r2
    e498:	13 ff ff ef 	l.bf e454 <phy_write_training_standby+0x1b4>
    e49c:	bc 26 00 00 	l.sfnei r6,0x0
    e4a0:	10 00 00 4e 	l.bf e5d8 <phy_write_training_standby+0x338>
    e4a4:	18 a0 04 83 	l.movhi r5,0x483
    e4a8:	18 80 04 83 	l.movhi r4,0x483
    e4ac:	a8 a4 0a f0 	l.ori r5,r4,0xaf0
    e4b0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e4b4:	a8 a4 0a f4 	l.ori r5,r4,0xaf4
    e4b8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e4bc:	a8 a4 0a f8 	l.ori r5,r4,0xaf8
    e4c0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e4c4:	a8 a4 0a fc 	l.ori r5,r4,0xafc
    e4c8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e4cc:	a8 a4 0b 00 	l.ori r5,r4,0xb00
    e4d0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e4d4:	a8 a4 0b 04 	l.ori r5,r4,0xb04
    e4d8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e4dc:	a8 a4 0b 08 	l.ori r5,r4,0xb08
    e4e0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e4e4:	a8 a4 0b 0c 	l.ori r5,r4,0xb0c
    e4e8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e4ec:	a8 a4 0b 10 	l.ori r5,r4,0xb10
    e4f0:	a8 84 0b 38 	l.ori r4,r4,0xb38
    e4f4:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e4f8:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e4fc:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    e500:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e504:	e0 a6 28 02 	l.sub r5,r6,r5
    e508:	bc 45 00 06 	l.sfgtui r5,0x6
    e50c:	10 00 00 09 	l.bf e530 <phy_write_training_standby+0x290>
    e510:	18 40 04 83 	l.movhi r2,0x483
    e514:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    e518:	18 40 10 00 	l.movhi r2,0x1000
    e51c:	e0 a5 10 03 	l.and r5,r5,r2
    e520:	bc 05 00 00 	l.sfeqi r5,0x0
    e524:	0c 00 00 03 	l.bnf e530 <phy_write_training_standby+0x290>
    e528:	18 40 04 83 	l.movhi r2,0x483
    e52c:	9d 60 00 01 	l.addi r11,r0,0x1
    e530:	9c 84 00 04 	l.addi r4,r4,0x4
    e534:	a8 42 0b 5c 	l.ori r2,r2,0xb5c
    e538:	e4 24 10 00 	l.sfne r4,r2
    e53c:	13 ff ff ef 	l.bf e4f8 <phy_write_training_standby+0x258>
    e540:	18 a0 04 83 	l.movhi r5,0x483
    e544:	a8 c5 0b 14 	l.ori r6,r5,0xb14
    e548:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e54c:	a8 c5 0b 18 	l.ori r6,r5,0xb18
    e550:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e554:	a8 c5 0b 1c 	l.ori r6,r5,0xb1c
    e558:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e55c:	a8 c5 0b 20 	l.ori r6,r5,0xb20
    e560:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e564:	a8 c5 0b 24 	l.ori r6,r5,0xb24
    e568:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e56c:	a8 c5 0b 28 	l.ori r6,r5,0xb28
    e570:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e574:	a8 c5 0b 2c 	l.ori r6,r5,0xb2c
    e578:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e57c:	a8 c5 0b 30 	l.ori r6,r5,0xb30
    e580:	a8 a5 0b 34 	l.ori r5,r5,0xb34
    e584:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e588:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e58c:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e590:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    e594:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e598:	e0 a6 28 02 	l.sub r5,r6,r5
    e59c:	bc 45 00 06 	l.sfgtui r5,0x6
    e5a0:	10 00 00 09 	l.bf e5c4 <phy_write_training_standby+0x324>
    e5a4:	18 40 04 83 	l.movhi r2,0x483
    e5a8:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    e5ac:	18 40 10 00 	l.movhi r2,0x1000
    e5b0:	e0 a5 10 03 	l.and r5,r5,r2
    e5b4:	bc 05 00 00 	l.sfeqi r5,0x0
    e5b8:	0c 00 00 03 	l.bnf e5c4 <phy_write_training_standby+0x324>
    e5bc:	18 40 04 83 	l.movhi r2,0x483
    e5c0:	9d 60 00 01 	l.addi r11,r0,0x1
    e5c4:	9c 84 00 04 	l.addi r4,r4,0x4
    e5c8:	a8 42 0b 80 	l.ori r2,r2,0xb80
    e5cc:	e4 24 10 00 	l.sfne r4,r2
    e5d0:	13 ff ff ef 	l.bf e58c <phy_write_training_standby+0x2ec>
    e5d4:	18 a0 04 83 	l.movhi r5,0x483
    e5d8:	9c 40 ff 9f 	l.addi r2,r0,0xffffff9f
    e5dc:	a8 85 01 90 	l.ori r4,r5,0x190
    e5e0:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e5e4:	e0 c6 10 03 	l.and r6,r6,r2
    e5e8:	d4 04 30 00 	l.sw 0x0(r4),r6
    e5ec:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    e5f0:	a4 c6 10 00 	l.andi r6,r6,0x1000
    e5f4:	bc 06 00 00 	l.sfeqi r6,0x0
    e5f8:	10 00 00 2f 	l.bf e6b4 <phy_write_training_standby+0x414>
    e5fc:	a8 c5 01 98 	l.ori r6,r5,0x198
    e600:	9c 40 ff f3 	l.addi r2,r0,0xfffffff3
    e604:	84 e6 00 00 	l.lwz r7,0x0(r6)
    e608:	a8 a5 08 e0 	l.ori r5,r5,0x8e0
    e60c:	e0 e7 10 03 	l.and r7,r7,r2
    e610:	a8 e7 00 04 	l.ori r7,r7,0x4
    e614:	d4 06 38 00 	l.sw 0x0(r6),r7
    e618:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e61c:	a8 c6 00 10 	l.ori r6,r6,0x10
    e620:	d4 04 30 00 	l.sw 0x0(r4),r6
    e624:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e628:	a8 c6 00 20 	l.ori r6,r6,0x20
    e62c:	d4 04 30 00 	l.sw 0x0(r4),r6
    e630:	84 85 00 00 	l.lwz r4,0x0(r5)
    e634:	a4 84 00 03 	l.andi r4,r4,0x3
    e638:	bc 24 00 03 	l.sfnei r4,0x3
    e63c:	13 ff ff fd 	l.bf e630 <phy_write_training_standby+0x390>
    e640:	15 00 00 00 	l.nop 0x0
    e644:	84 85 00 00 	l.lwz r4,0x0(r5)
    e648:	a4 84 00 0c 	l.andi r4,r4,0xc
    e64c:	bc 24 00 00 	l.sfnei r4,0x0
    e650:	0c 00 00 03 	l.bnf e65c <phy_write_training_standby+0x3bc>
    e654:	15 00 00 00 	l.nop 0x0
    e658:	9d 60 00 01 	l.addi r11,r0,0x1
    e65c:	84 63 00 1c 	l.lwz r3,0x1c(r3)
    e660:	a4 63 00 01 	l.andi r3,r3,0x1
    e664:	bc 23 00 00 	l.sfnei r3,0x0
    e668:	10 00 00 0e 	l.bf e6a0 <phy_write_training_standby+0x400>
    e66c:	18 60 04 83 	l.movhi r3,0x483
    e670:	a8 63 0a e0 	l.ori r3,r3,0xae0
    e674:	84 83 00 00 	l.lwz r4,0x0(r3)
    e678:	a4 84 00 03 	l.andi r4,r4,0x3
    e67c:	bc 24 00 03 	l.sfnei r4,0x3
    e680:	13 ff ff fd 	l.bf e674 <phy_write_training_standby+0x3d4>
    e684:	15 00 00 00 	l.nop 0x0
    e688:	84 63 00 00 	l.lwz r3,0x0(r3)
    e68c:	a4 63 00 0c 	l.andi r3,r3,0xc
    e690:	bc 23 00 00 	l.sfnei r3,0x0
    e694:	0c 00 00 03 	l.bnf e6a0 <phy_write_training_standby+0x400>
    e698:	18 60 04 83 	l.movhi r3,0x483
    e69c:	9d 60 00 01 	l.addi r11,r0,0x1
    e6a0:	9c 40 ff 9f 	l.addi r2,r0,0xffffff9f
    e6a4:	a8 63 01 90 	l.ori r3,r3,0x190
    e6a8:	84 83 00 00 	l.lwz r4,0x0(r3)
    e6ac:	e0 84 10 03 	l.and r4,r4,r2
    e6b0:	d4 03 20 00 	l.sw 0x0(r3),r4
    e6b4:	18 60 04 83 	l.movhi r3,0x483
    e6b8:	9c 40 ff f3 	l.addi r2,r0,0xfffffff3
    e6bc:	a8 63 01 98 	l.ori r3,r3,0x198
    e6c0:	ad 6b 00 01 	l.xori r11,r11,0x1
    e6c4:	84 83 00 00 	l.lwz r4,0x0(r3)
    e6c8:	e0 84 10 03 	l.and r4,r4,r2
    e6cc:	d4 03 20 00 	l.sw 0x0(r3),r4
    e6d0:	9c 21 00 04 	l.addi r1,r1,0x4
    e6d4:	44 00 48 00 	l.jr r9
    e6d8:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000e6dc <mctl_com_set_controller_refresh_standby.clone.2>:
    e6dc:	18 80 04 82 	l.movhi r4,0x482
    e6e0:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    e6e4:	a8 84 00 60 	l.ori r4,r4,0x60
    e6e8:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    e6ec:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e6f0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    e6f4:	e0 a5 10 03 	l.and r5,r5,r2
    e6f8:	e0 63 28 04 	l.or r3,r3,r5
    e6fc:	d4 04 18 00 	l.sw 0x0(r4),r3
    e700:	9c 21 00 04 	l.addi r1,r1,0x4
    e704:	44 00 48 00 	l.jr r9
    e708:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000e70c <dramc_data_cal_standby.clone.13>:
    e70c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    e710:	18 60 40 00 	l.movhi r3,0x4000
    e714:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    e718:	9d 60 00 00 	l.addi r11,r0,0x0
    e71c:	18 40 40 00 	l.movhi r2,0x4000
    e720:	84 83 00 00 	l.lwz r4,0x0(r3)
    e724:	a8 42 01 00 	l.ori r2,r2,0x100
    e728:	9c 63 00 04 	l.addi r3,r3,0x4
    e72c:	e4 23 10 00 	l.sfne r3,r2
    e730:	13 ff ff fb 	l.bf e71c <dramc_data_cal_standby.clone.13+0x10>
    e734:	e1 6b 20 00 	l.add r11,r11,r4
    e738:	9c 21 00 04 	l.addi r1,r1,0x4
    e73c:	44 00 48 00 	l.jr r9
    e740:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000e744 <mctl_phy_dx0_bit_delay_compensation_standby>:
    e744:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    e748:	84 83 00 6c 	l.lwz r4,0x6c(r3)
    e74c:	18 40 01 00 	l.movhi r2,0x100
    e750:	e0 84 10 03 	l.and r4,r4,r2
    e754:	bc 04 00 00 	l.sfeqi r4,0x0
    e758:	10 00 00 42 	l.bf e860 <mctl_phy_dx0_bit_delay_compensation_standby+0x11c>
    e75c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    e760:	18 80 04 83 	l.movhi r4,0x483
    e764:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    e768:	a8 a4 00 60 	l.ori r5,r4,0x60
    e76c:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e770:	e0 c6 10 03 	l.and r6,r6,r2
    e774:	9c 40 ff ef 	l.addi r2,r0,0xffffffef
    e778:	d4 05 30 00 	l.sw 0x0(r5),r6
    e77c:	a8 a4 00 08 	l.ori r5,r4,0x8
    e780:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e784:	a8 c6 00 08 	l.ori r6,r6,0x8
    e788:	d4 05 30 00 	l.sw 0x0(r5),r6
    e78c:	a8 a4 01 90 	l.ori r5,r4,0x190
    e790:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e794:	e0 c6 10 03 	l.and r6,r6,r2
    e798:	d4 05 30 00 	l.sw 0x0(r5),r6
    e79c:	84 a3 00 04 	l.lwz r5,0x4(r3)
    e7a0:	bc 25 00 08 	l.sfnei r5,0x8
    e7a4:	10 00 00 06 	l.bf e7bc <mctl_phy_dx0_bit_delay_compensation_standby+0x78>
    e7a8:	a8 84 00 04 	l.ori r4,r4,0x4
    e7ac:	9c 40 ff 7f 	l.addi r2,r0,0xffffff7f
    e7b0:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e7b4:	e0 a5 10 03 	l.and r5,r5,r2
    e7b8:	d4 04 28 00 	l.sw 0x0(r4),r5
    e7bc:	84 c3 00 5c 	l.lwz r6,0x5c(r3)
    e7c0:	18 80 04 83 	l.movhi r4,0x483
    e7c4:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e7c8:	a8 a4 04 8c 	l.ori r5,r4,0x48c
    e7cc:	d4 05 30 00 	l.sw 0x0(r5),r6
    e7d0:	a8 a4 04 94 	l.ori r5,r4,0x494
    e7d4:	84 c3 00 5c 	l.lwz r6,0x5c(r3)
    e7d8:	b8 c6 00 48 	l.srli r6,r6,0x8
    e7dc:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e7e0:	d4 05 30 00 	l.sw 0x0(r5),r6
    e7e4:	a8 a4 04 9c 	l.ori r5,r4,0x49c
    e7e8:	94 c3 00 5c 	l.lhz r6,0x5c(r3)
    e7ec:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e7f0:	d4 05 30 00 	l.sw 0x0(r5),r6
    e7f4:	a8 a4 04 a4 	l.ori r5,r4,0x4a4
    e7f8:	8c c3 00 5c 	l.lbz r6,0x5c(r3)
    e7fc:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e800:	d4 05 30 00 	l.sw 0x0(r5),r6
    e804:	a8 c4 04 ac 	l.ori r6,r4,0x4ac
    e808:	84 a3 00 60 	l.lwz r5,0x60(r3)
    e80c:	a4 a5 00 3f 	l.andi r5,r5,0x3f
    e810:	d4 06 28 00 	l.sw 0x0(r6),r5
    e814:	a8 c4 04 84 	l.ori r6,r4,0x484
    e818:	d4 06 28 00 	l.sw 0x0(r6),r5
    e81c:	a8 a4 04 b4 	l.ori r5,r4,0x4b4
    e820:	84 c3 00 60 	l.lwz r6,0x60(r3)
    e824:	b8 c6 00 48 	l.srli r6,r6,0x8
    e828:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e82c:	d4 05 30 00 	l.sw 0x0(r5),r6
    e830:	a8 a4 04 bc 	l.ori r5,r4,0x4bc
    e834:	94 c3 00 60 	l.lhz r6,0x60(r3)
    e838:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e83c:	d4 05 30 00 	l.sw 0x0(r5),r6
    e840:	8c a3 00 60 	l.lbz r5,0x60(r3)
    e844:	a8 64 04 c4 	l.ori r3,r4,0x4c4
    e848:	a4 a5 00 3f 	l.andi r5,r5,0x3f
    e84c:	a8 84 00 60 	l.ori r4,r4,0x60
    e850:	d4 03 28 00 	l.sw 0x0(r3),r5
    e854:	84 64 00 00 	l.lwz r3,0x0(r4)
    e858:	a8 63 00 01 	l.ori r3,r3,0x1
    e85c:	d4 04 18 00 	l.sw 0x0(r4),r3
    e860:	9c 21 00 04 	l.addi r1,r1,0x4
    e864:	44 00 48 00 	l.jr r9
    e868:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000e86c <mctl_core_init_standby>:
    e86c:	d7 e1 87 dc 	l.sw 0xffffffdc(r1),r16
    e870:	aa 03 00 00 	l.ori r16,r3,0x0
    e874:	18 60 03 00 	l.movhi r3,0x300
    e878:	d7 e1 17 d4 	l.sw 0xffffffd4(r1),r2
    e87c:	18 a0 7f ff 	l.movhi r5,0x7fff
    e880:	a8 43 15 40 	l.ori r2,r3,0x1540
    e884:	a8 a5 ff ff 	l.ori r5,r5,0xffff
    e888:	84 82 00 00 	l.lwz r4,0x0(r2)
    e88c:	d7 e1 77 d8 	l.sw 0xffffffd8(r1),r14
    e890:	e0 84 28 03 	l.and r4,r4,r5
    e894:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    e898:	d7 e1 97 e0 	l.sw 0xffffffe0(r1),r18
    e89c:	d7 e1 a7 e4 	l.sw 0xffffffe4(r1),r20
    e8a0:	d7 e1 b7 e8 	l.sw 0xffffffe8(r1),r22
    e8a4:	d7 e1 c7 ec 	l.sw 0xffffffec(r1),r24
    e8a8:	d7 e1 d7 f0 	l.sw 0xfffffff0(r1),r26
    e8ac:	d7 e1 e7 f4 	l.sw 0xfffffff4(r1),r28
    e8b0:	d7 e1 f7 f8 	l.sw 0xfffffff8(r1),r30
    e8b4:	d4 02 20 00 	l.sw 0x0(r2),r4
    e8b8:	18 c0 bf ff 	l.movhi r6,0xbfff
    e8bc:	84 82 00 00 	l.lwz r4,0x0(r2)
    e8c0:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    e8c4:	9c e0 ff fe 	l.addi r7,r0,0xfffffffe
    e8c8:	e0 84 30 03 	l.and r4,r4,r6
    e8cc:	19 00 ff fe 	l.movhi r8,0xfffe
    e8d0:	d4 02 20 00 	l.sw 0x0(r2),r4
    e8d4:	a8 43 18 0c 	l.ori r2,r3,0x180c
    e8d8:	a9 08 ff ff 	l.ori r8,r8,0xffff
    e8dc:	84 82 00 00 	l.lwz r4,0x0(r2)
    e8e0:	9c 21 ff 88 	l.addi r1,r1,0xffffff88
    e8e4:	e0 84 38 03 	l.and r4,r4,r7
    e8e8:	18 e0 80 00 	l.movhi r7,0x8000
    e8ec:	d4 02 20 00 	l.sw 0x0(r2),r4
    e8f0:	84 82 00 00 	l.lwz r4,0x0(r2)
    e8f4:	e0 84 40 03 	l.and r4,r4,r8
    e8f8:	d4 02 20 00 	l.sw 0x0(r2),r4
    e8fc:	a8 43 10 10 	l.ori r2,r3,0x1010
    e900:	a8 63 18 00 	l.ori r3,r3,0x1800
    e904:	84 82 00 00 	l.lwz r4,0x0(r2)
    e908:	e0 84 28 03 	l.and r4,r4,r5
    e90c:	d4 02 20 00 	l.sw 0x0(r2),r4
    e910:	84 83 00 00 	l.lwz r4,0x0(r3)
    e914:	e0 84 30 03 	l.and r4,r4,r6
    e918:	18 c0 ff ff 	l.movhi r6,0xffff
    e91c:	d4 03 20 00 	l.sw 0x0(r3),r4
    e920:	a8 c6 00 fc 	l.ori r6,r6,0xfc
    e924:	85 c2 00 00 	l.lwz r14,0x0(r2)
    e928:	84 70 00 00 	l.lwz r3,0x0(r16)
    e92c:	e1 ce 30 03 	l.and r14,r14,r6
    e930:	e0 63 18 00 	l.add r3,r3,r3
    e934:	9c 80 00 18 	l.addi r4,r0,0x18
    e938:	07 ff f8 3c 	l.jal ca28 <__udivsi3>
    e93c:	e1 ce 38 04 	l.or r14,r14,r7
    e940:	9d 6b ff ff 	l.addi r11,r11,0xffffffff
    e944:	19 00 60 00 	l.movhi r8,0x6000
    e948:	b9 6b 00 08 	l.slli r11,r11,0x8
    e94c:	e0 6e 58 04 	l.or r3,r14,r11
    e950:	19 60 20 00 	l.movhi r11,0x2000
    e954:	e0 83 40 04 	l.or r4,r3,r8
    e958:	d4 02 18 00 	l.sw 0x0(r2),r3
    e95c:	e0 63 58 04 	l.or r3,r3,r11
    e960:	d4 02 20 00 	l.sw 0x0(r2),r4
    e964:	d4 02 18 00 	l.sw 0x0(r2),r3
    e968:	84 82 00 00 	l.lwz r4,0x0(r2)
    e96c:	18 a0 10 00 	l.movhi r5,0x1000
    e970:	e0 84 28 03 	l.and r4,r4,r5
    e974:	bc 04 00 00 	l.sfeqi r4,0x0
    e978:	13 ff ff fc 	l.bf e968 <mctl_core_init_standby+0xfc>
    e97c:	18 60 03 00 	l.movhi r3,0x300
    e980:	a8 43 18 00 	l.ori r2,r3,0x1800
    e984:	18 c0 fc ff 	l.movhi r6,0xfcff
    e988:	84 82 00 00 	l.lwz r4,0x0(r2)
    e98c:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    e990:	9c e0 ff e0 	l.addi r7,r0,0xffffffe0
    e994:	e0 84 30 03 	l.and r4,r4,r6
    e998:	19 00 08 00 	l.movhi r8,0x800
    e99c:	d4 02 20 00 	l.sw 0x0(r2),r4
    e9a0:	a9 08 00 03 	l.ori r8,r8,0x3
    e9a4:	84 82 00 00 	l.lwz r4,0x0(r2)
    e9a8:	19 60 00 01 	l.movhi r11,0x1
    e9ac:	e0 84 38 03 	l.and r4,r4,r7
    e9b0:	18 c0 80 00 	l.movhi r6,0x8000
    e9b4:	a8 a4 00 03 	l.ori r5,r4,0x3
    e9b8:	e0 84 40 04 	l.or r4,r4,r8
    e9bc:	d4 02 28 00 	l.sw 0x0(r2),r5
    e9c0:	d4 02 20 00 	l.sw 0x0(r2),r4
    e9c4:	a8 83 18 0c 	l.ori r4,r3,0x180c
    e9c8:	a8 63 15 40 	l.ori r3,r3,0x1540
    e9cc:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e9d0:	18 e0 fe ff 	l.movhi r7,0xfeff
    e9d4:	e0 a5 58 04 	l.or r5,r5,r11
    e9d8:	a8 e7 ff ff 	l.ori r7,r7,0xffff
    e9dc:	d4 04 28 00 	l.sw 0x0(r4),r5
    e9e0:	19 00 02 00 	l.movhi r8,0x200
    e9e4:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e9e8:	a9 08 02 00 	l.ori r8,r8,0x200
    e9ec:	a8 a5 00 01 	l.ori r5,r5,0x1
    e9f0:	d4 04 28 00 	l.sw 0x0(r4),r5
    e9f4:	18 a0 40 00 	l.movhi r5,0x4000
    e9f8:	84 83 00 00 	l.lwz r4,0x0(r3)
    e9fc:	e0 84 28 04 	l.or r4,r4,r5
    ea00:	d4 03 20 00 	l.sw 0x0(r3),r4
    ea04:	84 83 00 00 	l.lwz r4,0x0(r3)
    ea08:	e0 84 30 04 	l.or r4,r4,r6
    ea0c:	d4 03 20 00 	l.sw 0x0(r3),r4
    ea10:	84 62 00 00 	l.lwz r3,0x0(r2)
    ea14:	e0 63 28 04 	l.or r3,r3,r5
    ea18:	d4 02 18 00 	l.sw 0x0(r2),r3
    ea1c:	18 40 04 81 	l.movhi r2,0x481
    ea20:	a8 62 00 08 	l.ori r3,r2,0x8
    ea24:	a8 42 00 20 	l.ori r2,r2,0x20
    ea28:	84 83 00 00 	l.lwz r4,0x0(r3)
    ea2c:	e0 84 38 03 	l.and r4,r4,r7
    ea30:	e0 84 40 04 	l.or r4,r4,r8
    ea34:	d4 03 20 00 	l.sw 0x0(r3),r4
    ea38:	84 62 00 00 	l.lwz r3,0x0(r2)
    ea3c:	a8 63 80 00 	l.ori r3,r3,0x8000
    ea40:	d4 02 18 00 	l.sw 0x0(r2),r3
    ea44:	84 50 00 04 	l.lwz r2,0x4(r16)
    ea48:	bc 22 00 08 	l.sfnei r2,0x8
    ea4c:	10 00 00 08 	l.bf ea6c <mctl_core_init_standby+0x200>
    ea50:	18 40 04 82 	l.movhi r2,0x482
    ea54:	18 40 03 10 	l.movhi r2,0x310
    ea58:	a8 42 2e a8 	l.ori r2,r2,0x2ea8
    ea5c:	84 62 00 00 	l.lwz r3,0x0(r2)
    ea60:	a8 63 00 01 	l.ori r3,r3,0x1
    ea64:	d4 02 18 00 	l.sw 0x0(r2),r3
    ea68:	18 40 04 82 	l.movhi r2,0x482
    ea6c:	19 60 ff ff 	l.movhi r11,0xffff
    ea70:	a8 62 02 50 	l.ori r3,r2,0x250
    ea74:	a9 6b 00 ff 	l.ori r11,r11,0xff
    ea78:	84 83 00 00 	l.lwz r4,0x0(r3)
    ea7c:	a8 42 00 38 	l.ori r2,r2,0x38
    ea80:	e0 84 58 03 	l.and r4,r4,r11
    ea84:	a8 84 30 00 	l.ori r4,r4,0x3000
    ea88:	d4 03 20 00 	l.sw 0x0(r3),r4
    ea8c:	9c 60 00 00 	l.addi r3,r0,0x0
    ea90:	d4 02 18 00 	l.sw 0x0(r2),r3
    ea94:	84 50 00 04 	l.lwz r2,0x4(r16)
    ea98:	a4 42 00 0f 	l.andi r2,r2,0xf
    ea9c:	9c 42 ff fd 	l.addi r2,r2,0xfffffffd
    eaa0:	bc 42 00 05 	l.sfgtui r2,0x5
    eaa4:	10 00 00 07 	l.bf eac0 <mctl_core_init_standby+0x254>
    eaa8:	18 80 00 01 	l.movhi r4,0x1
    eaac:	b8 42 00 02 	l.slli r2,r2,0x2
    eab0:	a8 84 30 2c 	l.ori r4,r4,0x302c
    eab4:	e0 42 20 00 	l.add r2,r2,r4
    eab8:	00 00 00 04 	l.j eac8 <mctl_core_init_standby+0x25c>
    eabc:	84 42 00 00 	l.lwz r2,0x0(r2)
    eac0:	18 40 00 04 	l.movhi r2,0x4
    eac4:	a8 42 00 01 	l.ori r2,r2,0x1
    eac8:	84 70 00 1c 	l.lwz r3,0x1c(r16)
    eacc:	18 a0 c0 00 	l.movhi r5,0xc000
    ead0:	a4 83 00 01 	l.andi r4,r3,0x1
    ead4:	b8 63 00 4b 	l.srli r3,r3,0xb
    ead8:	b8 84 00 0c 	l.slli r4,r4,0xc
    eadc:	a4 63 00 06 	l.andi r3,r3,0x6
    eae0:	e0 84 28 04 	l.or r4,r4,r5
    eae4:	9c 63 00 01 	l.addi r3,r3,0x1
    eae8:	b8 63 00 18 	l.slli r3,r3,0x18
    eaec:	e0 64 18 04 	l.or r3,r4,r3
    eaf0:	e0 63 10 04 	l.or r3,r3,r2
    eaf4:	18 40 04 82 	l.movhi r2,0x482
    eaf8:	d4 02 18 00 	l.sw 0x0(r2),r3
    eafc:	84 70 00 04 	l.lwz r3,0x4(r16)
    eb00:	bc 23 00 04 	l.sfnei r3,0x4
    eb04:	10 00 00 08 	l.bf eb24 <mctl_core_init_standby+0x2b8>
    eb08:	15 00 00 00 	l.nop 0x0
    eb0c:	84 70 00 78 	l.lwz r3,0x78(r16)
    eb10:	84 82 00 00 	l.lwz r4,0x0(r2)
    eb14:	b8 63 00 5e 	l.srli r3,r3,0x1e
    eb18:	a4 63 00 01 	l.andi r3,r3,0x1
    eb1c:	e0 63 20 04 	l.or r3,r3,r4
    eb20:	d4 02 18 00 	l.sw 0x0(r2),r3
    eb24:	84 50 00 04 	l.lwz r2,0x4(r16)
    eb28:	9c 42 ff fd 	l.addi r2,r2,0xfffffffd
    eb2c:	bc 42 00 01 	l.sfgtui r2,0x1
    eb30:	10 00 00 13 	l.bf eb7c <mctl_core_init_standby+0x310>
    eb34:	18 40 04 82 	l.movhi r2,0x482
    eb38:	84 42 00 00 	l.lwz r2,0x0(r2)
    eb3c:	a4 62 08 00 	l.andi r3,r2,0x800
    eb40:	bc 03 00 00 	l.sfeqi r3,0x0
    eb44:	10 00 00 04 	l.bf eb54 <mctl_core_init_standby+0x2e8>
    eb48:	9c c0 fb ff 	l.addi r6,r0,0xfffffbff
    eb4c:	00 00 00 0a 	l.j eb74 <mctl_core_init_standby+0x308>
    eb50:	e0 42 30 03 	l.and r2,r2,r6
    eb54:	84 70 00 78 	l.lwz r3,0x78(r16)
    eb58:	a4 63 00 20 	l.andi r3,r3,0x20
    eb5c:	bc 03 00 00 	l.sfeqi r3,0x0
    eb60:	10 00 00 04 	l.bf eb70 <mctl_core_init_standby+0x304>
    eb64:	9c e0 fb ff 	l.addi r7,r0,0xfffffbff
    eb68:	00 00 00 03 	l.j eb74 <mctl_core_init_standby+0x308>
    eb6c:	e0 42 38 03 	l.and r2,r2,r7
    eb70:	a8 42 04 00 	l.ori r2,r2,0x400
    eb74:	18 60 04 82 	l.movhi r3,0x482
    eb78:	d4 03 10 00 	l.sw 0x0(r3),r2
    eb7c:	84 70 00 1c 	l.lwz r3,0x1c(r16)
    eb80:	a4 63 10 00 	l.andi r3,r3,0x1000
    eb84:	bc 03 00 00 	l.sfeqi r3,0x0
    eb88:	10 00 00 03 	l.bf eb94 <mctl_core_init_standby+0x328>
    eb8c:	9c 40 02 01 	l.addi r2,r0,0x201
    eb90:	9c 40 03 03 	l.addi r2,r0,0x303
    eb94:	18 60 04 82 	l.movhi r3,0x482
    eb98:	a8 63 02 44 	l.ori r3,r3,0x244
    eb9c:	d4 03 10 00 	l.sw 0x0(r3),r2
    eba0:	84 50 00 04 	l.lwz r2,0x4(r16)
    eba4:	a4 42 00 07 	l.andi r2,r2,0x7
    eba8:	bc 02 00 04 	l.sfeqi r2,0x4
    ebac:	10 00 00 08 	l.bf ebcc <mctl_core_init_standby+0x360>
    ebb0:	bc 02 00 07 	l.sfeqi r2,0x7
    ebb4:	10 00 00 11 	l.bf ebf8 <mctl_core_init_standby+0x38c>
    ebb8:	bc 02 00 03 	l.sfeqi r2,0x3
    ebbc:	0c 00 00 1f 	l.bnf ec38 <mctl_core_init_standby+0x3cc>
    ebc0:	19 60 04 00 	l.movhi r11,0x400
    ebc4:	00 00 00 1d 	l.j ec38 <mctl_core_init_standby+0x3cc>
    ebc8:	19 60 06 00 	l.movhi r11,0x600
    ebcc:	84 50 00 30 	l.lwz r2,0x30(r16)
    ebd0:	19 00 00 07 	l.movhi r8,0x7
    ebd4:	b9 62 00 4c 	l.srli r11,r2,0xc
    ebd8:	b8 42 00 0a 	l.slli r2,r2,0xa
    ebdc:	a5 6b 00 01 	l.andi r11,r11,0x1
    ebe0:	e0 42 40 03 	l.and r2,r2,r8
    ebe4:	9d 6b 00 06 	l.addi r11,r11,0x6
    ebe8:	b9 6b 00 18 	l.slli r11,r11,0x18
    ebec:	a9 6b 04 00 	l.ori r11,r11,0x400
    ebf0:	00 00 00 13 	l.j ec3c <mctl_core_init_standby+0x3d0>
    ebf4:	e1 6b 10 04 	l.or r11,r11,r2
    ebf8:	84 50 00 00 	l.lwz r2,0x0(r16)
    ebfc:	9c 80 07 d0 	l.addi r4,r0,0x7d0
    ec00:	b8 62 00 03 	l.slli r3,r2,0x3
    ec04:	07 ff f7 c8 	l.jal cb24 <__divsi3>
    ec08:	e0 63 10 02 	l.sub r3,r3,r2
    ec0c:	9c 8b 00 07 	l.addi r4,r11,0x7
    ec10:	9c 60 00 04 	l.addi r3,r0,0x4
    ec14:	b8 84 00 18 	l.slli r4,r4,0x18
    ec18:	bc 42 01 8f 	l.sfgtui r2,0x18f
    ec1c:	10 00 00 03 	l.bf ec28 <mctl_core_init_standby+0x3bc>
    ec20:	a8 84 04 00 	l.ori r4,r4,0x400
    ec24:	9c 60 00 03 	l.addi r3,r0,0x3
    ec28:	e1 63 58 02 	l.sub r11,r3,r11
    ec2c:	b9 6b 00 10 	l.slli r11,r11,0x10
    ec30:	00 00 00 03 	l.j ec3c <mctl_core_init_standby+0x3d0>
    ec34:	e1 6b 20 04 	l.or r11,r11,r4
    ec38:	a9 6b 04 00 	l.ori r11,r11,0x400
    ec3c:	18 40 04 82 	l.movhi r2,0x482
    ec40:	a8 62 02 40 	l.ori r3,r2,0x240
    ec44:	d4 03 58 00 	l.sw 0x0(r3),r11
    ec48:	a8 62 22 40 	l.ori r3,r2,0x2240
    ec4c:	d4 03 58 00 	l.sw 0x0(r3),r11
    ec50:	a8 62 32 40 	l.ori r3,r2,0x3240
    ec54:	a8 42 42 40 	l.ori r2,r2,0x4240
    ec58:	d4 03 58 00 	l.sw 0x0(r3),r11
    ec5c:	d4 02 58 00 	l.sw 0x0(r2),r11
    ec60:	84 70 00 18 	l.lwz r3,0x18(r16)
    ec64:	b8 c3 00 44 	l.srli r6,r3,0x4
    ec68:	b9 83 00 4c 	l.srli r12,r3,0xc
    ec6c:	b8 43 00 4e 	l.srli r2,r3,0xe
    ec70:	a4 83 00 0f 	l.andi r4,r3,0xf
    ec74:	84 70 00 1c 	l.lwz r3,0x1c(r16)
    ec78:	a4 c6 00 ff 	l.andi r6,r6,0xff
    ec7c:	a4 63 00 0f 	l.andi r3,r3,0xf
    ec80:	a5 8c 00 03 	l.andi r12,r12,0x3
    ec84:	bc 03 00 00 	l.sfeqi r3,0x0
    ec88:	10 00 00 03 	l.bf ec94 <mctl_core_init_standby+0x428>
    ec8c:	a4 42 00 03 	l.andi r2,r2,0x3
    ec90:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    ec94:	b8 e2 00 08 	l.slli r7,r2,0x8
    ec98:	b9 02 00 10 	l.slli r8,r2,0x10
    ec9c:	b8 62 00 18 	l.slli r3,r2,0x18
    eca0:	18 a0 04 82 	l.movhi r5,0x482
    eca4:	e1 68 38 04 	l.or r11,r8,r7
    eca8:	a9 a5 02 08 	l.ori r13,r5,0x208
    ecac:	e1 cb 18 04 	l.or r14,r11,r3
    ecb0:	bc 04 00 09 	l.sfeqi r4,0x9
    ecb4:	d4 0d 70 00 	l.sw 0x0(r13),r14
    ecb8:	10 00 00 14 	l.bf ed08 <mctl_core_init_standby+0x49c>
    ecbc:	bc 44 00 09 	l.sfgtui r4,0x9
    ecc0:	10 00 00 07 	l.bf ecdc <mctl_core_init_standby+0x470>
    ecc4:	bc 04 00 0a 	l.sfeqi r4,0xa
    ecc8:	bc 04 00 08 	l.sfeqi r4,0x8
    eccc:	0c 00 00 26 	l.bnf ed64 <mctl_core_init_standby+0x4f8>
    ecd0:	19 60 1f 1f 	l.movhi r11,0x1f1f
    ecd4:	00 00 00 08 	l.j ecf4 <mctl_core_init_standby+0x488>
    ecd8:	e0 62 58 04 	l.or r3,r2,r11
    ecdc:	10 00 00 16 	l.bf ed34 <mctl_core_init_standby+0x4c8>
    ece0:	bc 04 00 0b 	l.sfeqi r4,0xb
    ece4:	0c 00 00 21 	l.bnf ed68 <mctl_core_init_standby+0x4fc>
    ece8:	e0 e7 10 04 	l.or r7,r7,r2
    ecec:	00 00 00 18 	l.j ed4c <mctl_core_init_standby+0x4e0>
    ecf0:	e1 6b 10 04 	l.or r11,r11,r2
    ecf4:	e0 e3 38 04 	l.or r7,r3,r7
    ecf8:	a8 65 02 0c 	l.ori r3,r5,0x20c
    ecfc:	d4 03 38 00 	l.sw 0x0(r3),r7
    ed00:	00 00 00 09 	l.j ed24 <mctl_core_init_standby+0x4b8>
    ed04:	a8 a5 02 10 	l.ori r5,r5,0x210
    ed08:	19 60 1f 00 	l.movhi r11,0x1f00
    ed0c:	e0 62 58 04 	l.or r3,r2,r11
    ed10:	a9 65 02 0c 	l.ori r11,r5,0x20c
    ed14:	e0 e3 38 04 	l.or r7,r3,r7
    ed18:	e1 07 40 04 	l.or r8,r7,r8
    ed1c:	d4 0b 40 00 	l.sw 0x0(r11),r8
    ed20:	a8 a5 02 10 	l.ori r5,r5,0x210
    ed24:	9c 60 1f 1f 	l.addi r3,r0,0x1f1f
    ed28:	d4 05 18 00 	l.sw 0x0(r5),r3
    ed2c:	00 00 00 17 	l.j ed88 <mctl_core_init_standby+0x51c>
    ed30:	9c 60 01 01 	l.addi r3,r0,0x101
    ed34:	e1 6b 10 04 	l.or r11,r11,r2
    ed38:	a8 e5 02 0c 	l.ori r7,r5,0x20c
    ed3c:	e0 6b 18 04 	l.or r3,r11,r3
    ed40:	d4 07 18 00 	l.sw 0x0(r7),r3
    ed44:	03 ff ff f8 	l.j ed24 <mctl_core_init_standby+0x4b8>
    ed48:	a8 a5 02 10 	l.ori r5,r5,0x210
    ed4c:	a8 e5 02 0c 	l.ori r7,r5,0x20c
    ed50:	e0 6b 18 04 	l.or r3,r11,r3
    ed54:	a8 a5 02 10 	l.ori r5,r5,0x210
    ed58:	d4 07 18 00 	l.sw 0x0(r7),r3
    ed5c:	03 ff ff f3 	l.j ed28 <mctl_core_init_standby+0x4bc>
    ed60:	a8 62 1f 00 	l.ori r3,r2,0x1f00
    ed64:	e0 e7 10 04 	l.or r7,r7,r2
    ed68:	18 a0 04 82 	l.movhi r5,0x482
    ed6c:	e0 63 40 04 	l.or r3,r3,r8
    ed70:	a9 65 02 0c 	l.ori r11,r5,0x20c
    ed74:	e0 63 38 04 	l.or r3,r3,r7
    ed78:	a8 a5 02 10 	l.ori r5,r5,0x210
    ed7c:	d4 0b 18 00 	l.sw 0x0(r11),r3
    ed80:	d4 05 38 00 	l.sw 0x0(r5),r7
    ed84:	9c 60 01 01 	l.addi r3,r0,0x101
    ed88:	bc 02 00 02 	l.sfeqi r2,0x2
    ed8c:	10 00 00 05 	l.bf eda0 <mctl_core_init_standby+0x534>
    ed90:	bc 22 00 01 	l.sfnei r2,0x1
    ed94:	10 00 00 03 	l.bf eda0 <mctl_core_init_standby+0x534>
    ed98:	9c 60 3f 3f 	l.addi r3,r0,0x3f3f
    ed9c:	9c 60 3f 01 	l.addi r3,r0,0x3f01
    eda0:	18 a0 04 82 	l.movhi r5,0x482
    eda4:	bc 2c 00 03 	l.sfnei r12,0x3
    eda8:	a8 e5 02 20 	l.ori r7,r5,0x220
    edac:	a8 a5 02 04 	l.ori r5,r5,0x204
    edb0:	d4 07 18 00 	l.sw 0x0(r7),r3
    edb4:	10 00 00 07 	l.bf edd0 <mctl_core_init_standby+0x564>
    edb8:	9c 62 ff fe 	l.addi r3,r2,0xfffffffe
    edbc:	e0 63 20 00 	l.add r3,r3,r4
    edc0:	b9 03 00 08 	l.slli r8,r3,0x8
    edc4:	b8 e3 00 10 	l.slli r7,r3,0x10
    edc8:	00 00 00 06 	l.j ede0 <mctl_core_init_standby+0x574>
    edcc:	e0 e8 38 04 	l.or r7,r8,r7
    edd0:	e0 63 20 00 	l.add r3,r3,r4
    edd4:	19 00 00 3f 	l.movhi r8,0x3f
    edd8:	e0 e3 40 04 	l.or r7,r3,r8
    eddc:	b8 63 00 08 	l.slli r3,r3,0x8
    ede0:	e0 42 60 00 	l.add r2,r2,r12
    ede4:	e0 67 18 04 	l.or r3,r7,r3
    ede8:	e0 82 20 00 	l.add r4,r2,r4
    edec:	d4 05 18 00 	l.sw 0x0(r5),r3
    edf0:	9c 44 ff fa 	l.addi r2,r4,0xfffffffa
    edf4:	18 a0 04 82 	l.movhi r5,0x482
    edf8:	b8 e2 00 08 	l.slli r7,r2,0x8
    edfc:	b9 02 00 10 	l.slli r8,r2,0x10
    ee00:	b8 62 00 18 	l.slli r3,r2,0x18
    ee04:	e0 e7 10 04 	l.or r7,r7,r2
    ee08:	a9 65 02 14 	l.ori r11,r5,0x214
    ee0c:	e1 07 40 04 	l.or r8,r7,r8
    ee10:	bc 06 00 0f 	l.sfeqi r6,0xf
    ee14:	e0 68 18 04 	l.or r3,r8,r3
    ee18:	d4 0b 18 00 	l.sw 0x0(r11),r3
    ee1c:	10 00 00 21 	l.bf eea0 <mctl_core_init_standby+0x634>
    ee20:	bc 46 00 0f 	l.sfgtui r6,0xf
    ee24:	10 00 00 07 	l.bf ee40 <mctl_core_init_standby+0x5d4>
    ee28:	bc 06 00 10 	l.sfeqi r6,0x10
    ee2c:	bc 06 00 0e 	l.sfeqi r6,0xe
    ee30:	0c 00 00 43 	l.bnf ef3c <mctl_core_init_standby+0x6d0>
    ee34:	15 00 00 00 	l.nop 0x0
    ee38:	00 00 00 08 	l.j ee58 <mctl_core_init_standby+0x5ec>
    ee3c:	84 50 00 78 	l.lwz r2,0x78(r16)
    ee40:	10 00 00 34 	l.bf ef10 <mctl_core_init_standby+0x6a4>
    ee44:	bc 06 00 11 	l.sfeqi r6,0x11
    ee48:	0c 00 00 3d 	l.bnf ef3c <mctl_core_init_standby+0x6d0>
    ee4c:	15 00 00 00 	l.nop 0x0
    ee50:	00 00 00 35 	l.j ef24 <mctl_core_init_standby+0x6b8>
    ee54:	a8 e5 02 18 	l.ori r7,r5,0x218
    ee58:	19 60 00 02 	l.movhi r11,0x2
    ee5c:	e0 42 58 03 	l.and r2,r2,r11
    ee60:	bc 02 00 00 	l.sfeqi r2,0x0
    ee64:	10 00 00 0a 	l.bf ee8c <mctl_core_init_standby+0x620>
    ee68:	a8 65 02 18 	l.ori r3,r5,0x218
    ee6c:	9c 44 ff fb 	l.addi r2,r4,0xfffffffb
    ee70:	19 00 0f 0f 	l.movhi r8,0xf0f
    ee74:	e0 e2 40 04 	l.or r7,r2,r8
    ee78:	b8 42 00 08 	l.slli r2,r2,0x8
    ee7c:	e0 47 10 04 	l.or r2,r7,r2
    ee80:	d4 03 10 00 	l.sw 0x0(r3),r2
    ee84:	00 00 00 16 	l.j eedc <mctl_core_init_standby+0x670>
    ee88:	9c 44 00 06 	l.addi r2,r4,0x6
    ee8c:	19 60 0f 0f 	l.movhi r11,0xf0f
    ee90:	e0 e7 58 04 	l.or r7,r7,r11
    ee94:	d4 03 38 00 	l.sw 0x0(r3),r7
    ee98:	00 00 00 19 	l.j eefc <mctl_core_init_standby+0x690>
    ee9c:	18 40 04 82 	l.movhi r2,0x482
    eea0:	84 70 00 78 	l.lwz r3,0x78(r16)
    eea4:	18 e0 00 01 	l.movhi r7,0x1
    eea8:	e0 63 38 03 	l.and r3,r3,r7
    eeac:	bc 03 00 00 	l.sfeqi r3,0x0
    eeb0:	10 00 00 0f 	l.bf eeec <mctl_core_init_standby+0x680>
    eeb4:	a8 65 02 18 	l.ori r3,r5,0x218
    eeb8:	9c e4 ff fb 	l.addi r7,r4,0xfffffffb
    eebc:	19 00 0f 00 	l.movhi r8,0xf00
    eec0:	e0 42 40 04 	l.or r2,r2,r8
    eec4:	b9 07 00 08 	l.slli r8,r7,0x8
    eec8:	b8 e7 00 10 	l.slli r7,r7,0x10
    eecc:	e0 42 40 04 	l.or r2,r2,r8
    eed0:	e0 e2 38 04 	l.or r7,r2,r7
    eed4:	9c 44 00 07 	l.addi r2,r4,0x7
    eed8:	d4 03 38 00 	l.sw 0x0(r3),r7
    eedc:	a8 a5 02 00 	l.ori r5,r5,0x200
    eee0:	d4 05 10 00 	l.sw 0x0(r5),r2
    eee4:	00 00 00 06 	l.j eefc <mctl_core_init_standby+0x690>
    eee8:	18 40 04 82 	l.movhi r2,0x482
    eeec:	19 60 0f 00 	l.movhi r11,0xf00
    eef0:	e1 08 58 04 	l.or r8,r8,r11
    eef4:	d4 03 40 00 	l.sw 0x0(r3),r8
    eef8:	18 40 04 82 	l.movhi r2,0x482
    eefc:	9c 60 0f 0f 	l.addi r3,r0,0xf0f
    ef00:	a8 42 02 1c 	l.ori r2,r2,0x21c
    ef04:	d4 02 18 00 	l.sw 0x0(r2),r3
    ef08:	00 00 00 13 	l.j ef54 <mctl_core_init_standby+0x6e8>
    ef0c:	84 50 00 1c 	l.lwz r2,0x1c(r16)
    ef10:	a8 45 02 18 	l.ori r2,r5,0x218
    ef14:	a8 a5 02 1c 	l.ori r5,r5,0x21c
    ef18:	d4 02 18 00 	l.sw 0x0(r2),r3
    ef1c:	00 00 00 05 	l.j ef30 <mctl_core_init_standby+0x6c4>
    ef20:	9c 40 0f 0f 	l.addi r2,r0,0xf0f
    ef24:	a8 42 0f 00 	l.ori r2,r2,0xf00
    ef28:	d4 07 18 00 	l.sw 0x0(r7),r3
    ef2c:	a8 a5 02 1c 	l.ori r5,r5,0x21c
    ef30:	d4 05 10 00 	l.sw 0x0(r5),r2
    ef34:	00 00 00 08 	l.j ef54 <mctl_core_init_standby+0x6e8>
    ef38:	84 50 00 1c 	l.lwz r2,0x1c(r16)
    ef3c:	18 40 04 82 	l.movhi r2,0x482
    ef40:	a8 a2 02 18 	l.ori r5,r2,0x218
    ef44:	a8 42 02 1c 	l.ori r2,r2,0x21c
    ef48:	d4 05 18 00 	l.sw 0x0(r5),r3
    ef4c:	d4 02 38 00 	l.sw 0x0(r2),r7
    ef50:	84 50 00 1c 	l.lwz r2,0x1c(r16)
    ef54:	a4 42 10 00 	l.andi r2,r2,0x1000
    ef58:	bc 02 00 00 	l.sfeqi r2,0x0
    ef5c:	10 00 00 0d 	l.bf ef90 <mctl_core_init_standby+0x724>
    ef60:	18 40 04 82 	l.movhi r2,0x482
    ef64:	94 50 00 78 	l.lhz r2,0x78(r16)
    ef68:	a4 42 00 0f 	l.andi r2,r2,0xf
    ef6c:	bc 22 00 00 	l.sfnei r2,0x0
    ef70:	10 00 00 0b 	l.bf ef9c <mctl_core_init_standby+0x730>
    ef74:	9c c6 ff fa 	l.addi r6,r6,0xfffffffa
    ef78:	18 60 04 82 	l.movhi r3,0x482
    ef7c:	e0 86 20 00 	l.add r4,r6,r4
    ef80:	a8 63 02 00 	l.ori r3,r3,0x200
    ef84:	d4 03 20 00 	l.sw 0x0(r3),r4
    ef88:	00 00 00 06 	l.j efa0 <mctl_core_init_standby+0x734>
    ef8c:	84 70 00 04 	l.lwz r3,0x4(r16)
    ef90:	9c 60 00 1f 	l.addi r3,r0,0x1f
    ef94:	a8 42 02 00 	l.ori r2,r2,0x200
    ef98:	d4 02 18 00 	l.sw 0x0(r2),r3
    ef9c:	84 70 00 04 	l.lwz r3,0x4(r16)
    efa0:	84 50 00 00 	l.lwz r2,0x0(r16)
    efa4:	d4 01 18 00 	l.sw 0x0(r1),r3
    efa8:	bc 23 00 03 	l.sfnei r3,0x3
    efac:	10 00 00 41 	l.bf f0b0 <mctl_core_init_standby+0x844>
    efb0:	b8 42 00 41 	l.srli r2,r2,0x1
    efb4:	9c 60 00 32 	l.addi r3,r0,0x32
    efb8:	07 ff fa 70 	l.jal d978 <auto_cal_timing_standby>
    efbc:	a8 82 00 00 	l.ori r4,r2,0x0
    efc0:	9c 60 00 0a 	l.addi r3,r0,0xa
    efc4:	a8 82 00 00 	l.ori r4,r2,0x0
    efc8:	07 ff fa 6c 	l.jal d978 <auto_cal_timing_standby>
    efcc:	a7 cb 00 ff 	l.andi r30,r11,0xff
    efd0:	a5 6b 00 ff 	l.andi r11,r11,0xff
    efd4:	bc ab 00 01 	l.sfleui r11,0x1
    efd8:	0c 00 00 04 	l.bnf efe8 <mctl_core_init_standby+0x77c>
    efdc:	d4 01 58 18 	l.sw 0x18(r1),r11
    efe0:	9c 80 00 02 	l.addi r4,r0,0x2
    efe4:	d4 01 20 18 	l.sw 0x18(r1),r4
    efe8:	9c 60 00 0f 	l.addi r3,r0,0xf
    efec:	07 ff fa 63 	l.jal d978 <auto_cal_timing_standby>
    eff0:	a8 82 00 00 	l.ori r4,r2,0x0
    eff4:	9c 60 00 35 	l.addi r3,r0,0x35
    eff8:	a8 82 00 00 	l.ori r4,r2,0x0
    effc:	07 ff fa 5f 	l.jal d978 <auto_cal_timing_standby>
    f000:	a6 8b 00 ff 	l.andi r20,r11,0xff
    f004:	9c 60 00 08 	l.addi r3,r0,0x8
    f008:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f00c:	a8 82 00 00 	l.ori r4,r2,0x0
    f010:	07 ff fa 5a 	l.jal d978 <auto_cal_timing_standby>
    f014:	d4 01 58 3c 	l.sw 0x3c(r1),r11
    f018:	a5 cb 00 ff 	l.andi r14,r11,0xff
    f01c:	bc 4e 00 01 	l.sfgtui r14,0x1
    f020:	10 00 00 03 	l.bf f02c <mctl_core_init_standby+0x7c0>
    f024:	15 00 00 00 	l.nop 0x0
    f028:	9d c0 00 02 	l.addi r14,r0,0x2
    f02c:	9c 60 00 26 	l.addi r3,r0,0x26
    f030:	a8 82 00 00 	l.ori r4,r2,0x0
    f034:	07 ff fa 51 	l.jal d978 <auto_cal_timing_standby>
    f038:	aa ce 00 00 	l.ori r22,r14,0x0
    f03c:	9c 60 1e 78 	l.addi r3,r0,0x1e78
    f040:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f044:	a8 82 00 00 	l.ori r4,r2,0x0
    f048:	07 ff fa 4c 	l.jal d978 <auto_cal_timing_standby>
    f04c:	d4 01 58 38 	l.sw 0x38(r1),r11
    f050:	b8 6b 00 45 	l.srli r3,r11,0x5
    f054:	a8 82 00 00 	l.ori r4,r2,0x0
    f058:	a4 63 ff ff 	l.andi r3,r3,0xffff
    f05c:	d4 01 18 2c 	l.sw 0x2c(r1),r3
    f060:	07 ff fa 46 	l.jal d978 <auto_cal_timing_standby>
    f064:	9c 60 01 5e 	l.addi r3,r0,0x15e
    f068:	a8 82 00 00 	l.ori r4,r2,0x0
    f06c:	a5 6b ff ff 	l.andi r11,r11,0xffff
    f070:	9c 60 01 68 	l.addi r3,r0,0x168
    f074:	07 ff fa 41 	l.jal d978 <auto_cal_timing_standby>
    f078:	d4 01 58 48 	l.sw 0x48(r1),r11
    f07c:	b8 8b 00 45 	l.srli r4,r11,0x5
    f080:	9c e0 00 02 	l.addi r7,r0,0x2
    f084:	9c a0 00 04 	l.addi r5,r0,0x4
    f088:	a4 84 00 ff 	l.andi r4,r4,0xff
    f08c:	9c c0 00 08 	l.addi r6,r0,0x8
    f090:	d4 01 20 30 	l.sw 0x30(r1),r4
    f094:	d4 01 70 14 	l.sw 0x14(r1),r14
    f098:	d4 01 a0 1c 	l.sw 0x1c(r1),r20
    f09c:	d4 01 28 44 	l.sw 0x44(r1),r5
    f0a0:	d4 01 30 28 	l.sw 0x28(r1),r6
    f0a4:	d4 01 38 20 	l.sw 0x20(r1),r7
    f0a8:	00 00 01 5c 	l.j f618 <mctl_core_init_standby+0xdac>
    f0ac:	d4 01 38 40 	l.sw 0x40(r1),r7
    f0b0:	85 01 00 00 	l.lwz r8,0x0(r1)
    f0b4:	bc 28 00 04 	l.sfnei r8,0x4
    f0b8:	10 00 00 57 	l.bf f214 <mctl_core_init_standby+0x9a8>
    f0bc:	85 61 00 00 	l.lwz r11,0x0(r1)
    f0c0:	9c 60 00 23 	l.addi r3,r0,0x23
    f0c4:	07 ff fa 2d 	l.jal d978 <auto_cal_timing_standby>
    f0c8:	a8 82 00 00 	l.ori r4,r2,0x0
    f0cc:	9c 60 00 08 	l.addi r3,r0,0x8
    f0d0:	a8 82 00 00 	l.ori r4,r2,0x0
    f0d4:	07 ff fa 29 	l.jal d978 <auto_cal_timing_standby>
    f0d8:	a7 cb 00 ff 	l.andi r30,r11,0xff
    f0dc:	a5 cb 00 ff 	l.andi r14,r11,0xff
    f0e0:	9d 60 00 02 	l.addi r11,r0,0x2
    f0e4:	bc ae 00 01 	l.sfleui r14,0x1
    f0e8:	10 00 00 03 	l.bf f0f4 <mctl_core_init_standby+0x888>
    f0ec:	d4 01 58 18 	l.sw 0x18(r1),r11
    f0f0:	d4 01 70 18 	l.sw 0x18(r1),r14
    f0f4:	9c 60 00 06 	l.addi r3,r0,0x6
    f0f8:	07 ff fa 20 	l.jal d978 <auto_cal_timing_standby>
    f0fc:	a8 82 00 00 	l.ori r4,r2,0x0
    f100:	9c 60 00 02 	l.addi r3,r0,0x2
    f104:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f108:	d4 01 18 20 	l.sw 0x20(r1),r3
    f10c:	bc ab 00 01 	l.sfleui r11,0x1
    f110:	10 00 00 03 	l.bf f11c <mctl_core_init_standby+0x8b0>
    f114:	d4 01 58 14 	l.sw 0x14(r1),r11
    f118:	d4 01 58 20 	l.sw 0x20(r1),r11
    f11c:	9c 60 00 0a 	l.addi r3,r0,0xa
    f120:	07 ff fa 16 	l.jal d978 <auto_cal_timing_standby>
    f124:	a8 82 00 00 	l.ori r4,r2,0x0
    f128:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f12c:	bc ab 00 07 	l.sfleui r11,0x7
    f130:	0c 00 00 04 	l.bnf f140 <mctl_core_init_standby+0x8d4>
    f134:	d4 01 58 28 	l.sw 0x28(r1),r11
    f138:	9c 80 00 08 	l.addi r4,r0,0x8
    f13c:	d4 01 20 28 	l.sw 0x28(r1),r4
    f140:	9c 60 00 0f 	l.addi r3,r0,0xf
    f144:	07 ff fa 0d 	l.jal d978 <auto_cal_timing_standby>
    f148:	a8 82 00 00 	l.ori r4,r2,0x0
    f14c:	9c 60 00 31 	l.addi r3,r0,0x31
    f150:	a8 82 00 00 	l.ori r4,r2,0x0
    f154:	07 ff fa 09 	l.jal d978 <auto_cal_timing_standby>
    f158:	a6 8b 00 ff 	l.andi r20,r11,0xff
    f15c:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f160:	84 a1 00 14 	l.lwz r5,0x14(r1)
    f164:	bc a5 00 01 	l.sfleui r5,0x1
    f168:	0c 00 00 04 	l.bnf f178 <mctl_core_init_standby+0x90c>
    f16c:	d4 01 58 3c 	l.sw 0x3c(r1),r11
    f170:	9c c0 00 02 	l.addi r6,r0,0x2
    f174:	d4 01 30 14 	l.sw 0x14(r1),r6
    f178:	bc ae 00 01 	l.sfleui r14,0x1
    f17c:	0c 00 00 03 	l.bnf f188 <mctl_core_init_standby+0x91c>
    f180:	9c 60 00 03 	l.addi r3,r0,0x3
    f184:	9d c0 00 02 	l.addi r14,r0,0x2
    f188:	07 ff f9 fc 	l.jal d978 <auto_cal_timing_standby>
    f18c:	a8 82 00 00 	l.ori r4,r2,0x0
    f190:	a6 4b 00 ff 	l.andi r18,r11,0xff
    f194:	bc 12 00 00 	l.sfeqi r18,0x0
    f198:	0c 00 00 03 	l.bnf f1a4 <mctl_core_init_standby+0x938>
    f19c:	15 00 00 00 	l.nop 0x0
    f1a0:	9e 40 00 01 	l.addi r18,r0,0x1
    f1a4:	9c 60 00 22 	l.addi r3,r0,0x22
    f1a8:	07 ff f9 f4 	l.jal d978 <auto_cal_timing_standby>
    f1ac:	a8 82 00 00 	l.ori r4,r2,0x0
    f1b0:	9c 60 1e 78 	l.addi r3,r0,0x1e78
    f1b4:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f1b8:	a8 82 00 00 	l.ori r4,r2,0x0
    f1bc:	07 ff f9 ef 	l.jal d978 <auto_cal_timing_standby>
    f1c0:	d4 01 58 38 	l.sw 0x38(r1),r11
    f1c4:	b8 6b 00 45 	l.srli r3,r11,0x5
    f1c8:	a8 82 00 00 	l.ori r4,r2,0x0
    f1cc:	a4 63 ff ff 	l.andi r3,r3,0xffff
    f1d0:	d4 01 18 2c 	l.sw 0x2c(r1),r3
    f1d4:	07 ff f9 e9 	l.jal d978 <auto_cal_timing_standby>
    f1d8:	9c 60 01 5e 	l.addi r3,r0,0x15e
    f1dc:	a8 82 00 00 	l.ori r4,r2,0x0
    f1e0:	a5 6b ff ff 	l.andi r11,r11,0xffff
    f1e4:	9c 60 01 68 	l.addi r3,r0,0x168
    f1e8:	07 ff f9 e4 	l.jal d978 <auto_cal_timing_standby>
    f1ec:	d4 01 58 48 	l.sw 0x48(r1),r11
    f1f0:	b8 8b 00 45 	l.srli r4,r11,0x5
    f1f4:	9c e0 00 04 	l.addi r7,r0,0x4
    f1f8:	9d 00 00 03 	l.addi r8,r0,0x3
    f1fc:	a4 84 00 ff 	l.andi r4,r4,0xff
    f200:	d4 01 a0 1c 	l.sw 0x1c(r1),r20
    f204:	d4 01 20 30 	l.sw 0x30(r1),r4
    f208:	d4 01 38 44 	l.sw 0x44(r1),r7
    f20c:	00 00 00 c4 	l.j f51c <mctl_core_init_standby+0xcb0>
    f210:	d4 01 40 40 	l.sw 0x40(r1),r8
    f214:	bc 2b 00 07 	l.sfnei r11,0x7
    f218:	10 00 00 4b 	l.bf f344 <mctl_core_init_standby+0xad8>
    f21c:	85 01 00 00 	l.lwz r8,0x0(r1)
    f220:	9c 60 00 32 	l.addi r3,r0,0x32
    f224:	07 ff f9 d5 	l.jal d978 <auto_cal_timing_standby>
    f228:	a8 82 00 00 	l.ori r4,r2,0x0
    f22c:	a7 cb 00 ff 	l.andi r30,r11,0xff
    f230:	bc be 00 03 	l.sfleui r30,0x3
    f234:	0c 00 00 03 	l.bnf f240 <mctl_core_init_standby+0x9d4>
    f238:	9c 60 00 0a 	l.addi r3,r0,0xa
    f23c:	9f c0 00 04 	l.addi r30,r0,0x4
    f240:	07 ff f9 ce 	l.jal d978 <auto_cal_timing_standby>
    f244:	a8 82 00 00 	l.ori r4,r2,0x0
    f248:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f24c:	bc 0b 00 00 	l.sfeqi r11,0x0
    f250:	0c 00 00 04 	l.bnf f260 <mctl_core_init_standby+0x9f4>
    f254:	d4 01 58 18 	l.sw 0x18(r1),r11
    f258:	9c 60 00 01 	l.addi r3,r0,0x1
    f25c:	d4 01 18 18 	l.sw 0x18(r1),r3
    f260:	9c 60 00 18 	l.addi r3,r0,0x18
    f264:	07 ff f9 c5 	l.jal d978 <auto_cal_timing_standby>
    f268:	a8 82 00 00 	l.ori r4,r2,0x0
    f26c:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f270:	bc ab 00 01 	l.sfleui r11,0x1
    f274:	0c 00 00 04 	l.bnf f284 <mctl_core_init_standby+0xa18>
    f278:	d4 01 58 1c 	l.sw 0x1c(r1),r11
    f27c:	9c 80 00 02 	l.addi r4,r0,0x2
    f280:	d4 01 20 1c 	l.sw 0x1c(r1),r4
    f284:	9c 60 00 46 	l.addi r3,r0,0x46
    f288:	07 ff f9 bc 	l.jal d978 <auto_cal_timing_standby>
    f28c:	a8 82 00 00 	l.ori r4,r2,0x0
    f290:	9c 60 00 08 	l.addi r3,r0,0x8
    f294:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f298:	a8 82 00 00 	l.ori r4,r2,0x0
    f29c:	07 ff f9 b7 	l.jal d978 <auto_cal_timing_standby>
    f2a0:	d4 01 58 3c 	l.sw 0x3c(r1),r11
    f2a4:	a5 cb 00 ff 	l.andi r14,r11,0xff
    f2a8:	bc 4e 00 01 	l.sfgtui r14,0x1
    f2ac:	10 00 00 03 	l.bf f2b8 <mctl_core_init_standby+0xa4c>
    f2b0:	15 00 00 00 	l.nop 0x0
    f2b4:	9d c0 00 02 	l.addi r14,r0,0x2
    f2b8:	9c 60 00 1b 	l.addi r3,r0,0x1b
    f2bc:	a8 82 00 00 	l.ori r4,r2,0x0
    f2c0:	07 ff f9 ae 	l.jal d978 <auto_cal_timing_standby>
    f2c4:	aa ce 00 00 	l.ori r22,r14,0x0
    f2c8:	9c 60 00 2a 	l.addi r3,r0,0x2a
    f2cc:	a8 82 00 00 	l.ori r4,r2,0x0
    f2d0:	07 ff f9 aa 	l.jal d978 <auto_cal_timing_standby>
    f2d4:	a6 8b 00 ff 	l.andi r20,r11,0xff
    f2d8:	9c 60 0f 3c 	l.addi r3,r0,0xf3c
    f2dc:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f2e0:	a8 82 00 00 	l.ori r4,r2,0x0
    f2e4:	07 ff f9 a5 	l.jal d978 <auto_cal_timing_standby>
    f2e8:	d4 01 58 38 	l.sw 0x38(r1),r11
    f2ec:	b8 6b 00 45 	l.srli r3,r11,0x5
    f2f0:	a8 82 00 00 	l.ori r4,r2,0x0
    f2f4:	a4 63 ff ff 	l.andi r3,r3,0xffff
    f2f8:	d4 01 18 2c 	l.sw 0x2c(r1),r3
    f2fc:	07 ff f9 9f 	l.jal d978 <auto_cal_timing_standby>
    f300:	9c 60 00 d2 	l.addi r3,r0,0xd2
    f304:	9c 60 00 dc 	l.addi r3,r0,0xdc
    f308:	a5 6b ff ff 	l.andi r11,r11,0xffff
    f30c:	a8 82 00 00 	l.ori r4,r2,0x0
    f310:	07 ff f9 9a 	l.jal d978 <auto_cal_timing_standby>
    f314:	d4 01 58 48 	l.sw 0x48(r1),r11
    f318:	9c e0 00 02 	l.addi r7,r0,0x2
    f31c:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f320:	9c a0 00 04 	l.addi r5,r0,0x4
    f324:	9c c0 00 08 	l.addi r6,r0,0x8
    f328:	d4 01 58 44 	l.sw 0x44(r1),r11
    f32c:	d4 01 70 14 	l.sw 0x14(r1),r14
    f330:	d4 01 28 30 	l.sw 0x30(r1),r5
    f334:	d4 01 30 28 	l.sw 0x28(r1),r6
    f338:	d4 01 38 20 	l.sw 0x20(r1),r7
    f33c:	00 00 00 ef 	l.j f6f8 <mctl_core_init_standby+0xe8c>
    f340:	d4 01 38 40 	l.sw 0x40(r1),r7
    f344:	bc 28 00 08 	l.sfnei r8,0x8
    f348:	10 00 00 4b 	l.bf f474 <mctl_core_init_standby+0xc08>
    f34c:	9d 00 00 04 	l.addi r8,r0,0x4
    f350:	9c 60 00 28 	l.addi r3,r0,0x28
    f354:	07 ff f9 89 	l.jal d978 <auto_cal_timing_standby>
    f358:	a8 82 00 00 	l.ori r4,r2,0x0
    f35c:	9c 60 00 0a 	l.addi r3,r0,0xa
    f360:	a8 82 00 00 	l.ori r4,r2,0x0
    f364:	07 ff f9 85 	l.jal d978 <auto_cal_timing_standby>
    f368:	a7 cb 00 ff 	l.andi r30,r11,0xff
    f36c:	a5 cb 00 ff 	l.andi r14,r11,0xff
    f370:	9d 60 00 02 	l.addi r11,r0,0x2
    f374:	bc ae 00 01 	l.sfleui r14,0x1
    f378:	10 00 00 03 	l.bf f384 <mctl_core_init_standby+0xb18>
    f37c:	d4 01 58 18 	l.sw 0x18(r1),r11
    f380:	d4 01 70 18 	l.sw 0x18(r1),r14
    f384:	9c 60 00 12 	l.addi r3,r0,0x12
    f388:	07 ff f9 7c 	l.jal d978 <auto_cal_timing_standby>
    f38c:	a8 82 00 00 	l.ori r4,r2,0x0
    f390:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f394:	bc ab 00 01 	l.sfleui r11,0x1
    f398:	0c 00 00 04 	l.bnf f3a8 <mctl_core_init_standby+0xb3c>
    f39c:	d4 01 58 1c 	l.sw 0x1c(r1),r11
    f3a0:	9c 60 00 02 	l.addi r3,r0,0x2
    f3a4:	d4 01 18 1c 	l.sw 0x1c(r1),r3
    f3a8:	9c 60 00 41 	l.addi r3,r0,0x41
    f3ac:	07 ff f9 73 	l.jal d978 <auto_cal_timing_standby>
    f3b0:	a8 82 00 00 	l.ori r4,r2,0x0
    f3b4:	a8 82 00 00 	l.ori r4,r2,0x0
    f3b8:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f3bc:	9c 60 00 08 	l.addi r3,r0,0x8
    f3c0:	07 ff f9 6e 	l.jal d978 <auto_cal_timing_standby>
    f3c4:	d4 01 58 3c 	l.sw 0x3c(r1),r11
    f3c8:	9c 80 00 02 	l.addi r4,r0,0x2
    f3cc:	a6 cb 00 ff 	l.andi r22,r11,0xff
    f3d0:	bc b6 00 01 	l.sfleui r22,0x1
    f3d4:	10 00 00 03 	l.bf f3e0 <mctl_core_init_standby+0xb74>
    f3d8:	d4 01 20 14 	l.sw 0x14(r1),r4
    f3dc:	d4 01 b0 14 	l.sw 0x14(r1),r22
    f3e0:	bc ae 00 03 	l.sfleui r14,0x3
    f3e4:	0c 00 00 03 	l.bnf f3f0 <mctl_core_init_standby+0xb84>
    f3e8:	15 00 00 00 	l.nop 0x0
    f3ec:	9d c0 00 04 	l.addi r14,r0,0x4
    f3f0:	9c 60 00 15 	l.addi r3,r0,0x15
    f3f4:	07 ff f9 61 	l.jal d978 <auto_cal_timing_standby>
    f3f8:	a8 82 00 00 	l.ori r4,r2,0x0
    f3fc:	9c 60 00 2a 	l.addi r3,r0,0x2a
    f400:	a8 82 00 00 	l.ori r4,r2,0x0
    f404:	07 ff f9 5d 	l.jal d978 <auto_cal_timing_standby>
    f408:	a6 8b 00 ff 	l.andi r20,r11,0xff
    f40c:	9c 60 0f 40 	l.addi r3,r0,0xf40
    f410:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f414:	a8 82 00 00 	l.ori r4,r2,0x0
    f418:	07 ff f9 58 	l.jal d978 <auto_cal_timing_standby>
    f41c:	d4 01 58 38 	l.sw 0x38(r1),r11
    f420:	b8 6b 00 45 	l.srli r3,r11,0x5
    f424:	a8 82 00 00 	l.ori r4,r2,0x0
    f428:	a4 63 ff ff 	l.andi r3,r3,0xffff
    f42c:	d4 01 18 2c 	l.sw 0x2c(r1),r3
    f430:	07 ff f9 52 	l.jal d978 <auto_cal_timing_standby>
    f434:	9c 60 00 b4 	l.addi r3,r0,0xb4
    f438:	9c 60 00 be 	l.addi r3,r0,0xbe
    f43c:	a5 6b ff ff 	l.andi r11,r11,0xffff
    f440:	a8 82 00 00 	l.ori r4,r2,0x0
    f444:	07 ff f9 4d 	l.jal d978 <auto_cal_timing_standby>
    f448:	d4 01 58 48 	l.sw 0x48(r1),r11
    f44c:	9c a0 00 04 	l.addi r5,r0,0x4
    f450:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f454:	9c c0 00 08 	l.addi r6,r0,0x8
    f458:	9c e0 00 02 	l.addi r7,r0,0x2
    f45c:	d4 01 58 44 	l.sw 0x44(r1),r11
    f460:	d4 01 28 30 	l.sw 0x30(r1),r5
    f464:	d4 01 30 28 	l.sw 0x28(r1),r6
    f468:	d4 01 38 20 	l.sw 0x20(r1),r7
    f46c:	00 00 00 c0 	l.j f76c <mctl_core_init_standby+0xf00>
    f470:	d4 01 28 40 	l.sw 0x40(r1),r5
    f474:	9d 60 00 08 	l.addi r11,r0,0x8
    f478:	9c 60 00 02 	l.addi r3,r0,0x2
    f47c:	9e c0 00 03 	l.addi r22,r0,0x3
    f480:	d4 01 40 30 	l.sw 0x30(r1),r8
    f484:	d4 01 40 44 	l.sw 0x44(r1),r8
    f488:	9c 80 00 80 	l.addi r4,r0,0x80
    f48c:	9c a0 00 62 	l.addi r5,r0,0x62
    f490:	9c c0 00 0a 	l.addi r6,r0,0xa
    f494:	9e 80 00 06 	l.addi r20,r0,0x6
    f498:	9c e0 00 0e 	l.addi r7,r0,0xe
    f49c:	9d 00 00 14 	l.addi r8,r0,0x14
    f4a0:	d4 01 58 28 	l.sw 0x28(r1),r11
    f4a4:	d4 01 18 20 	l.sw 0x20(r1),r3
    f4a8:	85 61 00 00 	l.lwz r11,0x0(r1)
    f4ac:	d4 01 20 48 	l.sw 0x48(r1),r4
    f4b0:	d4 01 28 2c 	l.sw 0x2c(r1),r5
    f4b4:	d4 01 30 14 	l.sw 0x14(r1),r6
    f4b8:	d4 01 38 38 	l.sw 0x38(r1),r7
    f4bc:	d4 01 40 3c 	l.sw 0x3c(r1),r8
    f4c0:	d4 01 a0 1c 	l.sw 0x1c(r1),r20
    f4c4:	d4 01 b0 18 	l.sw 0x18(r1),r22
    f4c8:	d4 01 18 40 	l.sw 0x40(r1),r3
    f4cc:	9e 40 00 01 	l.addi r18,r0,0x1
    f4d0:	a9 d6 00 00 	l.ori r14,r22,0x0
    f4d4:	bc 0b 00 04 	l.sfeqi r11,0x4
    f4d8:	10 00 00 11 	l.bf f51c <mctl_core_init_standby+0xcb0>
    f4dc:	9f c0 00 10 	l.addi r30,r0,0x10
    f4e0:	bc 4b 00 04 	l.sfgtui r11,0x4
    f4e4:	10 00 00 07 	l.bf f500 <mctl_core_init_standby+0xc94>
    f4e8:	84 61 00 00 	l.lwz r3,0x0(r1)
    f4ec:	e4 0b b0 00 	l.sfeq r11,r22
    f4f0:	0c 00 00 e9 	l.bnf f894 <mctl_core_init_standby+0x1028>
    f4f4:	9c 60 00 08 	l.addi r3,r0,0x8
    f4f8:	00 00 00 49 	l.j f61c <mctl_core_init_standby+0xdb0>
    f4fc:	15 00 00 00 	l.nop 0x0
    f500:	bc 03 00 07 	l.sfeqi r3,0x7
    f504:	10 00 00 7d 	l.bf f6f8 <mctl_core_init_standby+0xe8c>
    f508:	bc 03 00 08 	l.sfeqi r3,0x8
    f50c:	0c 00 00 e2 	l.bnf f894 <mctl_core_init_standby+0x1028>
    f510:	9c 60 00 0e 	l.addi r3,r0,0xe
    f514:	00 00 00 97 	l.j f770 <mctl_core_init_standby+0xf04>
    f518:	15 00 00 00 	l.nop 0x0
    f51c:	9c 60 00 0f 	l.addi r3,r0,0xf
    f520:	07 ff f9 16 	l.jal d978 <auto_cal_timing_standby>
    f524:	a8 82 00 00 	l.ori r4,r2,0x0
    f528:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f52c:	bc ab 00 0b 	l.sfleui r11,0xb
    f530:	0c 00 00 04 	l.bnf f540 <mctl_core_init_standby+0xcd4>
    f534:	d4 01 58 24 	l.sw 0x24(r1),r11
    f538:	9c 80 00 0c 	l.addi r4,r0,0xc
    f53c:	d4 01 20 24 	l.sw 0x24(r1),r4
    f540:	9c 60 00 05 	l.addi r3,r0,0x5
    f544:	07 ff f9 0d 	l.jal d978 <auto_cal_timing_standby>
    f548:	a8 82 00 00 	l.ori r4,r2,0x0
    f54c:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f550:	bc ab 00 01 	l.sfleui r11,0x1
    f554:	0c 00 00 04 	l.bnf f564 <mctl_core_init_standby+0xcf8>
    f558:	d4 01 58 04 	l.sw 0x4(r1),r11
    f55c:	9c a0 00 02 	l.addi r5,r0,0x2
    f560:	d4 01 28 04 	l.sw 0x4(r1),r5
    f564:	9c 60 00 0a 	l.addi r3,r0,0xa
    f568:	07 ff f9 04 	l.jal d978 <auto_cal_timing_standby>
    f56c:	a8 82 00 00 	l.ori r4,r2,0x0
    f570:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f574:	bc 4b 00 02 	l.sfgtui r11,0x2
    f578:	10 00 00 04 	l.bf f588 <mctl_core_init_standby+0xd1c>
    f57c:	d4 01 58 08 	l.sw 0x8(r1),r11
    f580:	9c c0 00 03 	l.addi r6,r0,0x3
    f584:	d4 01 30 08 	l.sw 0x8(r1),r6
    f588:	84 e1 00 04 	l.lwz r7,0x4(r1)
    f58c:	a8 82 00 00 	l.ori r4,r2,0x0
    f590:	9d 87 00 01 	l.addi r12,r7,0x1
    f594:	9c 60 00 aa 	l.addi r3,r0,0xaa
    f598:	a5 8c 00 ff 	l.andi r12,r12,0xff
    f59c:	9e c0 00 04 	l.addi r22,r0,0x4
    f5a0:	07 ff f8 f6 	l.jal d978 <auto_cal_timing_standby>
    f5a4:	d4 01 60 10 	l.sw 0x10(r1),r12
    f5a8:	b8 6b 00 45 	l.srli r3,r11,0x5
    f5ac:	a8 82 00 00 	l.ori r4,r2,0x0
    f5b0:	a4 63 00 ff 	l.andi r3,r3,0xff
    f5b4:	d4 01 18 0c 	l.sw 0xc(r1),r3
    f5b8:	18 60 00 01 	l.movhi r3,0x1
    f5bc:	07 ff f8 ef 	l.jal d978 <auto_cal_timing_standby>
    f5c0:	a8 63 12 38 	l.ori r3,r3,0x1238
    f5c4:	b8 4b 00 4a 	l.srli r2,r11,0xa
    f5c8:	9e 20 05 20 	l.addi r17,r0,0x520
    f5cc:	e5 54 b0 00 	l.sfgts r20,r22
    f5d0:	a4 42 00 ff 	l.andi r2,r2,0xff
    f5d4:	d4 10 88 20 	l.sw 0x20(r16),r17
    f5d8:	9e 20 00 08 	l.addi r17,r0,0x8
    f5dc:	d4 01 10 34 	l.sw 0x34(r1),r2
    f5e0:	10 00 00 05 	l.bf f5f4 <mctl_core_init_standby+0xd88>
    f5e4:	d4 10 88 28 	l.sw 0x28(r16),r17
    f5e8:	9e 20 00 09 	l.addi r17,r0,0x9
    f5ec:	e2 31 a0 02 	l.sub r17,r17,r20
    f5f0:	a6 d1 00 ff 	l.andi r22,r17,0xff
    f5f4:	9e 52 00 07 	l.addi r18,r18,0x7
    f5f8:	9f 6e 00 07 	l.addi r27,r14,0x7
    f5fc:	a4 52 00 ff 	l.andi r2,r18,0xff
    f600:	a7 7b 00 ff 	l.andi r27,r27,0xff
    f604:	86 41 00 08 	l.lwz r18,0x8(r1)
    f608:	9f 20 00 05 	l.addi r25,r0,0x5
    f60c:	9c 80 00 0e 	l.addi r4,r0,0xe
    f610:	00 00 00 34 	l.j f6e0 <mctl_core_init_standby+0xe74>
    f614:	9e e0 00 04 	l.addi r23,r0,0x4
    f618:	9c 60 00 08 	l.addi r3,r0,0x8
    f61c:	07 ff f8 d7 	l.jal d978 <auto_cal_timing_standby>
    f620:	a8 82 00 00 	l.ori r4,r2,0x0
    f624:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f628:	bc ab 00 01 	l.sfleui r11,0x1
    f62c:	0c 00 00 04 	l.bnf f63c <mctl_core_init_standby+0xdd0>
    f630:	d4 01 58 04 	l.sw 0x4(r1),r11
    f634:	9d 00 00 02 	l.addi r8,r0,0x2
    f638:	d4 01 40 04 	l.sw 0x4(r1),r8
    f63c:	9c 60 00 0a 	l.addi r3,r0,0xa
    f640:	07 ff f8 ce 	l.jal d978 <auto_cal_timing_standby>
    f644:	a8 82 00 00 	l.ori r4,r2,0x0
    f648:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f64c:	bc 4b 00 02 	l.sfgtui r11,0x2
    f650:	10 00 00 04 	l.bf f660 <mctl_core_init_standby+0xdf4>
    f654:	d4 01 58 08 	l.sw 0x8(r1),r11
    f658:	9d 60 00 06 	l.addi r11,r0,0x6
    f65c:	d4 01 58 04 	l.sw 0x4(r1),r11
    f660:	84 61 00 04 	l.lwz r3,0x4(r1)
    f664:	9c 80 00 0f 	l.addi r4,r0,0xf
    f668:	9d 83 00 01 	l.addi r12,r3,0x1
    f66c:	a8 62 00 00 	l.ori r3,r2,0x0
    f670:	a5 8c 00 ff 	l.andi r12,r12,0xff
    f674:	07 ff f4 ed 	l.jal ca28 <__udivsi3>
    f678:	d4 01 60 10 	l.sw 0x10(r1),r12
    f67c:	9e 20 1f 14 	l.addi r17,r0,0x1f14
    f680:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f684:	d4 10 88 20 	l.sw 0x20(r16),r17
    f688:	9c 80 00 00 	l.addi r4,r0,0x0
    f68c:	9e 20 00 20 	l.addi r17,r0,0x20
    f690:	d4 01 58 34 	l.sw 0x34(r1),r11
    f694:	d4 10 88 28 	l.sw 0x28(r16),r17
    f698:	e2 34 b0 00 	l.add r17,r20,r22
    f69c:	bd 51 00 08 	l.sfgtsi r17,0x8
    f6a0:	10 00 00 05 	l.bf f6b4 <mctl_core_init_standby+0xe48>
    f6a4:	d4 10 20 2c 	l.sw 0x2c(r16),r4
    f6a8:	9c e0 00 09 	l.addi r7,r0,0x9
    f6ac:	e0 e7 a0 02 	l.sub r7,r7,r20
    f6b0:	a6 c7 00 ff 	l.andi r22,r7,0xff
    f6b4:	9c a0 00 04 	l.addi r5,r0,0x4
    f6b8:	9f 6e 00 07 	l.addi r27,r14,0x7
    f6bc:	9c c0 00 0c 	l.addi r6,r0,0xc
    f6c0:	a7 7b 00 ff 	l.andi r27,r27,0xff
    f6c4:	86 41 00 08 	l.lwz r18,0x8(r1)
    f6c8:	d4 01 28 0c 	l.sw 0xc(r1),r5
    f6cc:	9c 40 00 08 	l.addi r2,r0,0x8
    f6d0:	9f 20 00 05 	l.addi r25,r0,0x5
    f6d4:	9c 80 00 0e 	l.addi r4,r0,0xe
    f6d8:	d4 01 30 24 	l.sw 0x24(r1),r6
    f6dc:	aa e5 00 00 	l.ori r23,r5,0x0
    f6e0:	9f 00 00 00 	l.addi r24,r0,0x0
    f6e4:	ab b9 00 00 	l.ori r29,r25,0x0
    f6e8:	9f 40 00 07 	l.addi r26,r0,0x7
    f6ec:	9c 60 00 06 	l.addi r3,r0,0x6
    f6f0:	00 00 00 7f 	l.j f8ec <mctl_core_init_standby+0x1080>
    f6f4:	9d 60 00 0a 	l.addi r11,r0,0xa
    f6f8:	9c 40 00 83 	l.addi r2,r0,0x83
    f6fc:	9e 40 00 05 	l.addi r18,r0,0x5
    f700:	9d 00 00 04 	l.addi r8,r0,0x4
    f704:	9d 60 00 18 	l.addi r11,r0,0x18
    f708:	9c 60 00 03 	l.addi r3,r0,0x3
    f70c:	9c a0 00 0c 	l.addi r5,r0,0xc
    f710:	d4 10 10 24 	l.sw 0x24(r16),r2
    f714:	9c e0 00 00 	l.addi r7,r0,0x0
    f718:	9c 40 00 1c 	l.addi r2,r0,0x1c
    f71c:	9d ce 00 09 	l.addi r14,r14,0x9
    f720:	d4 10 10 28 	l.sw 0x28(r16),r2
    f724:	d4 01 58 34 	l.sw 0x34(r1),r11
    f728:	d4 01 18 04 	l.sw 0x4(r1),r3
    f72c:	d4 10 38 20 	l.sw 0x20(r16),r7
    f730:	a7 6e 00 ff 	l.andi r27,r14,0xff
    f734:	d4 01 40 0c 	l.sw 0xc(r1),r8
    f738:	9c 40 00 08 	l.addi r2,r0,0x8
    f73c:	d4 01 90 08 	l.sw 0x8(r1),r18
    f740:	d4 01 90 10 	l.sw 0x10(r1),r18
    f744:	9f 20 00 0d 	l.addi r25,r0,0xd
    f748:	9c 80 00 10 	l.addi r4,r0,0x10
    f74c:	d4 01 28 24 	l.sw 0x24(r1),r5
    f750:	aa f2 00 00 	l.ori r23,r18,0x0
    f754:	ab 12 00 00 	l.ori r24,r18,0x0
    f758:	ab a8 00 00 	l.ori r29,r8,0x0
    f75c:	87 41 00 00 	l.lwz r26,0x0(r1)
    f760:	9c 60 00 06 	l.addi r3,r0,0x6
    f764:	00 00 00 62 	l.j f8ec <mctl_core_init_standby+0x1080>
    f768:	a9 65 00 00 	l.ori r11,r5,0x0
    f76c:	9c 60 00 0e 	l.addi r3,r0,0xe
    f770:	07 ff f8 82 	l.jal d978 <auto_cal_timing_standby>
    f774:	a8 82 00 00 	l.ori r4,r2,0x0
    f778:	a7 0b 00 ff 	l.andi r24,r11,0xff
    f77c:	bc 58 00 04 	l.sfgtui r24,0x4
    f780:	10 00 00 03 	l.bf f78c <mctl_core_init_standby+0xf20>
    f784:	9c 60 00 0f 	l.addi r3,r0,0xf
    f788:	9f 00 00 05 	l.addi r24,r0,0x5
    f78c:	07 ff f8 7b 	l.jal d978 <auto_cal_timing_standby>
    f790:	a8 82 00 00 	l.ori r4,r2,0x0
    f794:	9c c0 00 02 	l.addi r6,r0,0x2
    f798:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f79c:	d4 01 30 04 	l.sw 0x4(r1),r6
    f7a0:	bc ab 00 01 	l.sfleui r11,0x1
    f7a4:	10 00 00 03 	l.bf f7b0 <mctl_core_init_standby+0xf44>
    f7a8:	d4 01 58 10 	l.sw 0x10(r1),r11
    f7ac:	d4 01 58 04 	l.sw 0x4(r1),r11
    f7b0:	9c 60 00 02 	l.addi r3,r0,0x2
    f7b4:	07 ff f8 71 	l.jal d978 <auto_cal_timing_standby>
    f7b8:	a8 82 00 00 	l.ori r4,r2,0x0
    f7bc:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f7c0:	bc ab 00 01 	l.sfleui r11,0x1
    f7c4:	0c 00 00 04 	l.bnf f7d4 <mctl_core_init_standby+0xf68>
    f7c8:	d4 01 58 08 	l.sw 0x8(r1),r11
    f7cc:	9c e0 00 02 	l.addi r7,r0,0x2
    f7d0:	d4 01 38 08 	l.sw 0x8(r1),r7
    f7d4:	9c 60 00 05 	l.addi r3,r0,0x5
    f7d8:	07 ff f8 68 	l.jal d978 <auto_cal_timing_standby>
    f7dc:	a8 82 00 00 	l.ori r4,r2,0x0
    f7e0:	a6 4b 00 ff 	l.andi r18,r11,0xff
    f7e4:	bc b2 00 01 	l.sfleui r18,0x1
    f7e8:	0c 00 00 03 	l.bnf f7f4 <mctl_core_init_standby+0xf88>
    f7ec:	85 01 00 10 	l.lwz r8,0x10(r1)
    f7f0:	9e 40 00 02 	l.addi r18,r0,0x2
    f7f4:	bc a8 00 01 	l.sfleui r8,0x1
    f7f8:	0c 00 00 04 	l.bnf f808 <mctl_core_init_standby+0xf9c>
    f7fc:	15 00 00 00 	l.nop 0x0
    f800:	9d 60 00 02 	l.addi r11,r0,0x2
    f804:	d4 01 58 10 	l.sw 0x10(r1),r11
    f808:	84 61 00 2c 	l.lwz r3,0x2c(r1)
    f80c:	a8 82 00 00 	l.ori r4,r2,0x0
    f810:	b8 a3 00 03 	l.slli r5,r3,0x3
    f814:	e0 a5 18 00 	l.add r5,r5,r3
    f818:	9c 60 00 04 	l.addi r3,r0,0x4
    f81c:	b8 a5 00 85 	l.srai r5,r5,0x5
    f820:	a4 a5 00 ff 	l.andi r5,r5,0xff
    f824:	07 ff f8 55 	l.jal d978 <auto_cal_timing_standby>
    f828:	d4 01 28 34 	l.sw 0x34(r1),r5
    f82c:	a8 82 00 00 	l.ori r4,r2,0x0
    f830:	9c 60 00 01 	l.addi r3,r0,0x1
    f834:	07 ff f8 51 	l.jal d978 <auto_cal_timing_standby>
    f838:	ab 4b 00 00 	l.ori r26,r11,0x0
    f83c:	9c a0 00 34 	l.addi r5,r0,0x34
    f840:	9c 80 00 04 	l.addi r4,r0,0x4
    f844:	d4 10 28 24 	l.sw 0x24(r16),r5
    f848:	9c a0 00 1b 	l.addi r5,r0,0x1b
    f84c:	d4 01 20 0c 	l.sw 0xc(r1),r4
    f850:	d4 10 28 28 	l.sw 0x28(r16),r5
    f854:	9c ba 00 11 	l.addi r5,r26,0x11
    f858:	9f 6e 00 0e 	l.addi r27,r14,0xe
    f85c:	e0 45 58 02 	l.sub r2,r5,r11
    f860:	9f a0 00 05 	l.addi r29,r0,0x5
    f864:	9c a0 00 0c 	l.addi r5,r0,0xc
    f868:	a7 22 00 ff 	l.andi r25,r2,0xff
    f86c:	a7 7b 00 ff 	l.andi r27,r27,0xff
    f870:	aa f8 00 00 	l.ori r23,r24,0x0
    f874:	9c 40 00 08 	l.addi r2,r0,0x8
    f878:	9c 80 00 18 	l.addi r4,r0,0x18
    f87c:	86 c1 00 0c 	l.lwz r22,0xc(r1)
    f880:	d4 01 28 24 	l.sw 0x24(r1),r5
    f884:	9f 40 00 0a 	l.addi r26,r0,0xa
    f888:	a8 7d 00 00 	l.ori r3,r29,0x0
    f88c:	00 00 00 18 	l.j f8ec <mctl_core_init_standby+0x1080>
    f890:	9d 60 00 11 	l.addi r11,r0,0x11
    f894:	9c 60 00 06 	l.addi r3,r0,0x6
    f898:	9c c0 00 04 	l.addi r6,r0,0x4
    f89c:	9c e0 00 03 	l.addi r7,r0,0x3
    f8a0:	9d 60 00 02 	l.addi r11,r0,0x2
    f8a4:	9c 40 00 08 	l.addi r2,r0,0x8
    f8a8:	9d 00 00 1b 	l.addi r8,r0,0x1b
    f8ac:	d4 01 18 24 	l.sw 0x24(r1),r3
    f8b0:	9c 60 00 01 	l.addi r3,r0,0x1
    f8b4:	d4 01 58 04 	l.sw 0x4(r1),r11
    f8b8:	aa eb 00 00 	l.ori r23,r11,0x0
    f8bc:	d4 01 30 0c 	l.sw 0xc(r1),r6
    f8c0:	aa 46 00 00 	l.ori r18,r6,0x0
    f8c4:	d4 01 30 08 	l.sw 0x8(r1),r6
    f8c8:	d4 01 38 10 	l.sw 0x10(r1),r7
    f8cc:	ab 26 00 00 	l.ori r25,r6,0x0
    f8d0:	ab 62 00 00 	l.ori r27,r2,0x0
    f8d4:	d4 01 40 34 	l.sw 0x34(r1),r8
    f8d8:	9c 80 00 0c 	l.addi r4,r0,0xc
    f8dc:	9f 00 00 00 	l.addi r24,r0,0x0
    f8e0:	ab a7 00 00 	l.ori r29,r7,0x0
    f8e4:	ab 47 00 00 	l.ori r26,r7,0x0
    f8e8:	a9 63 00 00 	l.ori r11,r3,0x0
    f8ec:	bb 9e 00 10 	l.slli r28,r30,0x10
    f8f0:	84 a1 00 38 	l.lwz r5,0x38(r1)
    f8f4:	ba f7 00 0c 	l.slli r23,r23,0xc
    f8f8:	bb 18 00 14 	l.slli r24,r24,0x14
    f8fc:	84 c1 00 34 	l.lwz r6,0x34(r1)
    f900:	bb c4 00 18 	l.slli r30,r4,0x18
    f904:	84 e1 00 14 	l.lwz r7,0x14(r1)
    f908:	e3 9c 28 04 	l.or r28,r28,r5
    f90c:	84 81 00 24 	l.lwz r4,0x24(r1)
    f910:	b8 a6 00 08 	l.slli r5,r6,0x8
    f914:	e3 18 b8 04 	l.or r24,r24,r23
    f918:	84 c1 00 1c 	l.lwz r6,0x1c(r1)
    f91c:	e3 dc f0 04 	l.or r30,r28,r30
    f920:	bb bd 00 18 	l.slli r29,r29,0x18
    f924:	bb 87 00 10 	l.slli r28,r7,0x10
    f928:	bb 5a 00 10 	l.slli r26,r26,0x10
    f92c:	84 e1 00 40 	l.lwz r7,0x40(r1)
    f930:	e3 18 20 04 	l.or r24,r24,r4
    f934:	84 81 00 08 	l.lwz r4,0x8(r1)
    f938:	85 01 00 3c 	l.lwz r8,0x3c(r1)
    f93c:	e2 7e 28 04 	l.or r19,r30,r5
    f940:	bb f6 00 08 	l.slli r31,r22,0x8
    f944:	18 a0 04 82 	l.movhi r5,0x482
    f948:	ba a6 00 18 	l.slli r21,r6,0x18
    f94c:	ba c7 00 10 	l.slli r22,r7,0x10
    f950:	b9 e4 00 18 	l.slli r15,r4,0x18
    f954:	ba 32 00 10 	l.slli r17,r18,0x10
    f958:	e3 bd d0 04 	l.or r29,r29,r26
    f95c:	ab c5 01 00 	l.ori r30,r5,0x100
    f960:	e3 9c 40 04 	l.or r28,r28,r8
    f964:	bb 39 00 08 	l.slli r25,r25,0x8
    f968:	85 01 00 18 	l.lwz r8,0x18(r1)
    f96c:	84 e1 00 10 	l.lwz r7,0x10(r1)
    f970:	e3 7d d8 04 	l.or r27,r29,r27
    f974:	e2 b5 b0 04 	l.or r21,r21,r22
    f978:	d4 1e 98 00 	l.sw 0x0(r30),r19
    f97c:	84 c1 00 04 	l.lwz r6,0x4(r1)
    f980:	ba 68 00 08 	l.slli r19,r8,0x8
    f984:	e3 9c f8 04 	l.or r28,r28,r31
    f988:	e1 ef 88 04 	l.or r15,r15,r17
    f98c:	ab e5 01 04 	l.ori r31,r5,0x104
    f990:	b9 87 00 08 	l.slli r12,r7,0x8
    f994:	e3 7b c8 04 	l.or r27,r27,r25
    f998:	e2 95 a0 04 	l.or r20,r21,r20
    f99c:	ab 25 01 08 	l.ori r25,r5,0x108
    f9a0:	d4 1f e0 00 	l.sw 0x0(r31),r28
    f9a4:	85 01 00 14 	l.lwz r8,0x14(r1)
    f9a8:	aa e5 01 0c 	l.ori r23,r5,0x10c
    f9ac:	e1 cf 30 04 	l.or r14,r15,r6
    f9b0:	d4 19 d8 00 	l.sw 0x0(r25),r27
    f9b4:	e2 94 98 04 	l.or r20,r20,r19
    f9b8:	aa 65 01 10 	l.ori r19,r5,0x110
    f9bc:	d4 17 c0 00 	l.sw 0x0(r23),r24
    f9c0:	e1 ce 60 04 	l.or r14,r14,r12
    f9c4:	9d a8 00 02 	l.addi r13,r8,0x2
    f9c8:	a9 85 01 14 	l.ori r12,r5,0x114
    f9cc:	18 80 02 02 	l.movhi r4,0x202
    f9d0:	d4 13 a0 00 	l.sw 0x0(r19),r20
    f9d4:	d4 0c 70 00 	l.sw 0x0(r12),r14
    f9d8:	84 e1 00 0c 	l.lwz r7,0xc(r1)
    f9dc:	a9 85 01 18 	l.ori r12,r5,0x118
    f9e0:	e1 ad 20 04 	l.or r13,r13,r4
    f9e4:	84 c1 00 30 	l.lwz r6,0x30(r1)
    f9e8:	d4 0c 68 00 	l.sw 0x0(r12),r13
    f9ec:	b9 87 00 18 	l.slli r12,r7,0x18
    f9f0:	a9 06 10 00 	l.ori r8,r6,0x1000
    f9f4:	b8 e7 00 10 	l.slli r7,r7,0x10
    f9f8:	e1 08 60 04 	l.or r8,r8,r12
    f9fc:	18 80 00 02 	l.movhi r4,0x2
    fa00:	e1 08 38 04 	l.or r8,r8,r7
    fa04:	a8 e5 01 20 	l.ori r7,r5,0x120
    fa08:	d4 07 40 00 	l.sw 0x0(r7),r8
    fa0c:	85 01 00 20 	l.lwz r8,0x20(r1)
    fa10:	18 e0 00 0e 	l.movhi r7,0xe
    fa14:	b8 c8 00 08 	l.slli r6,r8,0x8
    fa18:	a8 e7 0c 05 	l.ori r7,r7,0xc05
    fa1c:	85 01 00 44 	l.lwz r8,0x44(r1)
    fa20:	e0 c6 20 04 	l.or r6,r6,r4
    fa24:	18 80 40 00 	l.movhi r4,0x4000
    fa28:	e2 46 10 04 	l.or r18,r6,r2
    fa2c:	a8 c5 01 24 	l.ori r6,r5,0x124
    fa30:	18 40 3f ff 	l.movhi r2,0x3fff
    fa34:	d4 06 90 00 	l.sw 0x0(r6),r18
    fa38:	a8 c5 01 28 	l.ori r6,r5,0x128
    fa3c:	a8 42 ff ff 	l.ori r2,r2,0xffff
    fa40:	d4 06 38 00 	l.sw 0x0(r6),r7
    fa44:	18 e0 44 0c 	l.movhi r7,0x440c
    fa48:	a8 c5 01 2c 	l.ori r6,r5,0x12c
    fa4c:	a8 e7 02 1c 	l.ori r7,r7,0x21c
    fa50:	d4 06 38 00 	l.sw 0x0(r6),r7
    fa54:	84 e1 00 28 	l.lwz r7,0x28(r1)
    fa58:	a8 c5 01 30 	l.ori r6,r5,0x130
    fa5c:	d4 06 38 00 	l.sw 0x0(r6),r7
    fa60:	18 e0 0a 10 	l.movhi r7,0xa10
    fa64:	a8 c5 01 34 	l.ori r6,r5,0x134
    fa68:	a8 e7 00 02 	l.ori r7,r7,0x2
    fa6c:	d4 06 38 00 	l.sw 0x0(r6),r7
    fa70:	a8 c5 01 38 	l.ori r6,r5,0x138
    fa74:	a8 a5 00 d0 	l.ori r5,r5,0xd0
    fa78:	d4 06 40 00 	l.sw 0x0(r6),r8
    fa7c:	84 a5 00 00 	l.lwz r5,0x0(r5)
    fa80:	e0 a5 10 03 	l.and r5,r5,r2
    fa84:	e0 45 20 04 	l.or r2,r5,r4
    fa88:	84 a1 00 00 	l.lwz r5,0x0(r1)
    fa8c:	bc 25 00 07 	l.sfnei r5,0x7
    fa90:	10 00 00 08 	l.bf fab0 <mctl_core_init_standby+0x1244>
    fa94:	85 01 00 00 	l.lwz r8,0x0(r1)
    fa98:	18 c0 fc 00 	l.movhi r6,0xfc00
    fa9c:	18 e0 00 4f 	l.movhi r7,0x4f
    faa0:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    faa4:	e0 a2 30 03 	l.and r5,r2,r6
    faa8:	00 00 00 09 	l.j facc <mctl_core_init_standby+0x1260>
    faac:	e0 45 38 04 	l.or r2,r5,r7
    fab0:	bc 28 00 08 	l.sfnei r8,0x8
    fab4:	10 00 00 07 	l.bf fad0 <mctl_core_init_standby+0x1264>
    fab8:	9c c0 f0 00 	l.addi r6,r0,0xfffff000
    fabc:	9c 80 f0 00 	l.addi r4,r0,0xfffff000
    fac0:	e0 a2 20 03 	l.and r5,r2,r4
    fac4:	00 00 00 05 	l.j fad8 <mctl_core_init_standby+0x126c>
    fac8:	a8 85 03 f0 	l.ori r4,r5,0x3f0
    facc:	9c c0 f0 00 	l.addi r6,r0,0xfffff000
    fad0:	e0 a2 30 03 	l.and r5,r2,r6
    fad4:	a8 85 00 c8 	l.ori r4,r5,0xc8
    fad8:	18 40 04 82 	l.movhi r2,0x482
    fadc:	18 c0 00 42 	l.movhi r6,0x42
    fae0:	a8 a2 00 d0 	l.ori r5,r2,0xd0
    fae4:	9c e0 00 00 	l.addi r7,r0,0x0
    fae8:	d4 05 20 00 	l.sw 0x0(r5),r4
    faec:	a8 a2 00 d4 	l.ori r5,r2,0xd4
    faf0:	85 01 00 00 	l.lwz r8,0x0(r1)
    faf4:	d4 05 30 00 	l.sw 0x0(r5),r6
    faf8:	a8 a2 00 d8 	l.ori r5,r2,0xd8
    fafc:	9c c0 00 05 	l.addi r6,r0,0x5
    fb00:	a8 82 00 e0 	l.ori r4,r2,0xe0
    fb04:	d4 05 30 00 	l.sw 0x0(r5),r6
    fb08:	a8 a2 01 b0 	l.ori r5,r2,0x1b0
    fb0c:	d4 05 38 00 	l.sw 0x0(r5),r7
    fb10:	9c a8 ff fa 	l.addi r5,r8,0xfffffffa
    fb14:	84 d0 00 24 	l.lwz r6,0x24(r16)
    fb18:	bc 45 00 02 	l.sfgtui r5,0x2
    fb1c:	10 00 00 0e 	l.bf fb54 <mctl_core_init_standby+0x12e8>
    fb20:	a8 a2 00 dc 	l.ori r5,r2,0xdc
    fb24:	b8 c6 00 10 	l.slli r6,r6,0x10
    fb28:	84 f0 00 28 	l.lwz r7,0x28(r16)
    fb2c:	bc 08 00 08 	l.sfeqi r8,0x8
    fb30:	e0 c6 38 04 	l.or r6,r6,r7
    fb34:	d4 05 30 00 	l.sw 0x0(r5),r6
    fb38:	84 b0 00 2c 	l.lwz r5,0x2c(r16)
    fb3c:	b8 a5 00 10 	l.slli r5,r5,0x10
    fb40:	d4 04 28 00 	l.sw 0x0(r4),r5
    fb44:	10 00 00 19 	l.bf fba8 <mctl_core_init_standby+0x133c>
    fb48:	18 a0 04 82 	l.movhi r5,0x482
    fb4c:	00 00 00 25 	l.j fbe0 <mctl_core_init_standby+0x1374>
    fb50:	9c c0 f0 0f 	l.addi r6,r0,0xfffff00f
    fb54:	84 f0 00 20 	l.lwz r7,0x20(r16)
    fb58:	b8 e7 00 10 	l.slli r7,r7,0x10
    fb5c:	e0 c7 30 04 	l.or r6,r7,r6
    fb60:	d4 05 30 00 	l.sw 0x0(r5),r6
    fb64:	84 b0 00 28 	l.lwz r5,0x28(r16)
    fb68:	84 d0 00 2c 	l.lwz r6,0x2c(r16)
    fb6c:	b8 a5 00 10 	l.slli r5,r5,0x10
    fb70:	e0 a5 30 04 	l.or r5,r5,r6
    fb74:	d4 04 28 00 	l.sw 0x0(r4),r5
    fb78:	84 81 00 00 	l.lwz r4,0x0(r1)
    fb7c:	bc 24 00 04 	l.sfnei r4,0x4
    fb80:	10 00 00 17 	l.bf fbdc <mctl_core_init_standby+0x1370>
    fb84:	18 a0 04 82 	l.movhi r5,0x482
    fb88:	84 d0 00 30 	l.lwz r6,0x30(r16)
    fb8c:	84 b0 00 34 	l.lwz r5,0x34(r16)
    fb90:	b8 c6 00 10 	l.slli r6,r6,0x10
    fb94:	e0 c6 28 04 	l.or r6,r6,r5
    fb98:	a8 a2 00 e8 	l.ori r5,r2,0xe8
    fb9c:	d4 05 30 00 	l.sw 0x0(r5),r6
    fba0:	00 00 00 0c 	l.j fbd0 <mctl_core_init_standby+0x1364>
    fba4:	84 d0 00 38 	l.lwz r6,0x38(r16)
    fba8:	84 d0 00 3c 	l.lwz r6,0x3c(r16)
    fbac:	84 b0 00 40 	l.lwz r5,0x40(r16)
    fbb0:	b8 c6 00 10 	l.slli r6,r6,0x10
    fbb4:	e0 c6 28 04 	l.or r6,r6,r5
    fbb8:	a8 a2 00 e8 	l.ori r5,r2,0xe8
    fbbc:	d4 05 30 00 	l.sw 0x0(r5),r6
    fbc0:	84 d0 00 54 	l.lwz r6,0x54(r16)
    fbc4:	84 b0 00 48 	l.lwz r5,0x48(r16)
    fbc8:	b8 c6 00 10 	l.slli r6,r6,0x10
    fbcc:	e0 c6 28 04 	l.or r6,r6,r5
    fbd0:	a8 a2 00 ec 	l.ori r5,r2,0xec
    fbd4:	d4 05 30 00 	l.sw 0x0(r5),r6
    fbd8:	18 a0 04 82 	l.movhi r5,0x482
    fbdc:	9c c0 f0 0f 	l.addi r6,r0,0xfffff00f
    fbe0:	a8 45 00 f4 	l.ori r2,r5,0xf4
    fbe4:	84 a2 00 00 	l.lwz r5,0x0(r2)
    fbe8:	e0 a5 30 03 	l.and r5,r5,r6
    fbec:	a8 a5 06 60 	l.ori r5,r5,0x660
    fbf0:	d4 02 28 00 	l.sw 0x0(r2),r5
    fbf4:	84 b0 00 78 	l.lwz r5,0x78(r16)
    fbf8:	a4 a5 00 20 	l.andi r5,r5,0x20
    fbfc:	bc 25 00 00 	l.sfnei r5,0x0
    fc00:	10 00 00 0a 	l.bf fc28 <mctl_core_init_standby+0x13bc>
    fc04:	b8 8b 00 10 	l.slli r4,r11,0x10
    fc08:	9c 8b ff ff 	l.addi r4,r11,0xffffffff
    fc0c:	9c 43 ff ff 	l.addi r2,r3,0xffffffff
    fc10:	b8 84 00 10 	l.slli r4,r4,0x10
    fc14:	18 e0 02 80 	l.movhi r7,0x280
    fc18:	e0 42 20 04 	l.or r2,r2,r4
    fc1c:	a8 e7 80 00 	l.ori r7,r7,0x8000
    fc20:	00 00 00 06 	l.j fc38 <mctl_core_init_standby+0x13cc>
    fc24:	e0 62 38 04 	l.or r3,r2,r7
    fc28:	19 00 02 80 	l.movhi r8,0x280
    fc2c:	e0 43 20 04 	l.or r2,r3,r4
    fc30:	a9 08 80 00 	l.ori r8,r8,0x8000
    fc34:	e0 62 40 04 	l.or r3,r2,r8
    fc38:	18 40 04 82 	l.movhi r2,0x482
    fc3c:	18 a0 00 10 	l.movhi r5,0x10
    fc40:	a8 82 01 90 	l.ori r4,r2,0x190
    fc44:	85 61 00 2c 	l.lwz r11,0x2c(r1)
    fc48:	d4 04 18 00 	l.sw 0x0(r4),r3
    fc4c:	a8 a5 02 02 	l.ori r5,r5,0x202
    fc50:	a8 82 01 94 	l.ori r4,r2,0x194
    fc54:	b8 6b 00 10 	l.slli r3,r11,0x10
    fc58:	d4 04 28 00 	l.sw 0x0(r4),r5
    fc5c:	84 81 00 48 	l.lwz r4,0x48(r1)
    fc60:	9c a0 00 00 	l.addi r5,r0,0x0
    fc64:	e0 63 20 04 	l.or r3,r3,r4
    fc68:	a8 82 00 64 	l.ori r4,r2,0x64
    fc6c:	18 c0 c0 00 	l.movhi r6,0xc000
    fc70:	d4 04 18 00 	l.sw 0x0(r4),r3
    fc74:	a8 62 00 30 	l.ori r3,r2,0x30
    fc78:	d4 03 28 00 	l.sw 0x0(r3),r5
    fc7c:	a8 62 01 a0 	l.ori r3,r2,0x1a0
    fc80:	84 83 00 00 	l.lwz r4,0x0(r3)
    fc84:	e0 84 30 04 	l.or r4,r4,r6
    fc88:	d4 03 20 00 	l.sw 0x0(r3),r4
    fc8c:	a8 62 01 80 	l.ori r3,r2,0x180
    fc90:	84 83 00 00 	l.lwz r4,0x0(r3)
    fc94:	e0 84 30 04 	l.or r4,r4,r6
    fc98:	d4 03 20 00 	l.sw 0x0(r3),r4
    fc9c:	a8 62 21 80 	l.ori r3,r2,0x2180
    fca0:	84 83 00 00 	l.lwz r4,0x0(r3)
    fca4:	e0 84 30 04 	l.or r4,r4,r6
    fca8:	d4 03 20 00 	l.sw 0x0(r3),r4
    fcac:	a8 62 31 80 	l.ori r3,r2,0x3180
    fcb0:	a8 42 41 80 	l.ori r2,r2,0x4180
    fcb4:	84 83 00 00 	l.lwz r4,0x0(r3)
    fcb8:	e0 84 30 04 	l.or r4,r4,r6
    fcbc:	d4 03 20 00 	l.sw 0x0(r3),r4
    fcc0:	84 62 00 00 	l.lwz r3,0x0(r2)
    fcc4:	e0 63 30 04 	l.or r3,r3,r6
    fcc8:	d4 02 18 00 	l.sw 0x0(r2),r3
    fccc:	84 50 00 04 	l.lwz r2,0x4(r16)
    fcd0:	ac 62 00 08 	l.xori r3,r2,0x8
    fcd4:	e0 80 18 02 	l.sub r4,r0,r3
    fcd8:	e0 64 18 04 	l.or r3,r4,r3
    fcdc:	e5 63 28 00 	l.sfges r3,r5
    fce0:	10 00 00 07 	l.bf fcfc <mctl_core_init_standby+0x1490>
    fce4:	ac 42 00 04 	l.xori r2,r2,0x4
    fce8:	e0 60 10 02 	l.sub r3,r0,r2
    fcec:	e0 43 10 04 	l.or r2,r3,r2
    fcf0:	e5 82 28 00 	l.sflts r2,r5
    fcf4:	10 00 00 0c 	l.bf fd24 <mctl_core_init_standby+0x14b8>
    fcf8:	15 00 00 00 	l.nop 0x0
    fcfc:	84 50 00 78 	l.lwz r2,0x78(r16)
    fd00:	18 e0 20 00 	l.movhi r7,0x2000
    fd04:	e0 42 38 03 	l.and r2,r2,r7
    fd08:	bc 02 00 00 	l.sfeqi r2,0x0
    fd0c:	10 00 00 06 	l.bf fd24 <mctl_core_init_standby+0x14b8>
    fd10:	18 40 04 82 	l.movhi r2,0x482
    fd14:	a8 42 01 c0 	l.ori r2,r2,0x1c0
    fd18:	84 62 00 00 	l.lwz r3,0x0(r2)
    fd1c:	a8 63 00 04 	l.ori r3,r3,0x4
    fd20:	d4 02 18 00 	l.sw 0x0(r2),r3
    fd24:	07 ff fa 6e 	l.jal e6dc <mctl_com_set_controller_refresh_standby.clone.2>
    fd28:	9c 60 00 01 	l.addi r3,r0,0x1
    fd2c:	18 60 04 82 	l.movhi r3,0x482
    fd30:	9d 00 00 00 	l.addi r8,r0,0x0
    fd34:	a8 43 00 30 	l.ori r2,r3,0x30
    fd38:	a8 63 01 b0 	l.ori r3,r3,0x1b0
    fd3c:	d4 02 40 00 	l.sw 0x0(r2),r8
    fd40:	9d 60 ff fe 	l.addi r11,r0,0xfffffffe
    fd44:	84 83 00 00 	l.lwz r4,0x0(r3)
    fd48:	18 a0 01 00 	l.movhi r5,0x100
    fd4c:	e0 84 58 03 	l.and r4,r4,r11
    fd50:	d4 03 20 00 	l.sw 0x0(r3),r4
    fd54:	84 62 00 00 	l.lwz r3,0x0(r2)
    fd58:	a8 63 00 20 	l.ori r3,r3,0x20
    fd5c:	d4 02 18 00 	l.sw 0x0(r2),r3
    fd60:	18 40 04 81 	l.movhi r2,0x481
    fd64:	a8 62 00 20 	l.ori r3,r2,0x20
    fd68:	a8 42 00 08 	l.ori r2,r2,0x8
    fd6c:	84 83 00 00 	l.lwz r4,0x0(r3)
    fd70:	a8 84 01 00 	l.ori r4,r4,0x100
    fd74:	d4 03 20 00 	l.sw 0x0(r3),r4
    fd78:	18 80 fe ff 	l.movhi r4,0xfeff
    fd7c:	84 62 00 00 	l.lwz r3,0x0(r2)
    fd80:	a8 84 ff ff 	l.ori r4,r4,0xffff
    fd84:	e0 63 20 03 	l.and r3,r3,r4
    fd88:	a8 63 02 00 	l.ori r3,r3,0x200
    fd8c:	d4 02 18 00 	l.sw 0x0(r2),r3
    fd90:	84 62 00 00 	l.lwz r3,0x0(r2)
    fd94:	e0 63 28 04 	l.or r3,r3,r5
    fd98:	d4 02 18 00 	l.sw 0x0(r2),r3
    fd9c:	84 90 00 04 	l.lwz r4,0x4(r16)
    fda0:	bc 24 00 08 	l.sfnei r4,0x8
    fda4:	10 00 00 07 	l.bf fdc0 <mctl_core_init_standby+0x1554>
    fda8:	9c c0 ff 7f 	l.addi r6,r0,0xffffff7f
    fdac:	18 40 04 83 	l.movhi r2,0x483
    fdb0:	a8 42 00 04 	l.ori r2,r2,0x4
    fdb4:	84 62 00 00 	l.lwz r3,0x0(r2)
    fdb8:	e0 63 30 03 	l.and r3,r3,r6
    fdbc:	d4 02 18 00 	l.sw 0x0(r2),r3
    fdc0:	18 40 04 83 	l.movhi r2,0x483
    fdc4:	84 70 00 1c 	l.lwz r3,0x1c(r16)
    fdc8:	a8 42 00 3c 	l.ori r2,r2,0x3c
    fdcc:	9c e0 ff f0 	l.addi r7,r0,0xfffffff0
    fdd0:	84 42 00 00 	l.lwz r2,0x0(r2)
    fdd4:	a4 63 00 01 	l.andi r3,r3,0x1
    fdd8:	bc 03 00 00 	l.sfeqi r3,0x0
    fddc:	10 00 00 04 	l.bf fdec <mctl_core_init_standby+0x1580>
    fde0:	e0 42 38 03 	l.and r2,r2,r7
    fde4:	00 00 00 03 	l.j fdf0 <mctl_core_init_standby+0x1584>
    fde8:	a8 42 00 03 	l.ori r2,r2,0x3
    fdec:	a8 42 00 0f 	l.ori r2,r2,0xf
    fdf0:	18 60 04 83 	l.movhi r3,0x483
    fdf4:	a8 63 00 3c 	l.ori r3,r3,0x3c
    fdf8:	d4 03 10 00 	l.sw 0x0(r3),r2
    fdfc:	9c 44 ff fd 	l.addi r2,r4,0xfffffffd
    fe00:	bc 42 00 05 	l.sfgtui r2,0x5
    fe04:	10 00 00 0b 	l.bf fe30 <mctl_core_init_standby+0x15c4>
    fe08:	19 00 00 01 	l.movhi r8,0x1
    fe0c:	19 60 00 01 	l.movhi r11,0x1
    fe10:	b8 42 00 02 	l.slli r2,r2,0x2
    fe14:	a9 08 2f fc 	l.ori r8,r8,0x2ffc
    fe18:	a9 6b 30 14 	l.ori r11,r11,0x3014
    fe1c:	e0 62 40 00 	l.add r3,r2,r8
    fe20:	e0 42 58 00 	l.add r2,r2,r11
    fe24:	84 a3 00 00 	l.lwz r5,0x0(r3)
    fe28:	00 00 00 04 	l.j fe38 <mctl_core_init_standby+0x15cc>
    fe2c:	84 62 00 00 	l.lwz r3,0x0(r2)
    fe30:	9c 60 00 09 	l.addi r3,r0,0x9
    fe34:	9c a0 00 0d 	l.addi r5,r0,0xd
    fe38:	18 40 04 83 	l.movhi r2,0x483
    fe3c:	a8 c2 00 14 	l.ori r6,r2,0x14
    fe40:	d4 06 28 00 	l.sw 0x0(r6),r5
    fe44:	a8 c2 03 5c 	l.ori r6,r2,0x35c
    fe48:	d4 06 28 00 	l.sw 0x0(r6),r5
    fe4c:	a8 c2 03 68 	l.ori r6,r2,0x368
    fe50:	d4 06 28 00 	l.sw 0x0(r6),r5
    fe54:	a8 c2 03 74 	l.ori r6,r2,0x374
    fe58:	d4 06 28 00 	l.sw 0x0(r6),r5
    fe5c:	9c c0 00 00 	l.addi r6,r0,0x0
    fe60:	a8 a2 00 18 	l.ori r5,r2,0x18
    fe64:	d4 05 30 00 	l.sw 0x0(r5),r6
    fe68:	a8 a2 03 60 	l.ori r5,r2,0x360
    fe6c:	d4 05 30 00 	l.sw 0x0(r5),r6
    fe70:	a8 a2 03 6c 	l.ori r5,r2,0x36c
    fe74:	d4 05 30 00 	l.sw 0x0(r5),r6
    fe78:	a8 a2 03 78 	l.ori r5,r2,0x378
    fe7c:	d4 05 30 00 	l.sw 0x0(r5),r6
    fe80:	a8 a2 00 1c 	l.ori r5,r2,0x1c
    fe84:	d4 05 18 00 	l.sw 0x0(r5),r3
    fe88:	a8 a2 03 64 	l.ori r5,r2,0x364
    fe8c:	d4 05 18 00 	l.sw 0x0(r5),r3
    fe90:	a8 a2 03 70 	l.ori r5,r2,0x370
    fe94:	d4 05 18 00 	l.sw 0x0(r5),r3
    fe98:	a8 a2 03 7c 	l.ori r5,r2,0x37c
    fe9c:	d4 05 18 00 	l.sw 0x0(r5),r3
    fea0:	18 60 03 00 	l.movhi r3,0x300
    fea4:	84 b0 00 04 	l.lwz r5,0x4(r16)
    fea8:	a8 63 62 00 	l.ori r3,r3,0x6200
    feac:	84 63 00 00 	l.lwz r3,0x0(r3)
    feb0:	a4 63 ff ff 	l.andi r3,r3,0xffff
    feb4:	bc 03 24 00 	l.sfeqi r3,0x2400
    feb8:	10 00 00 06 	l.bf fed0 <mctl_core_init_standby+0x1664>
    febc:	bc 05 00 03 	l.sfeqi r5,0x3
    fec0:	bc 23 08 00 	l.sfnei r3,0x800
    fec4:	10 00 00 24 	l.bf ff54 <mctl_core_init_standby+0x16e8>
    fec8:	bc 05 00 04 	l.sfeqi r5,0x4
    fecc:	bc 05 00 03 	l.sfeqi r5,0x3
    fed0:	10 00 00 06 	l.bf fee8 <mctl_core_init_standby+0x167c>
    fed4:	bc 05 00 08 	l.sfeqi r5,0x8
    fed8:	0c 00 00 5e 	l.bnf 10050 <mctl_core_init_standby+0x17e4>
    fedc:	15 00 00 00 	l.nop 0x0
    fee0:	00 00 00 10 	l.j ff20 <mctl_core_init_standby+0x16b4>
    fee4:	18 60 00 01 	l.movhi r3,0x1
    fee8:	18 60 00 01 	l.movhi r3,0x1
    feec:	18 40 04 83 	l.movhi r2,0x483
    fef0:	a8 63 2f c4 	l.ori r3,r3,0x2fc4
    fef4:	a8 42 00 c0 	l.ori r2,r2,0xc0
    fef8:	8c a3 00 00 	l.lbz r5,0x0(r3)
    fefc:	18 e0 04 83 	l.movhi r7,0x483
    ff00:	d4 02 28 00 	l.sw 0x0(r2),r5
    ff04:	a8 e7 01 2c 	l.ori r7,r7,0x12c
    ff08:	9c 42 00 04 	l.addi r2,r2,0x4
    ff0c:	e4 22 38 00 	l.sfne r2,r7
    ff10:	13 ff ff fa 	l.bf fef8 <mctl_core_init_standby+0x168c>
    ff14:	9c 63 00 01 	l.addi r3,r3,0x1
    ff18:	00 00 00 4f 	l.j 10054 <mctl_core_init_standby+0x17e8>
    ff1c:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
    ff20:	18 40 04 83 	l.movhi r2,0x483
    ff24:	a8 63 2f 54 	l.ori r3,r3,0x2f54
    ff28:	a8 42 00 c0 	l.ori r2,r2,0xc0
    ff2c:	8c a3 00 00 	l.lbz r5,0x0(r3)
    ff30:	19 00 04 83 	l.movhi r8,0x483
    ff34:	d4 02 28 00 	l.sw 0x0(r2),r5
    ff38:	a9 08 01 2c 	l.ori r8,r8,0x12c
    ff3c:	9c 42 00 04 	l.addi r2,r2,0x4
    ff40:	e4 22 40 00 	l.sfne r2,r8
    ff44:	13 ff ff fa 	l.bf ff2c <mctl_core_init_standby+0x16c0>
    ff48:	9c 63 00 01 	l.addi r3,r3,0x1
    ff4c:	00 00 00 42 	l.j 10054 <mctl_core_init_standby+0x17e8>
    ff50:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
    ff54:	10 00 00 1b 	l.bf ffc0 <mctl_core_init_standby+0x1754>
    ff58:	bc 45 00 04 	l.sfgtui r5,0x4
    ff5c:	10 00 00 07 	l.bf ff78 <mctl_core_init_standby+0x170c>
    ff60:	bc 05 00 07 	l.sfeqi r5,0x7
    ff64:	bc 05 00 03 	l.sfeqi r5,0x3
    ff68:	0c 00 00 3a 	l.bnf 10050 <mctl_core_init_standby+0x17e4>
    ff6c:	15 00 00 00 	l.nop 0x0
    ff70:	00 00 00 08 	l.j ff90 <mctl_core_init_standby+0x1724>
    ff74:	18 60 00 01 	l.movhi r3,0x1
    ff78:	10 00 00 1f 	l.bf fff4 <mctl_core_init_standby+0x1788>
    ff7c:	bc 05 00 08 	l.sfeqi r5,0x8
    ff80:	0c 00 00 34 	l.bnf 10050 <mctl_core_init_standby+0x17e4>
    ff84:	15 00 00 00 	l.nop 0x0
    ff88:	00 00 00 28 	l.j 10028 <mctl_core_init_standby+0x17bc>
    ff8c:	18 60 00 01 	l.movhi r3,0x1
    ff90:	a8 42 00 c0 	l.ori r2,r2,0xc0
    ff94:	a8 63 2f e0 	l.ori r3,r3,0x2fe0
    ff98:	8c a3 00 00 	l.lbz r5,0x0(r3)
    ff9c:	19 60 04 83 	l.movhi r11,0x483
    ffa0:	d4 02 28 00 	l.sw 0x0(r2),r5
    ffa4:	a9 6b 01 2c 	l.ori r11,r11,0x12c
    ffa8:	9c 42 00 04 	l.addi r2,r2,0x4
    ffac:	e4 22 58 00 	l.sfne r2,r11
    ffb0:	13 ff ff fa 	l.bf ff98 <mctl_core_init_standby+0x172c>
    ffb4:	9c 63 00 01 	l.addi r3,r3,0x1
    ffb8:	00 00 00 27 	l.j 10054 <mctl_core_init_standby+0x17e8>
    ffbc:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
    ffc0:	18 60 00 01 	l.movhi r3,0x1
    ffc4:	a8 42 00 c0 	l.ori r2,r2,0xc0
    ffc8:	a8 63 2f a8 	l.ori r3,r3,0x2fa8
    ffcc:	8c a3 00 00 	l.lbz r5,0x0(r3)
    ffd0:	d4 02 28 00 	l.sw 0x0(r2),r5
    ffd4:	18 a0 04 83 	l.movhi r5,0x483
    ffd8:	9c 42 00 04 	l.addi r2,r2,0x4
    ffdc:	a8 a5 01 2c 	l.ori r5,r5,0x12c
    ffe0:	e4 22 28 00 	l.sfne r2,r5
    ffe4:	13 ff ff fa 	l.bf ffcc <mctl_core_init_standby+0x1760>
    ffe8:	9c 63 00 01 	l.addi r3,r3,0x1
    ffec:	00 00 00 1a 	l.j 10054 <mctl_core_init_standby+0x17e8>
    fff0:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
    fff4:	18 60 00 01 	l.movhi r3,0x1
    fff8:	a8 42 00 c0 	l.ori r2,r2,0xc0
    fffc:	a8 63 2f 8c 	l.ori r3,r3,0x2f8c
   10000:	8c a3 00 00 	l.lbz r5,0x0(r3)
   10004:	18 c0 04 83 	l.movhi r6,0x483
   10008:	d4 02 28 00 	l.sw 0x0(r2),r5
   1000c:	a8 c6 01 2c 	l.ori r6,r6,0x12c
   10010:	9c 42 00 04 	l.addi r2,r2,0x4
   10014:	e4 22 30 00 	l.sfne r2,r6
   10018:	13 ff ff fa 	l.bf 10000 <mctl_core_init_standby+0x1794>
   1001c:	9c 63 00 01 	l.addi r3,r3,0x1
   10020:	00 00 00 0d 	l.j 10054 <mctl_core_init_standby+0x17e8>
   10024:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
   10028:	a8 42 00 c0 	l.ori r2,r2,0xc0
   1002c:	a8 63 2f 70 	l.ori r3,r3,0x2f70
   10030:	8c a3 00 00 	l.lbz r5,0x0(r3)
   10034:	18 e0 04 83 	l.movhi r7,0x483
   10038:	d4 02 28 00 	l.sw 0x0(r2),r5
   1003c:	a8 e7 01 2c 	l.ori r7,r7,0x12c
   10040:	9c 42 00 04 	l.addi r2,r2,0x4
   10044:	e4 22 38 00 	l.sfne r2,r7
   10048:	13 ff ff fa 	l.bf 10030 <mctl_core_init_standby+0x17c4>
   1004c:	9c 63 00 01 	l.addi r3,r3,0x1
   10050:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
   10054:	b8 46 00 50 	l.srli r2,r6,0x10
   10058:	bc 02 00 00 	l.sfeqi r2,0x0
   1005c:	10 00 00 be 	l.bf 10354 <mctl_core_init_standby+0x1ae8>
   10060:	18 40 03 00 	l.movhi r2,0x300
   10064:	84 b0 00 04 	l.lwz r5,0x4(r16)
   10068:	a8 42 62 00 	l.ori r2,r2,0x6200
   1006c:	bd 66 00 00 	l.sfgesi r6,0x0
   10070:	84 62 00 00 	l.lwz r3,0x0(r2)
   10074:	10 00 00 04 	l.bf 10084 <mctl_core_init_standby+0x1818>
   10078:	a4 63 ff ff 	l.andi r3,r3,0xffff
   1007c:	00 00 00 13 	l.j 100c8 <mctl_core_init_standby+0x185c>
   10080:	84 50 00 58 	l.lwz r2,0x58(r16)
   10084:	b8 e6 00 05 	l.slli r7,r6,0x5
   10088:	b8 46 00 09 	l.slli r2,r6,0x9
   1008c:	19 00 00 1e 	l.movhi r8,0x1e
   10090:	a4 e7 1e 00 	l.andi r7,r7,0x1e00
   10094:	e0 42 40 03 	l.and r2,r2,r8
   10098:	b9 06 00 0d 	l.slli r8,r6,0xd
   1009c:	e0 47 10 04 	l.or r2,r7,r2
   100a0:	a4 e6 00 0f 	l.andi r7,r6,0xf
   100a4:	19 60 1e 00 	l.movhi r11,0x1e00
   100a8:	e0 e7 38 00 	l.add r7,r7,r7
   100ac:	b8 c6 00 5d 	l.srli r6,r6,0x1d
   100b0:	e0 42 38 04 	l.or r2,r2,r7
   100b4:	e1 08 58 03 	l.and r8,r8,r11
   100b8:	bc 06 00 00 	l.sfeqi r6,0x0
   100bc:	10 00 00 03 	l.bf 100c8 <mctl_core_init_standby+0x185c>
   100c0:	e0 42 40 04 	l.or r2,r2,r8
   100c4:	e0 42 10 00 	l.add r2,r2,r2
   100c8:	bc 03 24 00 	l.sfeqi r3,0x2400
   100cc:	10 00 00 06 	l.bf 100e4 <mctl_core_init_standby+0x1878>
   100d0:	bc 05 00 03 	l.sfeqi r5,0x3
   100d4:	bc 23 08 00 	l.sfnei r3,0x800
   100d8:	10 00 00 35 	l.bf 101ac <mctl_core_init_standby+0x1940>
   100dc:	bc 05 00 04 	l.sfeqi r5,0x4
   100e0:	bc 05 00 03 	l.sfeqi r5,0x3
   100e4:	10 00 00 06 	l.bf 100fc <mctl_core_init_standby+0x1890>
   100e8:	bc 05 00 08 	l.sfeqi r5,0x8
   100ec:	0c 00 00 9a 	l.bnf 10354 <mctl_core_init_standby+0x1ae8>
   100f0:	b8 a2 00 48 	l.srli r5,r2,0x8
   100f4:	00 00 00 1b 	l.j 10160 <mctl_core_init_standby+0x18f4>
   100f8:	18 60 04 83 	l.movhi r3,0x483
   100fc:	b8 a2 00 48 	l.srli r5,r2,0x8
   10100:	18 60 04 83 	l.movhi r3,0x483
   10104:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   10108:	a8 63 07 80 	l.ori r3,r3,0x780
   1010c:	18 c0 04 83 	l.movhi r6,0x483
   10110:	d4 03 28 00 	l.sw 0x0(r3),r5
   10114:	a8 c6 08 00 	l.ori r6,r6,0x800
   10118:	9c 63 00 04 	l.addi r3,r3,0x4
   1011c:	e4 23 30 00 	l.sfne r3,r6
   10120:	13 ff ff fc 	l.bf 10110 <mctl_core_init_standby+0x18a4>
   10124:	18 c0 04 83 	l.movhi r6,0x483
   10128:	18 60 04 83 	l.movhi r3,0x483
   1012c:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   10130:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   10134:	d4 06 28 00 	l.sw 0x0(r6),r5
   10138:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   1013c:	d4 06 28 00 	l.sw 0x0(r6),r5
   10140:	b8 c2 00 50 	l.srli r6,r2,0x10
   10144:	b8 42 00 58 	l.srli r2,r2,0x18
   10148:	a8 a3 07 e4 	l.ori r5,r3,0x7e4
   1014c:	a4 c6 00 3f 	l.andi r6,r6,0x3f
   10150:	a4 42 00 3f 	l.andi r2,r2,0x3f
   10154:	d4 05 30 00 	l.sw 0x0(r5),r6
   10158:	00 00 00 7e 	l.j 10350 <mctl_core_init_standby+0x1ae4>
   1015c:	a8 63 23 88 	l.ori r3,r3,0x2388
   10160:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   10164:	a8 63 07 80 	l.ori r3,r3,0x780
   10168:	18 e0 04 83 	l.movhi r7,0x483
   1016c:	d4 03 28 00 	l.sw 0x0(r3),r5
   10170:	a8 e7 08 00 	l.ori r7,r7,0x800
   10174:	9c 63 00 04 	l.addi r3,r3,0x4
   10178:	e4 23 38 00 	l.sfne r3,r7
   1017c:	13 ff ff fc 	l.bf 1016c <mctl_core_init_standby+0x1900>
   10180:	18 e0 04 83 	l.movhi r7,0x483
   10184:	18 60 04 83 	l.movhi r3,0x483
   10188:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   1018c:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   10190:	d4 06 28 00 	l.sw 0x0(r6),r5
   10194:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   10198:	d4 06 28 00 	l.sw 0x0(r6),r5
   1019c:	b8 c2 00 50 	l.srli r6,r2,0x10
   101a0:	a8 a3 07 e4 	l.ori r5,r3,0x7e4
   101a4:	00 00 00 50 	l.j 102e4 <mctl_core_init_standby+0x1a78>
   101a8:	a4 c6 00 3f 	l.andi r6,r6,0x3f
   101ac:	10 00 00 25 	l.bf 10240 <mctl_core_init_standby+0x19d4>
   101b0:	bc 45 00 04 	l.sfgtui r5,0x4
   101b4:	10 00 00 07 	l.bf 101d0 <mctl_core_init_standby+0x1964>
   101b8:	bc 05 00 07 	l.sfeqi r5,0x7
   101bc:	bc 05 00 03 	l.sfeqi r5,0x3
   101c0:	0c 00 00 65 	l.bnf 10354 <mctl_core_init_standby+0x1ae8>
   101c4:	b8 a2 00 48 	l.srli r5,r2,0x8
   101c8:	00 00 00 08 	l.j 101e8 <mctl_core_init_standby+0x197c>
   101cc:	18 60 04 83 	l.movhi r3,0x483
   101d0:	10 00 00 31 	l.bf 10294 <mctl_core_init_standby+0x1a28>
   101d4:	bc 05 00 08 	l.sfeqi r5,0x8
   101d8:	0c 00 00 5f 	l.bnf 10354 <mctl_core_init_standby+0x1ae8>
   101dc:	b8 a2 00 48 	l.srli r5,r2,0x8
   101e0:	00 00 00 46 	l.j 102f8 <mctl_core_init_standby+0x1a8c>
   101e4:	18 60 04 83 	l.movhi r3,0x483
   101e8:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   101ec:	a8 63 07 80 	l.ori r3,r3,0x780
   101f0:	19 00 04 83 	l.movhi r8,0x483
   101f4:	d4 03 28 00 	l.sw 0x0(r3),r5
   101f8:	a9 08 08 00 	l.ori r8,r8,0x800
   101fc:	9c 63 00 04 	l.addi r3,r3,0x4
   10200:	e4 23 40 00 	l.sfne r3,r8
   10204:	13 ff ff fc 	l.bf 101f4 <mctl_core_init_standby+0x1988>
   10208:	19 00 04 83 	l.movhi r8,0x483
   1020c:	18 60 04 83 	l.movhi r3,0x483
   10210:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   10214:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   10218:	d4 06 28 00 	l.sw 0x0(r6),r5
   1021c:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   10220:	d4 06 28 00 	l.sw 0x0(r6),r5
   10224:	b8 c2 00 50 	l.srli r6,r2,0x10
   10228:	a8 a3 07 b8 	l.ori r5,r3,0x7b8
   1022c:	b8 42 00 58 	l.srli r2,r2,0x18
   10230:	a4 c6 00 3f 	l.andi r6,r6,0x3f
   10234:	d4 05 30 00 	l.sw 0x0(r5),r6
   10238:	00 00 00 15 	l.j 1028c <mctl_core_init_standby+0x1a20>
   1023c:	a4 42 00 3f 	l.andi r2,r2,0x3f
   10240:	b8 a2 00 48 	l.srli r5,r2,0x8
   10244:	18 60 04 83 	l.movhi r3,0x483
   10248:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   1024c:	a8 63 07 80 	l.ori r3,r3,0x780
   10250:	19 60 04 83 	l.movhi r11,0x483
   10254:	d4 03 28 00 	l.sw 0x0(r3),r5
   10258:	a9 6b 08 00 	l.ori r11,r11,0x800
   1025c:	9c 63 00 04 	l.addi r3,r3,0x4
   10260:	e4 23 58 00 	l.sfne r3,r11
   10264:	13 ff ff fc 	l.bf 10254 <mctl_core_init_standby+0x19e8>
   10268:	19 60 04 83 	l.movhi r11,0x483
   1026c:	18 60 04 83 	l.movhi r3,0x483
   10270:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   10274:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   10278:	b8 42 00 50 	l.srli r2,r2,0x10
   1027c:	d4 06 28 00 	l.sw 0x0(r6),r5
   10280:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   10284:	d4 06 28 00 	l.sw 0x0(r6),r5
   10288:	a4 42 00 3f 	l.andi r2,r2,0x3f
   1028c:	00 00 00 31 	l.j 10350 <mctl_core_init_standby+0x1ae4>
   10290:	a8 63 07 84 	l.ori r3,r3,0x784
   10294:	b8 a2 00 48 	l.srli r5,r2,0x8
   10298:	18 60 04 83 	l.movhi r3,0x483
   1029c:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   102a0:	a8 63 07 80 	l.ori r3,r3,0x780
   102a4:	18 c0 04 83 	l.movhi r6,0x483
   102a8:	d4 03 28 00 	l.sw 0x0(r3),r5
   102ac:	a8 c6 08 00 	l.ori r6,r6,0x800
   102b0:	9c 63 00 04 	l.addi r3,r3,0x4
   102b4:	e4 23 30 00 	l.sfne r3,r6
   102b8:	13 ff ff fc 	l.bf 102a8 <mctl_core_init_standby+0x1a3c>
   102bc:	18 c0 04 83 	l.movhi r6,0x483
   102c0:	18 60 04 83 	l.movhi r3,0x483
   102c4:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   102c8:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   102cc:	d4 06 28 00 	l.sw 0x0(r6),r5
   102d0:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   102d4:	d4 06 28 00 	l.sw 0x0(r6),r5
   102d8:	b8 c2 00 50 	l.srli r6,r2,0x10
   102dc:	a8 a3 07 88 	l.ori r5,r3,0x788
   102e0:	a4 c6 00 3f 	l.andi r6,r6,0x3f
   102e4:	b8 42 00 58 	l.srli r2,r2,0x18
   102e8:	d4 05 30 00 	l.sw 0x0(r5),r6
   102ec:	a8 63 07 90 	l.ori r3,r3,0x790
   102f0:	00 00 00 18 	l.j 10350 <mctl_core_init_standby+0x1ae4>
   102f4:	a4 42 00 3f 	l.andi r2,r2,0x3f
   102f8:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   102fc:	a8 63 07 80 	l.ori r3,r3,0x780
   10300:	18 e0 04 83 	l.movhi r7,0x483
   10304:	d4 03 28 00 	l.sw 0x0(r3),r5
   10308:	a8 e7 08 00 	l.ori r7,r7,0x800
   1030c:	9c 63 00 04 	l.addi r3,r3,0x4
   10310:	e4 23 38 00 	l.sfne r3,r7
   10314:	13 ff ff fc 	l.bf 10304 <mctl_core_init_standby+0x1a98>
   10318:	18 e0 04 83 	l.movhi r7,0x483
   1031c:	18 60 04 83 	l.movhi r3,0x483
   10320:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   10324:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   10328:	d4 06 28 00 	l.sw 0x0(r6),r5
   1032c:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   10330:	d4 06 28 00 	l.sw 0x0(r6),r5
   10334:	b8 c2 00 50 	l.srli r6,r2,0x10
   10338:	b8 42 00 58 	l.srli r2,r2,0x18
   1033c:	a8 a3 07 90 	l.ori r5,r3,0x790
   10340:	a4 c6 00 3f 	l.andi r6,r6,0x3f
   10344:	a4 42 00 3f 	l.andi r2,r2,0x3f
   10348:	d4 05 30 00 	l.sw 0x0(r5),r6
   1034c:	a8 63 07 8c 	l.ori r3,r3,0x78c
   10350:	d4 03 10 00 	l.sw 0x0(r3),r2
   10354:	84 50 00 04 	l.lwz r2,0x4(r16)
   10358:	bc 02 00 04 	l.sfeqi r2,0x4
   1035c:	10 00 00 11 	l.bf 103a0 <mctl_core_init_standby+0x1b34>
   10360:	bc 42 00 04 	l.sfgtui r2,0x4
   10364:	10 00 00 07 	l.bf 10380 <mctl_core_init_standby+0x1b14>
   10368:	bc 02 00 07 	l.sfeqi r2,0x7
   1036c:	bc 02 00 03 	l.sfeqi r2,0x3
   10370:	0c 00 00 19 	l.bnf 103d4 <mctl_core_init_standby+0x1b68>
   10374:	15 00 00 00 	l.nop 0x0
   10378:	00 00 00 08 	l.j 10398 <mctl_core_init_standby+0x1b2c>
   1037c:	8c 50 00 6b 	l.lbz r2,0x6b(r16)
   10380:	10 00 00 0a 	l.bf 103a8 <mctl_core_init_standby+0x1b3c>
   10384:	bc 02 00 08 	l.sfeqi r2,0x8
   10388:	0c 00 00 13 	l.bnf 103d4 <mctl_core_init_standby+0x1b68>
   1038c:	15 00 00 00 	l.nop 0x0
   10390:	00 00 00 0c 	l.j 103c0 <mctl_core_init_standby+0x1b54>
   10394:	8c 50 00 68 	l.lbz r2,0x68(r16)
   10398:	00 00 00 06 	l.j 103b0 <mctl_core_init_standby+0x1b44>
   1039c:	bc 02 00 00 	l.sfeqi r2,0x0
   103a0:	00 00 00 03 	l.j 103ac <mctl_core_init_standby+0x1b40>
   103a4:	8c 50 00 6a 	l.lbz r2,0x6a(r16)
   103a8:	8c 50 00 69 	l.lbz r2,0x69(r16)
   103ac:	bc 02 00 00 	l.sfeqi r2,0x0
   103b0:	10 00 00 0b 	l.bf 103dc <mctl_core_init_standby+0x1b70>
   103b4:	18 60 04 83 	l.movhi r3,0x483
   103b8:	00 00 00 0e 	l.j 103f0 <mctl_core_init_standby+0x1b84>
   103bc:	a8 a3 03 dc 	l.ori r5,r3,0x3dc
   103c0:	bc 02 00 00 	l.sfeqi r2,0x0
   103c4:	10 00 00 08 	l.bf 103e4 <mctl_core_init_standby+0x1b78>
   103c8:	18 60 04 83 	l.movhi r3,0x483
   103cc:	00 00 00 09 	l.j 103f0 <mctl_core_init_standby+0x1b84>
   103d0:	a8 a3 03 dc 	l.ori r5,r3,0x3dc
   103d4:	00 00 00 05 	l.j 103e8 <mctl_core_init_standby+0x1b7c>
   103d8:	9c 40 00 00 	l.addi r2,r0,0x0
   103dc:	00 00 00 03 	l.j 103e8 <mctl_core_init_standby+0x1b7c>
   103e0:	9c 40 00 80 	l.addi r2,r0,0x80
   103e4:	9c 40 00 33 	l.addi r2,r0,0x33
   103e8:	18 60 04 83 	l.movhi r3,0x483
   103ec:	a8 a3 03 dc 	l.ori r5,r3,0x3dc
   103f0:	d4 05 10 00 	l.sw 0x0(r5),r2
   103f4:	a8 a3 04 5c 	l.ori r5,r3,0x45c
   103f8:	d4 05 10 00 	l.sw 0x0(r5),r2
   103fc:	a8 a3 03 88 	l.ori r5,r3,0x388
   10400:	84 50 00 0c 	l.lwz r2,0xc(r16)
   10404:	a8 63 03 8c 	l.ori r3,r3,0x38c
   10408:	a4 42 00 1f 	l.andi r2,r2,0x1f
   1040c:	d4 05 10 00 	l.sw 0x0(r5),r2
   10410:	d4 03 10 00 	l.sw 0x0(r3),r2
   10414:	84 50 00 04 	l.lwz r2,0x4(r16)
   10418:	bc 22 00 08 	l.sfnei r2,0x8
   1041c:	10 00 00 03 	l.bf 10428 <mctl_core_init_standby+0x1bbc>
   10420:	9c 40 00 04 	l.addi r2,r0,0x4
   10424:	d4 03 10 00 	l.sw 0x0(r3),r2
   10428:	84 70 00 0c 	l.lwz r3,0xc(r16)
   1042c:	18 40 04 83 	l.movhi r2,0x483
   10430:	b8 63 00 48 	l.srli r3,r3,0x8
   10434:	a8 a2 03 c8 	l.ori r5,r2,0x3c8
   10438:	a8 42 03 cc 	l.ori r2,r2,0x3cc
   1043c:	a4 63 00 1f 	l.andi r3,r3,0x1f
   10440:	d4 05 18 00 	l.sw 0x0(r5),r3
   10444:	d4 02 18 00 	l.sw 0x0(r2),r3
   10448:	84 70 00 04 	l.lwz r3,0x4(r16)
   1044c:	bc 23 00 08 	l.sfnei r3,0x8
   10450:	10 00 00 03 	l.bf 1045c <mctl_core_init_standby+0x1bf0>
   10454:	9c 60 00 04 	l.addi r3,r0,0x4
   10458:	d4 02 18 00 	l.sw 0x0(r2),r3
   1045c:	94 70 00 0c 	l.lhz r3,0xc(r16)
   10460:	18 40 04 83 	l.movhi r2,0x483
   10464:	a4 63 00 1f 	l.andi r3,r3,0x1f
   10468:	a8 a2 04 08 	l.ori r5,r2,0x408
   1046c:	a8 42 04 0c 	l.ori r2,r2,0x40c
   10470:	d4 05 18 00 	l.sw 0x0(r5),r3
   10474:	d4 02 18 00 	l.sw 0x0(r2),r3
   10478:	84 70 00 04 	l.lwz r3,0x4(r16)
   1047c:	bc 23 00 08 	l.sfnei r3,0x8
   10480:	10 00 00 03 	l.bf 1048c <mctl_core_init_standby+0x1c20>
   10484:	9c 60 00 04 	l.addi r3,r0,0x4
   10488:	d4 02 18 00 	l.sw 0x0(r2),r3
   1048c:	8c 70 00 0c 	l.lbz r3,0xc(r16)
   10490:	18 40 04 83 	l.movhi r2,0x483
   10494:	a4 63 00 1f 	l.andi r3,r3,0x1f
   10498:	a8 a2 04 48 	l.ori r5,r2,0x448
   1049c:	a8 42 04 4c 	l.ori r2,r2,0x44c
   104a0:	d4 05 18 00 	l.sw 0x0(r5),r3
   104a4:	d4 02 18 00 	l.sw 0x0(r2),r3
   104a8:	84 70 00 04 	l.lwz r3,0x4(r16)
   104ac:	bc 23 00 08 	l.sfnei r3,0x8
   104b0:	10 00 00 03 	l.bf 104bc <mctl_core_init_standby+0x1c50>
   104b4:	9c 60 00 04 	l.addi r3,r0,0x4
   104b8:	d4 02 18 00 	l.sw 0x0(r2),r3
   104bc:	84 70 00 10 	l.lwz r3,0x10(r16)
   104c0:	18 40 04 83 	l.movhi r2,0x483
   104c4:	a4 63 00 1f 	l.andi r3,r3,0x1f
   104c8:	a8 a2 03 40 	l.ori r5,r2,0x340
   104cc:	d4 05 18 00 	l.sw 0x0(r5),r3
   104d0:	a8 a2 03 44 	l.ori r5,r2,0x344
   104d4:	d4 05 18 00 	l.sw 0x0(r5),r3
   104d8:	a8 a2 03 48 	l.ori r5,r2,0x348
   104dc:	84 70 00 10 	l.lwz r3,0x10(r16)
   104e0:	b8 63 00 48 	l.srli r3,r3,0x8
   104e4:	a4 63 00 1f 	l.andi r3,r3,0x1f
   104e8:	d4 05 18 00 	l.sw 0x0(r5),r3
   104ec:	a8 a2 03 4c 	l.ori r5,r2,0x34c
   104f0:	a8 42 03 80 	l.ori r2,r2,0x380
   104f4:	d4 05 18 00 	l.sw 0x0(r5),r3
   104f8:	84 70 00 08 	l.lwz r3,0x8(r16)
   104fc:	a4 63 00 1f 	l.andi r3,r3,0x1f
   10500:	d4 02 18 00 	l.sw 0x0(r2),r3
   10504:	84 50 00 04 	l.lwz r2,0x4(r16)
   10508:	ac a2 00 07 	l.xori r5,r2,0x7
   1050c:	e0 c0 28 02 	l.sub r6,r0,r5
   10510:	e0 a6 28 04 	l.or r5,r6,r5
   10514:	bd 65 00 00 	l.sfgesi r5,0x0
   10518:	10 00 00 07 	l.bf 10534 <mctl_core_init_standby+0x1cc8>
   1051c:	ac 42 00 04 	l.xori r2,r2,0x4
   10520:	e0 a0 10 02 	l.sub r5,r0,r2
   10524:	e0 45 10 04 	l.or r2,r5,r2
   10528:	bd 82 00 00 	l.sfltsi r2,0x0
   1052c:	10 00 00 07 	l.bf 10548 <mctl_core_init_standby+0x1cdc>
   10530:	18 40 04 83 	l.movhi r2,0x483
   10534:	18 40 04 83 	l.movhi r2,0x483
   10538:	9d 00 00 00 	l.addi r8,r0,0x0
   1053c:	a8 42 03 80 	l.ori r2,r2,0x380
   10540:	d4 02 40 00 	l.sw 0x0(r2),r8
   10544:	18 40 04 83 	l.movhi r2,0x483
   10548:	a8 42 03 84 	l.ori r2,r2,0x384
   1054c:	d4 02 18 00 	l.sw 0x0(r2),r3
   10550:	84 70 00 04 	l.lwz r3,0x4(r16)
   10554:	bc 23 00 08 	l.sfnei r3,0x8
   10558:	10 00 00 03 	l.bf 10564 <mctl_core_init_standby+0x1cf8>
   1055c:	9d 60 00 00 	l.addi r11,r0,0x0
   10560:	d4 02 58 00 	l.sw 0x0(r2),r11
   10564:	84 70 00 08 	l.lwz r3,0x8(r16)
   10568:	18 40 04 83 	l.movhi r2,0x483
   1056c:	b8 63 00 48 	l.srli r3,r3,0x8
   10570:	a8 42 03 c0 	l.ori r2,r2,0x3c0
   10574:	a4 63 00 1f 	l.andi r3,r3,0x1f
   10578:	d4 02 18 00 	l.sw 0x0(r2),r3
   1057c:	84 50 00 04 	l.lwz r2,0x4(r16)
   10580:	ac a2 00 07 	l.xori r5,r2,0x7
   10584:	e0 c0 28 02 	l.sub r6,r0,r5
   10588:	e0 a6 28 04 	l.or r5,r6,r5
   1058c:	bd 65 00 00 	l.sfgesi r5,0x0
   10590:	10 00 00 07 	l.bf 105ac <mctl_core_init_standby+0x1d40>
   10594:	ac 42 00 04 	l.xori r2,r2,0x4
   10598:	e0 a0 10 02 	l.sub r5,r0,r2
   1059c:	e0 45 10 04 	l.or r2,r5,r2
   105a0:	bd 82 00 00 	l.sfltsi r2,0x0
   105a4:	10 00 00 07 	l.bf 105c0 <mctl_core_init_standby+0x1d54>
   105a8:	18 40 04 83 	l.movhi r2,0x483
   105ac:	18 40 04 83 	l.movhi r2,0x483
   105b0:	9c a0 00 00 	l.addi r5,r0,0x0
   105b4:	a8 42 03 c0 	l.ori r2,r2,0x3c0
   105b8:	d4 02 28 00 	l.sw 0x0(r2),r5
   105bc:	18 40 04 83 	l.movhi r2,0x483
   105c0:	a8 42 03 c4 	l.ori r2,r2,0x3c4
   105c4:	d4 02 18 00 	l.sw 0x0(r2),r3
   105c8:	84 70 00 04 	l.lwz r3,0x4(r16)
   105cc:	bc 23 00 08 	l.sfnei r3,0x8
   105d0:	10 00 00 03 	l.bf 105dc <mctl_core_init_standby+0x1d70>
   105d4:	9c c0 00 00 	l.addi r6,r0,0x0
   105d8:	d4 02 30 00 	l.sw 0x0(r2),r6
   105dc:	94 70 00 08 	l.lhz r3,0x8(r16)
   105e0:	18 40 04 83 	l.movhi r2,0x483
   105e4:	a4 63 00 1f 	l.andi r3,r3,0x1f
   105e8:	a8 42 04 00 	l.ori r2,r2,0x400
   105ec:	d4 02 18 00 	l.sw 0x0(r2),r3
   105f0:	84 50 00 04 	l.lwz r2,0x4(r16)
   105f4:	ac a2 00 07 	l.xori r5,r2,0x7
   105f8:	e0 c0 28 02 	l.sub r6,r0,r5
   105fc:	e0 a6 28 04 	l.or r5,r6,r5
   10600:	bd 65 00 00 	l.sfgesi r5,0x0
   10604:	10 00 00 07 	l.bf 10620 <mctl_core_init_standby+0x1db4>
   10608:	ac 42 00 04 	l.xori r2,r2,0x4
   1060c:	e0 a0 10 02 	l.sub r5,r0,r2
   10610:	e0 45 10 04 	l.or r2,r5,r2
   10614:	bd 82 00 00 	l.sfltsi r2,0x0
   10618:	10 00 00 07 	l.bf 10634 <mctl_core_init_standby+0x1dc8>
   1061c:	18 40 04 83 	l.movhi r2,0x483
   10620:	18 40 04 83 	l.movhi r2,0x483
   10624:	9c e0 00 00 	l.addi r7,r0,0x0
   10628:	a8 42 04 00 	l.ori r2,r2,0x400
   1062c:	d4 02 38 00 	l.sw 0x0(r2),r7
   10630:	18 40 04 83 	l.movhi r2,0x483
   10634:	a8 42 04 04 	l.ori r2,r2,0x404
   10638:	d4 02 18 00 	l.sw 0x0(r2),r3
   1063c:	84 70 00 04 	l.lwz r3,0x4(r16)
   10640:	bc 23 00 08 	l.sfnei r3,0x8
   10644:	10 00 00 03 	l.bf 10650 <mctl_core_init_standby+0x1de4>
   10648:	9d 00 00 00 	l.addi r8,r0,0x0
   1064c:	d4 02 40 00 	l.sw 0x0(r2),r8
   10650:	8c 70 00 08 	l.lbz r3,0x8(r16)
   10654:	18 40 04 83 	l.movhi r2,0x483
   10658:	a4 63 00 1f 	l.andi r3,r3,0x1f
   1065c:	a8 42 04 40 	l.ori r2,r2,0x440
   10660:	d4 02 18 00 	l.sw 0x0(r2),r3
   10664:	84 50 00 04 	l.lwz r2,0x4(r16)
   10668:	ac a2 00 07 	l.xori r5,r2,0x7
   1066c:	e0 c0 28 02 	l.sub r6,r0,r5
   10670:	e0 a6 28 04 	l.or r5,r6,r5
   10674:	bd 65 00 00 	l.sfgesi r5,0x0
   10678:	10 00 00 07 	l.bf 10694 <mctl_core_init_standby+0x1e28>
   1067c:	ac 42 00 04 	l.xori r2,r2,0x4
   10680:	e0 a0 10 02 	l.sub r5,r0,r2
   10684:	e0 45 10 04 	l.or r2,r5,r2
   10688:	bd 82 00 00 	l.sfltsi r2,0x0
   1068c:	10 00 00 07 	l.bf 106a8 <mctl_core_init_standby+0x1e3c>
   10690:	18 40 04 83 	l.movhi r2,0x483
   10694:	18 40 04 83 	l.movhi r2,0x483
   10698:	9d 60 00 00 	l.addi r11,r0,0x0
   1069c:	a8 42 04 40 	l.ori r2,r2,0x440
   106a0:	d4 02 58 00 	l.sw 0x0(r2),r11
   106a4:	18 40 04 83 	l.movhi r2,0x483
   106a8:	a8 42 04 44 	l.ori r2,r2,0x444
   106ac:	d4 02 18 00 	l.sw 0x0(r2),r3
   106b0:	84 70 00 04 	l.lwz r3,0x4(r16)
   106b4:	bc 23 00 08 	l.sfnei r3,0x8
   106b8:	10 00 00 03 	l.bf 106c4 <mctl_core_init_standby+0x1e58>
   106bc:	9c 60 00 00 	l.addi r3,r0,0x0
   106c0:	d4 02 18 00 	l.sw 0x0(r2),r3
   106c4:	18 40 04 83 	l.movhi r2,0x483
   106c8:	9c a0 ff f8 	l.addi r5,r0,0xfffffff8
   106cc:	a8 42 00 04 	l.ori r2,r2,0x4
   106d0:	bc 04 00 04 	l.sfeqi r4,0x4
   106d4:	84 42 00 00 	l.lwz r2,0x0(r2)
   106d8:	10 00 00 0c 	l.bf 10708 <mctl_core_init_standby+0x1e9c>
   106dc:	e0 42 28 03 	l.and r2,r2,r5
   106e0:	bc 44 00 04 	l.sfgtui r4,0x4
   106e4:	0c 00 00 0f 	l.bnf 10720 <mctl_core_init_standby+0x1eb4>
   106e8:	15 00 00 00 	l.nop 0x0
   106ec:	bc 04 00 07 	l.sfeqi r4,0x7
   106f0:	10 00 00 08 	l.bf 10710 <mctl_core_init_standby+0x1ea4>
   106f4:	bc 04 00 08 	l.sfeqi r4,0x8
   106f8:	0c 00 00 0a 	l.bnf 10720 <mctl_core_init_standby+0x1eb4>
   106fc:	15 00 00 00 	l.nop 0x0
   10700:	00 00 00 06 	l.j 10718 <mctl_core_init_standby+0x1eac>
   10704:	a8 42 00 05 	l.ori r2,r2,0x5
   10708:	00 00 00 07 	l.j 10724 <mctl_core_init_standby+0x1eb8>
   1070c:	a8 42 00 04 	l.ori r2,r2,0x4
   10710:	00 00 00 05 	l.j 10724 <mctl_core_init_standby+0x1eb8>
   10714:	a8 42 00 03 	l.ori r2,r2,0x3
   10718:	00 00 00 04 	l.j 10728 <mctl_core_init_standby+0x1ebc>
   1071c:	18 60 04 83 	l.movhi r3,0x483
   10720:	a8 42 00 02 	l.ori r2,r2,0x2
   10724:	18 60 04 83 	l.movhi r3,0x483
   10728:	a8 42 00 08 	l.ori r2,r2,0x8
   1072c:	a8 83 00 04 	l.ori r4,r3,0x4
   10730:	d4 04 10 00 	l.sw 0x0(r4),r2
   10734:	84 50 00 00 	l.lwz r2,0x0(r16)
   10738:	bc 42 02 a0 	l.sfgtui r2,0x2a0
   1073c:	10 00 00 07 	l.bf 10758 <mctl_core_init_standby+0x1eec>
   10740:	bc 42 01 f4 	l.sfgtui r2,0x1f4
   10744:	a8 63 00 20 	l.ori r3,r3,0x20
   10748:	9c 40 00 0f 	l.addi r2,r0,0xf
   1074c:	d4 03 10 00 	l.sw 0x0(r3),r2
   10750:	84 50 00 00 	l.lwz r2,0x0(r16)
   10754:	bc 42 01 f4 	l.sfgtui r2,0x1f4
   10758:	10 00 00 0d 	l.bf 1078c <mctl_core_init_standby+0x1f20>
   1075c:	9c e0 ff 7f 	l.addi r7,r0,0xffffff7f
   10760:	18 40 04 83 	l.movhi r2,0x483
   10764:	9c c0 ff 1f 	l.addi r6,r0,0xffffff1f
   10768:	a8 62 01 44 	l.ori r3,r2,0x144
   1076c:	a8 42 01 4c 	l.ori r2,r2,0x14c
   10770:	84 83 00 00 	l.lwz r4,0x0(r3)
   10774:	a8 84 00 80 	l.ori r4,r4,0x80
   10778:	d4 03 20 00 	l.sw 0x0(r3),r4
   1077c:	84 62 00 00 	l.lwz r3,0x0(r2)
   10780:	e0 63 30 03 	l.and r3,r3,r6
   10784:	00 00 00 0b 	l.j 107b0 <mctl_core_init_standby+0x1f44>
   10788:	a8 63 00 20 	l.ori r3,r3,0x20
   1078c:	18 40 04 83 	l.movhi r2,0x483
   10790:	a8 62 01 44 	l.ori r3,r2,0x144
   10794:	a8 42 01 4c 	l.ori r2,r2,0x14c
   10798:	84 83 00 00 	l.lwz r4,0x0(r3)
   1079c:	9d 00 ff 1f 	l.addi r8,r0,0xffffff1f
   107a0:	e0 84 38 03 	l.and r4,r4,r7
   107a4:	d4 03 20 00 	l.sw 0x0(r3),r4
   107a8:	84 62 00 00 	l.lwz r3,0x0(r2)
   107ac:	e0 63 40 03 	l.and r3,r3,r8
   107b0:	d4 02 18 00 	l.sw 0x0(r2),r3
   107b4:	18 40 04 83 	l.movhi r2,0x483
   107b8:	9d 60 ff f7 	l.addi r11,r0,0xfffffff7
   107bc:	a8 62 01 4c 	l.ori r3,r2,0x14c
   107c0:	a8 42 01 80 	l.ori r2,r2,0x180
   107c4:	84 83 00 00 	l.lwz r4,0x0(r3)
   107c8:	e0 84 58 03 	l.and r4,r4,r11
   107cc:	d4 03 20 00 	l.sw 0x0(r3),r4
   107d0:	84 62 00 00 	l.lwz r3,0x0(r2)
   107d4:	a4 63 00 04 	l.andi r3,r3,0x4
   107d8:	bc 03 00 00 	l.sfeqi r3,0x0
   107dc:	13 ff ff fd 	l.bf 107d0 <mctl_core_init_standby+0x1f64>
   107e0:	9c 60 00 37 	l.addi r3,r0,0x37
   107e4:	18 40 04 83 	l.movhi r2,0x483
   107e8:	a8 42 00 58 	l.ori r2,r2,0x58
   107ec:	9c 80 fd ff 	l.addi r4,r0,0xfffffdff
   107f0:	d4 02 18 00 	l.sw 0x0(r2),r3
   107f4:	18 40 04 81 	l.movhi r2,0x481
   107f8:	9c a0 00 00 	l.addi r5,r0,0x0
   107fc:	a8 42 00 08 	l.ori r2,r2,0x8
   10800:	84 62 00 00 	l.lwz r3,0x0(r2)
   10804:	e0 63 20 03 	l.and r3,r3,r4
   10808:	d4 02 18 00 	l.sw 0x0(r2),r3
   1080c:	18 60 04 82 	l.movhi r3,0x482
   10810:	a8 83 03 20 	l.ori r4,r3,0x320
   10814:	a8 43 01 b0 	l.ori r2,r3,0x1b0
   10818:	d4 04 28 00 	l.sw 0x0(r4),r5
   1081c:	a8 63 03 24 	l.ori r3,r3,0x324
   10820:	84 a2 00 00 	l.lwz r5,0x0(r2)
   10824:	a8 a5 00 01 	l.ori r5,r5,0x1
   10828:	d4 02 28 00 	l.sw 0x0(r2),r5
   1082c:	84 a2 00 00 	l.lwz r5,0x0(r2)
   10830:	a8 a5 00 20 	l.ori r5,r5,0x20
   10834:	d4 02 28 00 	l.sw 0x0(r2),r5
   10838:	9c 40 00 01 	l.addi r2,r0,0x1
   1083c:	d4 04 10 00 	l.sw 0x0(r4),r2
   10840:	84 43 00 00 	l.lwz r2,0x0(r3)
   10844:	a4 42 00 01 	l.andi r2,r2,0x1
   10848:	bc 02 00 00 	l.sfeqi r2,0x0
   1084c:	13 ff ff fd 	l.bf 10840 <mctl_core_init_standby+0x1fd4>
   10850:	15 00 00 00 	l.nop 0x0
   10854:	18 60 04 82 	l.movhi r3,0x482
   10858:	a8 63 01 bc 	l.ori r3,r3,0x1bc
   1085c:	84 83 00 00 	l.lwz r4,0x0(r3)
   10860:	a4 84 00 01 	l.andi r4,r4,0x1
   10864:	bc 04 00 00 	l.sfeqi r4,0x0
   10868:	13 ff ff fd 	l.bf 1085c <mctl_core_init_standby+0x1ff0>
   1086c:	18 40 04 82 	l.movhi r2,0x482
   10870:	a8 62 03 20 	l.ori r3,r2,0x320
   10874:	9c c0 00 00 	l.addi r6,r0,0x0
   10878:	a8 82 01 b0 	l.ori r4,r2,0x1b0
   1087c:	d4 03 30 00 	l.sw 0x0(r3),r6
   10880:	9c e0 ff df 	l.addi r7,r0,0xffffffdf
   10884:	84 a4 00 00 	l.lwz r5,0x0(r4)
   10888:	e0 a5 38 03 	l.and r5,r5,r7
   1088c:	d4 04 28 00 	l.sw 0x0(r4),r5
   10890:	18 80 07 01 	l.movhi r4,0x701
   10894:	a8 84 02 50 	l.ori r4,r4,0x250
   10898:	84 a4 00 00 	l.lwz r5,0x0(r4)
   1089c:	a8 a5 00 10 	l.ori r5,r5,0x10
   108a0:	d4 04 28 00 	l.sw 0x0(r4),r5
   108a4:	a8 82 00 30 	l.ori r4,r2,0x30
   108a8:	a8 42 03 24 	l.ori r2,r2,0x324
   108ac:	84 a4 00 00 	l.lwz r5,0x0(r4)
   108b0:	e0 a5 38 03 	l.and r5,r5,r7
   108b4:	d4 04 28 00 	l.sw 0x0(r4),r5
   108b8:	9c 80 00 01 	l.addi r4,r0,0x1
   108bc:	d4 03 20 00 	l.sw 0x0(r3),r4
   108c0:	84 62 00 00 	l.lwz r3,0x0(r2)
   108c4:	a4 63 00 01 	l.andi r3,r3,0x1
   108c8:	bc 03 00 00 	l.sfeqi r3,0x0
   108cc:	13 ff ff fd 	l.bf 108c0 <mctl_core_init_standby+0x2054>
   108d0:	18 60 04 82 	l.movhi r3,0x482
   108d4:	a8 63 00 04 	l.ori r3,r3,0x4
   108d8:	84 83 00 00 	l.lwz r4,0x0(r3)
   108dc:	a4 84 00 03 	l.andi r4,r4,0x3
   108e0:	bc 24 00 01 	l.sfnei r4,0x1
   108e4:	13 ff ff fd 	l.bf 108d8 <mctl_core_init_standby+0x206c>
   108e8:	18 40 04 82 	l.movhi r2,0x482
   108ec:	a8 62 03 20 	l.ori r3,r2,0x320
   108f0:	9d 00 00 00 	l.addi r8,r0,0x0
   108f4:	a8 a2 01 b0 	l.ori r5,r2,0x1b0
   108f8:	d4 03 40 00 	l.sw 0x0(r3),r8
   108fc:	9d 60 ff fe 	l.addi r11,r0,0xfffffffe
   10900:	84 c5 00 00 	l.lwz r6,0x0(r5)
   10904:	a8 42 03 24 	l.ori r2,r2,0x324
   10908:	e0 c6 58 03 	l.and r6,r6,r11
   1090c:	d4 05 30 00 	l.sw 0x0(r5),r6
   10910:	d4 03 20 00 	l.sw 0x0(r3),r4
   10914:	84 62 00 00 	l.lwz r3,0x0(r2)
   10918:	a4 63 00 01 	l.andi r3,r3,0x1
   1091c:	bc 03 00 00 	l.sfeqi r3,0x0
   10920:	13 ff ff fd 	l.bf 10914 <mctl_core_init_standby+0x20a8>
   10924:	18 c0 80 00 	l.movhi r6,0x8000
   10928:	18 40 04 82 	l.movhi r2,0x482
   1092c:	a8 62 00 14 	l.ori r3,r2,0x14
   10930:	a8 a6 00 30 	l.ori r5,r6,0x30
   10934:	a8 e6 00 f0 	l.ori r7,r6,0xf0
   10938:	a9 a6 10 30 	l.ori r13,r6,0x1030
   1093c:	a9 86 20 30 	l.ori r12,r6,0x2030
   10940:	a9 66 30 30 	l.ori r11,r6,0x3030
   10944:	a9 e6 40 30 	l.ori r15,r6,0x4030
   10948:	a9 c6 50 30 	l.ori r14,r6,0x5030
   1094c:	9d 00 00 00 	l.addi r8,r0,0x0
   10950:	a8 42 00 10 	l.ori r2,r2,0x10
   10954:	a8 83 00 00 	l.ori r4,r3,0x0
   10958:	a8 c6 60 30 	l.ori r6,r6,0x6030
   1095c:	86 30 00 04 	l.lwz r17,0x4(r16)
   10960:	bc 31 00 08 	l.sfnei r17,0x8
   10964:	10 00 00 44 	l.bf 10a74 <mctl_core_init_standby+0x2208>
   10968:	bc 31 00 07 	l.sfnei r17,0x7
   1096c:	86 30 00 24 	l.lwz r17,0x24(r16)
   10970:	aa 31 01 00 	l.ori r17,r17,0x100
   10974:	d4 03 88 00 	l.sw 0x0(r3),r17
   10978:	d4 02 28 00 	l.sw 0x0(r2),r5
   1097c:	86 22 00 00 	l.lwz r17,0x0(r2)
   10980:	bd 91 00 00 	l.sfltsi r17,0x0
   10984:	13 ff ff fe 	l.bf 1097c <mctl_core_init_standby+0x2110>
   10988:	15 00 00 00 	l.nop 0x0
   1098c:	86 30 00 28 	l.lwz r17,0x28(r16)
   10990:	aa 31 02 00 	l.ori r17,r17,0x200
   10994:	d4 04 88 00 	l.sw 0x0(r4),r17
   10998:	d4 02 28 00 	l.sw 0x0(r2),r5
   1099c:	86 22 00 00 	l.lwz r17,0x0(r2)
   109a0:	bd 91 00 00 	l.sfltsi r17,0x0
   109a4:	13 ff ff fe 	l.bf 1099c <mctl_core_init_standby+0x2130>
   109a8:	15 00 00 00 	l.nop 0x0
   109ac:	86 30 00 2c 	l.lwz r17,0x2c(r16)
   109b0:	aa 31 03 00 	l.ori r17,r17,0x300
   109b4:	d4 04 88 00 	l.sw 0x0(r4),r17
   109b8:	d4 02 28 00 	l.sw 0x0(r2),r5
   109bc:	86 22 00 00 	l.lwz r17,0x0(r2)
   109c0:	bd 91 00 00 	l.sfltsi r17,0x0
   109c4:	13 ff ff fe 	l.bf 109bc <mctl_core_init_standby+0x2150>
   109c8:	15 00 00 00 	l.nop 0x0
   109cc:	86 30 00 30 	l.lwz r17,0x30(r16)
   109d0:	aa 31 04 00 	l.ori r17,r17,0x400
   109d4:	d4 04 88 00 	l.sw 0x0(r4),r17
   109d8:	d4 02 28 00 	l.sw 0x0(r2),r5
   109dc:	86 22 00 00 	l.lwz r17,0x0(r2)
   109e0:	bd 91 00 00 	l.sfltsi r17,0x0
   109e4:	13 ff ff fe 	l.bf 109dc <mctl_core_init_standby+0x2170>
   109e8:	15 00 00 00 	l.nop 0x0
   109ec:	86 30 00 3c 	l.lwz r17,0x3c(r16)
   109f0:	aa 31 0b 00 	l.ori r17,r17,0xb00
   109f4:	d4 04 88 00 	l.sw 0x0(r4),r17
   109f8:	d4 02 28 00 	l.sw 0x0(r2),r5
   109fc:	86 22 00 00 	l.lwz r17,0x0(r2)
   10a00:	bd 91 00 00 	l.sfltsi r17,0x0
   10a04:	13 ff ff fe 	l.bf 109fc <mctl_core_init_standby+0x2190>
   10a08:	15 00 00 00 	l.nop 0x0
   10a0c:	86 30 00 40 	l.lwz r17,0x40(r16)
   10a10:	aa 31 0c 00 	l.ori r17,r17,0xc00
   10a14:	d4 04 88 00 	l.sw 0x0(r4),r17
   10a18:	d4 02 28 00 	l.sw 0x0(r2),r5
   10a1c:	86 22 00 00 	l.lwz r17,0x0(r2)
   10a20:	bd 91 00 00 	l.sfltsi r17,0x0
   10a24:	13 ff ff fe 	l.bf 10a1c <mctl_core_init_standby+0x21b0>
   10a28:	15 00 00 00 	l.nop 0x0
   10a2c:	86 30 00 48 	l.lwz r17,0x48(r16)
   10a30:	aa 31 0e 00 	l.ori r17,r17,0xe00
   10a34:	d4 04 88 00 	l.sw 0x0(r4),r17
   10a38:	d4 02 28 00 	l.sw 0x0(r2),r5
   10a3c:	86 22 00 00 	l.lwz r17,0x0(r2)
   10a40:	bd 91 00 00 	l.sfltsi r17,0x0
   10a44:	13 ff ff fe 	l.bf 10a3c <mctl_core_init_standby+0x21d0>
   10a48:	15 00 00 00 	l.nop 0x0
   10a4c:	86 30 00 54 	l.lwz r17,0x54(r16)
   10a50:	aa 31 16 00 	l.ori r17,r17,0x1600
   10a54:	d4 04 88 00 	l.sw 0x0(r4),r17
   10a58:	d4 02 28 00 	l.sw 0x0(r2),r5
   10a5c:	86 22 00 00 	l.lwz r17,0x0(r2)
   10a60:	bd 91 00 00 	l.sfltsi r17,0x0
   10a64:	13 ff ff fe 	l.bf 10a5c <mctl_core_init_standby+0x21f0>
   10a68:	15 00 00 00 	l.nop 0x0
   10a6c:	86 30 00 04 	l.lwz r17,0x4(r16)
   10a70:	bc 31 00 07 	l.sfnei r17,0x7
   10a74:	10 00 00 22 	l.bf 10afc <mctl_core_init_standby+0x2290>
   10a78:	15 00 00 00 	l.nop 0x0
   10a7c:	86 30 00 24 	l.lwz r17,0x24(r16)
   10a80:	aa 31 01 00 	l.ori r17,r17,0x100
   10a84:	d4 03 88 00 	l.sw 0x0(r3),r17
   10a88:	d4 02 38 00 	l.sw 0x0(r2),r7
   10a8c:	86 22 00 00 	l.lwz r17,0x0(r2)
   10a90:	bd 91 00 00 	l.sfltsi r17,0x0
   10a94:	13 ff ff fe 	l.bf 10a8c <mctl_core_init_standby+0x2220>
   10a98:	15 00 00 00 	l.nop 0x0
   10a9c:	86 30 00 28 	l.lwz r17,0x28(r16)
   10aa0:	aa 31 02 00 	l.ori r17,r17,0x200
   10aa4:	d4 04 88 00 	l.sw 0x0(r4),r17
   10aa8:	d4 02 38 00 	l.sw 0x0(r2),r7
   10aac:	86 22 00 00 	l.lwz r17,0x0(r2)
   10ab0:	bd 91 00 00 	l.sfltsi r17,0x0
   10ab4:	13 ff ff fe 	l.bf 10aac <mctl_core_init_standby+0x2240>
   10ab8:	15 00 00 00 	l.nop 0x0
   10abc:	86 30 00 2c 	l.lwz r17,0x2c(r16)
   10ac0:	aa 31 03 00 	l.ori r17,r17,0x300
   10ac4:	d4 04 88 00 	l.sw 0x0(r4),r17
   10ac8:	d4 02 38 00 	l.sw 0x0(r2),r7
   10acc:	86 22 00 00 	l.lwz r17,0x0(r2)
   10ad0:	bd 91 00 00 	l.sfltsi r17,0x0
   10ad4:	13 ff ff fe 	l.bf 10acc <mctl_core_init_standby+0x2260>
   10ad8:	15 00 00 00 	l.nop 0x0
   10adc:	86 30 00 3c 	l.lwz r17,0x3c(r16)
   10ae0:	aa 31 0b 00 	l.ori r17,r17,0xb00
   10ae4:	d4 04 88 00 	l.sw 0x0(r4),r17
   10ae8:	d4 02 28 00 	l.sw 0x0(r2),r5
   10aec:	86 22 00 00 	l.lwz r17,0x0(r2)
   10af0:	bd 91 00 00 	l.sfltsi r17,0x0
   10af4:	13 ff ff fe 	l.bf 10aec <mctl_core_init_standby+0x2280>
   10af8:	15 00 00 00 	l.nop 0x0
   10afc:	86 30 00 04 	l.lwz r17,0x4(r16)
   10b00:	bc 31 00 04 	l.sfnei r17,0x4
   10b04:	10 00 00 35 	l.bf 10bd8 <mctl_core_init_standby+0x236c>
   10b08:	bc 31 00 03 	l.sfnei r17,0x3
   10b0c:	86 30 00 20 	l.lwz r17,0x20(r16)
   10b10:	d4 03 88 00 	l.sw 0x0(r3),r17
   10b14:	d4 02 28 00 	l.sw 0x0(r2),r5
   10b18:	86 22 00 00 	l.lwz r17,0x0(r2)
   10b1c:	bd 91 00 00 	l.sfltsi r17,0x0
   10b20:	13 ff ff fe 	l.bf 10b18 <mctl_core_init_standby+0x22ac>
   10b24:	15 00 00 00 	l.nop 0x0
   10b28:	86 30 00 24 	l.lwz r17,0x24(r16)
   10b2c:	d4 04 88 00 	l.sw 0x0(r4),r17
   10b30:	d4 02 68 00 	l.sw 0x0(r2),r13
   10b34:	86 22 00 00 	l.lwz r17,0x0(r2)
   10b38:	bd 91 00 00 	l.sfltsi r17,0x0
   10b3c:	13 ff ff fe 	l.bf 10b34 <mctl_core_init_standby+0x22c8>
   10b40:	15 00 00 00 	l.nop 0x0
   10b44:	86 30 00 28 	l.lwz r17,0x28(r16)
   10b48:	d4 04 88 00 	l.sw 0x0(r4),r17
   10b4c:	d4 02 60 00 	l.sw 0x0(r2),r12
   10b50:	86 22 00 00 	l.lwz r17,0x0(r2)
   10b54:	bd 91 00 00 	l.sfltsi r17,0x0
   10b58:	13 ff ff fe 	l.bf 10b50 <mctl_core_init_standby+0x22e4>
   10b5c:	15 00 00 00 	l.nop 0x0
   10b60:	86 30 00 2c 	l.lwz r17,0x2c(r16)
   10b64:	d4 04 88 00 	l.sw 0x0(r4),r17
   10b68:	d4 02 58 00 	l.sw 0x0(r2),r11
   10b6c:	86 22 00 00 	l.lwz r17,0x0(r2)
   10b70:	bd 91 00 00 	l.sfltsi r17,0x0
   10b74:	13 ff ff fe 	l.bf 10b6c <mctl_core_init_standby+0x2300>
   10b78:	15 00 00 00 	l.nop 0x0
   10b7c:	86 30 00 30 	l.lwz r17,0x30(r16)
   10b80:	d4 04 88 00 	l.sw 0x0(r4),r17
   10b84:	d4 02 78 00 	l.sw 0x0(r2),r15
   10b88:	86 22 00 00 	l.lwz r17,0x0(r2)
   10b8c:	bd 91 00 00 	l.sfltsi r17,0x0
   10b90:	13 ff ff fe 	l.bf 10b88 <mctl_core_init_standby+0x231c>
   10b94:	15 00 00 00 	l.nop 0x0
   10b98:	86 30 00 34 	l.lwz r17,0x34(r16)
   10b9c:	d4 04 88 00 	l.sw 0x0(r4),r17
   10ba0:	d4 02 70 00 	l.sw 0x0(r2),r14
   10ba4:	86 22 00 00 	l.lwz r17,0x0(r2)
   10ba8:	bd 91 00 00 	l.sfltsi r17,0x0
   10bac:	13 ff ff fe 	l.bf 10ba4 <mctl_core_init_standby+0x2338>
   10bb0:	15 00 00 00 	l.nop 0x0
   10bb4:	86 30 00 38 	l.lwz r17,0x38(r16)
   10bb8:	d4 04 88 00 	l.sw 0x0(r4),r17
   10bbc:	d4 02 30 00 	l.sw 0x0(r2),r6
   10bc0:	86 22 00 00 	l.lwz r17,0x0(r2)
   10bc4:	bd 91 00 00 	l.sfltsi r17,0x0
   10bc8:	13 ff ff fe 	l.bf 10bc0 <mctl_core_init_standby+0x2354>
   10bcc:	15 00 00 00 	l.nop 0x0
   10bd0:	86 30 00 04 	l.lwz r17,0x4(r16)
   10bd4:	bc 31 00 03 	l.sfnei r17,0x3
   10bd8:	10 00 00 1e 	l.bf 10c50 <mctl_core_init_standby+0x23e4>
   10bdc:	15 00 00 00 	l.nop 0x0
   10be0:	86 30 00 20 	l.lwz r17,0x20(r16)
   10be4:	d4 03 88 00 	l.sw 0x0(r3),r17
   10be8:	d4 02 28 00 	l.sw 0x0(r2),r5
   10bec:	86 22 00 00 	l.lwz r17,0x0(r2)
   10bf0:	bd 91 00 00 	l.sfltsi r17,0x0
   10bf4:	13 ff ff fe 	l.bf 10bec <mctl_core_init_standby+0x2380>
   10bf8:	15 00 00 00 	l.nop 0x0
   10bfc:	86 30 00 24 	l.lwz r17,0x24(r16)
   10c00:	d4 04 88 00 	l.sw 0x0(r4),r17
   10c04:	d4 02 68 00 	l.sw 0x0(r2),r13
   10c08:	86 22 00 00 	l.lwz r17,0x0(r2)
   10c0c:	bd 91 00 00 	l.sfltsi r17,0x0
   10c10:	13 ff ff fe 	l.bf 10c08 <mctl_core_init_standby+0x239c>
   10c14:	15 00 00 00 	l.nop 0x0
   10c18:	86 30 00 28 	l.lwz r17,0x28(r16)
   10c1c:	d4 04 88 00 	l.sw 0x0(r4),r17
   10c20:	d4 02 60 00 	l.sw 0x0(r2),r12
   10c24:	86 22 00 00 	l.lwz r17,0x0(r2)
   10c28:	bd 91 00 00 	l.sfltsi r17,0x0
   10c2c:	13 ff ff fe 	l.bf 10c24 <mctl_core_init_standby+0x23b8>
   10c30:	15 00 00 00 	l.nop 0x0
   10c34:	86 30 00 2c 	l.lwz r17,0x2c(r16)
   10c38:	d4 04 88 00 	l.sw 0x0(r4),r17
   10c3c:	d4 02 58 00 	l.sw 0x0(r2),r11
   10c40:	86 22 00 00 	l.lwz r17,0x0(r2)
   10c44:	bd 91 00 00 	l.sfltsi r17,0x0
   10c48:	13 ff ff fe 	l.bf 10c40 <mctl_core_init_standby+0x23d4>
   10c4c:	15 00 00 00 	l.nop 0x0
   10c50:	9d 08 00 01 	l.addi r8,r8,0x1
   10c54:	bc 28 00 03 	l.sfnei r8,0x3
   10c58:	13 ff ff 41 	l.bf 1095c <mctl_core_init_standby+0x20f0>
   10c5c:	15 00 00 00 	l.nop 0x0
   10c60:	18 40 04 83 	l.movhi r2,0x483
   10c64:	19 c0 04 82 	l.movhi r14,0x482
   10c68:	9c 60 00 00 	l.addi r3,r0,0x0
   10c6c:	a8 42 00 54 	l.ori r2,r2,0x54
   10c70:	a9 ce 03 20 	l.ori r14,r14,0x320
   10c74:	d4 02 18 00 	l.sw 0x0(r2),r3
   10c78:	d4 0e 18 00 	l.sw 0x0(r14),r3
   10c7c:	07 ff f6 98 	l.jal e6dc <mctl_com_set_controller_refresh_standby.clone.2>
   10c80:	9c 40 00 01 	l.addi r2,r0,0x1
   10c84:	d4 0e 10 00 	l.sw 0x0(r14),r2
   10c88:	18 80 00 10 	l.movhi r4,0x10
   10c8c:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   10c90:	e2 c3 20 03 	l.and r22,r3,r4
   10c94:	bc 16 00 00 	l.sfeqi r22,0x0
   10c98:	10 00 00 1d 	l.bf 10d0c <mctl_core_init_standby+0x24a0>
   10c9c:	18 c0 00 20 	l.movhi r6,0x20
   10ca0:	18 a0 00 08 	l.movhi r5,0x8
   10ca4:	e0 63 28 03 	l.and r3,r3,r5
   10ca8:	bc 03 00 00 	l.sfeqi r3,0x0
   10cac:	10 00 00 0e 	l.bf 10ce4 <mctl_core_init_standby+0x2478>
   10cb0:	9d c0 00 00 	l.addi r14,r0,0x0
   10cb4:	07 ff f3 45 	l.jal d9c8 <phy_write_leveling_standby>
   10cb8:	a8 70 00 00 	l.ori r3,r16,0x0
   10cbc:	bc 2b 00 01 	l.sfnei r11,0x1
   10cc0:	10 00 00 03 	l.bf 10ccc <mctl_core_init_standby+0x2460>
   10cc4:	a8 4b 00 00 	l.ori r2,r11,0x0
   10cc8:	9d c0 00 05 	l.addi r14,r0,0x5
   10ccc:	9d ce 00 01 	l.addi r14,r14,0x1
   10cd0:	bc ae 00 04 	l.sfleui r14,0x4
   10cd4:	13 ff ff f8 	l.bf 10cb4 <mctl_core_init_standby+0x2448>
   10cd8:	15 00 00 00 	l.nop 0x0
   10cdc:	00 00 00 06 	l.j 10cf4 <mctl_core_init_standby+0x2488>
   10ce0:	9e c0 00 01 	l.addi r22,r0,0x1
   10ce4:	07 ff f3 39 	l.jal d9c8 <phy_write_leveling_standby>
   10ce8:	a8 70 00 00 	l.ori r3,r16,0x0
   10cec:	a8 4b 00 00 	l.ori r2,r11,0x0
   10cf0:	9e c0 00 01 	l.addi r22,r0,0x1
   10cf4:	bc 02 00 00 	l.sfeqi r2,0x0
   10cf8:	10 00 00 03 	l.bf 10d04 <mctl_core_init_standby+0x2498>
   10cfc:	15 00 00 00 	l.nop 0x0
   10d00:	9e c0 00 00 	l.addi r22,r0,0x0
   10d04:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   10d08:	18 c0 00 20 	l.movhi r6,0x20
   10d0c:	e1 c3 30 03 	l.and r14,r3,r6
   10d10:	bc 0e 00 00 	l.sfeqi r14,0x0
   10d14:	10 00 00 1c 	l.bf 10d84 <mctl_core_init_standby+0x2518>
   10d18:	af 0e 00 01 	l.xori r24,r14,0x1
   10d1c:	18 e0 00 08 	l.movhi r7,0x8
   10d20:	e0 63 38 03 	l.and r3,r3,r7
   10d24:	bc 03 00 00 	l.sfeqi r3,0x0
   10d28:	10 00 00 0e 	l.bf 10d60 <mctl_core_init_standby+0x24f4>
   10d2c:	9e 80 00 00 	l.addi r20,r0,0x0
   10d30:	07 ff f3 b4 	l.jal dc00 <phy_read_calibration_standby>
   10d34:	a8 70 00 00 	l.ori r3,r16,0x0
   10d38:	bc 2b 00 01 	l.sfnei r11,0x1
   10d3c:	10 00 00 03 	l.bf 10d48 <mctl_core_init_standby+0x24dc>
   10d40:	a8 4b 00 00 	l.ori r2,r11,0x0
   10d44:	9e 80 00 05 	l.addi r20,r0,0x5
   10d48:	9e 94 00 01 	l.addi r20,r20,0x1
   10d4c:	bc b4 00 04 	l.sfleui r20,0x4
   10d50:	13 ff ff f8 	l.bf 10d30 <mctl_core_init_standby+0x24c4>
   10d54:	15 00 00 00 	l.nop 0x0
   10d58:	00 00 00 06 	l.j 10d70 <mctl_core_init_standby+0x2504>
   10d5c:	9d c0 00 01 	l.addi r14,r0,0x1
   10d60:	07 ff f3 a8 	l.jal dc00 <phy_read_calibration_standby>
   10d64:	a8 70 00 00 	l.ori r3,r16,0x0
   10d68:	a8 4b 00 00 	l.ori r2,r11,0x0
   10d6c:	9d c0 00 01 	l.addi r14,r0,0x1
   10d70:	bc 02 00 00 	l.sfeqi r2,0x0
   10d74:	10 00 00 04 	l.bf 10d84 <mctl_core_init_standby+0x2518>
   10d78:	af 0e 00 01 	l.xori r24,r14,0x1
   10d7c:	9d c0 00 00 	l.addi r14,r0,0x0
   10d80:	af 0e 00 01 	l.xori r24,r14,0x1
   10d84:	e3 00 c0 02 	l.sub r24,r0,r24
   10d88:	bb 18 00 5f 	l.srli r24,r24,0x1f
   10d8c:	bc 18 00 00 	l.sfeqi r24,0x0
   10d90:	10 00 00 1f 	l.bf 10e0c <mctl_core_init_standby+0x25a0>
   10d94:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   10d98:	b8 83 00 56 	l.srli r4,r3,0x16
   10d9c:	a4 84 00 01 	l.andi r4,r4,0x1
   10da0:	bc 04 00 00 	l.sfeqi r4,0x0
   10da4:	10 00 00 1b 	l.bf 10e10 <mctl_core_init_standby+0x25a4>
   10da8:	9e 40 00 00 	l.addi r18,r0,0x0
   10dac:	19 00 00 08 	l.movhi r8,0x8
   10db0:	e0 63 40 03 	l.and r3,r3,r8
   10db4:	bc 03 00 00 	l.sfeqi r3,0x0
   10db8:	10 00 00 0e 	l.bf 10df0 <mctl_core_init_standby+0x2584>
   10dbc:	9e 80 00 00 	l.addi r20,r0,0x0
   10dc0:	07 ff f4 0f 	l.jal ddfc <phy_read_training_standby>
   10dc4:	a8 70 00 00 	l.ori r3,r16,0x0
   10dc8:	bc 2b 00 01 	l.sfnei r11,0x1
   10dcc:	10 00 00 03 	l.bf 10dd8 <mctl_core_init_standby+0x256c>
   10dd0:	a8 4b 00 00 	l.ori r2,r11,0x0
   10dd4:	9e 80 00 05 	l.addi r20,r0,0x5
   10dd8:	9e 94 00 01 	l.addi r20,r20,0x1
   10ddc:	bc b4 00 04 	l.sfleui r20,0x4
   10de0:	13 ff ff f8 	l.bf 10dc0 <mctl_core_init_standby+0x2554>
   10de4:	9e 40 00 01 	l.addi r18,r0,0x1
   10de8:	00 00 00 07 	l.j 10e04 <mctl_core_init_standby+0x2598>
   10dec:	bc 02 00 00 	l.sfeqi r2,0x0
   10df0:	07 ff f4 03 	l.jal ddfc <phy_read_training_standby>
   10df4:	a8 70 00 00 	l.ori r3,r16,0x0
   10df8:	a8 4b 00 00 	l.ori r2,r11,0x0
   10dfc:	9e 40 00 01 	l.addi r18,r0,0x1
   10e00:	bc 02 00 00 	l.sfeqi r2,0x0
   10e04:	10 00 00 04 	l.bf 10e14 <mctl_core_init_standby+0x25a8>
   10e08:	bc 18 00 00 	l.sfeqi r24,0x0
   10e0c:	9e 40 00 00 	l.addi r18,r0,0x0
   10e10:	bc 18 00 00 	l.sfeqi r24,0x0
   10e14:	10 00 00 1e 	l.bf 10e8c <mctl_core_init_standby+0x2620>
   10e18:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   10e1c:	b8 83 00 57 	l.srli r4,r3,0x17
   10e20:	a4 84 00 01 	l.andi r4,r4,0x1
   10e24:	bc 04 00 00 	l.sfeqi r4,0x0
   10e28:	10 00 00 19 	l.bf 10e8c <mctl_core_init_standby+0x2620>
   10e2c:	19 60 00 08 	l.movhi r11,0x8
   10e30:	e0 63 58 03 	l.and r3,r3,r11
   10e34:	bc 03 00 00 	l.sfeqi r3,0x0
   10e38:	10 00 00 0e 	l.bf 10e70 <mctl_core_init_standby+0x2604>
   10e3c:	9e 80 00 00 	l.addi r20,r0,0x0
   10e40:	07 ff f5 18 	l.jal e2a0 <phy_write_training_standby>
   10e44:	a8 70 00 00 	l.ori r3,r16,0x0
   10e48:	bc 2b 00 01 	l.sfnei r11,0x1
   10e4c:	10 00 00 03 	l.bf 10e58 <mctl_core_init_standby+0x25ec>
   10e50:	a8 4b 00 00 	l.ori r2,r11,0x0
   10e54:	9e 80 00 05 	l.addi r20,r0,0x5
   10e58:	9e 94 00 01 	l.addi r20,r20,0x1
   10e5c:	bc b4 00 04 	l.sfleui r20,0x4
   10e60:	13 ff ff f8 	l.bf 10e40 <mctl_core_init_standby+0x25d4>
   10e64:	9c 60 00 01 	l.addi r3,r0,0x1
   10e68:	00 00 00 07 	l.j 10e84 <mctl_core_init_standby+0x2618>
   10e6c:	bc 02 00 00 	l.sfeqi r2,0x0
   10e70:	07 ff f5 0c 	l.jal e2a0 <phy_write_training_standby>
   10e74:	a8 70 00 00 	l.ori r3,r16,0x0
   10e78:	a8 4b 00 00 	l.ori r2,r11,0x0
   10e7c:	9c 60 00 01 	l.addi r3,r0,0x1
   10e80:	bc 02 00 00 	l.sfeqi r2,0x0
   10e84:	10 00 00 03 	l.bf 10e90 <mctl_core_init_standby+0x2624>
   10e88:	15 00 00 00 	l.nop 0x0
   10e8c:	9c 60 00 00 	l.addi r3,r0,0x0
   10e90:	84 90 00 6c 	l.lwz r4,0x6c(r16)
   10e94:	18 a0 00 08 	l.movhi r5,0x8
   10e98:	e0 84 28 03 	l.and r4,r4,r5
   10e9c:	bc 04 00 00 	l.sfeqi r4,0x0
   10ea0:	10 00 00 14 	l.bf 10ef0 <mctl_core_init_standby+0x2684>
   10ea4:	e1 ce b0 04 	l.or r14,r14,r22
   10ea8:	e1 ce 90 04 	l.or r14,r14,r18
   10eac:	e0 6e 18 04 	l.or r3,r14,r3
   10eb0:	bc 03 00 00 	l.sfeqi r3,0x0
   10eb4:	10 00 00 14 	l.bf 10f04 <mctl_core_init_standby+0x2698>
   10eb8:	19 c0 00 01 	l.movhi r14,0x1
   10ebc:	9c 40 00 00 	l.addi r2,r0,0x0
   10ec0:	a9 ce 35 74 	l.ori r14,r14,0x3574
   10ec4:	84 6e 00 00 	l.lwz r3,0x0(r14)
   10ec8:	9c 63 00 01 	l.addi r3,r3,0x1
   10ecc:	bc 03 00 0a 	l.sfeqi r3,0xa
   10ed0:	10 00 00 fb 	l.bf 112bc <mctl_core_init_standby+0x2a50>
   10ed4:	d4 0e 18 00 	l.sw 0x0(r14),r3
   10ed8:	07 ff f6 65 	l.jal e86c <mctl_core_init_standby>
   10edc:	a8 70 00 00 	l.ori r3,r16,0x0
   10ee0:	9c c0 00 00 	l.addi r6,r0,0x0
   10ee4:	a8 4b 00 00 	l.ori r2,r11,0x0
   10ee8:	00 00 00 07 	l.j 10f04 <mctl_core_init_standby+0x2698>
   10eec:	d4 0e 30 00 	l.sw 0x0(r14),r6
   10ef0:	e1 ce 90 04 	l.or r14,r14,r18
   10ef4:	e0 6e 18 04 	l.or r3,r14,r3
   10ef8:	bc 23 00 00 	l.sfnei r3,0x0
   10efc:	10 00 00 ef 	l.bf 112b8 <mctl_core_init_standby+0x2a4c>
   10f00:	15 00 00 00 	l.nop 0x0
   10f04:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   10f08:	18 e0 00 04 	l.movhi r7,0x4
   10f0c:	e0 63 38 03 	l.and r3,r3,r7
   10f10:	bc 03 00 00 	l.sfeqi r3,0x0
   10f14:	10 00 00 77 	l.bf 110f0 <mctl_core_init_standby+0x2884>
   10f18:	18 60 04 83 	l.movhi r3,0x483
   10f1c:	9d 00 ff fe 	l.addi r8,r0,0xfffffffe
   10f20:	a8 83 00 60 	l.ori r4,r3,0x60
   10f24:	9d 60 ff ef 	l.addi r11,r0,0xffffffef
   10f28:	84 a4 00 00 	l.lwz r5,0x0(r4)
   10f2c:	e0 a5 40 03 	l.and r5,r5,r8
   10f30:	d4 04 28 00 	l.sw 0x0(r4),r5
   10f34:	a8 83 00 08 	l.ori r4,r3,0x8
   10f38:	84 a4 00 00 	l.lwz r5,0x0(r4)
   10f3c:	a8 a5 00 08 	l.ori r5,r5,0x8
   10f40:	d4 04 28 00 	l.sw 0x0(r4),r5
   10f44:	a8 83 01 90 	l.ori r4,r3,0x190
   10f48:	84 a4 00 00 	l.lwz r5,0x0(r4)
   10f4c:	e0 a5 58 03 	l.and r5,r5,r11
   10f50:	d4 04 28 00 	l.sw 0x0(r4),r5
   10f54:	84 90 00 04 	l.lwz r4,0x4(r16)
   10f58:	bc 24 00 08 	l.sfnei r4,0x8
   10f5c:	10 00 00 06 	l.bf 10f74 <mctl_core_init_standby+0x2708>
   10f60:	a8 63 00 04 	l.ori r3,r3,0x4
   10f64:	9c a0 ff 7f 	l.addi r5,r0,0xffffff7f
   10f68:	84 83 00 00 	l.lwz r4,0x0(r3)
   10f6c:	e0 84 28 03 	l.and r4,r4,r5
   10f70:	d4 03 20 00 	l.sw 0x0(r3),r4
   10f74:	84 70 00 70 	l.lwz r3,0x70(r16)
   10f78:	18 a0 04 83 	l.movhi r5,0x483
   10f7c:	a4 63 00 3f 	l.andi r3,r3,0x3f
   10f80:	a8 a5 04 84 	l.ori r5,r5,0x484
   10f84:	9c 85 00 c0 	l.addi r4,r5,0xc0
   10f88:	18 c0 04 83 	l.movhi r6,0x483
   10f8c:	d4 05 18 00 	l.sw 0x0(r5),r3
   10f90:	a8 c6 04 cc 	l.ori r6,r6,0x4cc
   10f94:	9c a5 00 08 	l.addi r5,r5,0x8
   10f98:	d4 04 18 00 	l.sw 0x0(r4),r3
   10f9c:	e4 25 30 00 	l.sfne r5,r6
   10fa0:	13 ff ff fa 	l.bf 10f88 <mctl_core_init_standby+0x271c>
   10fa4:	9c 85 00 c0 	l.addi r4,r5,0xc0
   10fa8:	84 70 00 14 	l.lwz r3,0x14(r16)
   10fac:	18 80 04 83 	l.movhi r4,0x483
   10fb0:	a4 63 00 3f 	l.andi r3,r3,0x3f
   10fb4:	a8 c4 04 d0 	l.ori r6,r4,0x4d0
   10fb8:	d4 06 18 00 	l.sw 0x0(r6),r3
   10fbc:	a8 c4 05 90 	l.ori r6,r4,0x590
   10fc0:	d4 06 18 00 	l.sw 0x0(r6),r3
   10fc4:	d4 05 18 00 	l.sw 0x0(r5),r3
   10fc8:	a8 a4 05 8c 	l.ori r5,r4,0x58c
   10fcc:	a8 84 04 d8 	l.ori r4,r4,0x4d8
   10fd0:	d4 05 18 00 	l.sw 0x0(r5),r3
   10fd4:	84 70 00 70 	l.lwz r3,0x70(r16)
   10fd8:	b8 63 00 48 	l.srli r3,r3,0x8
   10fdc:	a4 63 00 3f 	l.andi r3,r3,0x3f
   10fe0:	9c a4 00 c0 	l.addi r5,r4,0xc0
   10fe4:	18 e0 04 83 	l.movhi r7,0x483
   10fe8:	d4 04 18 00 	l.sw 0x0(r4),r3
   10fec:	a8 e7 05 20 	l.ori r7,r7,0x520
   10ff0:	9c 84 00 08 	l.addi r4,r4,0x8
   10ff4:	d4 05 18 00 	l.sw 0x0(r5),r3
   10ff8:	e4 24 38 00 	l.sfne r4,r7
   10ffc:	13 ff ff fa 	l.bf 10fe4 <mctl_core_init_standby+0x2778>
   11000:	9c a4 00 c0 	l.addi r5,r4,0xc0
   11004:	84 70 00 14 	l.lwz r3,0x14(r16)
   11008:	18 a0 04 83 	l.movhi r5,0x483
   1100c:	b8 63 00 48 	l.srli r3,r3,0x8
   11010:	a8 c5 05 24 	l.ori r6,r5,0x524
   11014:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11018:	d4 06 18 00 	l.sw 0x0(r6),r3
   1101c:	a8 c5 05 e4 	l.ori r6,r5,0x5e4
   11020:	d4 06 18 00 	l.sw 0x0(r6),r3
   11024:	d4 04 18 00 	l.sw 0x0(r4),r3
   11028:	a8 85 05 e0 	l.ori r4,r5,0x5e0
   1102c:	a8 a5 06 04 	l.ori r5,r5,0x604
   11030:	d4 04 18 00 	l.sw 0x0(r4),r3
   11034:	94 70 00 70 	l.lhz r3,0x70(r16)
   11038:	a4 63 00 3f 	l.andi r3,r3,0x3f
   1103c:	9c 85 00 c0 	l.addi r4,r5,0xc0
   11040:	19 00 04 83 	l.movhi r8,0x483
   11044:	d4 05 18 00 	l.sw 0x0(r5),r3
   11048:	a9 08 06 4c 	l.ori r8,r8,0x64c
   1104c:	9c a5 00 08 	l.addi r5,r5,0x8
   11050:	d4 04 18 00 	l.sw 0x0(r4),r3
   11054:	e4 25 40 00 	l.sfne r5,r8
   11058:	13 ff ff fa 	l.bf 11040 <mctl_core_init_standby+0x27d4>
   1105c:	9c 85 00 c0 	l.addi r4,r5,0xc0
   11060:	94 70 00 14 	l.lhz r3,0x14(r16)
   11064:	18 80 04 83 	l.movhi r4,0x483
   11068:	a4 63 00 3f 	l.andi r3,r3,0x3f
   1106c:	a8 c4 06 50 	l.ori r6,r4,0x650
   11070:	d4 06 18 00 	l.sw 0x0(r6),r3
   11074:	a8 c4 07 10 	l.ori r6,r4,0x710
   11078:	d4 06 18 00 	l.sw 0x0(r6),r3
   1107c:	d4 05 18 00 	l.sw 0x0(r5),r3
   11080:	a8 a4 07 0c 	l.ori r5,r4,0x70c
   11084:	a8 84 06 58 	l.ori r4,r4,0x658
   11088:	d4 05 18 00 	l.sw 0x0(r5),r3
   1108c:	8c 70 00 70 	l.lbz r3,0x70(r16)
   11090:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11094:	9c a4 00 c0 	l.addi r5,r4,0xc0
   11098:	19 60 04 83 	l.movhi r11,0x483
   1109c:	d4 04 18 00 	l.sw 0x0(r4),r3
   110a0:	a9 6b 06 a0 	l.ori r11,r11,0x6a0
   110a4:	9c 84 00 08 	l.addi r4,r4,0x8
   110a8:	d4 05 18 00 	l.sw 0x0(r5),r3
   110ac:	e4 24 58 00 	l.sfne r4,r11
   110b0:	13 ff ff fa 	l.bf 11098 <mctl_core_init_standby+0x282c>
   110b4:	9c a4 00 c0 	l.addi r5,r4,0xc0
   110b8:	8c b0 00 14 	l.lbz r5,0x14(r16)
   110bc:	18 60 04 83 	l.movhi r3,0x483
   110c0:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   110c4:	a8 c3 06 a4 	l.ori r6,r3,0x6a4
   110c8:	d4 06 28 00 	l.sw 0x0(r6),r5
   110cc:	a8 c3 07 64 	l.ori r6,r3,0x764
   110d0:	d4 06 28 00 	l.sw 0x0(r6),r5
   110d4:	d4 04 28 00 	l.sw 0x0(r4),r5
   110d8:	a8 83 07 60 	l.ori r4,r3,0x760
   110dc:	a8 63 00 60 	l.ori r3,r3,0x60
   110e0:	d4 04 28 00 	l.sw 0x0(r4),r5
   110e4:	84 83 00 00 	l.lwz r4,0x0(r3)
   110e8:	a8 84 00 01 	l.ori r4,r4,0x1
   110ec:	d4 03 20 00 	l.sw 0x0(r3),r4
   110f0:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   110f4:	18 80 00 02 	l.movhi r4,0x2
   110f8:	e0 63 20 03 	l.and r3,r3,r4
   110fc:	bc 03 00 00 	l.sfeqi r3,0x0
   11100:	10 00 00 6a 	l.bf 112a8 <mctl_core_init_standby+0x2a3c>
   11104:	18 a0 04 83 	l.movhi r5,0x483
   11108:	9c c0 ff 7f 	l.addi r6,r0,0xffffff7f
   1110c:	a8 65 00 54 	l.ori r3,r5,0x54
   11110:	9c e0 ff fb 	l.addi r7,r0,0xfffffffb
   11114:	84 83 00 00 	l.lwz r4,0x0(r3)
   11118:	e0 84 30 03 	l.and r4,r4,r6
   1111c:	d4 03 20 00 	l.sw 0x0(r3),r4
   11120:	a8 65 01 90 	l.ori r3,r5,0x190
   11124:	a8 a5 04 80 	l.ori r5,r5,0x480
   11128:	84 83 00 00 	l.lwz r4,0x0(r3)
   1112c:	e0 84 38 03 	l.and r4,r4,r7
   11130:	d4 03 20 00 	l.sw 0x0(r3),r4
   11134:	84 70 00 74 	l.lwz r3,0x74(r16)
   11138:	a4 63 00 3f 	l.andi r3,r3,0x3f
   1113c:	9c 85 00 c0 	l.addi r4,r5,0xc0
   11140:	19 00 04 83 	l.movhi r8,0x483
   11144:	d4 05 18 00 	l.sw 0x0(r5),r3
   11148:	a9 08 04 c8 	l.ori r8,r8,0x4c8
   1114c:	9c a5 00 08 	l.addi r5,r5,0x8
   11150:	d4 04 18 00 	l.sw 0x0(r4),r3
   11154:	e4 25 40 00 	l.sfne r5,r8
   11158:	13 ff ff fa 	l.bf 11140 <mctl_core_init_standby+0x28d4>
   1115c:	9c 85 00 c0 	l.addi r4,r5,0xc0
   11160:	84 70 00 7c 	l.lwz r3,0x7c(r16)
   11164:	18 80 04 83 	l.movhi r4,0x483
   11168:	a4 63 00 3f 	l.andi r3,r3,0x3f
   1116c:	a8 c4 05 28 	l.ori r6,r4,0x528
   11170:	d4 06 18 00 	l.sw 0x0(r6),r3
   11174:	a8 c4 05 e8 	l.ori r6,r4,0x5e8
   11178:	d4 06 18 00 	l.sw 0x0(r6),r3
   1117c:	d4 05 18 00 	l.sw 0x0(r5),r3
   11180:	a8 a4 05 88 	l.ori r5,r4,0x588
   11184:	a8 84 04 d4 	l.ori r4,r4,0x4d4
   11188:	d4 05 18 00 	l.sw 0x0(r5),r3
   1118c:	84 70 00 74 	l.lwz r3,0x74(r16)
   11190:	b8 63 00 48 	l.srli r3,r3,0x8
   11194:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11198:	9c a4 00 c0 	l.addi r5,r4,0xc0
   1119c:	19 60 04 83 	l.movhi r11,0x483
   111a0:	d4 04 18 00 	l.sw 0x0(r4),r3
   111a4:	a9 6b 05 1c 	l.ori r11,r11,0x51c
   111a8:	9c 84 00 08 	l.addi r4,r4,0x8
   111ac:	d4 05 18 00 	l.sw 0x0(r5),r3
   111b0:	e4 24 58 00 	l.sfne r4,r11
   111b4:	13 ff ff fa 	l.bf 1119c <mctl_core_init_standby+0x2930>
   111b8:	9c a4 00 c0 	l.addi r5,r4,0xc0
   111bc:	84 70 00 7c 	l.lwz r3,0x7c(r16)
   111c0:	18 a0 04 83 	l.movhi r5,0x483
   111c4:	b8 63 00 48 	l.srli r3,r3,0x8
   111c8:	a8 c5 05 2c 	l.ori r6,r5,0x52c
   111cc:	a4 63 00 3f 	l.andi r3,r3,0x3f
   111d0:	d4 06 18 00 	l.sw 0x0(r6),r3
   111d4:	a8 c5 05 ec 	l.ori r6,r5,0x5ec
   111d8:	d4 06 18 00 	l.sw 0x0(r6),r3
   111dc:	d4 04 18 00 	l.sw 0x0(r4),r3
   111e0:	a8 85 05 dc 	l.ori r4,r5,0x5dc
   111e4:	a8 a5 06 00 	l.ori r5,r5,0x600
   111e8:	d4 04 18 00 	l.sw 0x0(r4),r3
   111ec:	94 70 00 74 	l.lhz r3,0x74(r16)
   111f0:	a4 63 00 3f 	l.andi r3,r3,0x3f
   111f4:	9c 85 00 c0 	l.addi r4,r5,0xc0
   111f8:	d4 05 18 00 	l.sw 0x0(r5),r3
   111fc:	d4 04 18 00 	l.sw 0x0(r4),r3
   11200:	18 80 04 83 	l.movhi r4,0x483
   11204:	9c a5 00 08 	l.addi r5,r5,0x8
   11208:	a8 84 06 48 	l.ori r4,r4,0x648
   1120c:	e4 25 20 00 	l.sfne r5,r4
   11210:	13 ff ff fa 	l.bf 111f8 <mctl_core_init_standby+0x298c>
   11214:	9c 85 00 c0 	l.addi r4,r5,0xc0
   11218:	94 70 00 7c 	l.lhz r3,0x7c(r16)
   1121c:	18 80 04 83 	l.movhi r4,0x483
   11220:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11224:	a8 c4 06 a8 	l.ori r6,r4,0x6a8
   11228:	d4 06 18 00 	l.sw 0x0(r6),r3
   1122c:	a8 c4 07 68 	l.ori r6,r4,0x768
   11230:	d4 06 18 00 	l.sw 0x0(r6),r3
   11234:	d4 05 18 00 	l.sw 0x0(r5),r3
   11238:	a8 a4 07 08 	l.ori r5,r4,0x708
   1123c:	a8 84 06 54 	l.ori r4,r4,0x654
   11240:	d4 05 18 00 	l.sw 0x0(r5),r3
   11244:	8c 70 00 74 	l.lbz r3,0x74(r16)
   11248:	a4 63 00 3f 	l.andi r3,r3,0x3f
   1124c:	9c a4 00 c0 	l.addi r5,r4,0xc0
   11250:	d4 04 18 00 	l.sw 0x0(r4),r3
   11254:	d4 05 18 00 	l.sw 0x0(r5),r3
   11258:	18 a0 04 83 	l.movhi r5,0x483
   1125c:	9c 84 00 08 	l.addi r4,r4,0x8
   11260:	a8 a5 06 9c 	l.ori r5,r5,0x69c
   11264:	e4 24 28 00 	l.sfne r4,r5
   11268:	13 ff ff fa 	l.bf 11250 <mctl_core_init_standby+0x29e4>
   1126c:	9c a4 00 c0 	l.addi r5,r4,0xc0
   11270:	8c b0 00 7c 	l.lbz r5,0x7c(r16)
   11274:	18 60 04 83 	l.movhi r3,0x483
   11278:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   1127c:	a8 c3 06 ac 	l.ori r6,r3,0x6ac
   11280:	d4 06 28 00 	l.sw 0x0(r6),r5
   11284:	a8 c3 07 6c 	l.ori r6,r3,0x76c
   11288:	d4 06 28 00 	l.sw 0x0(r6),r5
   1128c:	d4 04 28 00 	l.sw 0x0(r4),r5
   11290:	a8 83 07 5c 	l.ori r4,r3,0x75c
   11294:	a8 63 00 54 	l.ori r3,r3,0x54
   11298:	d4 04 28 00 	l.sw 0x0(r4),r5
   1129c:	84 83 00 00 	l.lwz r4,0x0(r3)
   112a0:	a8 84 00 80 	l.ori r4,r4,0x80
   112a4:	d4 03 20 00 	l.sw 0x0(r3),r4
   112a8:	07 ff f5 27 	l.jal e744 <mctl_phy_dx0_bit_delay_compensation_standby>
   112ac:	a8 70 00 00 	l.ori r3,r16,0x0
   112b0:	00 00 00 04 	l.j 112c0 <mctl_core_init_standby+0x2a54>
   112b4:	19 c0 04 82 	l.movhi r14,0x482
   112b8:	a8 44 00 00 	l.ori r2,r4,0x0
   112bc:	19 c0 04 82 	l.movhi r14,0x482
   112c0:	9c c0 00 00 	l.addi r6,r0,0x0
   112c4:	aa 4e 03 20 	l.ori r18,r14,0x320
   112c8:	a8 66 00 00 	l.ori r3,r6,0x0
   112cc:	d4 12 30 00 	l.sw 0x0(r18),r6
   112d0:	07 ff f5 03 	l.jal e6dc <mctl_com_set_controller_refresh_standby.clone.2>
   112d4:	a9 ce 03 24 	l.ori r14,r14,0x324
   112d8:	9c 60 00 01 	l.addi r3,r0,0x1
   112dc:	d4 12 18 00 	l.sw 0x0(r18),r3
   112e0:	84 6e 00 00 	l.lwz r3,0x0(r14)
   112e4:	a4 63 00 01 	l.andi r3,r3,0x1
   112e8:	bc 03 00 00 	l.sfeqi r3,0x0
   112ec:	13 ff ff fd 	l.bf 112e0 <mctl_core_init_standby+0x2a74>
   112f0:	15 00 00 00 	l.nop 0x0
   112f4:	84 70 00 04 	l.lwz r3,0x4(r16)
   112f8:	bc 23 00 04 	l.sfnei r3,0x4
   112fc:	10 00 00 03 	l.bf 11308 <mctl_core_init_standby+0x2a9c>
   11300:	18 60 40 00 	l.movhi r3,0x4000
   11304:	84 63 00 00 	l.lwz r3,0x0(r3)
   11308:	9c 21 00 78 	l.addi r1,r1,0x78
   1130c:	a9 62 00 00 	l.ori r11,r2,0x0
   11310:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11314:	84 41 ff d4 	l.lwz r2,0xffffffd4(r1)
   11318:	85 c1 ff d8 	l.lwz r14,0xffffffd8(r1)
   1131c:	86 01 ff dc 	l.lwz r16,0xffffffdc(r1)
   11320:	86 41 ff e0 	l.lwz r18,0xffffffe0(r1)
   11324:	86 81 ff e4 	l.lwz r20,0xffffffe4(r1)
   11328:	86 c1 ff e8 	l.lwz r22,0xffffffe8(r1)
   1132c:	87 01 ff ec 	l.lwz r24,0xffffffec(r1)
   11330:	87 41 ff f0 	l.lwz r26,0xfffffff0(r1)
   11334:	87 81 ff f4 	l.lwz r28,0xfffffff4(r1)
   11338:	44 00 48 00 	l.jr r9
   1133c:	87 c1 ff f8 	l.lwz r30,0xfffffff8(r1)

00011340 <dram_power_save_process>:
   11340:	84 63 00 78 	l.lwz r3,0x78(r3)
   11344:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11348:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   1134c:	a4 63 00 80 	l.andi r3,r3,0x80
   11350:	bc 23 00 00 	l.sfnei r3,0x0
   11354:	10 00 00 07 	l.bf 11370 <dram_power_save_process+0x30>
   11358:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
   1135c:	07 ff f4 ec 	l.jal e70c <dramc_data_cal_standby.clone.13>
   11360:	15 00 00 00 	l.nop 0x0
   11364:	18 60 00 01 	l.movhi r3,0x1
   11368:	a8 63 35 70 	l.ori r3,r3,0x3570
   1136c:	d4 03 58 00 	l.sw 0x0(r3),r11
   11370:	18 60 04 82 	l.movhi r3,0x482
   11374:	a8 83 00 30 	l.ori r4,r3,0x30
   11378:	a8 63 00 04 	l.ori r3,r3,0x4
   1137c:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11380:	a8 a5 00 21 	l.ori r5,r5,0x21
   11384:	d4 04 28 00 	l.sw 0x0(r4),r5
   11388:	84 a3 00 00 	l.lwz r5,0x0(r3)
   1138c:	a4 a5 00 07 	l.andi r5,r5,0x7
   11390:	bc 25 00 03 	l.sfnei r5,0x3
   11394:	13 ff ff fd 	l.bf 11388 <dram_power_save_process+0x48>
   11398:	18 80 04 82 	l.movhi r4,0x482
   1139c:	18 60 07 01 	l.movhi r3,0x701
   113a0:	9c 40 ff ef 	l.addi r2,r0,0xffffffef
   113a4:	a8 63 02 50 	l.ori r3,r3,0x250
   113a8:	84 a3 00 00 	l.lwz r5,0x0(r3)
   113ac:	e0 a5 10 03 	l.and r5,r5,r2
   113b0:	9c 40 00 00 	l.addi r2,r0,0x0
   113b4:	d4 03 28 00 	l.sw 0x0(r3),r5
   113b8:	a8 a4 03 20 	l.ori r5,r4,0x320
   113bc:	a8 64 01 b0 	l.ori r3,r4,0x1b0
   113c0:	d4 05 10 00 	l.sw 0x0(r5),r2
   113c4:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   113c8:	84 c3 00 00 	l.lwz r6,0x0(r3)
   113cc:	a8 84 01 bc 	l.ori r4,r4,0x1bc
   113d0:	a8 c6 1f 00 	l.ori r6,r6,0x1f00
   113d4:	e0 c6 10 03 	l.and r6,r6,r2
   113d8:	d4 03 30 00 	l.sw 0x0(r3),r6
   113dc:	84 c3 00 00 	l.lwz r6,0x0(r3)
   113e0:	a8 c6 00 20 	l.ori r6,r6,0x20
   113e4:	d4 03 30 00 	l.sw 0x0(r3),r6
   113e8:	9c 60 00 01 	l.addi r3,r0,0x1
   113ec:	d4 05 18 00 	l.sw 0x0(r5),r3
   113f0:	85 64 00 00 	l.lwz r11,0x0(r4)
   113f4:	a5 6b 00 01 	l.andi r11,r11,0x1
   113f8:	bc 2b 00 00 	l.sfnei r11,0x0
   113fc:	13 ff ff fd 	l.bf 113f0 <dram_power_save_process+0xb0>
   11400:	18 60 04 82 	l.movhi r3,0x482
   11404:	18 40 7f ff 	l.movhi r2,0x7fff
   11408:	a8 63 00 0c 	l.ori r3,r3,0xc
   1140c:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11410:	d4 03 58 00 	l.sw 0x0(r3),r11
   11414:	18 60 03 00 	l.movhi r3,0x300
   11418:	a8 83 10 10 	l.ori r4,r3,0x1010
   1141c:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11420:	e0 a5 10 03 	l.and r5,r5,r2
   11424:	18 40 bf ff 	l.movhi r2,0xbfff
   11428:	d4 04 28 00 	l.sw 0x0(r4),r5
   1142c:	a8 83 18 00 	l.ori r4,r3,0x1800
   11430:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11434:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11438:	e0 a5 10 03 	l.and r5,r5,r2
   1143c:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11440:	d4 04 28 00 	l.sw 0x0(r4),r5
   11444:	a8 83 18 0c 	l.ori r4,r3,0x180c
   11448:	a8 63 15 40 	l.ori r3,r3,0x1540
   1144c:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11450:	e0 a5 10 03 	l.and r5,r5,r2
   11454:	18 40 ff fe 	l.movhi r2,0xfffe
   11458:	d4 04 28 00 	l.sw 0x0(r4),r5
   1145c:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11460:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11464:	e0 a5 10 03 	l.and r5,r5,r2
   11468:	18 40 7f ff 	l.movhi r2,0x7fff
   1146c:	d4 04 28 00 	l.sw 0x0(r4),r5
   11470:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11474:	84 83 00 00 	l.lwz r4,0x0(r3)
   11478:	e0 84 10 03 	l.and r4,r4,r2
   1147c:	18 40 bf ff 	l.movhi r2,0xbfff
   11480:	d4 03 20 00 	l.sw 0x0(r3),r4
   11484:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11488:	84 83 00 00 	l.lwz r4,0x0(r3)
   1148c:	e0 84 10 03 	l.and r4,r4,r2
   11490:	d4 03 20 00 	l.sw 0x0(r3),r4
   11494:	9c 21 00 08 	l.addi r1,r1,0x8
   11498:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   1149c:	44 00 48 00 	l.jr r9
   114a0:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000114a4 <dram_power_up_process>:
   114a4:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
   114a8:	a8 43 00 00 	l.ori r2,r3,0x0
   114ac:	18 60 00 01 	l.movhi r3,0x1
   114b0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   114b4:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
   114b8:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
   114bc:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
   114c0:	a8 63 2c f2 	l.ori r3,r3,0x2cf2
   114c4:	9c 21 ff dc 	l.addi r1,r1,0xffffffdc
   114c8:	18 80 00 01 	l.movhi r4,0x1
   114cc:	d4 01 18 00 	l.sw 0x0(r1),r3
   114d0:	a8 84 2c d5 	l.ori r4,r4,0x2cd5
   114d4:	07 ff e4 c1 	l.jal a7d8 <debugger_printf>
   114d8:	9c 60 00 02 	l.addi r3,r0,0x2
   114dc:	18 60 03 00 	l.movhi r3,0x300
   114e0:	a8 83 01 60 	l.ori r4,r3,0x160
   114e4:	a8 63 01 68 	l.ori r3,r3,0x168
   114e8:	84 a4 00 00 	l.lwz r5,0x0(r4)
   114ec:	a8 a5 01 00 	l.ori r5,r5,0x100
   114f0:	d4 04 28 00 	l.sw 0x0(r4),r5
   114f4:	9c a0 ff c0 	l.addi r5,r0,0xffffffc0
   114f8:	84 83 00 00 	l.lwz r4,0x0(r3)
   114fc:	e0 84 28 03 	l.and r4,r4,r5
   11500:	d4 03 20 00 	l.sw 0x0(r3),r4
   11504:	07 ff f4 da 	l.jal e86c <mctl_core_init_standby>
   11508:	a8 62 00 00 	l.ori r3,r2,0x0
   1150c:	bc 2b 00 00 	l.sfnei r11,0x0
   11510:	10 00 00 06 	l.bf 11528 <dram_power_up_process+0x84>
   11514:	a9 cb 00 00 	l.ori r14,r11,0x0
   11518:	18 80 00 01 	l.movhi r4,0x1
   1151c:	9c 60 00 02 	l.addi r3,r0,0x2
   11520:	00 00 00 68 	l.j 116c0 <dram_power_up_process+0x21c>
   11524:	a8 84 2c f8 	l.ori r4,r4,0x2cf8
   11528:	84 62 00 1c 	l.lwz r3,0x1c(r2)
   1152c:	bd 63 00 00 	l.sfgesi r3,0x0
   11530:	10 00 00 05 	l.bf 11544 <dram_power_up_process+0xa0>
   11534:	15 00 00 00 	l.nop 0x0
   11538:	b9 c3 00 50 	l.srli r14,r3,0x10
   1153c:	00 00 00 18 	l.j 1159c <dram_power_up_process+0xf8>
   11540:	a5 ce 7f ff 	l.andi r14,r14,0x7fff
   11544:	84 82 00 18 	l.lwz r4,0x18(r2)
   11548:	b9 c4 00 44 	l.srli r14,r4,0x4
   1154c:	b8 c4 00 4c 	l.srli r6,r4,0xc
   11550:	a4 a4 00 0f 	l.andi r5,r4,0xf
   11554:	a5 ce 00 ff 	l.andi r14,r14,0xff
   11558:	a4 c6 00 03 	l.andi r6,r6,0x3
   1155c:	b8 84 00 4e 	l.srli r4,r4,0xe
   11560:	e1 ce 30 00 	l.add r14,r14,r6
   11564:	e1 ce 28 00 	l.add r14,r14,r5
   11568:	b8 a3 00 4c 	l.srli r5,r3,0xc
   1156c:	a4 84 00 03 	l.andi r4,r4,0x3
   11570:	a4 a5 00 0f 	l.andi r5,r5,0xf
   11574:	e1 ce 20 00 	l.add r14,r14,r4
   11578:	a4 83 00 0f 	l.andi r4,r3,0xf
   1157c:	bc 24 00 00 	l.sfnei r4,0x0
   11580:	10 00 00 04 	l.bf 11590 <dram_power_up_process+0xec>
   11584:	e1 ce 28 00 	l.add r14,r14,r5
   11588:	00 00 00 03 	l.j 11594 <dram_power_up_process+0xf0>
   1158c:	9d ce ff ee 	l.addi r14,r14,0xffffffee
   11590:	9d ce ff ed 	l.addi r14,r14,0xffffffed
   11594:	9c 80 00 01 	l.addi r4,r0,0x1
   11598:	e1 c4 70 08 	l.sll r14,r4,r14
   1159c:	18 80 03 00 	l.movhi r4,0x300
   115a0:	a8 84 62 00 	l.ori r4,r4,0x6200
   115a4:	84 84 00 00 	l.lwz r4,0x0(r4)
   115a8:	a4 84 ff ff 	l.andi r4,r4,0xffff
   115ac:	bc 24 04 00 	l.sfnei r4,0x400
   115b0:	10 00 00 05 	l.bf 115c4 <dram_power_up_process+0x120>
   115b4:	bc ae 08 00 	l.sfleui r14,0x800
   115b8:	10 00 00 03 	l.bf 115c4 <dram_power_up_process+0x120>
   115bc:	15 00 00 00 	l.nop 0x0
   115c0:	9d c0 08 00 	l.addi r14,r0,0x800
   115c4:	84 82 00 78 	l.lwz r4,0x78(r2)
   115c8:	b8 a4 00 50 	l.srli r5,r4,0x10
   115cc:	a4 a5 00 0f 	l.andi r5,r5,0xf
   115d0:	bc 05 00 00 	l.sfeqi r5,0x0
   115d4:	10 00 00 06 	l.bf 115ec <dram_power_up_process+0x148>
   115d8:	b8 ae 00 10 	l.slli r5,r14,0x10
   115dc:	e0 ae 70 00 	l.add r5,r14,r14
   115e0:	e1 c5 70 00 	l.add r14,r5,r14
   115e4:	b9 ce 00 42 	l.srli r14,r14,0x2
   115e8:	b8 ae 00 10 	l.slli r5,r14,0x10
   115ec:	a4 63 ff ff 	l.andi r3,r3,0xffff
   115f0:	e0 65 18 04 	l.or r3,r5,r3
   115f4:	d4 02 18 1c 	l.sw 0x1c(r2),r3
   115f8:	d4 01 70 00 	l.sw 0x0(r1),r14
   115fc:	84 a2 00 18 	l.lwz r5,0x18(r2)
   11600:	d4 01 20 0c 	l.sw 0xc(r1),r4
   11604:	18 80 00 01 	l.movhi r4,0x1
   11608:	d4 01 18 08 	l.sw 0x8(r1),r3
   1160c:	a8 84 2d 12 	l.ori r4,r4,0x2d12
   11610:	9c 60 00 02 	l.addi r3,r0,0x2
   11614:	07 ff e4 71 	l.jal a7d8 <debugger_printf>
   11618:	d4 01 28 04 	l.sw 0x4(r1),r5
   1161c:	84 62 00 78 	l.lwz r3,0x78(r2)
   11620:	18 80 01 00 	l.movhi r4,0x100
   11624:	e0 63 20 03 	l.and r3,r3,r4
   11628:	bc 03 00 00 	l.sfeqi r3,0x0
   1162c:	10 00 00 06 	l.bf 11644 <dram_power_up_process+0x1a0>
   11630:	18 60 04 82 	l.movhi r3,0x482
   11634:	a8 63 00 30 	l.ori r3,r3,0x30
   11638:	84 83 00 00 	l.lwz r4,0x0(r3)
   1163c:	a8 84 00 09 	l.ori r4,r4,0x9
   11640:	d4 03 20 00 	l.sw 0x0(r3),r4
   11644:	86 02 00 78 	l.lwz r16,0x78(r2)
   11648:	a6 10 00 80 	l.andi r16,r16,0x80
   1164c:	bc 30 00 00 	l.sfnei r16,0x0
   11650:	10 00 00 1e 	l.bf 116c8 <dram_power_up_process+0x224>
   11654:	15 00 00 00 	l.nop 0x0
   11658:	07 ff f4 2d 	l.jal e70c <dramc_data_cal_standby.clone.13>
   1165c:	1a 40 00 01 	l.movhi r18,0x1
   11660:	00 00 00 11 	l.j 116a4 <dram_power_up_process+0x200>
   11664:	aa 52 35 70 	l.ori r18,r18,0x3570
   11668:	9e 10 00 01 	l.addi r16,r16,0x1
   1166c:	9c 60 00 02 	l.addi r3,r0,0x2
   11670:	a8 84 2d 51 	l.ori r4,r4,0x2d51
   11674:	07 ff e4 59 	l.jal a7d8 <debugger_printf>
   11678:	d4 01 80 00 	l.sw 0x0(r1),r16
   1167c:	bc 10 00 03 	l.sfeqi r16,0x3
   11680:	10 00 00 13 	l.bf 116cc <dram_power_up_process+0x228>
   11684:	9d 60 00 00 	l.addi r11,r0,0x0
   11688:	07 ff f4 79 	l.jal e86c <mctl_core_init_standby>
   1168c:	a8 62 00 00 	l.ori r3,r2,0x0
   11690:	bc 0b 00 00 	l.sfeqi r11,0x0
   11694:	10 00 00 0e 	l.bf 116cc <dram_power_up_process+0x228>
   11698:	15 00 00 00 	l.nop 0x0
   1169c:	07 ff f4 1c 	l.jal e70c <dramc_data_cal_standby.clone.13>
   116a0:	15 00 00 00 	l.nop 0x0
   116a4:	84 72 00 00 	l.lwz r3,0x0(r18)
   116a8:	e4 2b 18 00 	l.sfne r11,r3
   116ac:	13 ff ff ef 	l.bf 11668 <dram_power_up_process+0x1c4>
   116b0:	18 80 00 01 	l.movhi r4,0x1
   116b4:	18 80 00 01 	l.movhi r4,0x1
   116b8:	9c 60 00 02 	l.addi r3,r0,0x2
   116bc:	a8 84 2d 80 	l.ori r4,r4,0x2d80
   116c0:	07 ff e4 46 	l.jal a7d8 <debugger_printf>
   116c4:	15 00 00 00 	l.nop 0x0
   116c8:	a9 6e 00 00 	l.ori r11,r14,0x0
   116cc:	9c 21 00 24 	l.addi r1,r1,0x24
   116d0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   116d4:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
   116d8:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
   116dc:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
   116e0:	44 00 48 00 	l.jr r9
   116e4:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

000116e8 <iosc_freq_init>:
   116e8:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
   116ec:	19 c0 00 01 	l.movhi r14,0x1
   116f0:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
   116f4:	a9 ce 35 78 	l.ori r14,r14,0x3578
   116f8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   116fc:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
   11700:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
   11704:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
   11708:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
   1170c:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
   11710:	84 4e 00 00 	l.lwz r2,0x0(r14)
   11714:	bc 22 00 00 	l.sfnei r2,0x0
   11718:	10 00 00 48 	l.bf 11838 <iosc_freq_init+0x150>
   1171c:	9c 21 ff dc 	l.addi r1,r1,0xffffffdc
   11720:	18 40 07 01 	l.movhi r2,0x701
   11724:	18 80 f8 ff 	l.movhi r4,0xf8ff
   11728:	87 02 00 00 	l.lwz r24,0x0(r2)
   1172c:	a8 84 ff ff 	l.ori r4,r4,0xffff
   11730:	84 62 00 00 	l.lwz r3,0x0(r2)
   11734:	1a 00 00 0f 	l.movhi r16,0xf
   11738:	e0 63 20 03 	l.and r3,r3,r4
   1173c:	d4 02 18 00 	l.sw 0x0(r2),r3
   11740:	07 ff cf 33 	l.jal 540c <time_cdelay>
   11744:	9c 60 06 40 	l.addi r3,r0,0x640
   11748:	07 ff ee dc 	l.jal d2b8 <cpucfg_counter_read>
   1174c:	15 00 00 00 	l.nop 0x0
   11750:	a8 70 42 40 	l.ori r3,r16,0x4240
   11754:	07 ff cf 2e 	l.jal 540c <time_cdelay>
   11758:	aa 8c 00 00 	l.ori r20,r12,0x0
   1175c:	07 ff ee d7 	l.jal d2b8 <cpucfg_counter_read>
   11760:	15 00 00 00 	l.nop 0x0
   11764:	18 a0 f8 ff 	l.movhi r5,0xf8ff
   11768:	84 62 00 00 	l.lwz r3,0x0(r2)
   1176c:	a8 a5 ff ff 	l.ori r5,r5,0xffff
   11770:	18 80 02 00 	l.movhi r4,0x200
   11774:	e0 63 28 03 	l.and r3,r3,r5
   11778:	aa cc 00 00 	l.ori r22,r12,0x0
   1177c:	e0 63 20 04 	l.or r3,r3,r4
   11780:	d4 02 18 00 	l.sw 0x0(r2),r3
   11784:	07 ff cf 22 	l.jal 540c <time_cdelay>
   11788:	9c 60 06 40 	l.addi r3,r0,0x640
   1178c:	07 ff ee cb 	l.jal d2b8 <cpucfg_counter_read>
   11790:	15 00 00 00 	l.nop 0x0
   11794:	a8 70 42 40 	l.ori r3,r16,0x4240
   11798:	07 ff cf 1d 	l.jal 540c <time_cdelay>
   1179c:	aa 4c 00 00 	l.ori r18,r12,0x0
   117a0:	07 ff ee c6 	l.jal d2b8 <cpucfg_counter_read>
   117a4:	15 00 00 00 	l.nop 0x0
   117a8:	18 a0 f8 ff 	l.movhi r5,0xf8ff
   117ac:	84 82 00 00 	l.lwz r4,0x0(r2)
   117b0:	a8 a5 ff ff 	l.ori r5,r5,0xffff
   117b4:	aa 0c 00 00 	l.ori r16,r12,0x0
   117b8:	e0 84 28 03 	l.and r4,r4,r5
   117bc:	18 a0 07 00 	l.movhi r5,0x700
   117c0:	e0 78 28 03 	l.and r3,r24,r5
   117c4:	e0 64 18 04 	l.or r3,r4,r3
   117c8:	9c 80 5d c0 	l.addi r4,r0,0x5dc0
   117cc:	d4 02 18 00 	l.sw 0x0(r2),r3
   117d0:	07 ff ec 96 	l.jal ca28 <__udivsi3>
   117d4:	e0 76 a0 02 	l.sub r3,r22,r20
   117d8:	9c 80 5d c0 	l.addi r4,r0,0x5dc0
   117dc:	e0 70 90 02 	l.sub r3,r16,r18
   117e0:	07 ff ec 92 	l.jal ca28 <__udivsi3>
   117e4:	e0 4b 23 06 	l.mul r2,r11,r4
   117e8:	a8 62 00 00 	l.ori r3,r2,0x0
   117ec:	a8 8b 00 00 	l.ori r4,r11,0x0
   117f0:	07 ff ec 8e 	l.jal ca28 <__udivsi3>
   117f4:	9c 40 03 e8 	l.addi r2,r0,0x3e8
   117f8:	e1 6b 13 06 	l.mul r11,r11,r2
   117fc:	18 40 00 01 	l.movhi r2,0x1
   11800:	18 80 00 01 	l.movhi r4,0x1
   11804:	a8 42 33 b0 	l.ori r2,r2,0x33b0
   11808:	9c 60 00 02 	l.addi r3,r0,0x2
   1180c:	d4 02 58 00 	l.sw 0x0(r2),r11
   11810:	a8 84 2d a4 	l.ori r4,r4,0x2da4
   11814:	07 ff e3 f1 	l.jal a7d8 <debugger_printf>
   11818:	d4 01 58 00 	l.sw 0x0(r1),r11
   1181c:	84 62 00 00 	l.lwz r3,0x0(r2)
   11820:	18 40 00 01 	l.movhi r2,0x1
   11824:	b8 63 00 49 	l.srli r3,r3,0x9
   11828:	a8 42 33 b4 	l.ori r2,r2,0x33b4
   1182c:	d4 02 18 00 	l.sw 0x0(r2),r3
   11830:	9c 40 00 01 	l.addi r2,r0,0x1
   11834:	d4 0e 10 00 	l.sw 0x0(r14),r2
   11838:	9c 21 00 24 	l.addi r1,r1,0x24
   1183c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11840:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
   11844:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
   11848:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
   1184c:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
   11850:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
   11854:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
   11858:	44 00 48 00 	l.jr r9
   1185c:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)

00011860 <ccu_init>:
   11860:	18 80 00 01 	l.movhi r4,0x1
   11864:	18 60 07 01 	l.movhi r3,0x701
   11868:	a8 84 37 68 	l.ori r4,r4,0x3768
   1186c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
   11870:	d4 04 18 00 	l.sw 0x0(r4),r3
   11874:	18 a0 00 01 	l.movhi r5,0x1
   11878:	18 80 03 00 	l.movhi r4,0x300
   1187c:	a8 a5 37 64 	l.ori r5,r5,0x3764
   11880:	a8 c4 10 00 	l.ori r6,r4,0x1000
   11884:	9c 40 ff e0 	l.addi r2,r0,0xffffffe0
   11888:	d4 05 30 00 	l.sw 0x0(r5),r6
   1188c:	18 a0 00 01 	l.movhi r5,0x1
   11890:	a8 c4 10 10 	l.ori r6,r4,0x1010
   11894:	a8 a5 37 58 	l.ori r5,r5,0x3758
   11898:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
   1189c:	d4 05 30 00 	l.sw 0x0(r5),r6
   118a0:	18 a0 00 01 	l.movhi r5,0x1
   118a4:	a8 c4 10 20 	l.ori r6,r4,0x1020
   118a8:	a8 a5 37 60 	l.ori r5,r5,0x3760
   118ac:	a8 84 10 28 	l.ori r4,r4,0x1028
   118b0:	d4 05 30 00 	l.sw 0x0(r5),r6
   118b4:	18 a0 00 01 	l.movhi r5,0x1
   118b8:	a8 a5 37 54 	l.ori r5,r5,0x3754
   118bc:	d4 05 20 00 	l.sw 0x0(r5),r4
   118c0:	84 83 00 00 	l.lwz r4,0x0(r3)
   118c4:	e0 84 10 03 	l.and r4,r4,r2
   118c8:	9c 40 fc ff 	l.addi r2,r0,0xfffffcff
   118cc:	a8 84 00 02 	l.ori r4,r4,0x2
   118d0:	d4 03 20 00 	l.sw 0x0(r3),r4
   118d4:	84 83 00 00 	l.lwz r4,0x0(r3)
   118d8:	e0 84 10 03 	l.and r4,r4,r2
   118dc:	18 40 f8 ff 	l.movhi r2,0xf8ff
   118e0:	d4 03 20 00 	l.sw 0x0(r3),r4
   118e4:	a8 42 ff ff 	l.ori r2,r2,0xffff
   118e8:	84 83 00 00 	l.lwz r4,0x0(r3)
   118ec:	e0 84 10 03 	l.and r4,r4,r2
   118f0:	18 40 03 00 	l.movhi r2,0x300
   118f4:	e0 84 10 04 	l.or r4,r4,r2
   118f8:	9c 40 00 00 	l.addi r2,r0,0x0
   118fc:	d4 03 20 00 	l.sw 0x0(r3),r4
   11900:	18 60 00 01 	l.movhi r3,0x1
   11904:	a9 62 00 00 	l.ori r11,r2,0x0
   11908:	a8 63 37 5c 	l.ori r3,r3,0x375c
   1190c:	d4 03 10 00 	l.sw 0x0(r3),r2
   11910:	9c 21 00 04 	l.addi r1,r1,0x4
   11914:	44 00 48 00 	l.jr r9
   11918:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0001191c <ccu_exit>:
   1191c:	44 00 48 00 	l.jr r9
   11920:	9d 60 00 00 	l.addi r11,r0,0x0

00011924 <save_state_flag>:
   11924:	18 80 07 00 	l.movhi r4,0x700
   11928:	a8 84 01 0c 	l.ori r4,r4,0x10c
   1192c:	d4 04 18 00 	l.sw 0x0(r4),r3
   11930:	44 00 48 00 	l.jr r9
   11934:	15 00 00 00 	l.nop 0x0

00011938 <read_state_flag>:
   11938:	18 60 07 00 	l.movhi r3,0x700
   1193c:	a8 63 01 0c 	l.ori r3,r3,0x10c
   11940:	85 63 00 00 	l.lwz r11,0x0(r3)
   11944:	44 00 48 00 	l.jr r9
   11948:	15 00 00 00 	l.nop 0x0

0001194c <ccu_set_mclk_onoff>:
   1194c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11950:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   11954:	bc 03 00 1f 	l.sfeqi r3,0x1f
   11958:	10 00 00 27 	l.bf 119f4 <ccu_set_mclk_onoff+0xa8>
   1195c:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
   11960:	bc 43 00 1f 	l.sfgtui r3,0x1f
   11964:	10 00 00 09 	l.bf 11988 <ccu_set_mclk_onoff+0x3c>
   11968:	bc 03 00 22 	l.sfeqi r3,0x22
   1196c:	bc 03 00 11 	l.sfeqi r3,0x11
   11970:	10 00 00 36 	l.bf 11a48 <ccu_set_mclk_onoff+0xfc>
   11974:	bc 03 00 1a 	l.sfeqi r3,0x1a
   11978:	0c 00 00 3d 	l.bnf 11a6c <ccu_set_mclk_onoff+0x120>
   1197c:	15 00 00 00 	l.nop 0x0
   11980:	00 00 00 13 	l.j 119cc <ccu_set_mclk_onoff+0x80>
   11984:	18 60 00 01 	l.movhi r3,0x1
   11988:	10 00 00 06 	l.bf 119a0 <ccu_set_mclk_onoff+0x54>
   1198c:	bc 03 00 33 	l.sfeqi r3,0x33
   11990:	0c 00 00 37 	l.bnf 11a6c <ccu_set_mclk_onoff+0x120>
   11994:	15 00 00 00 	l.nop 0x0
   11998:	00 00 00 22 	l.j 11a20 <ccu_set_mclk_onoff+0xd4>
   1199c:	18 60 00 01 	l.movhi r3,0x1
   119a0:	18 60 00 01 	l.movhi r3,0x1
   119a4:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   119a8:	a8 63 37 68 	l.ori r3,r3,0x3768
   119ac:	a4 84 00 01 	l.andi r4,r4,0x1
   119b0:	84 63 00 00 	l.lwz r3,0x0(r3)
   119b4:	84 a3 01 9c 	l.lwz r5,0x19c(r3)
   119b8:	e0 a5 10 03 	l.and r5,r5,r2
   119bc:	e0 85 20 04 	l.or r4,r5,r4
   119c0:	d4 03 21 9c 	l.sw 0x19c(r3),r4
   119c4:	00 00 00 30 	l.j 11a84 <ccu_set_mclk_onoff+0x138>
   119c8:	9d 60 00 00 	l.addi r11,r0,0x0
   119cc:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   119d0:	a8 63 37 68 	l.ori r3,r3,0x3768
   119d4:	a4 84 00 01 	l.andi r4,r4,0x1
   119d8:	84 63 00 00 	l.lwz r3,0x0(r3)
   119dc:	84 a3 01 8c 	l.lwz r5,0x18c(r3)
   119e0:	e0 a5 10 03 	l.and r5,r5,r2
   119e4:	e0 85 20 04 	l.or r4,r5,r4
   119e8:	d4 03 21 8c 	l.sw 0x18c(r3),r4
   119ec:	00 00 00 26 	l.j 11a84 <ccu_set_mclk_onoff+0x138>
   119f0:	9d 60 00 00 	l.addi r11,r0,0x0
   119f4:	18 60 00 01 	l.movhi r3,0x1
   119f8:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   119fc:	a8 63 37 68 	l.ori r3,r3,0x3768
   11a00:	a4 84 00 01 	l.andi r4,r4,0x1
   11a04:	84 63 00 00 	l.lwz r3,0x0(r3)
   11a08:	84 a3 01 1c 	l.lwz r5,0x11c(r3)
   11a0c:	e0 a5 10 03 	l.and r5,r5,r2
   11a10:	e0 85 20 04 	l.or r4,r5,r4
   11a14:	d4 03 21 1c 	l.sw 0x11c(r3),r4
   11a18:	00 00 00 1b 	l.j 11a84 <ccu_set_mclk_onoff+0x138>
   11a1c:	9d 60 00 00 	l.addi r11,r0,0x0
   11a20:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11a24:	a8 63 37 68 	l.ori r3,r3,0x3768
   11a28:	a4 84 00 01 	l.andi r4,r4,0x1
   11a2c:	84 63 00 00 	l.lwz r3,0x0(r3)
   11a30:	84 a3 02 0c 	l.lwz r5,0x20c(r3)
   11a34:	e0 a5 10 03 	l.and r5,r5,r2
   11a38:	e0 85 20 04 	l.or r4,r5,r4
   11a3c:	d4 03 22 0c 	l.sw 0x20c(r3),r4
   11a40:	00 00 00 11 	l.j 11a84 <ccu_set_mclk_onoff+0x138>
   11a44:	9d 60 00 00 	l.addi r11,r0,0x0
   11a48:	18 60 03 00 	l.movhi r3,0x300
   11a4c:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11a50:	a8 63 17 1c 	l.ori r3,r3,0x171c
   11a54:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11a58:	e0 a5 10 03 	l.and r5,r5,r2
   11a5c:	e0 84 28 04 	l.or r4,r4,r5
   11a60:	d4 03 20 00 	l.sw 0x0(r3),r4
   11a64:	00 00 00 08 	l.j 11a84 <ccu_set_mclk_onoff+0x138>
   11a68:	9d 60 00 00 	l.addi r11,r0,0x0
   11a6c:	18 80 00 01 	l.movhi r4,0x1
   11a70:	d4 01 18 00 	l.sw 0x0(r1),r3
   11a74:	a8 84 2d b3 	l.ori r4,r4,0x2db3
   11a78:	07 ff e3 58 	l.jal a7d8 <debugger_printf>
   11a7c:	9c 60 00 04 	l.addi r3,r0,0x4
   11a80:	9d 60 ff ea 	l.addi r11,r0,0xffffffea
   11a84:	9c 21 00 0c 	l.addi r1,r1,0xc
   11a88:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11a8c:	44 00 48 00 	l.jr r9
   11a90:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00011a94 <ccu_set_poweroff_gating_state>:
   11a94:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11a98:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   11a9c:	bc 43 00 0c 	l.sfgtui r3,0xc
   11aa0:	10 00 00 64 	l.bf 11c30 <ccu_set_poweroff_gating_state+0x19c>
   11aa4:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
   11aa8:	18 40 00 01 	l.movhi r2,0x1
   11aac:	b8 a3 00 02 	l.slli r5,r3,0x2
   11ab0:	a8 42 30 44 	l.ori r2,r2,0x3044
   11ab4:	e0 a5 10 00 	l.add r5,r5,r2
   11ab8:	84 a5 00 00 	l.lwz r5,0x0(r5)
   11abc:	44 00 28 00 	l.jr r5
   11ac0:	15 00 00 00 	l.nop 0x0
   11ac4:	18 60 07 00 	l.movhi r3,0x700
   11ac8:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11acc:	a8 63 04 44 	l.ori r3,r3,0x444
   11ad0:	a4 84 00 01 	l.andi r4,r4,0x1
   11ad4:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11ad8:	d4 01 28 04 	l.sw 0x4(r1),r5
   11adc:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11ae0:	e0 a5 10 03 	l.and r5,r5,r2
   11ae4:	d4 01 28 04 	l.sw 0x4(r1),r5
   11ae8:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11aec:	00 00 00 0e 	l.j 11b24 <ccu_set_poweroff_gating_state+0x90>
   11af0:	e0 84 28 04 	l.or r4,r4,r5
   11af4:	18 60 07 00 	l.movhi r3,0x700
   11af8:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd
   11afc:	a8 63 04 44 	l.ori r3,r3,0x444
   11b00:	a4 84 00 01 	l.andi r4,r4,0x1
   11b04:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11b08:	e0 84 20 00 	l.add r4,r4,r4
   11b0c:	d4 01 28 04 	l.sw 0x4(r1),r5
   11b10:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11b14:	e0 a5 10 03 	l.and r5,r5,r2
   11b18:	d4 01 28 04 	l.sw 0x4(r1),r5
   11b1c:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11b20:	e0 84 28 04 	l.or r4,r4,r5
   11b24:	d4 01 20 04 	l.sw 0x4(r1),r4
   11b28:	84 81 00 04 	l.lwz r4,0x4(r1)
   11b2c:	d4 03 20 00 	l.sw 0x0(r3),r4
   11b30:	00 00 00 46 	l.j 11c48 <ccu_set_poweroff_gating_state+0x1b4>
   11b34:	9d 60 00 00 	l.addi r11,r0,0x0
   11b38:	18 60 07 00 	l.movhi r3,0x700
   11b3c:	9c 40 ff fb 	l.addi r2,r0,0xfffffffb
   11b40:	a8 63 04 44 	l.ori r3,r3,0x444
   11b44:	a4 84 00 01 	l.andi r4,r4,0x1
   11b48:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11b4c:	b8 84 00 02 	l.slli r4,r4,0x2
   11b50:	d4 01 28 04 	l.sw 0x4(r1),r5
   11b54:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11b58:	e0 a5 10 03 	l.and r5,r5,r2
   11b5c:	d4 01 28 04 	l.sw 0x4(r1),r5
   11b60:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11b64:	03 ff ff f0 	l.j 11b24 <ccu_set_poweroff_gating_state+0x90>
   11b68:	e0 84 28 04 	l.or r4,r4,r5
   11b6c:	18 60 07 00 	l.movhi r3,0x700
   11b70:	9c 40 ff f7 	l.addi r2,r0,0xfffffff7
   11b74:	a8 63 04 44 	l.ori r3,r3,0x444
   11b78:	a4 84 00 01 	l.andi r4,r4,0x1
   11b7c:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11b80:	b8 84 00 03 	l.slli r4,r4,0x3
   11b84:	d4 01 28 04 	l.sw 0x4(r1),r5
   11b88:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11b8c:	e0 a5 10 03 	l.and r5,r5,r2
   11b90:	d4 01 28 04 	l.sw 0x4(r1),r5
   11b94:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11b98:	03 ff ff e3 	l.j 11b24 <ccu_set_poweroff_gating_state+0x90>
   11b9c:	e0 84 28 04 	l.or r4,r4,r5
   11ba0:	18 60 07 00 	l.movhi r3,0x700
   11ba4:	9c 40 ff ef 	l.addi r2,r0,0xffffffef
   11ba8:	a8 63 04 44 	l.ori r3,r3,0x444
   11bac:	a4 84 00 01 	l.andi r4,r4,0x1
   11bb0:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11bb4:	b8 84 00 04 	l.slli r4,r4,0x4
   11bb8:	d4 01 28 04 	l.sw 0x4(r1),r5
   11bbc:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11bc0:	e0 a5 10 03 	l.and r5,r5,r2
   11bc4:	d4 01 28 04 	l.sw 0x4(r1),r5
   11bc8:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11bcc:	03 ff ff d6 	l.j 11b24 <ccu_set_poweroff_gating_state+0x90>
   11bd0:	e0 84 28 04 	l.or r4,r4,r5
   11bd4:	18 60 00 01 	l.movhi r3,0x1
   11bd8:	a4 84 00 01 	l.andi r4,r4,0x1
   11bdc:	a8 63 37 68 	l.ori r3,r3,0x3768
   11be0:	9c 40 ff fb 	l.addi r2,r0,0xfffffffb
   11be4:	84 63 00 00 	l.lwz r3,0x0(r3)
   11be8:	b8 84 00 02 	l.slli r4,r4,0x2
   11bec:	84 a3 02 50 	l.lwz r5,0x250(r3)
   11bf0:	e0 a5 10 03 	l.and r5,r5,r2
   11bf4:	e0 85 20 04 	l.or r4,r5,r4
   11bf8:	d4 03 22 50 	l.sw 0x250(r3),r4
   11bfc:	00 00 00 13 	l.j 11c48 <ccu_set_poweroff_gating_state+0x1b4>
   11c00:	9d 60 00 00 	l.addi r11,r0,0x0
   11c04:	18 60 00 01 	l.movhi r3,0x1
   11c08:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11c0c:	a8 63 37 68 	l.ori r3,r3,0x3768
   11c10:	a4 84 00 01 	l.andi r4,r4,0x1
   11c14:	84 63 00 00 	l.lwz r3,0x0(r3)
   11c18:	84 a3 02 54 	l.lwz r5,0x254(r3)
   11c1c:	e0 a5 10 03 	l.and r5,r5,r2
   11c20:	e0 85 20 04 	l.or r4,r5,r4
   11c24:	d4 03 22 54 	l.sw 0x254(r3),r4
   11c28:	00 00 00 08 	l.j 11c48 <ccu_set_poweroff_gating_state+0x1b4>
   11c2c:	9d 60 00 00 	l.addi r11,r0,0x0
   11c30:	18 80 00 01 	l.movhi r4,0x1
   11c34:	d4 01 18 00 	l.sw 0x0(r1),r3
   11c38:	a8 84 2d e5 	l.ori r4,r4,0x2de5
   11c3c:	07 ff e2 e7 	l.jal a7d8 <debugger_printf>
   11c40:	9c 60 00 04 	l.addi r3,r0,0x4
   11c44:	9d 60 ff ea 	l.addi r11,r0,0xffffffea
   11c48:	9c 21 00 10 	l.addi r1,r1,0x10
   11c4c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11c50:	44 00 48 00 	l.jr r9
   11c54:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00011c58 <ccu_24mhosc_reg_cb>:
   11c58:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11c5c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
   11c60:	a8 83 00 00 	l.ori r4,r3,0x0
   11c64:	9c 21 00 04 	l.addi r1,r1,0x4
   11c68:	18 60 00 01 	l.movhi r3,0x1
   11c6c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11c70:	03 ff e1 ba 	l.j a358 <notifier_insert>
   11c74:	a8 63 35 7c 	l.ori r3,r3,0x357c

00011c78 <ccu_24mhosc_disable>:
   11c78:	18 60 00 01 	l.movhi r3,0x1
   11c7c:	9c 80 00 01 	l.addi r4,r0,0x1
   11c80:	a8 63 35 80 	l.ori r3,r3,0x3580
   11c84:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11c88:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   11c8c:	d4 03 20 00 	l.sw 0x0(r3),r4
   11c90:	18 60 00 01 	l.movhi r3,0x1
   11c94:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
   11c98:	a8 63 35 7c 	l.ori r3,r3,0x357c
   11c9c:	9c a0 00 00 	l.addi r5,r0,0x0
   11ca0:	07 ff e2 07 	l.jal a4bc <notifier_notify>
   11ca4:	18 40 a7 00 	l.movhi r2,0xa700
   11ca8:	18 60 07 01 	l.movhi r3,0x701
   11cac:	18 80 00 01 	l.movhi r4,0x1
   11cb0:	a8 63 02 44 	l.ori r3,r3,0x244
   11cb4:	a8 84 35 84 	l.ori r4,r4,0x3584
   11cb8:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11cbc:	b8 a5 00 50 	l.srli r5,r5,0x10
   11cc0:	a4 a5 00 07 	l.andi r5,r5,0x7
   11cc4:	d4 04 28 00 	l.sw 0x0(r4),r5
   11cc8:	84 83 00 00 	l.lwz r4,0x0(r3)
   11ccc:	e0 84 10 04 	l.or r4,r4,r2
   11cd0:	d4 03 20 00 	l.sw 0x0(r3),r4
   11cd4:	84 83 00 00 	l.lwz r4,0x0(r3)
   11cd8:	e0 84 10 04 	l.or r4,r4,r2
   11cdc:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11ce0:	e0 84 10 03 	l.and r4,r4,r2
   11ce4:	18 40 80 00 	l.movhi r2,0x8000
   11ce8:	d4 03 20 00 	l.sw 0x0(r3),r4
   11cec:	07 ff cd c8 	l.jal 540c <time_cdelay>
   11cf0:	9c 60 00 14 	l.addi r3,r0,0x14
   11cf4:	18 60 07 00 	l.movhi r3,0x700
   11cf8:	9d 60 00 00 	l.addi r11,r0,0x0
   11cfc:	a8 63 01 60 	l.ori r3,r3,0x160
   11d00:	84 83 00 00 	l.lwz r4,0x0(r3)
   11d04:	e0 84 10 04 	l.or r4,r4,r2
   11d08:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd
   11d0c:	d4 03 20 00 	l.sw 0x0(r3),r4
   11d10:	84 83 00 00 	l.lwz r4,0x0(r3)
   11d14:	e0 84 10 03 	l.and r4,r4,r2
   11d18:	d4 03 20 00 	l.sw 0x0(r3),r4
   11d1c:	9c 21 00 08 	l.addi r1,r1,0x8
   11d20:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11d24:	44 00 48 00 	l.jr r9
   11d28:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00011d2c <ccu_24mhosc_enable>:
   11d2c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   11d30:	18 40 07 00 	l.movhi r2,0x700
   11d34:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11d38:	a8 42 01 60 	l.ori r2,r2,0x160
   11d3c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
   11d40:	84 62 00 00 	l.lwz r3,0x0(r2)
   11d44:	a8 63 00 02 	l.ori r3,r3,0x2
   11d48:	d4 02 18 00 	l.sw 0x0(r2),r3
   11d4c:	07 ff cd b6 	l.jal 5424 <time_mdelay>
   11d50:	9c 60 00 04 	l.addi r3,r0,0x4
   11d54:	18 80 7f ff 	l.movhi r4,0x7fff
   11d58:	84 62 00 00 	l.lwz r3,0x0(r2)
   11d5c:	a8 84 ff ff 	l.ori r4,r4,0xffff
   11d60:	e0 63 20 03 	l.and r3,r3,r4
   11d64:	18 80 a7 00 	l.movhi r4,0xa700
   11d68:	d4 02 18 00 	l.sw 0x0(r2),r3
   11d6c:	18 40 07 01 	l.movhi r2,0x701
   11d70:	a8 42 02 44 	l.ori r2,r2,0x244
   11d74:	84 62 00 00 	l.lwz r3,0x0(r2)
   11d78:	e0 63 20 04 	l.or r3,r3,r4
   11d7c:	a8 84 00 01 	l.ori r4,r4,0x1
   11d80:	d4 02 18 00 	l.sw 0x0(r2),r3
   11d84:	84 62 00 00 	l.lwz r3,0x0(r2)
   11d88:	e0 63 20 04 	l.or r3,r3,r4
   11d8c:	d4 02 18 00 	l.sw 0x0(r2),r3
   11d90:	d4 02 18 00 	l.sw 0x0(r2),r3
   11d94:	07 ff cd a4 	l.jal 5424 <time_mdelay>
   11d98:	9c 60 00 02 	l.addi r3,r0,0x2
   11d9c:	84 62 00 00 	l.lwz r3,0x0(r2)
   11da0:	18 80 a7 00 	l.movhi r4,0xa700
   11da4:	e0 63 20 04 	l.or r3,r3,r4
   11da8:	d4 02 18 00 	l.sw 0x0(r2),r3
   11dac:	84 62 00 00 	l.lwz r3,0x0(r2)
   11db0:	e0 63 20 04 	l.or r3,r3,r4
   11db4:	18 80 ff f8 	l.movhi r4,0xfff8
   11db8:	a8 84 ff ff 	l.ori r4,r4,0xffff
   11dbc:	e0 63 20 03 	l.and r3,r3,r4
   11dc0:	18 80 00 01 	l.movhi r4,0x1
   11dc4:	a8 84 35 84 	l.ori r4,r4,0x3584
   11dc8:	84 84 00 00 	l.lwz r4,0x0(r4)
   11dcc:	b8 84 00 10 	l.slli r4,r4,0x10
   11dd0:	e0 63 20 04 	l.or r3,r3,r4
   11dd4:	d4 02 18 00 	l.sw 0x0(r2),r3
   11dd8:	9c 60 00 02 	l.addi r3,r0,0x2
   11ddc:	07 ff cd 92 	l.jal 5424 <time_mdelay>
   11de0:	18 40 00 01 	l.movhi r2,0x1
   11de4:	9c 80 00 00 	l.addi r4,r0,0x0
   11de8:	18 60 00 01 	l.movhi r3,0x1
   11dec:	a8 a4 00 00 	l.ori r5,r4,0x0
   11df0:	a8 63 35 7c 	l.ori r3,r3,0x357c
   11df4:	07 ff e1 b2 	l.jal a4bc <notifier_notify>
   11df8:	a8 42 35 80 	l.ori r2,r2,0x3580
   11dfc:	9c 60 00 00 	l.addi r3,r0,0x0
   11e00:	d4 02 18 00 	l.sw 0x0(r2),r3
   11e04:	9c 21 00 08 	l.addi r1,r1,0x8
   11e08:	a9 63 00 00 	l.ori r11,r3,0x0
   11e0c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11e10:	44 00 48 00 	l.jr r9
   11e14:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00011e18 <is_hosc_lock>:
   11e18:	18 60 00 01 	l.movhi r3,0x1
   11e1c:	a8 63 35 80 	l.ori r3,r3,0x3580
   11e20:	44 00 48 00 	l.jr r9
   11e24:	85 63 00 00 	l.lwz r11,0x0(r3)

00011e28 <ccu_set_mclk_reset>:
   11e28:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11e2c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   11e30:	bc 03 00 21 	l.sfeqi r3,0x21
   11e34:	10 00 00 77 	l.bf 12010 <ccu_set_mclk_reset+0x1e8>
   11e38:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
   11e3c:	bc 43 00 21 	l.sfgtui r3,0x21
   11e40:	10 00 00 14 	l.bf 11e90 <ccu_set_mclk_reset+0x68>
   11e44:	bc 03 00 2c 	l.sfeqi r3,0x2c
   11e48:	bc 03 00 19 	l.sfeqi r3,0x19
   11e4c:	10 00 00 64 	l.bf 11fdc <ccu_set_mclk_reset+0x1b4>
   11e50:	bc 43 00 19 	l.sfgtui r3,0x19
   11e54:	10 00 00 09 	l.bf 11e78 <ccu_set_mclk_reset+0x50>
   11e58:	bc 03 00 1a 	l.sfeqi r3,0x1a
   11e5c:	bc 03 00 10 	l.sfeqi r3,0x10
   11e60:	10 00 00 90 	l.bf 120a0 <ccu_set_mclk_reset+0x278>
   11e64:	bc 03 00 11 	l.sfeqi r3,0x11
   11e68:	0c 00 00 9b 	l.bnf 120d4 <ccu_set_mclk_reset+0x2ac>
   11e6c:	15 00 00 00 	l.nop 0x0
   11e70:	00 00 00 8f 	l.j 120ac <ccu_set_mclk_reset+0x284>
   11e74:	18 60 03 00 	l.movhi r3,0x300
   11e78:	10 00 00 26 	l.bf 11f10 <ccu_set_mclk_reset+0xe8>
   11e7c:	bc 03 00 1f 	l.sfeqi r3,0x1f
   11e80:	0c 00 00 95 	l.bnf 120d4 <ccu_set_mclk_reset+0x2ac>
   11e84:	15 00 00 00 	l.nop 0x0
   11e88:	00 00 00 2f 	l.j 11f44 <ccu_set_mclk_reset+0x11c>
   11e8c:	18 60 00 01 	l.movhi r3,0x1
   11e90:	10 00 00 79 	l.bf 12074 <ccu_set_mclk_reset+0x24c>
   11e94:	bc 43 00 2c 	l.sfgtui r3,0x2c
   11e98:	10 00 00 09 	l.bf 11ebc <ccu_set_mclk_reset+0x94>
   11e9c:	bc 03 00 37 	l.sfeqi r3,0x37
   11ea0:	bc 03 00 22 	l.sfeqi r3,0x22
   11ea4:	10 00 00 0e 	l.bf 11edc <ccu_set_mclk_reset+0xb4>
   11ea8:	bc 03 00 26 	l.sfeqi r3,0x26
   11eac:	0c 00 00 8a 	l.bnf 120d4 <ccu_set_mclk_reset+0x2ac>
   11eb0:	15 00 00 00 	l.nop 0x0
   11eb4:	00 00 00 64 	l.j 12044 <ccu_set_mclk_reset+0x21c>
   11eb8:	18 60 00 01 	l.movhi r3,0x1
   11ebc:	10 00 00 2e 	l.bf 11f74 <ccu_set_mclk_reset+0x14c>
   11ec0:	bc 03 00 38 	l.sfeqi r3,0x38
   11ec4:	10 00 00 39 	l.bf 11fa8 <ccu_set_mclk_reset+0x180>
   11ec8:	bc 03 00 33 	l.sfeqi r3,0x33
   11ecc:	0c 00 00 82 	l.bnf 120d4 <ccu_set_mclk_reset+0x2ac>
   11ed0:	15 00 00 00 	l.nop 0x0
   11ed4:	00 00 00 43 	l.j 11fe0 <ccu_set_mclk_reset+0x1b8>
   11ed8:	18 60 00 01 	l.movhi r3,0x1
   11edc:	18 60 00 01 	l.movhi r3,0x1
   11ee0:	18 40 ff fe 	l.movhi r2,0xfffe
   11ee4:	a8 63 37 68 	l.ori r3,r3,0x3768
   11ee8:	a4 84 00 01 	l.andi r4,r4,0x1
   11eec:	84 63 00 00 	l.lwz r3,0x0(r3)
   11ef0:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11ef4:	84 a3 01 9c 	l.lwz r5,0x19c(r3)
   11ef8:	b8 84 00 10 	l.slli r4,r4,0x10
   11efc:	e0 a5 10 03 	l.and r5,r5,r2
   11f00:	e0 85 20 04 	l.or r4,r5,r4
   11f04:	d4 03 21 9c 	l.sw 0x19c(r3),r4
   11f08:	00 00 00 79 	l.j 120ec <ccu_set_mclk_reset+0x2c4>
   11f0c:	9d 60 00 00 	l.addi r11,r0,0x0
   11f10:	18 60 00 01 	l.movhi r3,0x1
   11f14:	18 40 ff fe 	l.movhi r2,0xfffe
   11f18:	a8 63 37 68 	l.ori r3,r3,0x3768
   11f1c:	a4 84 00 01 	l.andi r4,r4,0x1
   11f20:	84 63 00 00 	l.lwz r3,0x0(r3)
   11f24:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11f28:	84 a3 01 8c 	l.lwz r5,0x18c(r3)
   11f2c:	b8 84 00 10 	l.slli r4,r4,0x10
   11f30:	e0 a5 10 03 	l.and r5,r5,r2
   11f34:	e0 85 20 04 	l.or r4,r5,r4
   11f38:	d4 03 21 8c 	l.sw 0x18c(r3),r4
   11f3c:	00 00 00 6c 	l.j 120ec <ccu_set_mclk_reset+0x2c4>
   11f40:	9d 60 00 00 	l.addi r11,r0,0x0
   11f44:	18 40 ff fe 	l.movhi r2,0xfffe
   11f48:	a8 63 37 68 	l.ori r3,r3,0x3768
   11f4c:	a4 84 00 01 	l.andi r4,r4,0x1
   11f50:	84 63 00 00 	l.lwz r3,0x0(r3)
   11f54:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11f58:	84 a3 01 1c 	l.lwz r5,0x11c(r3)
   11f5c:	b8 84 00 10 	l.slli r4,r4,0x10
   11f60:	e0 a5 10 03 	l.and r5,r5,r2
   11f64:	e0 85 20 04 	l.or r4,r5,r4
   11f68:	d4 03 21 1c 	l.sw 0x11c(r3),r4
   11f6c:	00 00 00 60 	l.j 120ec <ccu_set_mclk_reset+0x2c4>
   11f70:	9d 60 00 00 	l.addi r11,r0,0x0
   11f74:	18 60 00 01 	l.movhi r3,0x1
   11f78:	18 40 ff fe 	l.movhi r2,0xfffe
   11f7c:	a8 63 37 68 	l.ori r3,r3,0x3768
   11f80:	a4 84 00 01 	l.andi r4,r4,0x1
   11f84:	84 63 00 00 	l.lwz r3,0x0(r3)
   11f88:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11f8c:	84 a3 01 2c 	l.lwz r5,0x12c(r3)
   11f90:	b8 84 00 10 	l.slli r4,r4,0x10
   11f94:	e0 a5 10 03 	l.and r5,r5,r2
   11f98:	e0 85 20 04 	l.or r4,r5,r4
   11f9c:	d4 03 21 2c 	l.sw 0x12c(r3),r4
   11fa0:	00 00 00 53 	l.j 120ec <ccu_set_mclk_reset+0x2c4>
   11fa4:	9d 60 00 00 	l.addi r11,r0,0x0
   11fa8:	18 60 00 01 	l.movhi r3,0x1
   11fac:	18 40 ff fe 	l.movhi r2,0xfffe
   11fb0:	a8 63 37 68 	l.ori r3,r3,0x3768
   11fb4:	a4 84 00 01 	l.andi r4,r4,0x1
   11fb8:	84 63 00 00 	l.lwz r3,0x0(r3)
   11fbc:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11fc0:	84 a3 01 3c 	l.lwz r5,0x13c(r3)
   11fc4:	b8 84 00 10 	l.slli r4,r4,0x10
   11fc8:	e0 a5 10 03 	l.and r5,r5,r2
   11fcc:	e0 85 20 04 	l.or r4,r5,r4
   11fd0:	d4 03 21 3c 	l.sw 0x13c(r3),r4
   11fd4:	00 00 00 46 	l.j 120ec <ccu_set_mclk_reset+0x2c4>
   11fd8:	9d 60 00 00 	l.addi r11,r0,0x0
   11fdc:	18 60 00 01 	l.movhi r3,0x1
   11fe0:	18 40 ff fe 	l.movhi r2,0xfffe
   11fe4:	a8 63 37 68 	l.ori r3,r3,0x3768
   11fe8:	a4 84 00 01 	l.andi r4,r4,0x1
   11fec:	84 63 00 00 	l.lwz r3,0x0(r3)
   11ff0:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11ff4:	84 a3 01 ec 	l.lwz r5,0x1ec(r3)
   11ff8:	b8 84 00 10 	l.slli r4,r4,0x10
   11ffc:	e0 a5 10 03 	l.and r5,r5,r2
   12000:	e0 85 20 04 	l.or r4,r5,r4
   12004:	d4 03 21 ec 	l.sw 0x1ec(r3),r4
   12008:	00 00 00 39 	l.j 120ec <ccu_set_mclk_reset+0x2c4>
   1200c:	9d 60 00 00 	l.addi r11,r0,0x0
   12010:	18 60 00 01 	l.movhi r3,0x1
   12014:	18 40 ff fe 	l.movhi r2,0xfffe
   12018:	a8 63 37 68 	l.ori r3,r3,0x3768
   1201c:	a4 84 00 01 	l.andi r4,r4,0x1
   12020:	84 63 00 00 	l.lwz r3,0x0(r3)
   12024:	a8 42 ff ff 	l.ori r2,r2,0xffff
   12028:	84 a3 01 bc 	l.lwz r5,0x1bc(r3)
   1202c:	b8 84 00 10 	l.slli r4,r4,0x10
   12030:	e0 a5 10 03 	l.and r5,r5,r2
   12034:	e0 85 20 04 	l.or r4,r5,r4
   12038:	d4 03 21 bc 	l.sw 0x1bc(r3),r4
   1203c:	00 00 00 2c 	l.j 120ec <ccu_set_mclk_reset+0x2c4>
   12040:	9d 60 00 00 	l.addi r11,r0,0x0
   12044:	18 40 ff fe 	l.movhi r2,0xfffe
   12048:	a8 63 37 68 	l.ori r3,r3,0x3768
   1204c:	a4 84 00 01 	l.andi r4,r4,0x1
   12050:	84 63 00 00 	l.lwz r3,0x0(r3)
   12054:	a8 42 ff ff 	l.ori r2,r2,0xffff
   12058:	84 a3 01 cc 	l.lwz r5,0x1cc(r3)
   1205c:	b8 84 00 10 	l.slli r4,r4,0x10
   12060:	e0 a5 10 03 	l.and r5,r5,r2
   12064:	e0 85 20 04 	l.or r4,r5,r4
   12068:	d4 03 21 cc 	l.sw 0x1cc(r3),r4
   1206c:	00 00 00 20 	l.j 120ec <ccu_set_mclk_reset+0x2c4>
   12070:	9d 60 00 00 	l.addi r11,r0,0x0
   12074:	18 60 00 01 	l.movhi r3,0x1
   12078:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   1207c:	a8 63 37 68 	l.ori r3,r3,0x3768
   12080:	a4 84 00 01 	l.andi r4,r4,0x1
   12084:	84 63 00 00 	l.lwz r3,0x0(r3)
   12088:	84 a3 02 60 	l.lwz r5,0x260(r3)
   1208c:	e0 a5 10 03 	l.and r5,r5,r2
   12090:	e0 85 20 04 	l.or r4,r5,r4
   12094:	d4 03 22 60 	l.sw 0x260(r3),r4
   12098:	00 00 00 15 	l.j 120ec <ccu_set_mclk_reset+0x2c4>
   1209c:	9d 60 00 00 	l.addi r11,r0,0x0
   120a0:	18 60 03 00 	l.movhi r3,0x300
   120a4:	00 00 00 03 	l.j 120b0 <ccu_set_mclk_reset+0x288>
   120a8:	a8 63 17 2c 	l.ori r3,r3,0x172c
   120ac:	a8 63 17 1c 	l.ori r3,r3,0x171c
   120b0:	18 40 ff fe 	l.movhi r2,0xfffe
   120b4:	84 a3 00 00 	l.lwz r5,0x0(r3)
   120b8:	a8 42 ff ff 	l.ori r2,r2,0xffff
   120bc:	b8 84 00 10 	l.slli r4,r4,0x10
   120c0:	e0 a5 10 03 	l.and r5,r5,r2
   120c4:	e0 84 28 04 	l.or r4,r4,r5
   120c8:	d4 03 20 00 	l.sw 0x0(r3),r4
   120cc:	00 00 00 08 	l.j 120ec <ccu_set_mclk_reset+0x2c4>
   120d0:	9d 60 00 00 	l.addi r11,r0,0x0
   120d4:	18 80 00 01 	l.movhi r4,0x1
   120d8:	d4 01 18 00 	l.sw 0x0(r1),r3
   120dc:	a8 84 2e 25 	l.ori r4,r4,0x2e25
   120e0:	07 ff e1 be 	l.jal a7d8 <debugger_printf>
   120e4:	9c 60 00 04 	l.addi r3,r0,0x4
   120e8:	9d 60 ff ea 	l.addi r11,r0,0xffffffea
   120ec:	9c 21 00 0c 	l.addi r1,r1,0xc
   120f0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   120f4:	44 00 48 00 	l.jr r9
   120f8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000120fc <ccu_reset_module>:
   120fc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   12100:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   12104:	9c 80 00 00 	l.addi r4,r0,0x0
   12108:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
   1210c:	07 ff ff 47 	l.jal 11e28 <ccu_set_mclk_reset>
   12110:	a8 43 00 00 	l.ori r2,r3,0x0
   12114:	a8 62 00 00 	l.ori r3,r2,0x0
   12118:	07 ff ff 44 	l.jal 11e28 <ccu_set_mclk_reset>
   1211c:	9c 80 00 01 	l.addi r4,r0,0x1
   12120:	9c 21 00 08 	l.addi r1,r1,0x8
   12124:	9d 60 00 00 	l.addi r11,r0,0x0
   12128:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   1212c:	44 00 48 00 	l.jr r9
   12130:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00012134 <ccu_get_sclk_freq>:
   12134:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   12138:	bc 03 00 11 	l.sfeqi r3,0x11
   1213c:	10 00 00 07 	l.bf 12158 <ccu_get_sclk_freq+0x24>
   12140:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
   12144:	bc 03 00 24 	l.sfeqi r3,0x24
   12148:	0c 00 00 20 	l.bnf 121c8 <ccu_get_sclk_freq+0x94>
   1214c:	18 80 00 01 	l.movhi r4,0x1
   12150:	00 00 00 08 	l.j 12170 <ccu_get_sclk_freq+0x3c>
   12154:	18 60 00 01 	l.movhi r3,0x1
   12158:	18 60 00 01 	l.movhi r3,0x1
   1215c:	a8 63 37 68 	l.ori r3,r3,0x3768
   12160:	84 63 00 00 	l.lwz r3,0x0(r3)
   12164:	84 63 00 00 	l.lwz r3,0x0(r3)
   12168:	00 00 00 06 	l.j 12180 <ccu_get_sclk_freq+0x4c>
   1216c:	b8 63 00 58 	l.srli r3,r3,0x18
   12170:	a8 63 37 68 	l.ori r3,r3,0x3768
   12174:	84 63 00 00 	l.lwz r3,0x0(r3)
   12178:	84 63 00 10 	l.lwz r3,0x10(r3)
   1217c:	b8 63 00 58 	l.srli r3,r3,0x18
   12180:	a4 63 00 03 	l.andi r3,r3,0x3
   12184:	bc 03 00 02 	l.sfeqi r3,0x2
   12188:	10 00 00 0c 	l.bf 121b8 <ccu_get_sclk_freq+0x84>
   1218c:	bc 03 00 03 	l.sfeqi r3,0x3
   12190:	10 00 00 13 	l.bf 121dc <ccu_get_sclk_freq+0xa8>
   12194:	bc 03 00 01 	l.sfeqi r3,0x1
   12198:	10 00 00 05 	l.bf 121ac <ccu_get_sclk_freq+0x78>
   1219c:	15 00 00 00 	l.nop 0x0
   121a0:	19 60 01 6e 	l.movhi r11,0x16e
   121a4:	00 00 00 10 	l.j 121e4 <ccu_get_sclk_freq+0xb0>
   121a8:	a9 6b 36 00 	l.ori r11,r11,0x3600
   121ac:	18 60 00 01 	l.movhi r3,0x1
   121b0:	00 00 00 04 	l.j 121c0 <ccu_get_sclk_freq+0x8c>
   121b4:	a8 63 33 b4 	l.ori r3,r3,0x33b4
   121b8:	18 60 00 01 	l.movhi r3,0x1
   121bc:	a8 63 33 b0 	l.ori r3,r3,0x33b0
   121c0:	00 00 00 09 	l.j 121e4 <ccu_get_sclk_freq+0xb0>
   121c4:	85 63 00 00 	l.lwz r11,0x0(r3)
   121c8:	9c 60 00 04 	l.addi r3,r0,0x4
   121cc:	07 ff e1 83 	l.jal a7d8 <debugger_printf>
   121d0:	a8 84 2e 55 	l.ori r4,r4,0x2e55
   121d4:	00 00 00 04 	l.j 121e4 <ccu_get_sclk_freq+0xb0>
   121d8:	9d 60 00 00 	l.addi r11,r0,0x0
   121dc:	19 60 0b eb 	l.movhi r11,0xbeb
   121e0:	a9 6b c2 00 	l.ori r11,r11,0xc200
   121e4:	9c 21 00 04 	l.addi r1,r1,0x4
   121e8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   121ec:	44 00 48 00 	l.jr r9
   121f0:	15 00 00 00 	l.nop 0x0

000121f4 <ccu_set_sclk_onoff>:
   121f4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   121f8:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   121fc:	bc 03 00 14 	l.sfeqi r3,0x14
   12200:	10 00 00 10 	l.bf 12240 <ccu_set_sclk_onoff+0x4c>
   12204:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
   12208:	bc 43 00 14 	l.sfgtui r3,0x14
   1220c:	10 00 00 07 	l.bf 12228 <ccu_set_sclk_onoff+0x34>
   12210:	bc 03 00 16 	l.sfeqi r3,0x16
   12214:	bc 03 00 12 	l.sfeqi r3,0x12
   12218:	0c 00 00 19 	l.bnf 1227c <ccu_set_sclk_onoff+0x88>
   1221c:	18 60 00 01 	l.movhi r3,0x1
   12220:	00 00 00 0a 	l.j 12248 <ccu_set_sclk_onoff+0x54>
   12224:	a8 63 37 64 	l.ori r3,r3,0x3764
   12228:	10 00 00 12 	l.bf 12270 <ccu_set_sclk_onoff+0x7c>
   1222c:	bc 03 00 17 	l.sfeqi r3,0x17
   12230:	0c 00 00 13 	l.bnf 1227c <ccu_set_sclk_onoff+0x88>
   12234:	18 60 00 01 	l.movhi r3,0x1
   12238:	00 00 00 04 	l.j 12248 <ccu_set_sclk_onoff+0x54>
   1223c:	a8 63 37 54 	l.ori r3,r3,0x3754
   12240:	18 60 00 01 	l.movhi r3,0x1
   12244:	a8 63 37 58 	l.ori r3,r3,0x3758
   12248:	84 63 00 00 	l.lwz r3,0x0(r3)
   1224c:	18 40 7f ff 	l.movhi r2,0x7fff
   12250:	84 a3 00 00 	l.lwz r5,0x0(r3)
   12254:	a8 42 ff ff 	l.ori r2,r2,0xffff
   12258:	b8 84 00 1f 	l.slli r4,r4,0x1f
   1225c:	e0 a5 10 03 	l.and r5,r5,r2
   12260:	e0 85 20 04 	l.or r4,r5,r4
   12264:	d4 03 20 00 	l.sw 0x0(r3),r4
   12268:	00 00 00 0a 	l.j 12290 <ccu_set_sclk_onoff+0x9c>
   1226c:	9c 21 00 08 	l.addi r1,r1,0x8
   12270:	18 60 00 01 	l.movhi r3,0x1
   12274:	03 ff ff f5 	l.j 12248 <ccu_set_sclk_onoff+0x54>
   12278:	a8 63 37 60 	l.ori r3,r3,0x3760
   1227c:	18 80 00 01 	l.movhi r4,0x1
   12280:	9c 60 00 04 	l.addi r3,r0,0x4
   12284:	07 ff e1 55 	l.jal a7d8 <debugger_printf>
   12288:	a8 84 2e 55 	l.ori r4,r4,0x2e55
   1228c:	9c 21 00 08 	l.addi r1,r1,0x8
   12290:	9d 60 00 00 	l.addi r11,r0,0x0
   12294:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   12298:	44 00 48 00 	l.jr r9
   1229c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)
